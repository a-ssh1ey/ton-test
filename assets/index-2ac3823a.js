(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node2 of mutation.addedNodes) {
        if (node2.tagName === "LINK" && node2.rel === "modulepreload")
          processPreload(node2);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity)
      fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy)
      fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous")
      fetchOpts.credentials = "omit";
    else
      fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
function getAugmentedNamespace(n2) {
  if (n2.__esModule)
    return n2;
  var f2 = n2.default;
  if (typeof f2 == "function") {
    var a2 = function a3() {
      if (this instanceof a3) {
        return Reflect.construct(f2, arguments, this.constructor);
      }
      return f2.apply(this, arguments);
    };
    a2.prototype = f2.prototype;
  } else
    a2 = {};
  Object.defineProperty(a2, "__esModule", { value: true });
  Object.keys(n2).forEach(function(k2) {
    var d2 = Object.getOwnPropertyDescriptor(n2, k2);
    Object.defineProperty(a2, k2, d2.get ? d2 : {
      enumerable: true,
      get: function() {
        return n2[k2];
      }
    });
  });
  return a2;
}
var jsxRuntime$1 = { exports: {} };
var reactJsxRuntime_production_min$1 = {};
var react = { exports: {} };
var react_production_min = {};
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var l$3 = Symbol.for("react.element"), n$3 = Symbol.for("react.portal"), p$4 = Symbol.for("react.fragment"), q$3 = Symbol.for("react.strict_mode"), r$2 = Symbol.for("react.profiler"), t$4 = Symbol.for("react.provider"), u$1 = Symbol.for("react.context"), v$3 = Symbol.for("react.forward_ref"), w$2 = Symbol.for("react.suspense"), x$2 = Symbol.for("react.memo"), y$2 = Symbol.for("react.lazy"), z$3 = Symbol.iterator;
function A$2(a2) {
  if (null === a2 || "object" !== typeof a2)
    return null;
  a2 = z$3 && a2[z$3] || a2["@@iterator"];
  return "function" === typeof a2 ? a2 : null;
}
var B$2 = { isMounted: function() {
  return false;
}, enqueueForceUpdate: function() {
}, enqueueReplaceState: function() {
}, enqueueSetState: function() {
} }, C$2 = Object.assign, D$2 = {};
function E$2(a2, b2, e2) {
  this.props = a2;
  this.context = b2;
  this.refs = D$2;
  this.updater = e2 || B$2;
}
E$2.prototype.isReactComponent = {};
E$2.prototype.setState = function(a2, b2) {
  if ("object" !== typeof a2 && "function" !== typeof a2 && null != a2)
    throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
  this.updater.enqueueSetState(this, a2, b2, "setState");
};
E$2.prototype.forceUpdate = function(a2) {
  this.updater.enqueueForceUpdate(this, a2, "forceUpdate");
};
function F$1() {
}
F$1.prototype = E$2.prototype;
function G$2(a2, b2, e2) {
  this.props = a2;
  this.context = b2;
  this.refs = D$2;
  this.updater = e2 || B$2;
}
var H$2 = G$2.prototype = new F$1();
H$2.constructor = G$2;
C$2(H$2, E$2.prototype);
H$2.isPureReactComponent = true;
var I$2 = Array.isArray, J$1 = Object.prototype.hasOwnProperty, K$2 = { current: null }, L$2 = { key: true, ref: true, __self: true, __source: true };
function M$2(a2, b2, e2) {
  var d2, c2 = {}, k2 = null, h2 = null;
  if (null != b2)
    for (d2 in void 0 !== b2.ref && (h2 = b2.ref), void 0 !== b2.key && (k2 = "" + b2.key), b2)
      J$1.call(b2, d2) && !L$2.hasOwnProperty(d2) && (c2[d2] = b2[d2]);
  var g2 = arguments.length - 2;
  if (1 === g2)
    c2.children = e2;
  else if (1 < g2) {
    for (var f2 = Array(g2), m2 = 0; m2 < g2; m2++)
      f2[m2] = arguments[m2 + 2];
    c2.children = f2;
  }
  if (a2 && a2.defaultProps)
    for (d2 in g2 = a2.defaultProps, g2)
      void 0 === c2[d2] && (c2[d2] = g2[d2]);
  return { $$typeof: l$3, type: a2, key: k2, ref: h2, props: c2, _owner: K$2.current };
}
function N$2(a2, b2) {
  return { $$typeof: l$3, type: a2.type, key: b2, ref: a2.ref, props: a2.props, _owner: a2._owner };
}
function O$1(a2) {
  return "object" === typeof a2 && null !== a2 && a2.$$typeof === l$3;
}
function escape$1(a2) {
  var b2 = { "=": "=0", ":": "=2" };
  return "$" + a2.replace(/[=:]/g, function(a3) {
    return b2[a3];
  });
}
var P$2 = /\/+/g;
function Q$2(a2, b2) {
  return "object" === typeof a2 && null !== a2 && null != a2.key ? escape$1("" + a2.key) : b2.toString(36);
}
function R$1(a2, b2, e2, d2, c2) {
  var k2 = typeof a2;
  if ("undefined" === k2 || "boolean" === k2)
    a2 = null;
  var h2 = false;
  if (null === a2)
    h2 = true;
  else
    switch (k2) {
      case "string":
      case "number":
        h2 = true;
        break;
      case "object":
        switch (a2.$$typeof) {
          case l$3:
          case n$3:
            h2 = true;
        }
    }
  if (h2)
    return h2 = a2, c2 = c2(h2), a2 = "" === d2 ? "." + Q$2(h2, 0) : d2, I$2(c2) ? (e2 = "", null != a2 && (e2 = a2.replace(P$2, "$&/") + "/"), R$1(c2, b2, e2, "", function(a3) {
      return a3;
    })) : null != c2 && (O$1(c2) && (c2 = N$2(c2, e2 + (!c2.key || h2 && h2.key === c2.key ? "" : ("" + c2.key).replace(P$2, "$&/") + "/") + a2)), b2.push(c2)), 1;
  h2 = 0;
  d2 = "" === d2 ? "." : d2 + ":";
  if (I$2(a2))
    for (var g2 = 0; g2 < a2.length; g2++) {
      k2 = a2[g2];
      var f2 = d2 + Q$2(k2, g2);
      h2 += R$1(k2, b2, e2, f2, c2);
    }
  else if (f2 = A$2(a2), "function" === typeof f2)
    for (a2 = f2.call(a2), g2 = 0; !(k2 = a2.next()).done; )
      k2 = k2.value, f2 = d2 + Q$2(k2, g2++), h2 += R$1(k2, b2, e2, f2, c2);
  else if ("object" === k2)
    throw b2 = String(a2), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b2 ? "object with keys {" + Object.keys(a2).join(", ") + "}" : b2) + "). If you meant to render a collection of children, use an array instead.");
  return h2;
}
function S$2(a2, b2, e2) {
  if (null == a2)
    return a2;
  var d2 = [], c2 = 0;
  R$1(a2, d2, "", "", function(a3) {
    return b2.call(e2, a3, c2++);
  });
  return d2;
}
function T$2(a2) {
  if (-1 === a2._status) {
    var b2 = a2._result;
    b2 = b2();
    b2.then(function(b3) {
      if (0 === a2._status || -1 === a2._status)
        a2._status = 1, a2._result = b3;
    }, function(b3) {
      if (0 === a2._status || -1 === a2._status)
        a2._status = 2, a2._result = b3;
    });
    -1 === a2._status && (a2._status = 0, a2._result = b2);
  }
  if (1 === a2._status)
    return a2._result.default;
  throw a2._result;
}
var U$2 = { current: null }, V$2 = { transition: null }, W$2 = { ReactCurrentDispatcher: U$2, ReactCurrentBatchConfig: V$2, ReactCurrentOwner: K$2 };
function X$2() {
  throw Error("act(...) is not supported in production builds of React.");
}
react_production_min.Children = { map: S$2, forEach: function(a2, b2, e2) {
  S$2(a2, function() {
    b2.apply(this, arguments);
  }, e2);
}, count: function(a2) {
  var b2 = 0;
  S$2(a2, function() {
    b2++;
  });
  return b2;
}, toArray: function(a2) {
  return S$2(a2, function(a3) {
    return a3;
  }) || [];
}, only: function(a2) {
  if (!O$1(a2))
    throw Error("React.Children.only expected to receive a single React element child.");
  return a2;
} };
react_production_min.Component = E$2;
react_production_min.Fragment = p$4;
react_production_min.Profiler = r$2;
react_production_min.PureComponent = G$2;
react_production_min.StrictMode = q$3;
react_production_min.Suspense = w$2;
react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W$2;
react_production_min.act = X$2;
react_production_min.cloneElement = function(a2, b2, e2) {
  if (null === a2 || void 0 === a2)
    throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a2 + ".");
  var d2 = C$2({}, a2.props), c2 = a2.key, k2 = a2.ref, h2 = a2._owner;
  if (null != b2) {
    void 0 !== b2.ref && (k2 = b2.ref, h2 = K$2.current);
    void 0 !== b2.key && (c2 = "" + b2.key);
    if (a2.type && a2.type.defaultProps)
      var g2 = a2.type.defaultProps;
    for (f2 in b2)
      J$1.call(b2, f2) && !L$2.hasOwnProperty(f2) && (d2[f2] = void 0 === b2[f2] && void 0 !== g2 ? g2[f2] : b2[f2]);
  }
  var f2 = arguments.length - 2;
  if (1 === f2)
    d2.children = e2;
  else if (1 < f2) {
    g2 = Array(f2);
    for (var m2 = 0; m2 < f2; m2++)
      g2[m2] = arguments[m2 + 2];
    d2.children = g2;
  }
  return { $$typeof: l$3, type: a2.type, key: c2, ref: k2, props: d2, _owner: h2 };
};
react_production_min.createContext = function(a2) {
  a2 = { $$typeof: u$1, _currentValue: a2, _currentValue2: a2, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
  a2.Provider = { $$typeof: t$4, _context: a2 };
  return a2.Consumer = a2;
};
react_production_min.createElement = M$2;
react_production_min.createFactory = function(a2) {
  var b2 = M$2.bind(null, a2);
  b2.type = a2;
  return b2;
};
react_production_min.createRef = function() {
  return { current: null };
};
react_production_min.forwardRef = function(a2) {
  return { $$typeof: v$3, render: a2 };
};
react_production_min.isValidElement = O$1;
react_production_min.lazy = function(a2) {
  return { $$typeof: y$2, _payload: { _status: -1, _result: a2 }, _init: T$2 };
};
react_production_min.memo = function(a2, b2) {
  return { $$typeof: x$2, type: a2, compare: void 0 === b2 ? null : b2 };
};
react_production_min.startTransition = function(a2) {
  var b2 = V$2.transition;
  V$2.transition = {};
  try {
    a2();
  } finally {
    V$2.transition = b2;
  }
};
react_production_min.unstable_act = X$2;
react_production_min.useCallback = function(a2, b2) {
  return U$2.current.useCallback(a2, b2);
};
react_production_min.useContext = function(a2) {
  return U$2.current.useContext(a2);
};
react_production_min.useDebugValue = function() {
};
react_production_min.useDeferredValue = function(a2) {
  return U$2.current.useDeferredValue(a2);
};
react_production_min.useEffect = function(a2, b2) {
  return U$2.current.useEffect(a2, b2);
};
react_production_min.useId = function() {
  return U$2.current.useId();
};
react_production_min.useImperativeHandle = function(a2, b2, e2) {
  return U$2.current.useImperativeHandle(a2, b2, e2);
};
react_production_min.useInsertionEffect = function(a2, b2) {
  return U$2.current.useInsertionEffect(a2, b2);
};
react_production_min.useLayoutEffect = function(a2, b2) {
  return U$2.current.useLayoutEffect(a2, b2);
};
react_production_min.useMemo = function(a2, b2) {
  return U$2.current.useMemo(a2, b2);
};
react_production_min.useReducer = function(a2, b2, e2) {
  return U$2.current.useReducer(a2, b2, e2);
};
react_production_min.useRef = function(a2) {
  return U$2.current.useRef(a2);
};
react_production_min.useState = function(a2) {
  return U$2.current.useState(a2);
};
react_production_min.useSyncExternalStore = function(a2, b2, e2) {
  return U$2.current.useSyncExternalStore(a2, b2, e2);
};
react_production_min.useTransition = function() {
  return U$2.current.useTransition();
};
react_production_min.version = "18.3.1";
{
  react.exports = react_production_min;
}
var reactExports = react.exports;
const r$1 = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f$1 = reactExports, k$2 = Symbol.for("react.element"), l$2 = Symbol.for("react.fragment"), m$3 = Object.prototype.hasOwnProperty, n$2 = f$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p$3 = { key: true, ref: true, __self: true, __source: true };
function q$2(c2, a2, g2) {
  var b2, d2 = {}, e2 = null, h2 = null;
  void 0 !== g2 && (e2 = "" + g2);
  void 0 !== a2.key && (e2 = "" + a2.key);
  void 0 !== a2.ref && (h2 = a2.ref);
  for (b2 in a2)
    m$3.call(a2, b2) && !p$3.hasOwnProperty(b2) && (d2[b2] = a2[b2]);
  if (c2 && c2.defaultProps)
    for (b2 in a2 = c2.defaultProps, a2)
      void 0 === d2[b2] && (d2[b2] = a2[b2]);
  return { $$typeof: k$2, type: c2, key: e2, ref: h2, props: d2, _owner: n$2.current };
}
reactJsxRuntime_production_min$1.Fragment = l$2;
reactJsxRuntime_production_min$1.jsx = q$2;
reactJsxRuntime_production_min$1.jsxs = q$2;
{
  jsxRuntime$1.exports = reactJsxRuntime_production_min$1;
}
var jsxRuntimeExports = jsxRuntime$1.exports;
const jsx$1 = jsxRuntimeExports.jsx;
const jsxs = jsxRuntimeExports.jsxs;
class Subscribable {
  constructor() {
    this.listeners = /* @__PURE__ */ new Set();
    this.subscribe = this.subscribe.bind(this);
  }
  subscribe(listener) {
    const identity2 = {
      listener
    };
    this.listeners.add(identity2);
    this.onSubscribe();
    return () => {
      this.listeners.delete(identity2);
      this.onUnsubscribe();
    };
  }
  hasListeners() {
    return this.listeners.size > 0;
  }
  onSubscribe() {
  }
  onUnsubscribe() {
  }
}
const isServer = typeof window === "undefined" || "Deno" in window;
function noop$1() {
  return void 0;
}
function functionalUpdate(updater, input) {
  return typeof updater === "function" ? updater(input) : updater;
}
function isValidTimeout(value) {
  return typeof value === "number" && value >= 0 && value !== Infinity;
}
function timeUntilStale(updatedAt, staleTime) {
  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);
}
function parseQueryArgs(arg1, arg2, arg3) {
  if (!isQueryKey(arg1)) {
    return arg1;
  }
  if (typeof arg2 === "function") {
    return {
      ...arg3,
      queryKey: arg1,
      queryFn: arg2
    };
  }
  return {
    ...arg2,
    queryKey: arg1
  };
}
function parseFilterArgs(arg1, arg2, arg3) {
  return isQueryKey(arg1) ? [{
    ...arg2,
    queryKey: arg1
  }, arg3] : [arg1 || {}, arg2];
}
function matchQuery(filters, query) {
  const {
    type: type2 = "all",
    exact: exact2,
    fetchStatus,
    predicate,
    queryKey,
    stale
  } = filters;
  if (isQueryKey(queryKey)) {
    if (exact2) {
      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {
        return false;
      }
    } else if (!partialMatchKey(query.queryKey, queryKey)) {
      return false;
    }
  }
  if (type2 !== "all") {
    const isActive = query.isActive();
    if (type2 === "active" && !isActive) {
      return false;
    }
    if (type2 === "inactive" && isActive) {
      return false;
    }
  }
  if (typeof stale === "boolean" && query.isStale() !== stale) {
    return false;
  }
  if (typeof fetchStatus !== "undefined" && fetchStatus !== query.state.fetchStatus) {
    return false;
  }
  if (predicate && !predicate(query)) {
    return false;
  }
  return true;
}
function matchMutation(filters, mutation) {
  const {
    exact: exact2,
    fetching,
    predicate,
    mutationKey
  } = filters;
  if (isQueryKey(mutationKey)) {
    if (!mutation.options.mutationKey) {
      return false;
    }
    if (exact2) {
      if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {
        return false;
      }
    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {
      return false;
    }
  }
  if (typeof fetching === "boolean" && mutation.state.status === "loading" !== fetching) {
    return false;
  }
  if (predicate && !predicate(mutation)) {
    return false;
  }
  return true;
}
function hashQueryKeyByOptions(queryKey, options) {
  const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;
  return hashFn(queryKey);
}
function hashQueryKey(queryKey) {
  return JSON.stringify(queryKey, (_2, val) => isPlainObject$2(val) ? Object.keys(val).sort().reduce((result, key2) => {
    result[key2] = val[key2];
    return result;
  }, {}) : val);
}
function partialMatchKey(a2, b2) {
  return partialDeepEqual(a2, b2);
}
function partialDeepEqual(a2, b2) {
  if (a2 === b2) {
    return true;
  }
  if (typeof a2 !== typeof b2) {
    return false;
  }
  if (a2 && b2 && typeof a2 === "object" && typeof b2 === "object") {
    return !Object.keys(b2).some((key2) => !partialDeepEqual(a2[key2], b2[key2]));
  }
  return false;
}
function replaceEqualDeep(a2, b2) {
  if (a2 === b2) {
    return a2;
  }
  const array2 = isPlainArray(a2) && isPlainArray(b2);
  if (array2 || isPlainObject$2(a2) && isPlainObject$2(b2)) {
    const aSize = array2 ? a2.length : Object.keys(a2).length;
    const bItems = array2 ? b2 : Object.keys(b2);
    const bSize = bItems.length;
    const copy2 = array2 ? [] : {};
    let equalItems = 0;
    for (let i2 = 0; i2 < bSize; i2++) {
      const key2 = array2 ? i2 : bItems[i2];
      copy2[key2] = replaceEqualDeep(a2[key2], b2[key2]);
      if (copy2[key2] === a2[key2]) {
        equalItems++;
      }
    }
    return aSize === bSize && equalItems === aSize ? a2 : copy2;
  }
  return b2;
}
function isPlainArray(value) {
  return Array.isArray(value) && value.length === Object.keys(value).length;
}
function isPlainObject$2(o2) {
  if (!hasObjectPrototype(o2)) {
    return false;
  }
  const ctor = o2.constructor;
  if (typeof ctor === "undefined") {
    return true;
  }
  const prot = ctor.prototype;
  if (!hasObjectPrototype(prot)) {
    return false;
  }
  if (!prot.hasOwnProperty("isPrototypeOf")) {
    return false;
  }
  return true;
}
function hasObjectPrototype(o2) {
  return Object.prototype.toString.call(o2) === "[object Object]";
}
function isQueryKey(value) {
  return Array.isArray(value);
}
function sleep(timeout2) {
  return new Promise((resolve) => {
    setTimeout(resolve, timeout2);
  });
}
function scheduleMicrotask(callback) {
  sleep(0).then(callback);
}
function getAbortController() {
  if (typeof AbortController === "function") {
    return new AbortController();
  }
  return;
}
function replaceData(prevData, data2, options) {
  if (options.isDataEqual != null && options.isDataEqual(prevData, data2)) {
    return prevData;
  } else if (typeof options.structuralSharing === "function") {
    return options.structuralSharing(prevData, data2);
  } else if (options.structuralSharing !== false) {
    return replaceEqualDeep(prevData, data2);
  }
  return data2;
}
class FocusManager extends Subscribable {
  constructor() {
    super();
    this.setup = (onFocus) => {
      if (!isServer && window.addEventListener) {
        const listener = () => onFocus();
        window.addEventListener("visibilitychange", listener, false);
        window.addEventListener("focus", listener, false);
        return () => {
          window.removeEventListener("visibilitychange", listener);
          window.removeEventListener("focus", listener);
        };
      }
      return;
    };
  }
  onSubscribe() {
    if (!this.cleanup) {
      this.setEventListener(this.setup);
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      var _this$cleanup;
      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
      this.cleanup = void 0;
    }
  }
  setEventListener(setup) {
    var _this$cleanup2;
    this.setup = setup;
    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
    this.cleanup = setup((focused) => {
      if (typeof focused === "boolean") {
        this.setFocused(focused);
      } else {
        this.onFocus();
      }
    });
  }
  setFocused(focused) {
    const changed = this.focused !== focused;
    if (changed) {
      this.focused = focused;
      this.onFocus();
    }
  }
  onFocus() {
    this.listeners.forEach(({
      listener
    }) => {
      listener();
    });
  }
  isFocused() {
    if (typeof this.focused === "boolean") {
      return this.focused;
    }
    if (typeof document === "undefined") {
      return true;
    }
    return [void 0, "visible", "prerender"].includes(document.visibilityState);
  }
}
const focusManager = new FocusManager();
const onlineEvents = ["online", "offline"];
class OnlineManager extends Subscribable {
  constructor() {
    super();
    this.setup = (onOnline) => {
      if (!isServer && window.addEventListener) {
        const listener = () => onOnline();
        onlineEvents.forEach((event) => {
          window.addEventListener(event, listener, false);
        });
        return () => {
          onlineEvents.forEach((event) => {
            window.removeEventListener(event, listener);
          });
        };
      }
      return;
    };
  }
  onSubscribe() {
    if (!this.cleanup) {
      this.setEventListener(this.setup);
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      var _this$cleanup;
      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
      this.cleanup = void 0;
    }
  }
  setEventListener(setup) {
    var _this$cleanup2;
    this.setup = setup;
    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
    this.cleanup = setup((online) => {
      if (typeof online === "boolean") {
        this.setOnline(online);
      } else {
        this.onOnline();
      }
    });
  }
  setOnline(online) {
    const changed = this.online !== online;
    if (changed) {
      this.online = online;
      this.onOnline();
    }
  }
  onOnline() {
    this.listeners.forEach(({
      listener
    }) => {
      listener();
    });
  }
  isOnline() {
    if (typeof this.online === "boolean") {
      return this.online;
    }
    if (typeof navigator === "undefined" || typeof navigator.onLine === "undefined") {
      return true;
    }
    return navigator.onLine;
  }
}
const onlineManager = new OnlineManager();
function defaultRetryDelay(failureCount) {
  return Math.min(1e3 * 2 ** failureCount, 3e4);
}
function canFetch(networkMode) {
  return (networkMode != null ? networkMode : "online") === "online" ? onlineManager.isOnline() : true;
}
class CancelledError {
  constructor(options) {
    this.revert = options == null ? void 0 : options.revert;
    this.silent = options == null ? void 0 : options.silent;
  }
}
function isCancelledError(value) {
  return value instanceof CancelledError;
}
function createRetryer(config) {
  let isRetryCancelled = false;
  let failureCount = 0;
  let isResolved = false;
  let continueFn;
  let promiseResolve;
  let promiseReject;
  const promise = new Promise((outerResolve, outerReject) => {
    promiseResolve = outerResolve;
    promiseReject = outerReject;
  });
  const cancel = (cancelOptions) => {
    if (!isResolved) {
      reject(new CancelledError(cancelOptions));
      config.abort == null ? void 0 : config.abort();
    }
  };
  const cancelRetry = () => {
    isRetryCancelled = true;
  };
  const continueRetry = () => {
    isRetryCancelled = false;
  };
  const shouldPause = () => !focusManager.isFocused() || config.networkMode !== "always" && !onlineManager.isOnline();
  const resolve = (value) => {
    if (!isResolved) {
      isResolved = true;
      config.onSuccess == null ? void 0 : config.onSuccess(value);
      continueFn == null ? void 0 : continueFn();
      promiseResolve(value);
    }
  };
  const reject = (value) => {
    if (!isResolved) {
      isResolved = true;
      config.onError == null ? void 0 : config.onError(value);
      continueFn == null ? void 0 : continueFn();
      promiseReject(value);
    }
  };
  const pause = () => {
    return new Promise((continueResolve) => {
      continueFn = (value) => {
        const canContinue = isResolved || !shouldPause();
        if (canContinue) {
          continueResolve(value);
        }
        return canContinue;
      };
      config.onPause == null ? void 0 : config.onPause();
    }).then(() => {
      continueFn = void 0;
      if (!isResolved) {
        config.onContinue == null ? void 0 : config.onContinue();
      }
    });
  };
  const run = () => {
    if (isResolved) {
      return;
    }
    let promiseOrValue;
    try {
      promiseOrValue = config.fn();
    } catch (error) {
      promiseOrValue = Promise.reject(error);
    }
    Promise.resolve(promiseOrValue).then(resolve).catch((error) => {
      var _config$retry, _config$retryDelay;
      if (isResolved) {
        return;
      }
      const retry = (_config$retry = config.retry) != null ? _config$retry : 3;
      const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;
      const delay2 = typeof retryDelay === "function" ? retryDelay(failureCount, error) : retryDelay;
      const shouldRetry = retry === true || typeof retry === "number" && failureCount < retry || typeof retry === "function" && retry(failureCount, error);
      if (isRetryCancelled || !shouldRetry) {
        reject(error);
        return;
      }
      failureCount++;
      config.onFail == null ? void 0 : config.onFail(failureCount, error);
      sleep(delay2).then(() => {
        if (shouldPause()) {
          return pause();
        }
        return;
      }).then(() => {
        if (isRetryCancelled) {
          reject(error);
        } else {
          run();
        }
      });
    });
  };
  if (canFetch(config.networkMode)) {
    run();
  } else {
    pause().then(run);
  }
  return {
    promise,
    cancel,
    continue: () => {
      const didContinue = continueFn == null ? void 0 : continueFn();
      return didContinue ? promise : Promise.resolve();
    },
    cancelRetry,
    continueRetry
  };
}
const defaultLogger = console;
function createNotifyManager() {
  let queue2 = [];
  let transactions = 0;
  let notifyFn = (callback) => {
    callback();
  };
  let batchNotifyFn = (callback) => {
    callback();
  };
  const batch2 = (callback) => {
    let result;
    transactions++;
    try {
      result = callback();
    } finally {
      transactions--;
      if (!transactions) {
        flush();
      }
    }
    return result;
  };
  const schedule = (callback) => {
    if (transactions) {
      queue2.push(callback);
    } else {
      scheduleMicrotask(() => {
        notifyFn(callback);
      });
    }
  };
  const batchCalls = (callback) => {
    return (...args) => {
      schedule(() => {
        callback(...args);
      });
    };
  };
  const flush = () => {
    const originalQueue = queue2;
    queue2 = [];
    if (originalQueue.length) {
      scheduleMicrotask(() => {
        batchNotifyFn(() => {
          originalQueue.forEach((callback) => {
            notifyFn(callback);
          });
        });
      });
    }
  };
  const setNotifyFunction = (fn) => {
    notifyFn = fn;
  };
  const setBatchNotifyFunction = (fn) => {
    batchNotifyFn = fn;
  };
  return {
    batch: batch2,
    batchCalls,
    schedule,
    setNotifyFunction,
    setBatchNotifyFunction
  };
}
const notifyManager = createNotifyManager();
class Removable {
  destroy() {
    this.clearGcTimeout();
  }
  scheduleGc() {
    this.clearGcTimeout();
    if (isValidTimeout(this.cacheTime)) {
      this.gcTimeout = setTimeout(() => {
        this.optionalRemove();
      }, this.cacheTime);
    }
  }
  updateCacheTime(newCacheTime) {
    this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : isServer ? Infinity : 5 * 60 * 1e3);
  }
  clearGcTimeout() {
    if (this.gcTimeout) {
      clearTimeout(this.gcTimeout);
      this.gcTimeout = void 0;
    }
  }
}
class Query extends Removable {
  constructor(config) {
    super();
    this.abortSignalConsumed = false;
    this.defaultOptions = config.defaultOptions;
    this.setOptions(config.options);
    this.observers = [];
    this.cache = config.cache;
    this.logger = config.logger || defaultLogger;
    this.queryKey = config.queryKey;
    this.queryHash = config.queryHash;
    this.initialState = config.state || getDefaultState$1(this.options);
    this.state = this.initialState;
    this.scheduleGc();
  }
  get meta() {
    return this.options.meta;
  }
  setOptions(options) {
    this.options = {
      ...this.defaultOptions,
      ...options
    };
    this.updateCacheTime(this.options.cacheTime);
  }
  optionalRemove() {
    if (!this.observers.length && this.state.fetchStatus === "idle") {
      this.cache.remove(this);
    }
  }
  setData(newData, options) {
    const data2 = replaceData(this.state.data, newData, this.options);
    this.dispatch({
      data: data2,
      type: "success",
      dataUpdatedAt: options == null ? void 0 : options.updatedAt,
      manual: options == null ? void 0 : options.manual
    });
    return data2;
  }
  setState(state2, setStateOptions) {
    this.dispatch({
      type: "setState",
      state: state2,
      setStateOptions
    });
  }
  cancel(options) {
    var _this$retryer;
    const promise = this.promise;
    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);
    return promise ? promise.then(noop$1).catch(noop$1) : Promise.resolve();
  }
  destroy() {
    super.destroy();
    this.cancel({
      silent: true
    });
  }
  reset() {
    this.destroy();
    this.setState(this.initialState);
  }
  isActive() {
    return this.observers.some((observer) => observer.options.enabled !== false);
  }
  isDisabled() {
    return this.getObserversCount() > 0 && !this.isActive();
  }
  isStale() {
    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some((observer) => observer.getCurrentResult().isStale);
  }
  isStaleByTime(staleTime = 0) {
    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);
  }
  onFocus() {
    var _this$retryer2;
    const observer = this.observers.find((x2) => x2.shouldFetchOnWindowFocus());
    if (observer) {
      observer.refetch({
        cancelRefetch: false
      });
    }
    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();
  }
  onOnline() {
    var _this$retryer3;
    const observer = this.observers.find((x2) => x2.shouldFetchOnReconnect());
    if (observer) {
      observer.refetch({
        cancelRefetch: false
      });
    }
    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();
  }
  addObserver(observer) {
    if (!this.observers.includes(observer)) {
      this.observers.push(observer);
      this.clearGcTimeout();
      this.cache.notify({
        type: "observerAdded",
        query: this,
        observer
      });
    }
  }
  removeObserver(observer) {
    if (this.observers.includes(observer)) {
      this.observers = this.observers.filter((x2) => x2 !== observer);
      if (!this.observers.length) {
        if (this.retryer) {
          if (this.abortSignalConsumed) {
            this.retryer.cancel({
              revert: true
            });
          } else {
            this.retryer.cancelRetry();
          }
        }
        this.scheduleGc();
      }
      this.cache.notify({
        type: "observerRemoved",
        query: this,
        observer
      });
    }
  }
  getObserversCount() {
    return this.observers.length;
  }
  invalidate() {
    if (!this.state.isInvalidated) {
      this.dispatch({
        type: "invalidate"
      });
    }
  }
  fetch(options, fetchOptions) {
    var _this$options$behavio, _context$fetchOptions;
    if (this.state.fetchStatus !== "idle") {
      if (this.state.dataUpdatedAt && fetchOptions != null && fetchOptions.cancelRefetch) {
        this.cancel({
          silent: true
        });
      } else if (this.promise) {
        var _this$retryer4;
        (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry();
        return this.promise;
      }
    }
    if (options) {
      this.setOptions(options);
    }
    if (!this.options.queryFn) {
      const observer = this.observers.find((x2) => x2.options.queryFn);
      if (observer) {
        this.setOptions(observer.options);
      }
    }
    const abortController = getAbortController();
    const queryFnContext = {
      queryKey: this.queryKey,
      pageParam: void 0,
      meta: this.meta
    };
    const addSignalProperty = (object2) => {
      Object.defineProperty(object2, "signal", {
        enumerable: true,
        get: () => {
          if (abortController) {
            this.abortSignalConsumed = true;
            return abortController.signal;
          }
          return void 0;
        }
      });
    };
    addSignalProperty(queryFnContext);
    const fetchFn = () => {
      if (!this.options.queryFn) {
        return Promise.reject("Missing queryFn for queryKey '" + this.options.queryHash + "'");
      }
      this.abortSignalConsumed = false;
      return this.options.queryFn(queryFnContext);
    };
    const context = {
      fetchOptions,
      options: this.options,
      queryKey: this.queryKey,
      state: this.state,
      fetchFn
    };
    addSignalProperty(context);
    (_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch(context);
    this.revertState = this.state;
    if (this.state.fetchStatus === "idle" || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {
      var _context$fetchOptions2;
      this.dispatch({
        type: "fetch",
        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta
      });
    }
    const onError = (error) => {
      if (!(isCancelledError(error) && error.silent)) {
        this.dispatch({
          type: "error",
          error
        });
      }
      if (!isCancelledError(error)) {
        var _this$cache$config$on, _this$cache$config, _this$cache$config$on2, _this$cache$config2;
        (_this$cache$config$on = (_this$cache$config = this.cache.config).onError) == null ? void 0 : _this$cache$config$on.call(_this$cache$config, error, this);
        (_this$cache$config$on2 = (_this$cache$config2 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on2.call(_this$cache$config2, this.state.data, error, this);
      }
      if (!this.isFetchingOptimistic) {
        this.scheduleGc();
      }
      this.isFetchingOptimistic = false;
    };
    this.retryer = createRetryer({
      fn: context.fetchFn,
      abort: abortController == null ? void 0 : abortController.abort.bind(abortController),
      onSuccess: (data2) => {
        var _this$cache$config$on3, _this$cache$config3, _this$cache$config$on4, _this$cache$config4;
        if (typeof data2 === "undefined") {
          onError(new Error(this.queryHash + " data is undefined"));
          return;
        }
        this.setData(data2);
        (_this$cache$config$on3 = (_this$cache$config3 = this.cache.config).onSuccess) == null ? void 0 : _this$cache$config$on3.call(_this$cache$config3, data2, this);
        (_this$cache$config$on4 = (_this$cache$config4 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on4.call(_this$cache$config4, data2, this.state.error, this);
        if (!this.isFetchingOptimistic) {
          this.scheduleGc();
        }
        this.isFetchingOptimistic = false;
      },
      onError,
      onFail: (failureCount, error) => {
        this.dispatch({
          type: "failed",
          failureCount,
          error
        });
      },
      onPause: () => {
        this.dispatch({
          type: "pause"
        });
      },
      onContinue: () => {
        this.dispatch({
          type: "continue"
        });
      },
      retry: context.options.retry,
      retryDelay: context.options.retryDelay,
      networkMode: context.options.networkMode
    });
    this.promise = this.retryer.promise;
    return this.promise;
  }
  dispatch(action2) {
    const reducer = (state2) => {
      var _action$meta, _action$dataUpdatedAt;
      switch (action2.type) {
        case "failed":
          return {
            ...state2,
            fetchFailureCount: action2.failureCount,
            fetchFailureReason: action2.error
          };
        case "pause":
          return {
            ...state2,
            fetchStatus: "paused"
          };
        case "continue":
          return {
            ...state2,
            fetchStatus: "fetching"
          };
        case "fetch":
          return {
            ...state2,
            fetchFailureCount: 0,
            fetchFailureReason: null,
            fetchMeta: (_action$meta = action2.meta) != null ? _action$meta : null,
            fetchStatus: canFetch(this.options.networkMode) ? "fetching" : "paused",
            ...!state2.dataUpdatedAt && {
              error: null,
              status: "loading"
            }
          };
        case "success":
          return {
            ...state2,
            data: action2.data,
            dataUpdateCount: state2.dataUpdateCount + 1,
            dataUpdatedAt: (_action$dataUpdatedAt = action2.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),
            error: null,
            isInvalidated: false,
            status: "success",
            ...!action2.manual && {
              fetchStatus: "idle",
              fetchFailureCount: 0,
              fetchFailureReason: null
            }
          };
        case "error":
          const error = action2.error;
          if (isCancelledError(error) && error.revert && this.revertState) {
            return {
              ...this.revertState,
              fetchStatus: "idle"
            };
          }
          return {
            ...state2,
            error,
            errorUpdateCount: state2.errorUpdateCount + 1,
            errorUpdatedAt: Date.now(),
            fetchFailureCount: state2.fetchFailureCount + 1,
            fetchFailureReason: error,
            fetchStatus: "idle",
            status: "error"
          };
        case "invalidate":
          return {
            ...state2,
            isInvalidated: true
          };
        case "setState":
          return {
            ...state2,
            ...action2.state
          };
      }
    };
    this.state = reducer(this.state);
    notifyManager.batch(() => {
      this.observers.forEach((observer) => {
        observer.onQueryUpdate(action2);
      });
      this.cache.notify({
        query: this,
        type: "updated",
        action: action2
      });
    });
  }
}
function getDefaultState$1(options) {
  const data2 = typeof options.initialData === "function" ? options.initialData() : options.initialData;
  const hasData = typeof data2 !== "undefined";
  const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === "function" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;
  return {
    data: data2,
    dataUpdateCount: 0,
    dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,
    error: null,
    errorUpdateCount: 0,
    errorUpdatedAt: 0,
    fetchFailureCount: 0,
    fetchFailureReason: null,
    fetchMeta: null,
    isInvalidated: false,
    status: hasData ? "success" : "loading",
    fetchStatus: "idle"
  };
}
class QueryCache extends Subscribable {
  constructor(config) {
    super();
    this.config = config || {};
    this.queries = [];
    this.queriesMap = {};
  }
  build(client2, options, state2) {
    var _options$queryHash;
    const queryKey = options.queryKey;
    const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);
    let query = this.get(queryHash);
    if (!query) {
      query = new Query({
        cache: this,
        logger: client2.getLogger(),
        queryKey,
        queryHash,
        options: client2.defaultQueryOptions(options),
        state: state2,
        defaultOptions: client2.getQueryDefaults(queryKey)
      });
      this.add(query);
    }
    return query;
  }
  add(query) {
    if (!this.queriesMap[query.queryHash]) {
      this.queriesMap[query.queryHash] = query;
      this.queries.push(query);
      this.notify({
        type: "added",
        query
      });
    }
  }
  remove(query) {
    const queryInMap = this.queriesMap[query.queryHash];
    if (queryInMap) {
      query.destroy();
      this.queries = this.queries.filter((x2) => x2 !== query);
      if (queryInMap === query) {
        delete this.queriesMap[query.queryHash];
      }
      this.notify({
        type: "removed",
        query
      });
    }
  }
  clear() {
    notifyManager.batch(() => {
      this.queries.forEach((query) => {
        this.remove(query);
      });
    });
  }
  get(queryHash) {
    return this.queriesMap[queryHash];
  }
  getAll() {
    return this.queries;
  }
  find(arg1, arg2) {
    const [filters] = parseFilterArgs(arg1, arg2);
    if (typeof filters.exact === "undefined") {
      filters.exact = true;
    }
    return this.queries.find((query) => matchQuery(filters, query));
  }
  findAll(arg1, arg2) {
    const [filters] = parseFilterArgs(arg1, arg2);
    return Object.keys(filters).length > 0 ? this.queries.filter((query) => matchQuery(filters, query)) : this.queries;
  }
  notify(event) {
    notifyManager.batch(() => {
      this.listeners.forEach(({
        listener
      }) => {
        listener(event);
      });
    });
  }
  onFocus() {
    notifyManager.batch(() => {
      this.queries.forEach((query) => {
        query.onFocus();
      });
    });
  }
  onOnline() {
    notifyManager.batch(() => {
      this.queries.forEach((query) => {
        query.onOnline();
      });
    });
  }
}
class Mutation extends Removable {
  constructor(config) {
    super();
    this.defaultOptions = config.defaultOptions;
    this.mutationId = config.mutationId;
    this.mutationCache = config.mutationCache;
    this.logger = config.logger || defaultLogger;
    this.observers = [];
    this.state = config.state || getDefaultState();
    this.setOptions(config.options);
    this.scheduleGc();
  }
  setOptions(options) {
    this.options = {
      ...this.defaultOptions,
      ...options
    };
    this.updateCacheTime(this.options.cacheTime);
  }
  get meta() {
    return this.options.meta;
  }
  setState(state2) {
    this.dispatch({
      type: "setState",
      state: state2
    });
  }
  addObserver(observer) {
    if (!this.observers.includes(observer)) {
      this.observers.push(observer);
      this.clearGcTimeout();
      this.mutationCache.notify({
        type: "observerAdded",
        mutation: this,
        observer
      });
    }
  }
  removeObserver(observer) {
    this.observers = this.observers.filter((x2) => x2 !== observer);
    this.scheduleGc();
    this.mutationCache.notify({
      type: "observerRemoved",
      mutation: this,
      observer
    });
  }
  optionalRemove() {
    if (!this.observers.length) {
      if (this.state.status === "loading") {
        this.scheduleGc();
      } else {
        this.mutationCache.remove(this);
      }
    }
  }
  continue() {
    var _this$retryer$continu, _this$retryer;
    return (_this$retryer$continu = (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.continue()) != null ? _this$retryer$continu : this.execute();
  }
  async execute() {
    const executeMutation = () => {
      var _this$options$retry;
      this.retryer = createRetryer({
        fn: () => {
          if (!this.options.mutationFn) {
            return Promise.reject("No mutationFn found");
          }
          return this.options.mutationFn(this.state.variables);
        },
        onFail: (failureCount, error) => {
          this.dispatch({
            type: "failed",
            failureCount,
            error
          });
        },
        onPause: () => {
          this.dispatch({
            type: "pause"
          });
        },
        onContinue: () => {
          this.dispatch({
            type: "continue"
          });
        },
        retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,
        retryDelay: this.options.retryDelay,
        networkMode: this.options.networkMode
      });
      return this.retryer.promise;
    };
    const restored = this.state.status === "loading";
    try {
      var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onSettl, _this$options3;
      if (!restored) {
        var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;
        this.dispatch({
          type: "loading",
          variables: this.options.variables
        });
        await ((_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this));
        const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));
        if (context !== this.state.context) {
          this.dispatch({
            type: "loading",
            context,
            variables: this.state.variables
          });
        }
      }
      const data2 = await executeMutation();
      await ((_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data2, this.state.variables, this.state.context, this));
      await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data2, this.state.variables, this.state.context));
      await ((_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, data2, null, this.state.variables, this.state.context, this));
      await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data2, null, this.state.variables, this.state.context));
      this.dispatch({
        type: "success",
        data: data2
      });
      return data2;
    } catch (error) {
      try {
        var _this$mutationCache$c7, _this$mutationCache$c8, _this$options$onError, _this$options4, _this$mutationCache$c9, _this$mutationCache$c10, _this$options$onSettl2, _this$options5;
        await ((_this$mutationCache$c7 = (_this$mutationCache$c8 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c7.call(_this$mutationCache$c8, error, this.state.variables, this.state.context, this));
        if (false)
          ;
        await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context));
        await ((_this$mutationCache$c9 = (_this$mutationCache$c10 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c9.call(_this$mutationCache$c10, void 0, error, this.state.variables, this.state.context, this));
        await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, void 0, error, this.state.variables, this.state.context));
        throw error;
      } finally {
        this.dispatch({
          type: "error",
          error
        });
      }
    }
  }
  dispatch(action2) {
    const reducer = (state2) => {
      switch (action2.type) {
        case "failed":
          return {
            ...state2,
            failureCount: action2.failureCount,
            failureReason: action2.error
          };
        case "pause":
          return {
            ...state2,
            isPaused: true
          };
        case "continue":
          return {
            ...state2,
            isPaused: false
          };
        case "loading":
          return {
            ...state2,
            context: action2.context,
            data: void 0,
            failureCount: 0,
            failureReason: null,
            error: null,
            isPaused: !canFetch(this.options.networkMode),
            status: "loading",
            variables: action2.variables
          };
        case "success":
          return {
            ...state2,
            data: action2.data,
            failureCount: 0,
            failureReason: null,
            error: null,
            status: "success",
            isPaused: false
          };
        case "error":
          return {
            ...state2,
            data: void 0,
            error: action2.error,
            failureCount: state2.failureCount + 1,
            failureReason: action2.error,
            isPaused: false,
            status: "error"
          };
        case "setState":
          return {
            ...state2,
            ...action2.state
          };
      }
    };
    this.state = reducer(this.state);
    notifyManager.batch(() => {
      this.observers.forEach((observer) => {
        observer.onMutationUpdate(action2);
      });
      this.mutationCache.notify({
        mutation: this,
        type: "updated",
        action: action2
      });
    });
  }
}
function getDefaultState() {
  return {
    context: void 0,
    data: void 0,
    error: null,
    failureCount: 0,
    failureReason: null,
    isPaused: false,
    status: "idle",
    variables: void 0
  };
}
class MutationCache extends Subscribable {
  constructor(config) {
    super();
    this.config = config || {};
    this.mutations = [];
    this.mutationId = 0;
  }
  build(client2, options, state2) {
    const mutation = new Mutation({
      mutationCache: this,
      logger: client2.getLogger(),
      mutationId: ++this.mutationId,
      options: client2.defaultMutationOptions(options),
      state: state2,
      defaultOptions: options.mutationKey ? client2.getMutationDefaults(options.mutationKey) : void 0
    });
    this.add(mutation);
    return mutation;
  }
  add(mutation) {
    this.mutations.push(mutation);
    this.notify({
      type: "added",
      mutation
    });
  }
  remove(mutation) {
    this.mutations = this.mutations.filter((x2) => x2 !== mutation);
    this.notify({
      type: "removed",
      mutation
    });
  }
  clear() {
    notifyManager.batch(() => {
      this.mutations.forEach((mutation) => {
        this.remove(mutation);
      });
    });
  }
  getAll() {
    return this.mutations;
  }
  find(filters) {
    if (typeof filters.exact === "undefined") {
      filters.exact = true;
    }
    return this.mutations.find((mutation) => matchMutation(filters, mutation));
  }
  findAll(filters) {
    return this.mutations.filter((mutation) => matchMutation(filters, mutation));
  }
  notify(event) {
    notifyManager.batch(() => {
      this.listeners.forEach(({
        listener
      }) => {
        listener(event);
      });
    });
  }
  resumePausedMutations() {
    var _this$resuming;
    this.resuming = ((_this$resuming = this.resuming) != null ? _this$resuming : Promise.resolve()).then(() => {
      const pausedMutations = this.mutations.filter((x2) => x2.state.isPaused);
      return notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(noop$1)), Promise.resolve()));
    }).then(() => {
      this.resuming = void 0;
    });
    return this.resuming;
  }
}
function infiniteQueryBehavior() {
  return {
    onFetch: (context) => {
      context.fetchFn = () => {
        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;
        const refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;
        const fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;
        const pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;
        const isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === "forward";
        const isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === "backward";
        const oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];
        const oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];
        let newPageParams = oldPageParams;
        let cancelled = false;
        const addSignalProperty = (object2) => {
          Object.defineProperty(object2, "signal", {
            enumerable: true,
            get: () => {
              var _context$signal;
              if ((_context$signal = context.signal) != null && _context$signal.aborted) {
                cancelled = true;
              } else {
                var _context$signal2;
                (_context$signal2 = context.signal) == null ? void 0 : _context$signal2.addEventListener("abort", () => {
                  cancelled = true;
                });
              }
              return context.signal;
            }
          });
        };
        const queryFn = context.options.queryFn || (() => Promise.reject("Missing queryFn for queryKey '" + context.options.queryHash + "'"));
        const buildNewPages = (pages, param, page, previous) => {
          newPageParams = previous ? [param, ...newPageParams] : [...newPageParams, param];
          return previous ? [page, ...pages] : [...pages, page];
        };
        const fetchPage = (pages, manual, param, previous) => {
          if (cancelled) {
            return Promise.reject("Cancelled");
          }
          if (typeof param === "undefined" && !manual && pages.length) {
            return Promise.resolve(pages);
          }
          const queryFnContext = {
            queryKey: context.queryKey,
            pageParam: param,
            meta: context.options.meta
          };
          addSignalProperty(queryFnContext);
          const queryFnResult = queryFn(queryFnContext);
          const promise2 = Promise.resolve(queryFnResult).then((page) => buildNewPages(pages, param, page, previous));
          return promise2;
        };
        let promise;
        if (!oldPages.length) {
          promise = fetchPage([]);
        } else if (isFetchingNextPage) {
          const manual = typeof pageParam !== "undefined";
          const param = manual ? pageParam : getNextPageParam(context.options, oldPages);
          promise = fetchPage(oldPages, manual, param);
        } else if (isFetchingPreviousPage) {
          const manual = typeof pageParam !== "undefined";
          const param = manual ? pageParam : getPreviousPageParam(context.options, oldPages);
          promise = fetchPage(oldPages, manual, param, true);
        } else {
          newPageParams = [];
          const manual = typeof context.options.getNextPageParam === "undefined";
          const shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true;
          promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]));
          for (let i2 = 1; i2 < oldPages.length; i2++) {
            promise = promise.then((pages) => {
              const shouldFetchNextPage = refetchPage && oldPages[i2] ? refetchPage(oldPages[i2], i2, oldPages) : true;
              if (shouldFetchNextPage) {
                const param = manual ? oldPageParams[i2] : getNextPageParam(context.options, pages);
                return fetchPage(pages, manual, param);
              }
              return Promise.resolve(buildNewPages(pages, oldPageParams[i2], oldPages[i2]));
            });
          }
        }
        const finalPromise = promise.then((pages) => ({
          pages,
          pageParams: newPageParams
        }));
        return finalPromise;
      };
    }
  };
}
function getNextPageParam(options, pages) {
  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);
}
function getPreviousPageParam(options, pages) {
  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);
}
class QueryClient {
  constructor(config = {}) {
    this.queryCache = config.queryCache || new QueryCache();
    this.mutationCache = config.mutationCache || new MutationCache();
    this.logger = config.logger || defaultLogger;
    this.defaultOptions = config.defaultOptions || {};
    this.queryDefaults = [];
    this.mutationDefaults = [];
    this.mountCount = 0;
  }
  mount() {
    this.mountCount++;
    if (this.mountCount !== 1)
      return;
    this.unsubscribeFocus = focusManager.subscribe(() => {
      if (focusManager.isFocused()) {
        this.resumePausedMutations();
        this.queryCache.onFocus();
      }
    });
    this.unsubscribeOnline = onlineManager.subscribe(() => {
      if (onlineManager.isOnline()) {
        this.resumePausedMutations();
        this.queryCache.onOnline();
      }
    });
  }
  unmount() {
    var _this$unsubscribeFocu, _this$unsubscribeOnli;
    this.mountCount--;
    if (this.mountCount !== 0)
      return;
    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);
    this.unsubscribeFocus = void 0;
    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);
    this.unsubscribeOnline = void 0;
  }
  isFetching(arg1, arg2) {
    const [filters] = parseFilterArgs(arg1, arg2);
    filters.fetchStatus = "fetching";
    return this.queryCache.findAll(filters).length;
  }
  isMutating(filters) {
    return this.mutationCache.findAll({
      ...filters,
      fetching: true
    }).length;
  }
  getQueryData(queryKey, filters) {
    var _this$queryCache$find;
    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;
  }
  ensureQueryData(arg1, arg2, arg3) {
    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
    const cachedData = this.getQueryData(parsedOptions.queryKey);
    return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(parsedOptions);
  }
  getQueriesData(queryKeyOrFilters) {
    return this.getQueryCache().findAll(queryKeyOrFilters).map(({
      queryKey,
      state: state2
    }) => {
      const data2 = state2.data;
      return [queryKey, data2];
    });
  }
  setQueryData(queryKey, updater, options) {
    const query = this.queryCache.find(queryKey);
    const prevData = query == null ? void 0 : query.state.data;
    const data2 = functionalUpdate(updater, prevData);
    if (typeof data2 === "undefined") {
      return void 0;
    }
    const parsedOptions = parseQueryArgs(queryKey);
    const defaultedOptions = this.defaultQueryOptions(parsedOptions);
    return this.queryCache.build(this, defaultedOptions).setData(data2, {
      ...options,
      manual: true
    });
  }
  setQueriesData(queryKeyOrFilters, updater, options) {
    return notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(({
      queryKey
    }) => [queryKey, this.setQueryData(queryKey, updater, options)]));
  }
  getQueryState(queryKey, filters) {
    var _this$queryCache$find2;
    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;
  }
  removeQueries(arg1, arg2) {
    const [filters] = parseFilterArgs(arg1, arg2);
    const queryCache = this.queryCache;
    notifyManager.batch(() => {
      queryCache.findAll(filters).forEach((query) => {
        queryCache.remove(query);
      });
    });
  }
  resetQueries(arg1, arg2, arg3) {
    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);
    const queryCache = this.queryCache;
    const refetchFilters = {
      type: "active",
      ...filters
    };
    return notifyManager.batch(() => {
      queryCache.findAll(filters).forEach((query) => {
        query.reset();
      });
      return this.refetchQueries(refetchFilters, options);
    });
  }
  cancelQueries(arg1, arg2, arg3) {
    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3);
    if (typeof cancelOptions.revert === "undefined") {
      cancelOptions.revert = true;
    }
    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).map((query) => query.cancel(cancelOptions)));
    return Promise.all(promises).then(noop$1).catch(noop$1);
  }
  invalidateQueries(arg1, arg2, arg3) {
    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);
    return notifyManager.batch(() => {
      var _ref, _filters$refetchType;
      this.queryCache.findAll(filters).forEach((query) => {
        query.invalidate();
      });
      if (filters.refetchType === "none") {
        return Promise.resolve();
      }
      const refetchFilters = {
        ...filters,
        type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : "active"
      };
      return this.refetchQueries(refetchFilters, options);
    });
  }
  refetchQueries(arg1, arg2, arg3) {
    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);
    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).filter((query) => !query.isDisabled()).map((query) => {
      var _options$cancelRefetc;
      return query.fetch(void 0, {
        ...options,
        cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,
        meta: {
          refetchPage: filters.refetchPage
        }
      });
    }));
    let promise = Promise.all(promises).then(noop$1);
    if (!(options != null && options.throwOnError)) {
      promise = promise.catch(noop$1);
    }
    return promise;
  }
  fetchQuery(arg1, arg2, arg3) {
    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
    const defaultedOptions = this.defaultQueryOptions(parsedOptions);
    if (typeof defaultedOptions.retry === "undefined") {
      defaultedOptions.retry = false;
    }
    const query = this.queryCache.build(this, defaultedOptions);
    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);
  }
  prefetchQuery(arg1, arg2, arg3) {
    return this.fetchQuery(arg1, arg2, arg3).then(noop$1).catch(noop$1);
  }
  fetchInfiniteQuery(arg1, arg2, arg3) {
    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
    parsedOptions.behavior = infiniteQueryBehavior();
    return this.fetchQuery(parsedOptions);
  }
  prefetchInfiniteQuery(arg1, arg2, arg3) {
    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop$1).catch(noop$1);
  }
  resumePausedMutations() {
    return this.mutationCache.resumePausedMutations();
  }
  getQueryCache() {
    return this.queryCache;
  }
  getMutationCache() {
    return this.mutationCache;
  }
  getLogger() {
    return this.logger;
  }
  getDefaultOptions() {
    return this.defaultOptions;
  }
  setDefaultOptions(options) {
    this.defaultOptions = options;
  }
  setQueryDefaults(queryKey, options) {
    const result = this.queryDefaults.find((x2) => hashQueryKey(queryKey) === hashQueryKey(x2.queryKey));
    if (result) {
      result.defaultOptions = options;
    } else {
      this.queryDefaults.push({
        queryKey,
        defaultOptions: options
      });
    }
  }
  getQueryDefaults(queryKey) {
    if (!queryKey) {
      return void 0;
    }
    const firstMatchingDefaults = this.queryDefaults.find((x2) => partialMatchKey(queryKey, x2.queryKey));
    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;
  }
  setMutationDefaults(mutationKey, options) {
    const result = this.mutationDefaults.find((x2) => hashQueryKey(mutationKey) === hashQueryKey(x2.mutationKey));
    if (result) {
      result.defaultOptions = options;
    } else {
      this.mutationDefaults.push({
        mutationKey,
        defaultOptions: options
      });
    }
  }
  getMutationDefaults(mutationKey) {
    if (!mutationKey) {
      return void 0;
    }
    const firstMatchingDefaults = this.mutationDefaults.find((x2) => partialMatchKey(mutationKey, x2.mutationKey));
    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;
  }
  defaultQueryOptions(options) {
    if (options != null && options._defaulted) {
      return options;
    }
    const defaultedOptions = {
      ...this.defaultOptions.queries,
      ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),
      ...options,
      _defaulted: true
    };
    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {
      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);
    }
    if (typeof defaultedOptions.refetchOnReconnect === "undefined") {
      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== "always";
    }
    if (typeof defaultedOptions.useErrorBoundary === "undefined") {
      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;
    }
    return defaultedOptions;
  }
  defaultMutationOptions(options) {
    if (options != null && options._defaulted) {
      return options;
    }
    return {
      ...this.defaultOptions.mutations,
      ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),
      ...options,
      _defaulted: true
    };
  }
  clear() {
    this.queryCache.clear();
    this.mutationCache.clear();
  }
}
var reactDom = { exports: {} };
var reactDom_production_min = {};
var scheduler = { exports: {} };
var scheduler_production_min = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(exports2) {
  function f2(a2, b2) {
    var c2 = a2.length;
    a2.push(b2);
    a:
      for (; 0 < c2; ) {
        var d2 = c2 - 1 >>> 1, e2 = a2[d2];
        if (0 < g2(e2, b2))
          a2[d2] = b2, a2[c2] = e2, c2 = d2;
        else
          break a;
      }
  }
  function h2(a2) {
    return 0 === a2.length ? null : a2[0];
  }
  function k2(a2) {
    if (0 === a2.length)
      return null;
    var b2 = a2[0], c2 = a2.pop();
    if (c2 !== b2) {
      a2[0] = c2;
      a:
        for (var d2 = 0, e2 = a2.length, w2 = e2 >>> 1; d2 < w2; ) {
          var m2 = 2 * (d2 + 1) - 1, C2 = a2[m2], n2 = m2 + 1, x2 = a2[n2];
          if (0 > g2(C2, c2))
            n2 < e2 && 0 > g2(x2, C2) ? (a2[d2] = x2, a2[n2] = c2, d2 = n2) : (a2[d2] = C2, a2[m2] = c2, d2 = m2);
          else if (n2 < e2 && 0 > g2(x2, c2))
            a2[d2] = x2, a2[n2] = c2, d2 = n2;
          else
            break a;
        }
    }
    return b2;
  }
  function g2(a2, b2) {
    var c2 = a2.sortIndex - b2.sortIndex;
    return 0 !== c2 ? c2 : a2.id - b2.id;
  }
  if ("object" === typeof performance && "function" === typeof performance.now) {
    var l2 = performance;
    exports2.unstable_now = function() {
      return l2.now();
    };
  } else {
    var p2 = Date, q2 = p2.now();
    exports2.unstable_now = function() {
      return p2.now() - q2;
    };
  }
  var r2 = [], t2 = [], u2 = 1, v2 = null, y2 = 3, z2 = false, A2 = false, B2 = false, D2 = "function" === typeof setTimeout ? setTimeout : null, E2 = "function" === typeof clearTimeout ? clearTimeout : null, F2 = "undefined" !== typeof setImmediate ? setImmediate : null;
  "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
  function G2(a2) {
    for (var b2 = h2(t2); null !== b2; ) {
      if (null === b2.callback)
        k2(t2);
      else if (b2.startTime <= a2)
        k2(t2), b2.sortIndex = b2.expirationTime, f2(r2, b2);
      else
        break;
      b2 = h2(t2);
    }
  }
  function H4(a2) {
    B2 = false;
    G2(a2);
    if (!A2)
      if (null !== h2(r2))
        A2 = true, I2(J2);
      else {
        var b2 = h2(t2);
        null !== b2 && K2(H4, b2.startTime - a2);
      }
  }
  function J2(a2, b2) {
    A2 = false;
    B2 && (B2 = false, E2(L2), L2 = -1);
    z2 = true;
    var c2 = y2;
    try {
      G2(b2);
      for (v2 = h2(r2); null !== v2 && (!(v2.expirationTime > b2) || a2 && !M2()); ) {
        var d2 = v2.callback;
        if ("function" === typeof d2) {
          v2.callback = null;
          y2 = v2.priorityLevel;
          var e2 = d2(v2.expirationTime <= b2);
          b2 = exports2.unstable_now();
          "function" === typeof e2 ? v2.callback = e2 : v2 === h2(r2) && k2(r2);
          G2(b2);
        } else
          k2(r2);
        v2 = h2(r2);
      }
      if (null !== v2)
        var w2 = true;
      else {
        var m2 = h2(t2);
        null !== m2 && K2(H4, m2.startTime - b2);
        w2 = false;
      }
      return w2;
    } finally {
      v2 = null, y2 = c2, z2 = false;
    }
  }
  var N2 = false, O2 = null, L2 = -1, P2 = 5, Q2 = -1;
  function M2() {
    return exports2.unstable_now() - Q2 < P2 ? false : true;
  }
  function R2() {
    if (null !== O2) {
      var a2 = exports2.unstable_now();
      Q2 = a2;
      var b2 = true;
      try {
        b2 = O2(true, a2);
      } finally {
        b2 ? S2() : (N2 = false, O2 = null);
      }
    } else
      N2 = false;
  }
  var S2;
  if ("function" === typeof F2)
    S2 = function() {
      F2(R2);
    };
  else if ("undefined" !== typeof MessageChannel) {
    var T2 = new MessageChannel(), U2 = T2.port2;
    T2.port1.onmessage = R2;
    S2 = function() {
      U2.postMessage(null);
    };
  } else
    S2 = function() {
      D2(R2, 0);
    };
  function I2(a2) {
    O2 = a2;
    N2 || (N2 = true, S2());
  }
  function K2(a2, b2) {
    L2 = D2(function() {
      a2(exports2.unstable_now());
    }, b2);
  }
  exports2.unstable_IdlePriority = 5;
  exports2.unstable_ImmediatePriority = 1;
  exports2.unstable_LowPriority = 4;
  exports2.unstable_NormalPriority = 3;
  exports2.unstable_Profiling = null;
  exports2.unstable_UserBlockingPriority = 2;
  exports2.unstable_cancelCallback = function(a2) {
    a2.callback = null;
  };
  exports2.unstable_continueExecution = function() {
    A2 || z2 || (A2 = true, I2(J2));
  };
  exports2.unstable_forceFrameRate = function(a2) {
    0 > a2 || 125 < a2 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P2 = 0 < a2 ? Math.floor(1e3 / a2) : 5;
  };
  exports2.unstable_getCurrentPriorityLevel = function() {
    return y2;
  };
  exports2.unstable_getFirstCallbackNode = function() {
    return h2(r2);
  };
  exports2.unstable_next = function(a2) {
    switch (y2) {
      case 1:
      case 2:
      case 3:
        var b2 = 3;
        break;
      default:
        b2 = y2;
    }
    var c2 = y2;
    y2 = b2;
    try {
      return a2();
    } finally {
      y2 = c2;
    }
  };
  exports2.unstable_pauseExecution = function() {
  };
  exports2.unstable_requestPaint = function() {
  };
  exports2.unstable_runWithPriority = function(a2, b2) {
    switch (a2) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        a2 = 3;
    }
    var c2 = y2;
    y2 = a2;
    try {
      return b2();
    } finally {
      y2 = c2;
    }
  };
  exports2.unstable_scheduleCallback = function(a2, b2, c2) {
    var d2 = exports2.unstable_now();
    "object" === typeof c2 && null !== c2 ? (c2 = c2.delay, c2 = "number" === typeof c2 && 0 < c2 ? d2 + c2 : d2) : c2 = d2;
    switch (a2) {
      case 1:
        var e2 = -1;
        break;
      case 2:
        e2 = 250;
        break;
      case 5:
        e2 = 1073741823;
        break;
      case 4:
        e2 = 1e4;
        break;
      default:
        e2 = 5e3;
    }
    e2 = c2 + e2;
    a2 = { id: u2++, callback: b2, priorityLevel: a2, startTime: c2, expirationTime: e2, sortIndex: -1 };
    c2 > d2 ? (a2.sortIndex = c2, f2(t2, a2), null === h2(r2) && a2 === h2(t2) && (B2 ? (E2(L2), L2 = -1) : B2 = true, K2(H4, c2 - d2))) : (a2.sortIndex = e2, f2(r2, a2), A2 || z2 || (A2 = true, I2(J2)));
    return a2;
  };
  exports2.unstable_shouldYield = M2;
  exports2.unstable_wrapCallback = function(a2) {
    var b2 = y2;
    return function() {
      var c2 = y2;
      y2 = b2;
      try {
        return a2.apply(this, arguments);
      } finally {
        y2 = c2;
      }
    };
  };
})(scheduler_production_min);
{
  scheduler.exports = scheduler_production_min;
}
var schedulerExports = scheduler.exports;
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var aa = reactExports, ca = schedulerExports;
function p$2(a2) {
  for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a2, c2 = 1; c2 < arguments.length; c2++)
    b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
  return "Minified React error #" + a2 + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var da = /* @__PURE__ */ new Set(), ea = {};
function fa(a2, b2) {
  ha(a2, b2);
  ha(a2 + "Capture", b2);
}
function ha(a2, b2) {
  ea[a2] = b2;
  for (a2 = 0; a2 < b2.length; a2++)
    da.add(b2[a2]);
}
var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ja = Object.prototype.hasOwnProperty, ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, la = {}, ma = {};
function oa(a2) {
  if (ja.call(ma, a2))
    return true;
  if (ja.call(la, a2))
    return false;
  if (ka.test(a2))
    return ma[a2] = true;
  la[a2] = true;
  return false;
}
function pa(a2, b2, c2, d2) {
  if (null !== c2 && 0 === c2.type)
    return false;
  switch (typeof b2) {
    case "function":
    case "symbol":
      return true;
    case "boolean":
      if (d2)
        return false;
      if (null !== c2)
        return !c2.acceptsBooleans;
      a2 = a2.toLowerCase().slice(0, 5);
      return "data-" !== a2 && "aria-" !== a2;
    default:
      return false;
  }
}
function qa(a2, b2, c2, d2) {
  if (null === b2 || "undefined" === typeof b2 || pa(a2, b2, c2, d2))
    return true;
  if (d2)
    return false;
  if (null !== c2)
    switch (c2.type) {
      case 3:
        return !b2;
      case 4:
        return false === b2;
      case 5:
        return isNaN(b2);
      case 6:
        return isNaN(b2) || 1 > b2;
    }
  return false;
}
function v$2(a2, b2, c2, d2, e2, f2, g2) {
  this.acceptsBooleans = 2 === b2 || 3 === b2 || 4 === b2;
  this.attributeName = d2;
  this.attributeNamespace = e2;
  this.mustUseProperty = c2;
  this.propertyName = a2;
  this.type = b2;
  this.sanitizeURL = f2;
  this.removeEmptyString = g2;
}
var z$2 = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a2) {
  z$2[a2] = new v$2(a2, 0, false, a2, null, false, false);
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a2) {
  var b2 = a2[0];
  z$2[b2] = new v$2(b2, 1, false, a2[1], null, false, false);
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a2) {
  z$2[a2] = new v$2(a2, 2, false, a2.toLowerCase(), null, false, false);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a2) {
  z$2[a2] = new v$2(a2, 2, false, a2, null, false, false);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a2) {
  z$2[a2] = new v$2(a2, 3, false, a2.toLowerCase(), null, false, false);
});
["checked", "multiple", "muted", "selected"].forEach(function(a2) {
  z$2[a2] = new v$2(a2, 3, true, a2, null, false, false);
});
["capture", "download"].forEach(function(a2) {
  z$2[a2] = new v$2(a2, 4, false, a2, null, false, false);
});
["cols", "rows", "size", "span"].forEach(function(a2) {
  z$2[a2] = new v$2(a2, 6, false, a2, null, false, false);
});
["rowSpan", "start"].forEach(function(a2) {
  z$2[a2] = new v$2(a2, 5, false, a2.toLowerCase(), null, false, false);
});
var ra = /[\-:]([a-z])/g;
function sa(a2) {
  return a2[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a2) {
  var b2 = a2.replace(
    ra,
    sa
  );
  z$2[b2] = new v$2(b2, 1, false, a2, null, false, false);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a2) {
  var b2 = a2.replace(ra, sa);
  z$2[b2] = new v$2(b2, 1, false, a2, "http://www.w3.org/1999/xlink", false, false);
});
["xml:base", "xml:lang", "xml:space"].forEach(function(a2) {
  var b2 = a2.replace(ra, sa);
  z$2[b2] = new v$2(b2, 1, false, a2, "http://www.w3.org/XML/1998/namespace", false, false);
});
["tabIndex", "crossOrigin"].forEach(function(a2) {
  z$2[a2] = new v$2(a2, 1, false, a2.toLowerCase(), null, false, false);
});
z$2.xlinkHref = new v$2("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
["src", "href", "action", "formAction"].forEach(function(a2) {
  z$2[a2] = new v$2(a2, 1, false, a2.toLowerCase(), null, true, true);
});
function ta(a2, b2, c2, d2) {
  var e2 = z$2.hasOwnProperty(b2) ? z$2[b2] : null;
  if (null !== e2 ? 0 !== e2.type : d2 || !(2 < b2.length) || "o" !== b2[0] && "O" !== b2[0] || "n" !== b2[1] && "N" !== b2[1])
    qa(b2, c2, e2, d2) && (c2 = null), d2 || null === e2 ? oa(b2) && (null === c2 ? a2.removeAttribute(b2) : a2.setAttribute(b2, "" + c2)) : e2.mustUseProperty ? a2[e2.propertyName] = null === c2 ? 3 === e2.type ? false : "" : c2 : (b2 = e2.attributeName, d2 = e2.attributeNamespace, null === c2 ? a2.removeAttribute(b2) : (e2 = e2.type, c2 = 3 === e2 || 4 === e2 && true === c2 ? "" : "" + c2, d2 ? a2.setAttributeNS(d2, b2, c2) : a2.setAttribute(b2, c2)));
}
var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, va = Symbol.for("react.element"), wa = Symbol.for("react.portal"), ya = Symbol.for("react.fragment"), za = Symbol.for("react.strict_mode"), Aa = Symbol.for("react.profiler"), Ba = Symbol.for("react.provider"), Ca = Symbol.for("react.context"), Da = Symbol.for("react.forward_ref"), Ea = Symbol.for("react.suspense"), Fa = Symbol.for("react.suspense_list"), Ga = Symbol.for("react.memo"), Ha = Symbol.for("react.lazy");
var Ia = Symbol.for("react.offscreen");
var Ja = Symbol.iterator;
function Ka(a2) {
  if (null === a2 || "object" !== typeof a2)
    return null;
  a2 = Ja && a2[Ja] || a2["@@iterator"];
  return "function" === typeof a2 ? a2 : null;
}
var A$1 = Object.assign, La;
function Ma(a2) {
  if (void 0 === La)
    try {
      throw Error();
    } catch (c2) {
      var b2 = c2.stack.trim().match(/\n( *(at )?)/);
      La = b2 && b2[1] || "";
    }
  return "\n" + La + a2;
}
var Na = false;
function Oa(a2, b2) {
  if (!a2 || Na)
    return "";
  Na = true;
  var c2 = Error.prepareStackTrace;
  Error.prepareStackTrace = void 0;
  try {
    if (b2)
      if (b2 = function() {
        throw Error();
      }, Object.defineProperty(b2.prototype, "props", { set: function() {
        throw Error();
      } }), "object" === typeof Reflect && Reflect.construct) {
        try {
          Reflect.construct(b2, []);
        } catch (l2) {
          var d2 = l2;
        }
        Reflect.construct(a2, [], b2);
      } else {
        try {
          b2.call();
        } catch (l2) {
          d2 = l2;
        }
        a2.call(b2.prototype);
      }
    else {
      try {
        throw Error();
      } catch (l2) {
        d2 = l2;
      }
      a2();
    }
  } catch (l2) {
    if (l2 && d2 && "string" === typeof l2.stack) {
      for (var e2 = l2.stack.split("\n"), f2 = d2.stack.split("\n"), g2 = e2.length - 1, h2 = f2.length - 1; 1 <= g2 && 0 <= h2 && e2[g2] !== f2[h2]; )
        h2--;
      for (; 1 <= g2 && 0 <= h2; g2--, h2--)
        if (e2[g2] !== f2[h2]) {
          if (1 !== g2 || 1 !== h2) {
            do
              if (g2--, h2--, 0 > h2 || e2[g2] !== f2[h2]) {
                var k2 = "\n" + e2[g2].replace(" at new ", " at ");
                a2.displayName && k2.includes("<anonymous>") && (k2 = k2.replace("<anonymous>", a2.displayName));
                return k2;
              }
            while (1 <= g2 && 0 <= h2);
          }
          break;
        }
    }
  } finally {
    Na = false, Error.prepareStackTrace = c2;
  }
  return (a2 = a2 ? a2.displayName || a2.name : "") ? Ma(a2) : "";
}
function Pa(a2) {
  switch (a2.tag) {
    case 5:
      return Ma(a2.type);
    case 16:
      return Ma("Lazy");
    case 13:
      return Ma("Suspense");
    case 19:
      return Ma("SuspenseList");
    case 0:
    case 2:
    case 15:
      return a2 = Oa(a2.type, false), a2;
    case 11:
      return a2 = Oa(a2.type.render, false), a2;
    case 1:
      return a2 = Oa(a2.type, true), a2;
    default:
      return "";
  }
}
function Qa(a2) {
  if (null == a2)
    return null;
  if ("function" === typeof a2)
    return a2.displayName || a2.name || null;
  if ("string" === typeof a2)
    return a2;
  switch (a2) {
    case ya:
      return "Fragment";
    case wa:
      return "Portal";
    case Aa:
      return "Profiler";
    case za:
      return "StrictMode";
    case Ea:
      return "Suspense";
    case Fa:
      return "SuspenseList";
  }
  if ("object" === typeof a2)
    switch (a2.$$typeof) {
      case Ca:
        return (a2.displayName || "Context") + ".Consumer";
      case Ba:
        return (a2._context.displayName || "Context") + ".Provider";
      case Da:
        var b2 = a2.render;
        a2 = a2.displayName;
        a2 || (a2 = b2.displayName || b2.name || "", a2 = "" !== a2 ? "ForwardRef(" + a2 + ")" : "ForwardRef");
        return a2;
      case Ga:
        return b2 = a2.displayName || null, null !== b2 ? b2 : Qa(a2.type) || "Memo";
      case Ha:
        b2 = a2._payload;
        a2 = a2._init;
        try {
          return Qa(a2(b2));
        } catch (c2) {
        }
    }
  return null;
}
function Ra(a2) {
  var b2 = a2.type;
  switch (a2.tag) {
    case 24:
      return "Cache";
    case 9:
      return (b2.displayName || "Context") + ".Consumer";
    case 10:
      return (b2._context.displayName || "Context") + ".Provider";
    case 18:
      return "DehydratedFragment";
    case 11:
      return a2 = b2.render, a2 = a2.displayName || a2.name || "", b2.displayName || ("" !== a2 ? "ForwardRef(" + a2 + ")" : "ForwardRef");
    case 7:
      return "Fragment";
    case 5:
      return b2;
    case 4:
      return "Portal";
    case 3:
      return "Root";
    case 6:
      return "Text";
    case 16:
      return Qa(b2);
    case 8:
      return b2 === za ? "StrictMode" : "Mode";
    case 22:
      return "Offscreen";
    case 12:
      return "Profiler";
    case 21:
      return "Scope";
    case 13:
      return "Suspense";
    case 19:
      return "SuspenseList";
    case 25:
      return "TracingMarker";
    case 1:
    case 0:
    case 17:
    case 2:
    case 14:
    case 15:
      if ("function" === typeof b2)
        return b2.displayName || b2.name || null;
      if ("string" === typeof b2)
        return b2;
  }
  return null;
}
function Sa(a2) {
  switch (typeof a2) {
    case "boolean":
    case "number":
    case "string":
    case "undefined":
      return a2;
    case "object":
      return a2;
    default:
      return "";
  }
}
function Ta(a2) {
  var b2 = a2.type;
  return (a2 = a2.nodeName) && "input" === a2.toLowerCase() && ("checkbox" === b2 || "radio" === b2);
}
function Ua(a2) {
  var b2 = Ta(a2) ? "checked" : "value", c2 = Object.getOwnPropertyDescriptor(a2.constructor.prototype, b2), d2 = "" + a2[b2];
  if (!a2.hasOwnProperty(b2) && "undefined" !== typeof c2 && "function" === typeof c2.get && "function" === typeof c2.set) {
    var e2 = c2.get, f2 = c2.set;
    Object.defineProperty(a2, b2, { configurable: true, get: function() {
      return e2.call(this);
    }, set: function(a3) {
      d2 = "" + a3;
      f2.call(this, a3);
    } });
    Object.defineProperty(a2, b2, { enumerable: c2.enumerable });
    return { getValue: function() {
      return d2;
    }, setValue: function(a3) {
      d2 = "" + a3;
    }, stopTracking: function() {
      a2._valueTracker = null;
      delete a2[b2];
    } };
  }
}
function Va(a2) {
  a2._valueTracker || (a2._valueTracker = Ua(a2));
}
function Wa(a2) {
  if (!a2)
    return false;
  var b2 = a2._valueTracker;
  if (!b2)
    return true;
  var c2 = b2.getValue();
  var d2 = "";
  a2 && (d2 = Ta(a2) ? a2.checked ? "true" : "false" : a2.value);
  a2 = d2;
  return a2 !== c2 ? (b2.setValue(a2), true) : false;
}
function Xa(a2) {
  a2 = a2 || ("undefined" !== typeof document ? document : void 0);
  if ("undefined" === typeof a2)
    return null;
  try {
    return a2.activeElement || a2.body;
  } catch (b2) {
    return a2.body;
  }
}
function Ya(a2, b2) {
  var c2 = b2.checked;
  return A$1({}, b2, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c2 ? c2 : a2._wrapperState.initialChecked });
}
function Za(a2, b2) {
  var c2 = null == b2.defaultValue ? "" : b2.defaultValue, d2 = null != b2.checked ? b2.checked : b2.defaultChecked;
  c2 = Sa(null != b2.value ? b2.value : c2);
  a2._wrapperState = { initialChecked: d2, initialValue: c2, controlled: "checkbox" === b2.type || "radio" === b2.type ? null != b2.checked : null != b2.value };
}
function ab(a2, b2) {
  b2 = b2.checked;
  null != b2 && ta(a2, "checked", b2, false);
}
function bb(a2, b2) {
  ab(a2, b2);
  var c2 = Sa(b2.value), d2 = b2.type;
  if (null != c2)
    if ("number" === d2) {
      if (0 === c2 && "" === a2.value || a2.value != c2)
        a2.value = "" + c2;
    } else
      a2.value !== "" + c2 && (a2.value = "" + c2);
  else if ("submit" === d2 || "reset" === d2) {
    a2.removeAttribute("value");
    return;
  }
  b2.hasOwnProperty("value") ? cb(a2, b2.type, c2) : b2.hasOwnProperty("defaultValue") && cb(a2, b2.type, Sa(b2.defaultValue));
  null == b2.checked && null != b2.defaultChecked && (a2.defaultChecked = !!b2.defaultChecked);
}
function db(a2, b2, c2) {
  if (b2.hasOwnProperty("value") || b2.hasOwnProperty("defaultValue")) {
    var d2 = b2.type;
    if (!("submit" !== d2 && "reset" !== d2 || void 0 !== b2.value && null !== b2.value))
      return;
    b2 = "" + a2._wrapperState.initialValue;
    c2 || b2 === a2.value || (a2.value = b2);
    a2.defaultValue = b2;
  }
  c2 = a2.name;
  "" !== c2 && (a2.name = "");
  a2.defaultChecked = !!a2._wrapperState.initialChecked;
  "" !== c2 && (a2.name = c2);
}
function cb(a2, b2, c2) {
  if ("number" !== b2 || Xa(a2.ownerDocument) !== a2)
    null == c2 ? a2.defaultValue = "" + a2._wrapperState.initialValue : a2.defaultValue !== "" + c2 && (a2.defaultValue = "" + c2);
}
var eb = Array.isArray;
function fb(a2, b2, c2, d2) {
  a2 = a2.options;
  if (b2) {
    b2 = {};
    for (var e2 = 0; e2 < c2.length; e2++)
      b2["$" + c2[e2]] = true;
    for (c2 = 0; c2 < a2.length; c2++)
      e2 = b2.hasOwnProperty("$" + a2[c2].value), a2[c2].selected !== e2 && (a2[c2].selected = e2), e2 && d2 && (a2[c2].defaultSelected = true);
  } else {
    c2 = "" + Sa(c2);
    b2 = null;
    for (e2 = 0; e2 < a2.length; e2++) {
      if (a2[e2].value === c2) {
        a2[e2].selected = true;
        d2 && (a2[e2].defaultSelected = true);
        return;
      }
      null !== b2 || a2[e2].disabled || (b2 = a2[e2]);
    }
    null !== b2 && (b2.selected = true);
  }
}
function gb(a2, b2) {
  if (null != b2.dangerouslySetInnerHTML)
    throw Error(p$2(91));
  return A$1({}, b2, { value: void 0, defaultValue: void 0, children: "" + a2._wrapperState.initialValue });
}
function hb(a2, b2) {
  var c2 = b2.value;
  if (null == c2) {
    c2 = b2.children;
    b2 = b2.defaultValue;
    if (null != c2) {
      if (null != b2)
        throw Error(p$2(92));
      if (eb(c2)) {
        if (1 < c2.length)
          throw Error(p$2(93));
        c2 = c2[0];
      }
      b2 = c2;
    }
    null == b2 && (b2 = "");
    c2 = b2;
  }
  a2._wrapperState = { initialValue: Sa(c2) };
}
function ib(a2, b2) {
  var c2 = Sa(b2.value), d2 = Sa(b2.defaultValue);
  null != c2 && (c2 = "" + c2, c2 !== a2.value && (a2.value = c2), null == b2.defaultValue && a2.defaultValue !== c2 && (a2.defaultValue = c2));
  null != d2 && (a2.defaultValue = "" + d2);
}
function jb(a2) {
  var b2 = a2.textContent;
  b2 === a2._wrapperState.initialValue && "" !== b2 && null !== b2 && (a2.value = b2);
}
function kb(a2) {
  switch (a2) {
    case "svg":
      return "http://www.w3.org/2000/svg";
    case "math":
      return "http://www.w3.org/1998/Math/MathML";
    default:
      return "http://www.w3.org/1999/xhtml";
  }
}
function lb(a2, b2) {
  return null == a2 || "http://www.w3.org/1999/xhtml" === a2 ? kb(b2) : "http://www.w3.org/2000/svg" === a2 && "foreignObject" === b2 ? "http://www.w3.org/1999/xhtml" : a2;
}
var mb, nb = function(a2) {
  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b2, c2, d2, e2) {
    MSApp.execUnsafeLocalFunction(function() {
      return a2(b2, c2, d2, e2);
    });
  } : a2;
}(function(a2, b2) {
  if ("http://www.w3.org/2000/svg" !== a2.namespaceURI || "innerHTML" in a2)
    a2.innerHTML = b2;
  else {
    mb = mb || document.createElement("div");
    mb.innerHTML = "<svg>" + b2.valueOf().toString() + "</svg>";
    for (b2 = mb.firstChild; a2.firstChild; )
      a2.removeChild(a2.firstChild);
    for (; b2.firstChild; )
      a2.appendChild(b2.firstChild);
  }
});
function ob(a2, b2) {
  if (b2) {
    var c2 = a2.firstChild;
    if (c2 && c2 === a2.lastChild && 3 === c2.nodeType) {
      c2.nodeValue = b2;
      return;
    }
  }
  a2.textContent = b2;
}
var pb = {
  animationIterationCount: true,
  aspectRatio: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
}, qb = ["Webkit", "ms", "Moz", "O"];
Object.keys(pb).forEach(function(a2) {
  qb.forEach(function(b2) {
    b2 = b2 + a2.charAt(0).toUpperCase() + a2.substring(1);
    pb[b2] = pb[a2];
  });
});
function rb(a2, b2, c2) {
  return null == b2 || "boolean" === typeof b2 || "" === b2 ? "" : c2 || "number" !== typeof b2 || 0 === b2 || pb.hasOwnProperty(a2) && pb[a2] ? ("" + b2).trim() : b2 + "px";
}
function sb(a2, b2) {
  a2 = a2.style;
  for (var c2 in b2)
    if (b2.hasOwnProperty(c2)) {
      var d2 = 0 === c2.indexOf("--"), e2 = rb(c2, b2[c2], d2);
      "float" === c2 && (c2 = "cssFloat");
      d2 ? a2.setProperty(c2, e2) : a2[c2] = e2;
    }
}
var tb = A$1({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
function ub(a2, b2) {
  if (b2) {
    if (tb[a2] && (null != b2.children || null != b2.dangerouslySetInnerHTML))
      throw Error(p$2(137, a2));
    if (null != b2.dangerouslySetInnerHTML) {
      if (null != b2.children)
        throw Error(p$2(60));
      if ("object" !== typeof b2.dangerouslySetInnerHTML || !("__html" in b2.dangerouslySetInnerHTML))
        throw Error(p$2(61));
    }
    if (null != b2.style && "object" !== typeof b2.style)
      throw Error(p$2(62));
  }
}
function vb(a2, b2) {
  if (-1 === a2.indexOf("-"))
    return "string" === typeof b2.is;
  switch (a2) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return false;
    default:
      return true;
  }
}
var wb = null;
function xb(a2) {
  a2 = a2.target || a2.srcElement || window;
  a2.correspondingUseElement && (a2 = a2.correspondingUseElement);
  return 3 === a2.nodeType ? a2.parentNode : a2;
}
var yb = null, zb = null, Ab = null;
function Bb(a2) {
  if (a2 = Cb(a2)) {
    if ("function" !== typeof yb)
      throw Error(p$2(280));
    var b2 = a2.stateNode;
    b2 && (b2 = Db(b2), yb(a2.stateNode, a2.type, b2));
  }
}
function Eb(a2) {
  zb ? Ab ? Ab.push(a2) : Ab = [a2] : zb = a2;
}
function Fb() {
  if (zb) {
    var a2 = zb, b2 = Ab;
    Ab = zb = null;
    Bb(a2);
    if (b2)
      for (a2 = 0; a2 < b2.length; a2++)
        Bb(b2[a2]);
  }
}
function Gb(a2, b2) {
  return a2(b2);
}
function Hb() {
}
var Ib = false;
function Jb(a2, b2, c2) {
  if (Ib)
    return a2(b2, c2);
  Ib = true;
  try {
    return Gb(a2, b2, c2);
  } finally {
    if (Ib = false, null !== zb || null !== Ab)
      Hb(), Fb();
  }
}
function Kb(a2, b2) {
  var c2 = a2.stateNode;
  if (null === c2)
    return null;
  var d2 = Db(c2);
  if (null === d2)
    return null;
  c2 = d2[b2];
  a:
    switch (b2) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (d2 = !d2.disabled) || (a2 = a2.type, d2 = !("button" === a2 || "input" === a2 || "select" === a2 || "textarea" === a2));
        a2 = !d2;
        break a;
      default:
        a2 = false;
    }
  if (a2)
    return null;
  if (c2 && "function" !== typeof c2)
    throw Error(p$2(231, b2, typeof c2));
  return c2;
}
var Lb = false;
if (ia)
  try {
    var Mb = {};
    Object.defineProperty(Mb, "passive", { get: function() {
      Lb = true;
    } });
    window.addEventListener("test", Mb, Mb);
    window.removeEventListener("test", Mb, Mb);
  } catch (a2) {
    Lb = false;
  }
function Nb(a2, b2, c2, d2, e2, f2, g2, h2, k2) {
  var l2 = Array.prototype.slice.call(arguments, 3);
  try {
    b2.apply(c2, l2);
  } catch (m2) {
    this.onError(m2);
  }
}
var Ob = false, Pb = null, Qb = false, Rb = null, Sb = { onError: function(a2) {
  Ob = true;
  Pb = a2;
} };
function Tb(a2, b2, c2, d2, e2, f2, g2, h2, k2) {
  Ob = false;
  Pb = null;
  Nb.apply(Sb, arguments);
}
function Ub(a2, b2, c2, d2, e2, f2, g2, h2, k2) {
  Tb.apply(this, arguments);
  if (Ob) {
    if (Ob) {
      var l2 = Pb;
      Ob = false;
      Pb = null;
    } else
      throw Error(p$2(198));
    Qb || (Qb = true, Rb = l2);
  }
}
function Vb(a2) {
  var b2 = a2, c2 = a2;
  if (a2.alternate)
    for (; b2.return; )
      b2 = b2.return;
  else {
    a2 = b2;
    do
      b2 = a2, 0 !== (b2.flags & 4098) && (c2 = b2.return), a2 = b2.return;
    while (a2);
  }
  return 3 === b2.tag ? c2 : null;
}
function Wb(a2) {
  if (13 === a2.tag) {
    var b2 = a2.memoizedState;
    null === b2 && (a2 = a2.alternate, null !== a2 && (b2 = a2.memoizedState));
    if (null !== b2)
      return b2.dehydrated;
  }
  return null;
}
function Xb(a2) {
  if (Vb(a2) !== a2)
    throw Error(p$2(188));
}
function Yb(a2) {
  var b2 = a2.alternate;
  if (!b2) {
    b2 = Vb(a2);
    if (null === b2)
      throw Error(p$2(188));
    return b2 !== a2 ? null : a2;
  }
  for (var c2 = a2, d2 = b2; ; ) {
    var e2 = c2.return;
    if (null === e2)
      break;
    var f2 = e2.alternate;
    if (null === f2) {
      d2 = e2.return;
      if (null !== d2) {
        c2 = d2;
        continue;
      }
      break;
    }
    if (e2.child === f2.child) {
      for (f2 = e2.child; f2; ) {
        if (f2 === c2)
          return Xb(e2), a2;
        if (f2 === d2)
          return Xb(e2), b2;
        f2 = f2.sibling;
      }
      throw Error(p$2(188));
    }
    if (c2.return !== d2.return)
      c2 = e2, d2 = f2;
    else {
      for (var g2 = false, h2 = e2.child; h2; ) {
        if (h2 === c2) {
          g2 = true;
          c2 = e2;
          d2 = f2;
          break;
        }
        if (h2 === d2) {
          g2 = true;
          d2 = e2;
          c2 = f2;
          break;
        }
        h2 = h2.sibling;
      }
      if (!g2) {
        for (h2 = f2.child; h2; ) {
          if (h2 === c2) {
            g2 = true;
            c2 = f2;
            d2 = e2;
            break;
          }
          if (h2 === d2) {
            g2 = true;
            d2 = f2;
            c2 = e2;
            break;
          }
          h2 = h2.sibling;
        }
        if (!g2)
          throw Error(p$2(189));
      }
    }
    if (c2.alternate !== d2)
      throw Error(p$2(190));
  }
  if (3 !== c2.tag)
    throw Error(p$2(188));
  return c2.stateNode.current === c2 ? a2 : b2;
}
function Zb(a2) {
  a2 = Yb(a2);
  return null !== a2 ? $b(a2) : null;
}
function $b(a2) {
  if (5 === a2.tag || 6 === a2.tag)
    return a2;
  for (a2 = a2.child; null !== a2; ) {
    var b2 = $b(a2);
    if (null !== b2)
      return b2;
    a2 = a2.sibling;
  }
  return null;
}
var ac = ca.unstable_scheduleCallback, bc = ca.unstable_cancelCallback, cc = ca.unstable_shouldYield, dc = ca.unstable_requestPaint, B$1 = ca.unstable_now, ec$1 = ca.unstable_getCurrentPriorityLevel, fc = ca.unstable_ImmediatePriority, gc = ca.unstable_UserBlockingPriority, hc = ca.unstable_NormalPriority, ic = ca.unstable_LowPriority, jc = ca.unstable_IdlePriority, kc = null, lc = null;
function mc(a2) {
  if (lc && "function" === typeof lc.onCommitFiberRoot)
    try {
      lc.onCommitFiberRoot(kc, a2, void 0, 128 === (a2.current.flags & 128));
    } catch (b2) {
    }
}
var oc = Math.clz32 ? Math.clz32 : nc, pc = Math.log, qc = Math.LN2;
function nc(a2) {
  a2 >>>= 0;
  return 0 === a2 ? 32 : 31 - (pc(a2) / qc | 0) | 0;
}
var rc = 64, sc = 4194304;
function tc(a2) {
  switch (a2 & -a2) {
    case 1:
      return 1;
    case 2:
      return 2;
    case 4:
      return 4;
    case 8:
      return 8;
    case 16:
      return 16;
    case 32:
      return 32;
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return a2 & 4194240;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return a2 & 130023424;
    case 134217728:
      return 134217728;
    case 268435456:
      return 268435456;
    case 536870912:
      return 536870912;
    case 1073741824:
      return 1073741824;
    default:
      return a2;
  }
}
function uc(a2, b2) {
  var c2 = a2.pendingLanes;
  if (0 === c2)
    return 0;
  var d2 = 0, e2 = a2.suspendedLanes, f2 = a2.pingedLanes, g2 = c2 & 268435455;
  if (0 !== g2) {
    var h2 = g2 & ~e2;
    0 !== h2 ? d2 = tc(h2) : (f2 &= g2, 0 !== f2 && (d2 = tc(f2)));
  } else
    g2 = c2 & ~e2, 0 !== g2 ? d2 = tc(g2) : 0 !== f2 && (d2 = tc(f2));
  if (0 === d2)
    return 0;
  if (0 !== b2 && b2 !== d2 && 0 === (b2 & e2) && (e2 = d2 & -d2, f2 = b2 & -b2, e2 >= f2 || 16 === e2 && 0 !== (f2 & 4194240)))
    return b2;
  0 !== (d2 & 4) && (d2 |= c2 & 16);
  b2 = a2.entangledLanes;
  if (0 !== b2)
    for (a2 = a2.entanglements, b2 &= d2; 0 < b2; )
      c2 = 31 - oc(b2), e2 = 1 << c2, d2 |= a2[c2], b2 &= ~e2;
  return d2;
}
function vc(a2, b2) {
  switch (a2) {
    case 1:
    case 2:
    case 4:
      return b2 + 250;
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return b2 + 5e3;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return -1;
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
      return -1;
    default:
      return -1;
  }
}
function wc(a2, b2) {
  for (var c2 = a2.suspendedLanes, d2 = a2.pingedLanes, e2 = a2.expirationTimes, f2 = a2.pendingLanes; 0 < f2; ) {
    var g2 = 31 - oc(f2), h2 = 1 << g2, k2 = e2[g2];
    if (-1 === k2) {
      if (0 === (h2 & c2) || 0 !== (h2 & d2))
        e2[g2] = vc(h2, b2);
    } else
      k2 <= b2 && (a2.expiredLanes |= h2);
    f2 &= ~h2;
  }
}
function xc(a2) {
  a2 = a2.pendingLanes & -1073741825;
  return 0 !== a2 ? a2 : a2 & 1073741824 ? 1073741824 : 0;
}
function yc() {
  var a2 = rc;
  rc <<= 1;
  0 === (rc & 4194240) && (rc = 64);
  return a2;
}
function zc(a2) {
  for (var b2 = [], c2 = 0; 31 > c2; c2++)
    b2.push(a2);
  return b2;
}
function Ac(a2, b2, c2) {
  a2.pendingLanes |= b2;
  536870912 !== b2 && (a2.suspendedLanes = 0, a2.pingedLanes = 0);
  a2 = a2.eventTimes;
  b2 = 31 - oc(b2);
  a2[b2] = c2;
}
function Bc(a2, b2) {
  var c2 = a2.pendingLanes & ~b2;
  a2.pendingLanes = b2;
  a2.suspendedLanes = 0;
  a2.pingedLanes = 0;
  a2.expiredLanes &= b2;
  a2.mutableReadLanes &= b2;
  a2.entangledLanes &= b2;
  b2 = a2.entanglements;
  var d2 = a2.eventTimes;
  for (a2 = a2.expirationTimes; 0 < c2; ) {
    var e2 = 31 - oc(c2), f2 = 1 << e2;
    b2[e2] = 0;
    d2[e2] = -1;
    a2[e2] = -1;
    c2 &= ~f2;
  }
}
function Cc(a2, b2) {
  var c2 = a2.entangledLanes |= b2;
  for (a2 = a2.entanglements; c2; ) {
    var d2 = 31 - oc(c2), e2 = 1 << d2;
    e2 & b2 | a2[d2] & b2 && (a2[d2] |= b2);
    c2 &= ~e2;
  }
}
var C$1 = 0;
function Dc(a2) {
  a2 &= -a2;
  return 1 < a2 ? 4 < a2 ? 0 !== (a2 & 268435455) ? 16 : 536870912 : 4 : 1;
}
var Ec, Fc, Gc, Hc, Ic, Jc = false, Kc = [], Lc = null, Mc = null, Nc = null, Oc = /* @__PURE__ */ new Map(), Pc = /* @__PURE__ */ new Map(), Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function Sc(a2, b2) {
  switch (a2) {
    case "focusin":
    case "focusout":
      Lc = null;
      break;
    case "dragenter":
    case "dragleave":
      Mc = null;
      break;
    case "mouseover":
    case "mouseout":
      Nc = null;
      break;
    case "pointerover":
    case "pointerout":
      Oc.delete(b2.pointerId);
      break;
    case "gotpointercapture":
    case "lostpointercapture":
      Pc.delete(b2.pointerId);
  }
}
function Tc(a2, b2, c2, d2, e2, f2) {
  if (null === a2 || a2.nativeEvent !== f2)
    return a2 = { blockedOn: b2, domEventName: c2, eventSystemFlags: d2, nativeEvent: f2, targetContainers: [e2] }, null !== b2 && (b2 = Cb(b2), null !== b2 && Fc(b2)), a2;
  a2.eventSystemFlags |= d2;
  b2 = a2.targetContainers;
  null !== e2 && -1 === b2.indexOf(e2) && b2.push(e2);
  return a2;
}
function Uc(a2, b2, c2, d2, e2) {
  switch (b2) {
    case "focusin":
      return Lc = Tc(Lc, a2, b2, c2, d2, e2), true;
    case "dragenter":
      return Mc = Tc(Mc, a2, b2, c2, d2, e2), true;
    case "mouseover":
      return Nc = Tc(Nc, a2, b2, c2, d2, e2), true;
    case "pointerover":
      var f2 = e2.pointerId;
      Oc.set(f2, Tc(Oc.get(f2) || null, a2, b2, c2, d2, e2));
      return true;
    case "gotpointercapture":
      return f2 = e2.pointerId, Pc.set(f2, Tc(Pc.get(f2) || null, a2, b2, c2, d2, e2)), true;
  }
  return false;
}
function Vc(a2) {
  var b2 = Wc(a2.target);
  if (null !== b2) {
    var c2 = Vb(b2);
    if (null !== c2) {
      if (b2 = c2.tag, 13 === b2) {
        if (b2 = Wb(c2), null !== b2) {
          a2.blockedOn = b2;
          Ic(a2.priority, function() {
            Gc(c2);
          });
          return;
        }
      } else if (3 === b2 && c2.stateNode.current.memoizedState.isDehydrated) {
        a2.blockedOn = 3 === c2.tag ? c2.stateNode.containerInfo : null;
        return;
      }
    }
  }
  a2.blockedOn = null;
}
function Xc(a2) {
  if (null !== a2.blockedOn)
    return false;
  for (var b2 = a2.targetContainers; 0 < b2.length; ) {
    var c2 = Yc(a2.domEventName, a2.eventSystemFlags, b2[0], a2.nativeEvent);
    if (null === c2) {
      c2 = a2.nativeEvent;
      var d2 = new c2.constructor(c2.type, c2);
      wb = d2;
      c2.target.dispatchEvent(d2);
      wb = null;
    } else
      return b2 = Cb(c2), null !== b2 && Fc(b2), a2.blockedOn = c2, false;
    b2.shift();
  }
  return true;
}
function Zc(a2, b2, c2) {
  Xc(a2) && c2.delete(b2);
}
function $c() {
  Jc = false;
  null !== Lc && Xc(Lc) && (Lc = null);
  null !== Mc && Xc(Mc) && (Mc = null);
  null !== Nc && Xc(Nc) && (Nc = null);
  Oc.forEach(Zc);
  Pc.forEach(Zc);
}
function ad(a2, b2) {
  a2.blockedOn === b2 && (a2.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
}
function bd(a2) {
  function b2(b3) {
    return ad(b3, a2);
  }
  if (0 < Kc.length) {
    ad(Kc[0], a2);
    for (var c2 = 1; c2 < Kc.length; c2++) {
      var d2 = Kc[c2];
      d2.blockedOn === a2 && (d2.blockedOn = null);
    }
  }
  null !== Lc && ad(Lc, a2);
  null !== Mc && ad(Mc, a2);
  null !== Nc && ad(Nc, a2);
  Oc.forEach(b2);
  Pc.forEach(b2);
  for (c2 = 0; c2 < Qc.length; c2++)
    d2 = Qc[c2], d2.blockedOn === a2 && (d2.blockedOn = null);
  for (; 0 < Qc.length && (c2 = Qc[0], null === c2.blockedOn); )
    Vc(c2), null === c2.blockedOn && Qc.shift();
}
var cd = ua.ReactCurrentBatchConfig, dd = true;
function ed(a2, b2, c2, d2) {
  var e2 = C$1, f2 = cd.transition;
  cd.transition = null;
  try {
    C$1 = 1, fd(a2, b2, c2, d2);
  } finally {
    C$1 = e2, cd.transition = f2;
  }
}
function gd(a2, b2, c2, d2) {
  var e2 = C$1, f2 = cd.transition;
  cd.transition = null;
  try {
    C$1 = 4, fd(a2, b2, c2, d2);
  } finally {
    C$1 = e2, cd.transition = f2;
  }
}
function fd(a2, b2, c2, d2) {
  if (dd) {
    var e2 = Yc(a2, b2, c2, d2);
    if (null === e2)
      hd(a2, b2, d2, id, c2), Sc(a2, d2);
    else if (Uc(e2, a2, b2, c2, d2))
      d2.stopPropagation();
    else if (Sc(a2, d2), b2 & 4 && -1 < Rc.indexOf(a2)) {
      for (; null !== e2; ) {
        var f2 = Cb(e2);
        null !== f2 && Ec(f2);
        f2 = Yc(a2, b2, c2, d2);
        null === f2 && hd(a2, b2, d2, id, c2);
        if (f2 === e2)
          break;
        e2 = f2;
      }
      null !== e2 && d2.stopPropagation();
    } else
      hd(a2, b2, d2, null, c2);
  }
}
var id = null;
function Yc(a2, b2, c2, d2) {
  id = null;
  a2 = xb(d2);
  a2 = Wc(a2);
  if (null !== a2)
    if (b2 = Vb(a2), null === b2)
      a2 = null;
    else if (c2 = b2.tag, 13 === c2) {
      a2 = Wb(b2);
      if (null !== a2)
        return a2;
      a2 = null;
    } else if (3 === c2) {
      if (b2.stateNode.current.memoizedState.isDehydrated)
        return 3 === b2.tag ? b2.stateNode.containerInfo : null;
      a2 = null;
    } else
      b2 !== a2 && (a2 = null);
  id = a2;
  return null;
}
function jd(a2) {
  switch (a2) {
    case "cancel":
    case "click":
    case "close":
    case "contextmenu":
    case "copy":
    case "cut":
    case "auxclick":
    case "dblclick":
    case "dragend":
    case "dragstart":
    case "drop":
    case "focusin":
    case "focusout":
    case "input":
    case "invalid":
    case "keydown":
    case "keypress":
    case "keyup":
    case "mousedown":
    case "mouseup":
    case "paste":
    case "pause":
    case "play":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
    case "ratechange":
    case "reset":
    case "resize":
    case "seeked":
    case "submit":
    case "touchcancel":
    case "touchend":
    case "touchstart":
    case "volumechange":
    case "change":
    case "selectionchange":
    case "textInput":
    case "compositionstart":
    case "compositionend":
    case "compositionupdate":
    case "beforeblur":
    case "afterblur":
    case "beforeinput":
    case "blur":
    case "fullscreenchange":
    case "focus":
    case "hashchange":
    case "popstate":
    case "select":
    case "selectstart":
      return 1;
    case "drag":
    case "dragenter":
    case "dragexit":
    case "dragleave":
    case "dragover":
    case "mousemove":
    case "mouseout":
    case "mouseover":
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "scroll":
    case "toggle":
    case "touchmove":
    case "wheel":
    case "mouseenter":
    case "mouseleave":
    case "pointerenter":
    case "pointerleave":
      return 4;
    case "message":
      switch (ec$1()) {
        case fc:
          return 1;
        case gc:
          return 4;
        case hc:
        case ic:
          return 16;
        case jc:
          return 536870912;
        default:
          return 16;
      }
    default:
      return 16;
  }
}
var kd = null, ld = null, md = null;
function nd() {
  if (md)
    return md;
  var a2, b2 = ld, c2 = b2.length, d2, e2 = "value" in kd ? kd.value : kd.textContent, f2 = e2.length;
  for (a2 = 0; a2 < c2 && b2[a2] === e2[a2]; a2++)
    ;
  var g2 = c2 - a2;
  for (d2 = 1; d2 <= g2 && b2[c2 - d2] === e2[f2 - d2]; d2++)
    ;
  return md = e2.slice(a2, 1 < d2 ? 1 - d2 : void 0);
}
function od(a2) {
  var b2 = a2.keyCode;
  "charCode" in a2 ? (a2 = a2.charCode, 0 === a2 && 13 === b2 && (a2 = 13)) : a2 = b2;
  10 === a2 && (a2 = 13);
  return 32 <= a2 || 13 === a2 ? a2 : 0;
}
function pd() {
  return true;
}
function qd() {
  return false;
}
function rd(a2) {
  function b2(b3, d2, e2, f2, g2) {
    this._reactName = b3;
    this._targetInst = e2;
    this.type = d2;
    this.nativeEvent = f2;
    this.target = g2;
    this.currentTarget = null;
    for (var c2 in a2)
      a2.hasOwnProperty(c2) && (b3 = a2[c2], this[c2] = b3 ? b3(f2) : f2[c2]);
    this.isDefaultPrevented = (null != f2.defaultPrevented ? f2.defaultPrevented : false === f2.returnValue) ? pd : qd;
    this.isPropagationStopped = qd;
    return this;
  }
  A$1(b2.prototype, { preventDefault: function() {
    this.defaultPrevented = true;
    var a3 = this.nativeEvent;
    a3 && (a3.preventDefault ? a3.preventDefault() : "unknown" !== typeof a3.returnValue && (a3.returnValue = false), this.isDefaultPrevented = pd);
  }, stopPropagation: function() {
    var a3 = this.nativeEvent;
    a3 && (a3.stopPropagation ? a3.stopPropagation() : "unknown" !== typeof a3.cancelBubble && (a3.cancelBubble = true), this.isPropagationStopped = pd);
  }, persist: function() {
  }, isPersistent: pd });
  return b2;
}
var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a2) {
  return a2.timeStamp || Date.now();
}, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = A$1({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = A$1({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a2) {
  return void 0 === a2.relatedTarget ? a2.fromElement === a2.srcElement ? a2.toElement : a2.fromElement : a2.relatedTarget;
}, movementX: function(a2) {
  if ("movementX" in a2)
    return a2.movementX;
  a2 !== yd && (yd && "mousemove" === a2.type ? (wd = a2.screenX - yd.screenX, xd = a2.screenY - yd.screenY) : xd = wd = 0, yd = a2);
  return wd;
}, movementY: function(a2) {
  return "movementY" in a2 ? a2.movementY : xd;
} }), Bd = rd(Ad), Cd = A$1({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = A$1({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = A$1({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = A$1({}, sd, { clipboardData: function(a2) {
  return "clipboardData" in a2 ? a2.clipboardData : window.clipboardData;
} }), Jd = rd(Id), Kd = A$1({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
  Esc: "Escape",
  Spacebar: " ",
  Left: "ArrowLeft",
  Up: "ArrowUp",
  Right: "ArrowRight",
  Down: "ArrowDown",
  Del: "Delete",
  Win: "OS",
  Menu: "ContextMenu",
  Apps: "ContextMenu",
  Scroll: "ScrollLock",
  MozPrintableKey: "Unidentified"
}, Nd = {
  8: "Backspace",
  9: "Tab",
  12: "Clear",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  45: "Insert",
  46: "Delete",
  112: "F1",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10",
  122: "F11",
  123: "F12",
  144: "NumLock",
  145: "ScrollLock",
  224: "Meta"
}, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
function Pd(a2) {
  var b2 = this.nativeEvent;
  return b2.getModifierState ? b2.getModifierState(a2) : (a2 = Od[a2]) ? !!b2[a2] : false;
}
function zd() {
  return Pd;
}
var Qd = A$1({}, ud, { key: function(a2) {
  if (a2.key) {
    var b2 = Md[a2.key] || a2.key;
    if ("Unidentified" !== b2)
      return b2;
  }
  return "keypress" === a2.type ? (a2 = od(a2), 13 === a2 ? "Enter" : String.fromCharCode(a2)) : "keydown" === a2.type || "keyup" === a2.type ? Nd[a2.keyCode] || "Unidentified" : "";
}, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a2) {
  return "keypress" === a2.type ? od(a2) : 0;
}, keyCode: function(a2) {
  return "keydown" === a2.type || "keyup" === a2.type ? a2.keyCode : 0;
}, which: function(a2) {
  return "keypress" === a2.type ? od(a2) : "keydown" === a2.type || "keyup" === a2.type ? a2.keyCode : 0;
} }), Rd = rd(Qd), Sd = A$1({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = A$1({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = A$1({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = A$1({}, Ad, {
  deltaX: function(a2) {
    return "deltaX" in a2 ? a2.deltaX : "wheelDeltaX" in a2 ? -a2.wheelDeltaX : 0;
  },
  deltaY: function(a2) {
    return "deltaY" in a2 ? a2.deltaY : "wheelDeltaY" in a2 ? -a2.wheelDeltaY : "wheelDelta" in a2 ? -a2.wheelDelta : 0;
  },
  deltaZ: 0,
  deltaMode: 0
}), Zd = rd(Yd), $d = [9, 13, 27, 32], ae$1 = ia && "CompositionEvent" in window, be$1 = null;
ia && "documentMode" in document && (be$1 = document.documentMode);
var ce$1 = ia && "TextEvent" in window && !be$1, de$1 = ia && (!ae$1 || be$1 && 8 < be$1 && 11 >= be$1), ee$1 = String.fromCharCode(32), fe$1 = false;
function ge$1(a2, b2) {
  switch (a2) {
    case "keyup":
      return -1 !== $d.indexOf(b2.keyCode);
    case "keydown":
      return 229 !== b2.keyCode;
    case "keypress":
    case "mousedown":
    case "focusout":
      return true;
    default:
      return false;
  }
}
function he$1(a2) {
  a2 = a2.detail;
  return "object" === typeof a2 && "data" in a2 ? a2.data : null;
}
var ie$1 = false;
function je$1(a2, b2) {
  switch (a2) {
    case "compositionend":
      return he$1(b2);
    case "keypress":
      if (32 !== b2.which)
        return null;
      fe$1 = true;
      return ee$1;
    case "textInput":
      return a2 = b2.data, a2 === ee$1 && fe$1 ? null : a2;
    default:
      return null;
  }
}
function ke$1(a2, b2) {
  if (ie$1)
    return "compositionend" === a2 || !ae$1 && ge$1(a2, b2) ? (a2 = nd(), md = ld = kd = null, ie$1 = false, a2) : null;
  switch (a2) {
    case "paste":
      return null;
    case "keypress":
      if (!(b2.ctrlKey || b2.altKey || b2.metaKey) || b2.ctrlKey && b2.altKey) {
        if (b2.char && 1 < b2.char.length)
          return b2.char;
        if (b2.which)
          return String.fromCharCode(b2.which);
      }
      return null;
    case "compositionend":
      return de$1 && "ko" !== b2.locale ? null : b2.data;
    default:
      return null;
  }
}
var le$1 = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
function me(a2) {
  var b2 = a2 && a2.nodeName && a2.nodeName.toLowerCase();
  return "input" === b2 ? !!le$1[a2.type] : "textarea" === b2 ? true : false;
}
function ne$1(a2, b2, c2, d2) {
  Eb(d2);
  b2 = oe$1(b2, "onChange");
  0 < b2.length && (c2 = new td("onChange", "change", null, c2, d2), a2.push({ event: c2, listeners: b2 }));
}
var pe$1 = null, qe$1 = null;
function re$1(a2) {
  se$1(a2, 0);
}
function te$1(a2) {
  var b2 = ue(a2);
  if (Wa(b2))
    return a2;
}
function ve$1(a2, b2) {
  if ("change" === a2)
    return b2;
}
var we$1 = false;
if (ia) {
  var xe$1;
  if (ia) {
    var ye$1 = "oninput" in document;
    if (!ye$1) {
      var ze$1 = document.createElement("div");
      ze$1.setAttribute("oninput", "return;");
      ye$1 = "function" === typeof ze$1.oninput;
    }
    xe$1 = ye$1;
  } else
    xe$1 = false;
  we$1 = xe$1 && (!document.documentMode || 9 < document.documentMode);
}
function Ae$1() {
  pe$1 && (pe$1.detachEvent("onpropertychange", Be$1), qe$1 = pe$1 = null);
}
function Be$1(a2) {
  if ("value" === a2.propertyName && te$1(qe$1)) {
    var b2 = [];
    ne$1(b2, qe$1, a2, xb(a2));
    Jb(re$1, b2);
  }
}
function Ce(a2, b2, c2) {
  "focusin" === a2 ? (Ae$1(), pe$1 = b2, qe$1 = c2, pe$1.attachEvent("onpropertychange", Be$1)) : "focusout" === a2 && Ae$1();
}
function De$1(a2) {
  if ("selectionchange" === a2 || "keyup" === a2 || "keydown" === a2)
    return te$1(qe$1);
}
function Ee$1(a2, b2) {
  if ("click" === a2)
    return te$1(b2);
}
function Fe$1(a2, b2) {
  if ("input" === a2 || "change" === a2)
    return te$1(b2);
}
function Ge(a2, b2) {
  return a2 === b2 && (0 !== a2 || 1 / a2 === 1 / b2) || a2 !== a2 && b2 !== b2;
}
var He = "function" === typeof Object.is ? Object.is : Ge;
function Ie(a2, b2) {
  if (He(a2, b2))
    return true;
  if ("object" !== typeof a2 || null === a2 || "object" !== typeof b2 || null === b2)
    return false;
  var c2 = Object.keys(a2), d2 = Object.keys(b2);
  if (c2.length !== d2.length)
    return false;
  for (d2 = 0; d2 < c2.length; d2++) {
    var e2 = c2[d2];
    if (!ja.call(b2, e2) || !He(a2[e2], b2[e2]))
      return false;
  }
  return true;
}
function Je(a2) {
  for (; a2 && a2.firstChild; )
    a2 = a2.firstChild;
  return a2;
}
function Ke(a2, b2) {
  var c2 = Je(a2);
  a2 = 0;
  for (var d2; c2; ) {
    if (3 === c2.nodeType) {
      d2 = a2 + c2.textContent.length;
      if (a2 <= b2 && d2 >= b2)
        return { node: c2, offset: b2 - a2 };
      a2 = d2;
    }
    a: {
      for (; c2; ) {
        if (c2.nextSibling) {
          c2 = c2.nextSibling;
          break a;
        }
        c2 = c2.parentNode;
      }
      c2 = void 0;
    }
    c2 = Je(c2);
  }
}
function Le(a2, b2) {
  return a2 && b2 ? a2 === b2 ? true : a2 && 3 === a2.nodeType ? false : b2 && 3 === b2.nodeType ? Le(a2, b2.parentNode) : "contains" in a2 ? a2.contains(b2) : a2.compareDocumentPosition ? !!(a2.compareDocumentPosition(b2) & 16) : false : false;
}
function Me$1() {
  for (var a2 = window, b2 = Xa(); b2 instanceof a2.HTMLIFrameElement; ) {
    try {
      var c2 = "string" === typeof b2.contentWindow.location.href;
    } catch (d2) {
      c2 = false;
    }
    if (c2)
      a2 = b2.contentWindow;
    else
      break;
    b2 = Xa(a2.document);
  }
  return b2;
}
function Ne$1(a2) {
  var b2 = a2 && a2.nodeName && a2.nodeName.toLowerCase();
  return b2 && ("input" === b2 && ("text" === a2.type || "search" === a2.type || "tel" === a2.type || "url" === a2.type || "password" === a2.type) || "textarea" === b2 || "true" === a2.contentEditable);
}
function Oe$1(a2) {
  var b2 = Me$1(), c2 = a2.focusedElem, d2 = a2.selectionRange;
  if (b2 !== c2 && c2 && c2.ownerDocument && Le(c2.ownerDocument.documentElement, c2)) {
    if (null !== d2 && Ne$1(c2)) {
      if (b2 = d2.start, a2 = d2.end, void 0 === a2 && (a2 = b2), "selectionStart" in c2)
        c2.selectionStart = b2, c2.selectionEnd = Math.min(a2, c2.value.length);
      else if (a2 = (b2 = c2.ownerDocument || document) && b2.defaultView || window, a2.getSelection) {
        a2 = a2.getSelection();
        var e2 = c2.textContent.length, f2 = Math.min(d2.start, e2);
        d2 = void 0 === d2.end ? f2 : Math.min(d2.end, e2);
        !a2.extend && f2 > d2 && (e2 = d2, d2 = f2, f2 = e2);
        e2 = Ke(c2, f2);
        var g2 = Ke(
          c2,
          d2
        );
        e2 && g2 && (1 !== a2.rangeCount || a2.anchorNode !== e2.node || a2.anchorOffset !== e2.offset || a2.focusNode !== g2.node || a2.focusOffset !== g2.offset) && (b2 = b2.createRange(), b2.setStart(e2.node, e2.offset), a2.removeAllRanges(), f2 > d2 ? (a2.addRange(b2), a2.extend(g2.node, g2.offset)) : (b2.setEnd(g2.node, g2.offset), a2.addRange(b2)));
      }
    }
    b2 = [];
    for (a2 = c2; a2 = a2.parentNode; )
      1 === a2.nodeType && b2.push({ element: a2, left: a2.scrollLeft, top: a2.scrollTop });
    "function" === typeof c2.focus && c2.focus();
    for (c2 = 0; c2 < b2.length; c2++)
      a2 = b2[c2], a2.element.scrollLeft = a2.left, a2.element.scrollTop = a2.top;
  }
}
var Pe = ia && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re$1 = null, Se$1 = null, Te$1 = false;
function Ue(a2, b2, c2) {
  var d2 = c2.window === c2 ? c2.document : 9 === c2.nodeType ? c2 : c2.ownerDocument;
  Te$1 || null == Qe || Qe !== Xa(d2) || (d2 = Qe, "selectionStart" in d2 && Ne$1(d2) ? d2 = { start: d2.selectionStart, end: d2.selectionEnd } : (d2 = (d2.ownerDocument && d2.ownerDocument.defaultView || window).getSelection(), d2 = { anchorNode: d2.anchorNode, anchorOffset: d2.anchorOffset, focusNode: d2.focusNode, focusOffset: d2.focusOffset }), Se$1 && Ie(Se$1, d2) || (Se$1 = d2, d2 = oe$1(Re$1, "onSelect"), 0 < d2.length && (b2 = new td("onSelect", "select", null, b2, c2), a2.push({ event: b2, listeners: d2 }), b2.target = Qe)));
}
function Ve$1(a2, b2) {
  var c2 = {};
  c2[a2.toLowerCase()] = b2.toLowerCase();
  c2["Webkit" + a2] = "webkit" + b2;
  c2["Moz" + a2] = "moz" + b2;
  return c2;
}
var We = { animationend: Ve$1("Animation", "AnimationEnd"), animationiteration: Ve$1("Animation", "AnimationIteration"), animationstart: Ve$1("Animation", "AnimationStart"), transitionend: Ve$1("Transition", "TransitionEnd") }, Xe = {}, Ye$1 = {};
ia && (Ye$1 = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
function Ze(a2) {
  if (Xe[a2])
    return Xe[a2];
  if (!We[a2])
    return a2;
  var b2 = We[a2], c2;
  for (c2 in b2)
    if (b2.hasOwnProperty(c2) && c2 in Ye$1)
      return Xe[a2] = b2[c2];
  return a2;
}
var $e = Ze("animationend"), af = Ze("animationiteration"), bf = Ze("animationstart"), cf = Ze("transitionend"), df = /* @__PURE__ */ new Map(), ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
function ff(a2, b2) {
  df.set(a2, b2);
  fa(b2, [a2]);
}
for (var gf = 0; gf < ef.length; gf++) {
  var hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
  ff(jf, "on" + kf);
}
ff($e, "onAnimationEnd");
ff(af, "onAnimationIteration");
ff(bf, "onAnimationStart");
ff("dblclick", "onDoubleClick");
ff("focusin", "onFocus");
ff("focusout", "onBlur");
ff(cf, "onTransitionEnd");
ha("onMouseEnter", ["mouseout", "mouseover"]);
ha("onMouseLeave", ["mouseout", "mouseover"]);
ha("onPointerEnter", ["pointerout", "pointerover"]);
ha("onPointerLeave", ["pointerout", "pointerover"]);
fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
function nf(a2, b2, c2) {
  var d2 = a2.type || "unknown-event";
  a2.currentTarget = c2;
  Ub(d2, b2, void 0, a2);
  a2.currentTarget = null;
}
function se$1(a2, b2) {
  b2 = 0 !== (b2 & 4);
  for (var c2 = 0; c2 < a2.length; c2++) {
    var d2 = a2[c2], e2 = d2.event;
    d2 = d2.listeners;
    a: {
      var f2 = void 0;
      if (b2)
        for (var g2 = d2.length - 1; 0 <= g2; g2--) {
          var h2 = d2[g2], k2 = h2.instance, l2 = h2.currentTarget;
          h2 = h2.listener;
          if (k2 !== f2 && e2.isPropagationStopped())
            break a;
          nf(e2, h2, l2);
          f2 = k2;
        }
      else
        for (g2 = 0; g2 < d2.length; g2++) {
          h2 = d2[g2];
          k2 = h2.instance;
          l2 = h2.currentTarget;
          h2 = h2.listener;
          if (k2 !== f2 && e2.isPropagationStopped())
            break a;
          nf(e2, h2, l2);
          f2 = k2;
        }
    }
  }
  if (Qb)
    throw a2 = Rb, Qb = false, Rb = null, a2;
}
function D$1(a2, b2) {
  var c2 = b2[of$4];
  void 0 === c2 && (c2 = b2[of$4] = /* @__PURE__ */ new Set());
  var d2 = a2 + "__bubble";
  c2.has(d2) || (pf(b2, a2, 2, false), c2.add(d2));
}
function qf(a2, b2, c2) {
  var d2 = 0;
  b2 && (d2 |= 4);
  pf(c2, a2, d2, b2);
}
var rf = "_reactListening" + Math.random().toString(36).slice(2);
function sf(a2) {
  if (!a2[rf]) {
    a2[rf] = true;
    da.forEach(function(b3) {
      "selectionchange" !== b3 && (mf.has(b3) || qf(b3, false, a2), qf(b3, true, a2));
    });
    var b2 = 9 === a2.nodeType ? a2 : a2.ownerDocument;
    null === b2 || b2[rf] || (b2[rf] = true, qf("selectionchange", false, b2));
  }
}
function pf(a2, b2, c2, d2) {
  switch (jd(b2)) {
    case 1:
      var e2 = ed;
      break;
    case 4:
      e2 = gd;
      break;
    default:
      e2 = fd;
  }
  c2 = e2.bind(null, b2, c2, a2);
  e2 = void 0;
  !Lb || "touchstart" !== b2 && "touchmove" !== b2 && "wheel" !== b2 || (e2 = true);
  d2 ? void 0 !== e2 ? a2.addEventListener(b2, c2, { capture: true, passive: e2 }) : a2.addEventListener(b2, c2, true) : void 0 !== e2 ? a2.addEventListener(b2, c2, { passive: e2 }) : a2.addEventListener(b2, c2, false);
}
function hd(a2, b2, c2, d2, e2) {
  var f2 = d2;
  if (0 === (b2 & 1) && 0 === (b2 & 2) && null !== d2)
    a:
      for (; ; ) {
        if (null === d2)
          return;
        var g2 = d2.tag;
        if (3 === g2 || 4 === g2) {
          var h2 = d2.stateNode.containerInfo;
          if (h2 === e2 || 8 === h2.nodeType && h2.parentNode === e2)
            break;
          if (4 === g2)
            for (g2 = d2.return; null !== g2; ) {
              var k2 = g2.tag;
              if (3 === k2 || 4 === k2) {
                if (k2 = g2.stateNode.containerInfo, k2 === e2 || 8 === k2.nodeType && k2.parentNode === e2)
                  return;
              }
              g2 = g2.return;
            }
          for (; null !== h2; ) {
            g2 = Wc(h2);
            if (null === g2)
              return;
            k2 = g2.tag;
            if (5 === k2 || 6 === k2) {
              d2 = f2 = g2;
              continue a;
            }
            h2 = h2.parentNode;
          }
        }
        d2 = d2.return;
      }
  Jb(function() {
    var d3 = f2, e3 = xb(c2), g3 = [];
    a: {
      var h3 = df.get(a2);
      if (void 0 !== h3) {
        var k3 = td, n2 = a2;
        switch (a2) {
          case "keypress":
            if (0 === od(c2))
              break a;
          case "keydown":
          case "keyup":
            k3 = Rd;
            break;
          case "focusin":
            n2 = "focus";
            k3 = Fd;
            break;
          case "focusout":
            n2 = "blur";
            k3 = Fd;
            break;
          case "beforeblur":
          case "afterblur":
            k3 = Fd;
            break;
          case "click":
            if (2 === c2.button)
              break a;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            k3 = Bd;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            k3 = Dd;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            k3 = Vd;
            break;
          case $e:
          case af:
          case bf:
            k3 = Hd;
            break;
          case cf:
            k3 = Xd;
            break;
          case "scroll":
            k3 = vd;
            break;
          case "wheel":
            k3 = Zd;
            break;
          case "copy":
          case "cut":
          case "paste":
            k3 = Jd;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            k3 = Td;
        }
        var t2 = 0 !== (b2 & 4), J2 = !t2 && "scroll" === a2, x2 = t2 ? null !== h3 ? h3 + "Capture" : null : h3;
        t2 = [];
        for (var w2 = d3, u2; null !== w2; ) {
          u2 = w2;
          var F2 = u2.stateNode;
          5 === u2.tag && null !== F2 && (u2 = F2, null !== x2 && (F2 = Kb(w2, x2), null != F2 && t2.push(tf(w2, F2, u2))));
          if (J2)
            break;
          w2 = w2.return;
        }
        0 < t2.length && (h3 = new k3(h3, n2, null, c2, e3), g3.push({ event: h3, listeners: t2 }));
      }
    }
    if (0 === (b2 & 7)) {
      a: {
        h3 = "mouseover" === a2 || "pointerover" === a2;
        k3 = "mouseout" === a2 || "pointerout" === a2;
        if (h3 && c2 !== wb && (n2 = c2.relatedTarget || c2.fromElement) && (Wc(n2) || n2[uf]))
          break a;
        if (k3 || h3) {
          h3 = e3.window === e3 ? e3 : (h3 = e3.ownerDocument) ? h3.defaultView || h3.parentWindow : window;
          if (k3) {
            if (n2 = c2.relatedTarget || c2.toElement, k3 = d3, n2 = n2 ? Wc(n2) : null, null !== n2 && (J2 = Vb(n2), n2 !== J2 || 5 !== n2.tag && 6 !== n2.tag))
              n2 = null;
          } else
            k3 = null, n2 = d3;
          if (k3 !== n2) {
            t2 = Bd;
            F2 = "onMouseLeave";
            x2 = "onMouseEnter";
            w2 = "mouse";
            if ("pointerout" === a2 || "pointerover" === a2)
              t2 = Td, F2 = "onPointerLeave", x2 = "onPointerEnter", w2 = "pointer";
            J2 = null == k3 ? h3 : ue(k3);
            u2 = null == n2 ? h3 : ue(n2);
            h3 = new t2(F2, w2 + "leave", k3, c2, e3);
            h3.target = J2;
            h3.relatedTarget = u2;
            F2 = null;
            Wc(e3) === d3 && (t2 = new t2(x2, w2 + "enter", n2, c2, e3), t2.target = u2, t2.relatedTarget = J2, F2 = t2);
            J2 = F2;
            if (k3 && n2)
              b: {
                t2 = k3;
                x2 = n2;
                w2 = 0;
                for (u2 = t2; u2; u2 = vf(u2))
                  w2++;
                u2 = 0;
                for (F2 = x2; F2; F2 = vf(F2))
                  u2++;
                for (; 0 < w2 - u2; )
                  t2 = vf(t2), w2--;
                for (; 0 < u2 - w2; )
                  x2 = vf(x2), u2--;
                for (; w2--; ) {
                  if (t2 === x2 || null !== x2 && t2 === x2.alternate)
                    break b;
                  t2 = vf(t2);
                  x2 = vf(x2);
                }
                t2 = null;
              }
            else
              t2 = null;
            null !== k3 && wf(g3, h3, k3, t2, false);
            null !== n2 && null !== J2 && wf(g3, J2, n2, t2, true);
          }
        }
      }
      a: {
        h3 = d3 ? ue(d3) : window;
        k3 = h3.nodeName && h3.nodeName.toLowerCase();
        if ("select" === k3 || "input" === k3 && "file" === h3.type)
          var na = ve$1;
        else if (me(h3))
          if (we$1)
            na = Fe$1;
          else {
            na = De$1;
            var xa = Ce;
          }
        else
          (k3 = h3.nodeName) && "input" === k3.toLowerCase() && ("checkbox" === h3.type || "radio" === h3.type) && (na = Ee$1);
        if (na && (na = na(a2, d3))) {
          ne$1(g3, na, c2, e3);
          break a;
        }
        xa && xa(a2, h3, d3);
        "focusout" === a2 && (xa = h3._wrapperState) && xa.controlled && "number" === h3.type && cb(h3, "number", h3.value);
      }
      xa = d3 ? ue(d3) : window;
      switch (a2) {
        case "focusin":
          if (me(xa) || "true" === xa.contentEditable)
            Qe = xa, Re$1 = d3, Se$1 = null;
          break;
        case "focusout":
          Se$1 = Re$1 = Qe = null;
          break;
        case "mousedown":
          Te$1 = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          Te$1 = false;
          Ue(g3, c2, e3);
          break;
        case "selectionchange":
          if (Pe)
            break;
        case "keydown":
        case "keyup":
          Ue(g3, c2, e3);
      }
      var $a;
      if (ae$1)
        b: {
          switch (a2) {
            case "compositionstart":
              var ba = "onCompositionStart";
              break b;
            case "compositionend":
              ba = "onCompositionEnd";
              break b;
            case "compositionupdate":
              ba = "onCompositionUpdate";
              break b;
          }
          ba = void 0;
        }
      else
        ie$1 ? ge$1(a2, c2) && (ba = "onCompositionEnd") : "keydown" === a2 && 229 === c2.keyCode && (ba = "onCompositionStart");
      ba && (de$1 && "ko" !== c2.locale && (ie$1 || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie$1 && ($a = nd()) : (kd = e3, ld = "value" in kd ? kd.value : kd.textContent, ie$1 = true)), xa = oe$1(d3, ba), 0 < xa.length && (ba = new Ld(ba, a2, null, c2, e3), g3.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he$1(c2), null !== $a && (ba.data = $a))));
      if ($a = ce$1 ? je$1(a2, c2) : ke$1(a2, c2))
        d3 = oe$1(d3, "onBeforeInput"), 0 < d3.length && (e3 = new Ld("onBeforeInput", "beforeinput", null, c2, e3), g3.push({ event: e3, listeners: d3 }), e3.data = $a);
    }
    se$1(g3, b2);
  });
}
function tf(a2, b2, c2) {
  return { instance: a2, listener: b2, currentTarget: c2 };
}
function oe$1(a2, b2) {
  for (var c2 = b2 + "Capture", d2 = []; null !== a2; ) {
    var e2 = a2, f2 = e2.stateNode;
    5 === e2.tag && null !== f2 && (e2 = f2, f2 = Kb(a2, c2), null != f2 && d2.unshift(tf(a2, f2, e2)), f2 = Kb(a2, b2), null != f2 && d2.push(tf(a2, f2, e2)));
    a2 = a2.return;
  }
  return d2;
}
function vf(a2) {
  if (null === a2)
    return null;
  do
    a2 = a2.return;
  while (a2 && 5 !== a2.tag);
  return a2 ? a2 : null;
}
function wf(a2, b2, c2, d2, e2) {
  for (var f2 = b2._reactName, g2 = []; null !== c2 && c2 !== d2; ) {
    var h2 = c2, k2 = h2.alternate, l2 = h2.stateNode;
    if (null !== k2 && k2 === d2)
      break;
    5 === h2.tag && null !== l2 && (h2 = l2, e2 ? (k2 = Kb(c2, f2), null != k2 && g2.unshift(tf(c2, k2, h2))) : e2 || (k2 = Kb(c2, f2), null != k2 && g2.push(tf(c2, k2, h2))));
    c2 = c2.return;
  }
  0 !== g2.length && a2.push({ event: b2, listeners: g2 });
}
var xf = /\r\n?/g, yf = /\u0000|\uFFFD/g;
function zf(a2) {
  return ("string" === typeof a2 ? a2 : "" + a2).replace(xf, "\n").replace(yf, "");
}
function Af(a2, b2, c2) {
  b2 = zf(b2);
  if (zf(a2) !== b2 && c2)
    throw Error(p$2(425));
}
function Bf() {
}
var Cf = null, Df = null;
function Ef(a2, b2) {
  return "textarea" === a2 || "noscript" === a2 || "string" === typeof b2.children || "number" === typeof b2.children || "object" === typeof b2.dangerouslySetInnerHTML && null !== b2.dangerouslySetInnerHTML && null != b2.dangerouslySetInnerHTML.__html;
}
var Ff = "function" === typeof setTimeout ? setTimeout : void 0, Gf = "function" === typeof clearTimeout ? clearTimeout : void 0, Hf = "function" === typeof Promise ? Promise : void 0, Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a2) {
  return Hf.resolve(null).then(a2).catch(If);
} : Ff;
function If(a2) {
  setTimeout(function() {
    throw a2;
  });
}
function Kf(a2, b2) {
  var c2 = b2, d2 = 0;
  do {
    var e2 = c2.nextSibling;
    a2.removeChild(c2);
    if (e2 && 8 === e2.nodeType)
      if (c2 = e2.data, "/$" === c2) {
        if (0 === d2) {
          a2.removeChild(e2);
          bd(b2);
          return;
        }
        d2--;
      } else
        "$" !== c2 && "$?" !== c2 && "$!" !== c2 || d2++;
    c2 = e2;
  } while (c2);
  bd(b2);
}
function Lf(a2) {
  for (; null != a2; a2 = a2.nextSibling) {
    var b2 = a2.nodeType;
    if (1 === b2 || 3 === b2)
      break;
    if (8 === b2) {
      b2 = a2.data;
      if ("$" === b2 || "$!" === b2 || "$?" === b2)
        break;
      if ("/$" === b2)
        return null;
    }
  }
  return a2;
}
function Mf(a2) {
  a2 = a2.previousSibling;
  for (var b2 = 0; a2; ) {
    if (8 === a2.nodeType) {
      var c2 = a2.data;
      if ("$" === c2 || "$!" === c2 || "$?" === c2) {
        if (0 === b2)
          return a2;
        b2--;
      } else
        "/$" === c2 && b2++;
    }
    a2 = a2.previousSibling;
  }
  return null;
}
var Nf = Math.random().toString(36).slice(2), Of = "__reactFiber$" + Nf, Pf = "__reactProps$" + Nf, uf = "__reactContainer$" + Nf, of$4 = "__reactEvents$" + Nf, Qf = "__reactListeners$" + Nf, Rf = "__reactHandles$" + Nf;
function Wc(a2) {
  var b2 = a2[Of];
  if (b2)
    return b2;
  for (var c2 = a2.parentNode; c2; ) {
    if (b2 = c2[uf] || c2[Of]) {
      c2 = b2.alternate;
      if (null !== b2.child || null !== c2 && null !== c2.child)
        for (a2 = Mf(a2); null !== a2; ) {
          if (c2 = a2[Of])
            return c2;
          a2 = Mf(a2);
        }
      return b2;
    }
    a2 = c2;
    c2 = a2.parentNode;
  }
  return null;
}
function Cb(a2) {
  a2 = a2[Of] || a2[uf];
  return !a2 || 5 !== a2.tag && 6 !== a2.tag && 13 !== a2.tag && 3 !== a2.tag ? null : a2;
}
function ue(a2) {
  if (5 === a2.tag || 6 === a2.tag)
    return a2.stateNode;
  throw Error(p$2(33));
}
function Db(a2) {
  return a2[Pf] || null;
}
var Sf = [], Tf = -1;
function Uf(a2) {
  return { current: a2 };
}
function E$1(a2) {
  0 > Tf || (a2.current = Sf[Tf], Sf[Tf] = null, Tf--);
}
function G$1(a2, b2) {
  Tf++;
  Sf[Tf] = a2.current;
  a2.current = b2;
}
var Vf = {}, H$1 = Uf(Vf), Wf = Uf(false), Xf = Vf;
function Yf(a2, b2) {
  var c2 = a2.type.contextTypes;
  if (!c2)
    return Vf;
  var d2 = a2.stateNode;
  if (d2 && d2.__reactInternalMemoizedUnmaskedChildContext === b2)
    return d2.__reactInternalMemoizedMaskedChildContext;
  var e2 = {}, f2;
  for (f2 in c2)
    e2[f2] = b2[f2];
  d2 && (a2 = a2.stateNode, a2.__reactInternalMemoizedUnmaskedChildContext = b2, a2.__reactInternalMemoizedMaskedChildContext = e2);
  return e2;
}
function Zf(a2) {
  a2 = a2.childContextTypes;
  return null !== a2 && void 0 !== a2;
}
function $f() {
  E$1(Wf);
  E$1(H$1);
}
function ag(a2, b2, c2) {
  if (H$1.current !== Vf)
    throw Error(p$2(168));
  G$1(H$1, b2);
  G$1(Wf, c2);
}
function bg(a2, b2, c2) {
  var d2 = a2.stateNode;
  b2 = b2.childContextTypes;
  if ("function" !== typeof d2.getChildContext)
    return c2;
  d2 = d2.getChildContext();
  for (var e2 in d2)
    if (!(e2 in b2))
      throw Error(p$2(108, Ra(a2) || "Unknown", e2));
  return A$1({}, c2, d2);
}
function cg(a2) {
  a2 = (a2 = a2.stateNode) && a2.__reactInternalMemoizedMergedChildContext || Vf;
  Xf = H$1.current;
  G$1(H$1, a2);
  G$1(Wf, Wf.current);
  return true;
}
function dg(a2, b2, c2) {
  var d2 = a2.stateNode;
  if (!d2)
    throw Error(p$2(169));
  c2 ? (a2 = bg(a2, b2, Xf), d2.__reactInternalMemoizedMergedChildContext = a2, E$1(Wf), E$1(H$1), G$1(H$1, a2)) : E$1(Wf);
  G$1(Wf, c2);
}
var eg = null, fg = false, gg = false;
function hg(a2) {
  null === eg ? eg = [a2] : eg.push(a2);
}
function ig(a2) {
  fg = true;
  hg(a2);
}
function jg() {
  if (!gg && null !== eg) {
    gg = true;
    var a2 = 0, b2 = C$1;
    try {
      var c2 = eg;
      for (C$1 = 1; a2 < c2.length; a2++) {
        var d2 = c2[a2];
        do
          d2 = d2(true);
        while (null !== d2);
      }
      eg = null;
      fg = false;
    } catch (e2) {
      throw null !== eg && (eg = eg.slice(a2 + 1)), ac(fc, jg), e2;
    } finally {
      C$1 = b2, gg = false;
    }
  }
  return null;
}
var kg = [], lg = 0, mg = null, ng = 0, og = [], pg = 0, qg = null, rg = 1, sg = "";
function tg(a2, b2) {
  kg[lg++] = ng;
  kg[lg++] = mg;
  mg = a2;
  ng = b2;
}
function ug(a2, b2, c2) {
  og[pg++] = rg;
  og[pg++] = sg;
  og[pg++] = qg;
  qg = a2;
  var d2 = rg;
  a2 = sg;
  var e2 = 32 - oc(d2) - 1;
  d2 &= ~(1 << e2);
  c2 += 1;
  var f2 = 32 - oc(b2) + e2;
  if (30 < f2) {
    var g2 = e2 - e2 % 5;
    f2 = (d2 & (1 << g2) - 1).toString(32);
    d2 >>= g2;
    e2 -= g2;
    rg = 1 << 32 - oc(b2) + e2 | c2 << e2 | d2;
    sg = f2 + a2;
  } else
    rg = 1 << f2 | c2 << e2 | d2, sg = a2;
}
function vg(a2) {
  null !== a2.return && (tg(a2, 1), ug(a2, 1, 0));
}
function wg(a2) {
  for (; a2 === mg; )
    mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
  for (; a2 === qg; )
    qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
}
var xg = null, yg = null, I$1 = false, zg = null;
function Ag(a2, b2) {
  var c2 = Bg(5, null, null, 0);
  c2.elementType = "DELETED";
  c2.stateNode = b2;
  c2.return = a2;
  b2 = a2.deletions;
  null === b2 ? (a2.deletions = [c2], a2.flags |= 16) : b2.push(c2);
}
function Cg(a2, b2) {
  switch (a2.tag) {
    case 5:
      var c2 = a2.type;
      b2 = 1 !== b2.nodeType || c2.toLowerCase() !== b2.nodeName.toLowerCase() ? null : b2;
      return null !== b2 ? (a2.stateNode = b2, xg = a2, yg = Lf(b2.firstChild), true) : false;
    case 6:
      return b2 = "" === a2.pendingProps || 3 !== b2.nodeType ? null : b2, null !== b2 ? (a2.stateNode = b2, xg = a2, yg = null, true) : false;
    case 13:
      return b2 = 8 !== b2.nodeType ? null : b2, null !== b2 ? (c2 = null !== qg ? { id: rg, overflow: sg } : null, a2.memoizedState = { dehydrated: b2, treeContext: c2, retryLane: 1073741824 }, c2 = Bg(18, null, null, 0), c2.stateNode = b2, c2.return = a2, a2.child = c2, xg = a2, yg = null, true) : false;
    default:
      return false;
  }
}
function Dg(a2) {
  return 0 !== (a2.mode & 1) && 0 === (a2.flags & 128);
}
function Eg(a2) {
  if (I$1) {
    var b2 = yg;
    if (b2) {
      var c2 = b2;
      if (!Cg(a2, b2)) {
        if (Dg(a2))
          throw Error(p$2(418));
        b2 = Lf(c2.nextSibling);
        var d2 = xg;
        b2 && Cg(a2, b2) ? Ag(d2, c2) : (a2.flags = a2.flags & -4097 | 2, I$1 = false, xg = a2);
      }
    } else {
      if (Dg(a2))
        throw Error(p$2(418));
      a2.flags = a2.flags & -4097 | 2;
      I$1 = false;
      xg = a2;
    }
  }
}
function Fg(a2) {
  for (a2 = a2.return; null !== a2 && 5 !== a2.tag && 3 !== a2.tag && 13 !== a2.tag; )
    a2 = a2.return;
  xg = a2;
}
function Gg(a2) {
  if (a2 !== xg)
    return false;
  if (!I$1)
    return Fg(a2), I$1 = true, false;
  var b2;
  (b2 = 3 !== a2.tag) && !(b2 = 5 !== a2.tag) && (b2 = a2.type, b2 = "head" !== b2 && "body" !== b2 && !Ef(a2.type, a2.memoizedProps));
  if (b2 && (b2 = yg)) {
    if (Dg(a2))
      throw Hg(), Error(p$2(418));
    for (; b2; )
      Ag(a2, b2), b2 = Lf(b2.nextSibling);
  }
  Fg(a2);
  if (13 === a2.tag) {
    a2 = a2.memoizedState;
    a2 = null !== a2 ? a2.dehydrated : null;
    if (!a2)
      throw Error(p$2(317));
    a: {
      a2 = a2.nextSibling;
      for (b2 = 0; a2; ) {
        if (8 === a2.nodeType) {
          var c2 = a2.data;
          if ("/$" === c2) {
            if (0 === b2) {
              yg = Lf(a2.nextSibling);
              break a;
            }
            b2--;
          } else
            "$" !== c2 && "$!" !== c2 && "$?" !== c2 || b2++;
        }
        a2 = a2.nextSibling;
      }
      yg = null;
    }
  } else
    yg = xg ? Lf(a2.stateNode.nextSibling) : null;
  return true;
}
function Hg() {
  for (var a2 = yg; a2; )
    a2 = Lf(a2.nextSibling);
}
function Ig() {
  yg = xg = null;
  I$1 = false;
}
function Jg(a2) {
  null === zg ? zg = [a2] : zg.push(a2);
}
var Kg = ua.ReactCurrentBatchConfig;
function Lg(a2, b2, c2) {
  a2 = c2.ref;
  if (null !== a2 && "function" !== typeof a2 && "object" !== typeof a2) {
    if (c2._owner) {
      c2 = c2._owner;
      if (c2) {
        if (1 !== c2.tag)
          throw Error(p$2(309));
        var d2 = c2.stateNode;
      }
      if (!d2)
        throw Error(p$2(147, a2));
      var e2 = d2, f2 = "" + a2;
      if (null !== b2 && null !== b2.ref && "function" === typeof b2.ref && b2.ref._stringRef === f2)
        return b2.ref;
      b2 = function(a3) {
        var b3 = e2.refs;
        null === a3 ? delete b3[f2] : b3[f2] = a3;
      };
      b2._stringRef = f2;
      return b2;
    }
    if ("string" !== typeof a2)
      throw Error(p$2(284));
    if (!c2._owner)
      throw Error(p$2(290, a2));
  }
  return a2;
}
function Mg(a2, b2) {
  a2 = Object.prototype.toString.call(b2);
  throw Error(p$2(31, "[object Object]" === a2 ? "object with keys {" + Object.keys(b2).join(", ") + "}" : a2));
}
function Ng(a2) {
  var b2 = a2._init;
  return b2(a2._payload);
}
function Og(a2) {
  function b2(b3, c3) {
    if (a2) {
      var d3 = b3.deletions;
      null === d3 ? (b3.deletions = [c3], b3.flags |= 16) : d3.push(c3);
    }
  }
  function c2(c3, d3) {
    if (!a2)
      return null;
    for (; null !== d3; )
      b2(c3, d3), d3 = d3.sibling;
    return null;
  }
  function d2(a3, b3) {
    for (a3 = /* @__PURE__ */ new Map(); null !== b3; )
      null !== b3.key ? a3.set(b3.key, b3) : a3.set(b3.index, b3), b3 = b3.sibling;
    return a3;
  }
  function e2(a3, b3) {
    a3 = Pg(a3, b3);
    a3.index = 0;
    a3.sibling = null;
    return a3;
  }
  function f2(b3, c3, d3) {
    b3.index = d3;
    if (!a2)
      return b3.flags |= 1048576, c3;
    d3 = b3.alternate;
    if (null !== d3)
      return d3 = d3.index, d3 < c3 ? (b3.flags |= 2, c3) : d3;
    b3.flags |= 2;
    return c3;
  }
  function g2(b3) {
    a2 && null === b3.alternate && (b3.flags |= 2);
    return b3;
  }
  function h2(a3, b3, c3, d3) {
    if (null === b3 || 6 !== b3.tag)
      return b3 = Qg(c3, a3.mode, d3), b3.return = a3, b3;
    b3 = e2(b3, c3);
    b3.return = a3;
    return b3;
  }
  function k2(a3, b3, c3, d3) {
    var f3 = c3.type;
    if (f3 === ya)
      return m2(a3, b3, c3.props.children, d3, c3.key);
    if (null !== b3 && (b3.elementType === f3 || "object" === typeof f3 && null !== f3 && f3.$$typeof === Ha && Ng(f3) === b3.type))
      return d3 = e2(b3, c3.props), d3.ref = Lg(a3, b3, c3), d3.return = a3, d3;
    d3 = Rg(c3.type, c3.key, c3.props, null, a3.mode, d3);
    d3.ref = Lg(a3, b3, c3);
    d3.return = a3;
    return d3;
  }
  function l2(a3, b3, c3, d3) {
    if (null === b3 || 4 !== b3.tag || b3.stateNode.containerInfo !== c3.containerInfo || b3.stateNode.implementation !== c3.implementation)
      return b3 = Sg(c3, a3.mode, d3), b3.return = a3, b3;
    b3 = e2(b3, c3.children || []);
    b3.return = a3;
    return b3;
  }
  function m2(a3, b3, c3, d3, f3) {
    if (null === b3 || 7 !== b3.tag)
      return b3 = Tg(c3, a3.mode, d3, f3), b3.return = a3, b3;
    b3 = e2(b3, c3);
    b3.return = a3;
    return b3;
  }
  function q2(a3, b3, c3) {
    if ("string" === typeof b3 && "" !== b3 || "number" === typeof b3)
      return b3 = Qg("" + b3, a3.mode, c3), b3.return = a3, b3;
    if ("object" === typeof b3 && null !== b3) {
      switch (b3.$$typeof) {
        case va:
          return c3 = Rg(b3.type, b3.key, b3.props, null, a3.mode, c3), c3.ref = Lg(a3, null, b3), c3.return = a3, c3;
        case wa:
          return b3 = Sg(b3, a3.mode, c3), b3.return = a3, b3;
        case Ha:
          var d3 = b3._init;
          return q2(a3, d3(b3._payload), c3);
      }
      if (eb(b3) || Ka(b3))
        return b3 = Tg(b3, a3.mode, c3, null), b3.return = a3, b3;
      Mg(a3, b3);
    }
    return null;
  }
  function r2(a3, b3, c3, d3) {
    var e3 = null !== b3 ? b3.key : null;
    if ("string" === typeof c3 && "" !== c3 || "number" === typeof c3)
      return null !== e3 ? null : h2(a3, b3, "" + c3, d3);
    if ("object" === typeof c3 && null !== c3) {
      switch (c3.$$typeof) {
        case va:
          return c3.key === e3 ? k2(a3, b3, c3, d3) : null;
        case wa:
          return c3.key === e3 ? l2(a3, b3, c3, d3) : null;
        case Ha:
          return e3 = c3._init, r2(
            a3,
            b3,
            e3(c3._payload),
            d3
          );
      }
      if (eb(c3) || Ka(c3))
        return null !== e3 ? null : m2(a3, b3, c3, d3, null);
      Mg(a3, c3);
    }
    return null;
  }
  function y2(a3, b3, c3, d3, e3) {
    if ("string" === typeof d3 && "" !== d3 || "number" === typeof d3)
      return a3 = a3.get(c3) || null, h2(b3, a3, "" + d3, e3);
    if ("object" === typeof d3 && null !== d3) {
      switch (d3.$$typeof) {
        case va:
          return a3 = a3.get(null === d3.key ? c3 : d3.key) || null, k2(b3, a3, d3, e3);
        case wa:
          return a3 = a3.get(null === d3.key ? c3 : d3.key) || null, l2(b3, a3, d3, e3);
        case Ha:
          var f3 = d3._init;
          return y2(a3, b3, c3, f3(d3._payload), e3);
      }
      if (eb(d3) || Ka(d3))
        return a3 = a3.get(c3) || null, m2(b3, a3, d3, e3, null);
      Mg(b3, d3);
    }
    return null;
  }
  function n2(e3, g3, h3, k3) {
    for (var l3 = null, m3 = null, u2 = g3, w2 = g3 = 0, x2 = null; null !== u2 && w2 < h3.length; w2++) {
      u2.index > w2 ? (x2 = u2, u2 = null) : x2 = u2.sibling;
      var n3 = r2(e3, u2, h3[w2], k3);
      if (null === n3) {
        null === u2 && (u2 = x2);
        break;
      }
      a2 && u2 && null === n3.alternate && b2(e3, u2);
      g3 = f2(n3, g3, w2);
      null === m3 ? l3 = n3 : m3.sibling = n3;
      m3 = n3;
      u2 = x2;
    }
    if (w2 === h3.length)
      return c2(e3, u2), I$1 && tg(e3, w2), l3;
    if (null === u2) {
      for (; w2 < h3.length; w2++)
        u2 = q2(e3, h3[w2], k3), null !== u2 && (g3 = f2(u2, g3, w2), null === m3 ? l3 = u2 : m3.sibling = u2, m3 = u2);
      I$1 && tg(e3, w2);
      return l3;
    }
    for (u2 = d2(e3, u2); w2 < h3.length; w2++)
      x2 = y2(u2, e3, w2, h3[w2], k3), null !== x2 && (a2 && null !== x2.alternate && u2.delete(null === x2.key ? w2 : x2.key), g3 = f2(x2, g3, w2), null === m3 ? l3 = x2 : m3.sibling = x2, m3 = x2);
    a2 && u2.forEach(function(a3) {
      return b2(e3, a3);
    });
    I$1 && tg(e3, w2);
    return l3;
  }
  function t2(e3, g3, h3, k3) {
    var l3 = Ka(h3);
    if ("function" !== typeof l3)
      throw Error(p$2(150));
    h3 = l3.call(h3);
    if (null == h3)
      throw Error(p$2(151));
    for (var u2 = l3 = null, m3 = g3, w2 = g3 = 0, x2 = null, n3 = h3.next(); null !== m3 && !n3.done; w2++, n3 = h3.next()) {
      m3.index > w2 ? (x2 = m3, m3 = null) : x2 = m3.sibling;
      var t3 = r2(e3, m3, n3.value, k3);
      if (null === t3) {
        null === m3 && (m3 = x2);
        break;
      }
      a2 && m3 && null === t3.alternate && b2(e3, m3);
      g3 = f2(t3, g3, w2);
      null === u2 ? l3 = t3 : u2.sibling = t3;
      u2 = t3;
      m3 = x2;
    }
    if (n3.done)
      return c2(
        e3,
        m3
      ), I$1 && tg(e3, w2), l3;
    if (null === m3) {
      for (; !n3.done; w2++, n3 = h3.next())
        n3 = q2(e3, n3.value, k3), null !== n3 && (g3 = f2(n3, g3, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
      I$1 && tg(e3, w2);
      return l3;
    }
    for (m3 = d2(e3, m3); !n3.done; w2++, n3 = h3.next())
      n3 = y2(m3, e3, w2, n3.value, k3), null !== n3 && (a2 && null !== n3.alternate && m3.delete(null === n3.key ? w2 : n3.key), g3 = f2(n3, g3, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
    a2 && m3.forEach(function(a3) {
      return b2(e3, a3);
    });
    I$1 && tg(e3, w2);
    return l3;
  }
  function J2(a3, d3, f3, h3) {
    "object" === typeof f3 && null !== f3 && f3.type === ya && null === f3.key && (f3 = f3.props.children);
    if ("object" === typeof f3 && null !== f3) {
      switch (f3.$$typeof) {
        case va:
          a: {
            for (var k3 = f3.key, l3 = d3; null !== l3; ) {
              if (l3.key === k3) {
                k3 = f3.type;
                if (k3 === ya) {
                  if (7 === l3.tag) {
                    c2(a3, l3.sibling);
                    d3 = e2(l3, f3.props.children);
                    d3.return = a3;
                    a3 = d3;
                    break a;
                  }
                } else if (l3.elementType === k3 || "object" === typeof k3 && null !== k3 && k3.$$typeof === Ha && Ng(k3) === l3.type) {
                  c2(a3, l3.sibling);
                  d3 = e2(l3, f3.props);
                  d3.ref = Lg(a3, l3, f3);
                  d3.return = a3;
                  a3 = d3;
                  break a;
                }
                c2(a3, l3);
                break;
              } else
                b2(a3, l3);
              l3 = l3.sibling;
            }
            f3.type === ya ? (d3 = Tg(f3.props.children, a3.mode, h3, f3.key), d3.return = a3, a3 = d3) : (h3 = Rg(f3.type, f3.key, f3.props, null, a3.mode, h3), h3.ref = Lg(a3, d3, f3), h3.return = a3, a3 = h3);
          }
          return g2(a3);
        case wa:
          a: {
            for (l3 = f3.key; null !== d3; ) {
              if (d3.key === l3)
                if (4 === d3.tag && d3.stateNode.containerInfo === f3.containerInfo && d3.stateNode.implementation === f3.implementation) {
                  c2(a3, d3.sibling);
                  d3 = e2(d3, f3.children || []);
                  d3.return = a3;
                  a3 = d3;
                  break a;
                } else {
                  c2(a3, d3);
                  break;
                }
              else
                b2(a3, d3);
              d3 = d3.sibling;
            }
            d3 = Sg(f3, a3.mode, h3);
            d3.return = a3;
            a3 = d3;
          }
          return g2(a3);
        case Ha:
          return l3 = f3._init, J2(a3, d3, l3(f3._payload), h3);
      }
      if (eb(f3))
        return n2(a3, d3, f3, h3);
      if (Ka(f3))
        return t2(a3, d3, f3, h3);
      Mg(a3, f3);
    }
    return "string" === typeof f3 && "" !== f3 || "number" === typeof f3 ? (f3 = "" + f3, null !== d3 && 6 === d3.tag ? (c2(a3, d3.sibling), d3 = e2(d3, f3), d3.return = a3, a3 = d3) : (c2(a3, d3), d3 = Qg(f3, a3.mode, h3), d3.return = a3, a3 = d3), g2(a3)) : c2(a3, d3);
  }
  return J2;
}
var Ug = Og(true), Vg = Og(false), Wg = Uf(null), Xg = null, Yg = null, Zg = null;
function $g() {
  Zg = Yg = Xg = null;
}
function ah(a2) {
  var b2 = Wg.current;
  E$1(Wg);
  a2._currentValue = b2;
}
function bh(a2, b2, c2) {
  for (; null !== a2; ) {
    var d2 = a2.alternate;
    (a2.childLanes & b2) !== b2 ? (a2.childLanes |= b2, null !== d2 && (d2.childLanes |= b2)) : null !== d2 && (d2.childLanes & b2) !== b2 && (d2.childLanes |= b2);
    if (a2 === c2)
      break;
    a2 = a2.return;
  }
}
function ch(a2, b2) {
  Xg = a2;
  Zg = Yg = null;
  a2 = a2.dependencies;
  null !== a2 && null !== a2.firstContext && (0 !== (a2.lanes & b2) && (dh$1 = true), a2.firstContext = null);
}
function eh(a2) {
  var b2 = a2._currentValue;
  if (Zg !== a2)
    if (a2 = { context: a2, memoizedValue: b2, next: null }, null === Yg) {
      if (null === Xg)
        throw Error(p$2(308));
      Yg = a2;
      Xg.dependencies = { lanes: 0, firstContext: a2 };
    } else
      Yg = Yg.next = a2;
  return b2;
}
var fh = null;
function gh(a2) {
  null === fh ? fh = [a2] : fh.push(a2);
}
function hh(a2, b2, c2, d2) {
  var e2 = b2.interleaved;
  null === e2 ? (c2.next = c2, gh(b2)) : (c2.next = e2.next, e2.next = c2);
  b2.interleaved = c2;
  return ih(a2, d2);
}
function ih(a2, b2) {
  a2.lanes |= b2;
  var c2 = a2.alternate;
  null !== c2 && (c2.lanes |= b2);
  c2 = a2;
  for (a2 = a2.return; null !== a2; )
    a2.childLanes |= b2, c2 = a2.alternate, null !== c2 && (c2.childLanes |= b2), c2 = a2, a2 = a2.return;
  return 3 === c2.tag ? c2.stateNode : null;
}
var jh = false;
function kh(a2) {
  a2.updateQueue = { baseState: a2.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
}
function lh(a2, b2) {
  a2 = a2.updateQueue;
  b2.updateQueue === a2 && (b2.updateQueue = { baseState: a2.baseState, firstBaseUpdate: a2.firstBaseUpdate, lastBaseUpdate: a2.lastBaseUpdate, shared: a2.shared, effects: a2.effects });
}
function mh(a2, b2) {
  return { eventTime: a2, lane: b2, tag: 0, payload: null, callback: null, next: null };
}
function nh(a2, b2, c2) {
  var d2 = a2.updateQueue;
  if (null === d2)
    return null;
  d2 = d2.shared;
  if (0 !== (K$1 & 2)) {
    var e2 = d2.pending;
    null === e2 ? b2.next = b2 : (b2.next = e2.next, e2.next = b2);
    d2.pending = b2;
    return ih(a2, c2);
  }
  e2 = d2.interleaved;
  null === e2 ? (b2.next = b2, gh(d2)) : (b2.next = e2.next, e2.next = b2);
  d2.interleaved = b2;
  return ih(a2, c2);
}
function oh(a2, b2, c2) {
  b2 = b2.updateQueue;
  if (null !== b2 && (b2 = b2.shared, 0 !== (c2 & 4194240))) {
    var d2 = b2.lanes;
    d2 &= a2.pendingLanes;
    c2 |= d2;
    b2.lanes = c2;
    Cc(a2, c2);
  }
}
function ph(a2, b2) {
  var c2 = a2.updateQueue, d2 = a2.alternate;
  if (null !== d2 && (d2 = d2.updateQueue, c2 === d2)) {
    var e2 = null, f2 = null;
    c2 = c2.firstBaseUpdate;
    if (null !== c2) {
      do {
        var g2 = { eventTime: c2.eventTime, lane: c2.lane, tag: c2.tag, payload: c2.payload, callback: c2.callback, next: null };
        null === f2 ? e2 = f2 = g2 : f2 = f2.next = g2;
        c2 = c2.next;
      } while (null !== c2);
      null === f2 ? e2 = f2 = b2 : f2 = f2.next = b2;
    } else
      e2 = f2 = b2;
    c2 = { baseState: d2.baseState, firstBaseUpdate: e2, lastBaseUpdate: f2, shared: d2.shared, effects: d2.effects };
    a2.updateQueue = c2;
    return;
  }
  a2 = c2.lastBaseUpdate;
  null === a2 ? c2.firstBaseUpdate = b2 : a2.next = b2;
  c2.lastBaseUpdate = b2;
}
function qh(a2, b2, c2, d2) {
  var e2 = a2.updateQueue;
  jh = false;
  var f2 = e2.firstBaseUpdate, g2 = e2.lastBaseUpdate, h2 = e2.shared.pending;
  if (null !== h2) {
    e2.shared.pending = null;
    var k2 = h2, l2 = k2.next;
    k2.next = null;
    null === g2 ? f2 = l2 : g2.next = l2;
    g2 = k2;
    var m2 = a2.alternate;
    null !== m2 && (m2 = m2.updateQueue, h2 = m2.lastBaseUpdate, h2 !== g2 && (null === h2 ? m2.firstBaseUpdate = l2 : h2.next = l2, m2.lastBaseUpdate = k2));
  }
  if (null !== f2) {
    var q2 = e2.baseState;
    g2 = 0;
    m2 = l2 = k2 = null;
    h2 = f2;
    do {
      var r2 = h2.lane, y2 = h2.eventTime;
      if ((d2 & r2) === r2) {
        null !== m2 && (m2 = m2.next = {
          eventTime: y2,
          lane: 0,
          tag: h2.tag,
          payload: h2.payload,
          callback: h2.callback,
          next: null
        });
        a: {
          var n2 = a2, t2 = h2;
          r2 = b2;
          y2 = c2;
          switch (t2.tag) {
            case 1:
              n2 = t2.payload;
              if ("function" === typeof n2) {
                q2 = n2.call(y2, q2, r2);
                break a;
              }
              q2 = n2;
              break a;
            case 3:
              n2.flags = n2.flags & -65537 | 128;
            case 0:
              n2 = t2.payload;
              r2 = "function" === typeof n2 ? n2.call(y2, q2, r2) : n2;
              if (null === r2 || void 0 === r2)
                break a;
              q2 = A$1({}, q2, r2);
              break a;
            case 2:
              jh = true;
          }
        }
        null !== h2.callback && 0 !== h2.lane && (a2.flags |= 64, r2 = e2.effects, null === r2 ? e2.effects = [h2] : r2.push(h2));
      } else
        y2 = { eventTime: y2, lane: r2, tag: h2.tag, payload: h2.payload, callback: h2.callback, next: null }, null === m2 ? (l2 = m2 = y2, k2 = q2) : m2 = m2.next = y2, g2 |= r2;
      h2 = h2.next;
      if (null === h2)
        if (h2 = e2.shared.pending, null === h2)
          break;
        else
          r2 = h2, h2 = r2.next, r2.next = null, e2.lastBaseUpdate = r2, e2.shared.pending = null;
    } while (1);
    null === m2 && (k2 = q2);
    e2.baseState = k2;
    e2.firstBaseUpdate = l2;
    e2.lastBaseUpdate = m2;
    b2 = e2.shared.interleaved;
    if (null !== b2) {
      e2 = b2;
      do
        g2 |= e2.lane, e2 = e2.next;
      while (e2 !== b2);
    } else
      null === f2 && (e2.shared.lanes = 0);
    rh |= g2;
    a2.lanes = g2;
    a2.memoizedState = q2;
  }
}
function sh(a2, b2, c2) {
  a2 = b2.effects;
  b2.effects = null;
  if (null !== a2)
    for (b2 = 0; b2 < a2.length; b2++) {
      var d2 = a2[b2], e2 = d2.callback;
      if (null !== e2) {
        d2.callback = null;
        d2 = c2;
        if ("function" !== typeof e2)
          throw Error(p$2(191, e2));
        e2.call(d2);
      }
    }
}
var th = {}, uh = Uf(th), vh = Uf(th), wh = Uf(th);
function xh(a2) {
  if (a2 === th)
    throw Error(p$2(174));
  return a2;
}
function yh(a2, b2) {
  G$1(wh, b2);
  G$1(vh, a2);
  G$1(uh, th);
  a2 = b2.nodeType;
  switch (a2) {
    case 9:
    case 11:
      b2 = (b2 = b2.documentElement) ? b2.namespaceURI : lb(null, "");
      break;
    default:
      a2 = 8 === a2 ? b2.parentNode : b2, b2 = a2.namespaceURI || null, a2 = a2.tagName, b2 = lb(b2, a2);
  }
  E$1(uh);
  G$1(uh, b2);
}
function zh() {
  E$1(uh);
  E$1(vh);
  E$1(wh);
}
function Ah(a2) {
  xh(wh.current);
  var b2 = xh(uh.current);
  var c2 = lb(b2, a2.type);
  b2 !== c2 && (G$1(vh, a2), G$1(uh, c2));
}
function Bh(a2) {
  vh.current === a2 && (E$1(uh), E$1(vh));
}
var L$1 = Uf(0);
function Ch(a2) {
  for (var b2 = a2; null !== b2; ) {
    if (13 === b2.tag) {
      var c2 = b2.memoizedState;
      if (null !== c2 && (c2 = c2.dehydrated, null === c2 || "$?" === c2.data || "$!" === c2.data))
        return b2;
    } else if (19 === b2.tag && void 0 !== b2.memoizedProps.revealOrder) {
      if (0 !== (b2.flags & 128))
        return b2;
    } else if (null !== b2.child) {
      b2.child.return = b2;
      b2 = b2.child;
      continue;
    }
    if (b2 === a2)
      break;
    for (; null === b2.sibling; ) {
      if (null === b2.return || b2.return === a2)
        return null;
      b2 = b2.return;
    }
    b2.sibling.return = b2.return;
    b2 = b2.sibling;
  }
  return null;
}
var Dh = [];
function Eh() {
  for (var a2 = 0; a2 < Dh.length; a2++)
    Dh[a2]._workInProgressVersionPrimary = null;
  Dh.length = 0;
}
var Fh = ua.ReactCurrentDispatcher, Gh = ua.ReactCurrentBatchConfig, Hh = 0, M$1 = null, N$1 = null, O = null, Ih = false, Jh = false, Kh = 0, Lh = 0;
function P$1() {
  throw Error(p$2(321));
}
function Mh(a2, b2) {
  if (null === b2)
    return false;
  for (var c2 = 0; c2 < b2.length && c2 < a2.length; c2++)
    if (!He(a2[c2], b2[c2]))
      return false;
  return true;
}
function Nh(a2, b2, c2, d2, e2, f2) {
  Hh = f2;
  M$1 = b2;
  b2.memoizedState = null;
  b2.updateQueue = null;
  b2.lanes = 0;
  Fh.current = null === a2 || null === a2.memoizedState ? Oh : Ph;
  a2 = c2(d2, e2);
  if (Jh) {
    f2 = 0;
    do {
      Jh = false;
      Kh = 0;
      if (25 <= f2)
        throw Error(p$2(301));
      f2 += 1;
      O = N$1 = null;
      b2.updateQueue = null;
      Fh.current = Qh;
      a2 = c2(d2, e2);
    } while (Jh);
  }
  Fh.current = Rh;
  b2 = null !== N$1 && null !== N$1.next;
  Hh = 0;
  O = N$1 = M$1 = null;
  Ih = false;
  if (b2)
    throw Error(p$2(300));
  return a2;
}
function Sh() {
  var a2 = 0 !== Kh;
  Kh = 0;
  return a2;
}
function Th() {
  var a2 = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
  null === O ? M$1.memoizedState = O = a2 : O = O.next = a2;
  return O;
}
function Uh() {
  if (null === N$1) {
    var a2 = M$1.alternate;
    a2 = null !== a2 ? a2.memoizedState : null;
  } else
    a2 = N$1.next;
  var b2 = null === O ? M$1.memoizedState : O.next;
  if (null !== b2)
    O = b2, N$1 = a2;
  else {
    if (null === a2)
      throw Error(p$2(310));
    N$1 = a2;
    a2 = { memoizedState: N$1.memoizedState, baseState: N$1.baseState, baseQueue: N$1.baseQueue, queue: N$1.queue, next: null };
    null === O ? M$1.memoizedState = O = a2 : O = O.next = a2;
  }
  return O;
}
function Vh(a2, b2) {
  return "function" === typeof b2 ? b2(a2) : b2;
}
function Wh(a2) {
  var b2 = Uh(), c2 = b2.queue;
  if (null === c2)
    throw Error(p$2(311));
  c2.lastRenderedReducer = a2;
  var d2 = N$1, e2 = d2.baseQueue, f2 = c2.pending;
  if (null !== f2) {
    if (null !== e2) {
      var g2 = e2.next;
      e2.next = f2.next;
      f2.next = g2;
    }
    d2.baseQueue = e2 = f2;
    c2.pending = null;
  }
  if (null !== e2) {
    f2 = e2.next;
    d2 = d2.baseState;
    var h2 = g2 = null, k2 = null, l2 = f2;
    do {
      var m2 = l2.lane;
      if ((Hh & m2) === m2)
        null !== k2 && (k2 = k2.next = { lane: 0, action: l2.action, hasEagerState: l2.hasEagerState, eagerState: l2.eagerState, next: null }), d2 = l2.hasEagerState ? l2.eagerState : a2(d2, l2.action);
      else {
        var q2 = {
          lane: m2,
          action: l2.action,
          hasEagerState: l2.hasEagerState,
          eagerState: l2.eagerState,
          next: null
        };
        null === k2 ? (h2 = k2 = q2, g2 = d2) : k2 = k2.next = q2;
        M$1.lanes |= m2;
        rh |= m2;
      }
      l2 = l2.next;
    } while (null !== l2 && l2 !== f2);
    null === k2 ? g2 = d2 : k2.next = h2;
    He(d2, b2.memoizedState) || (dh$1 = true);
    b2.memoizedState = d2;
    b2.baseState = g2;
    b2.baseQueue = k2;
    c2.lastRenderedState = d2;
  }
  a2 = c2.interleaved;
  if (null !== a2) {
    e2 = a2;
    do
      f2 = e2.lane, M$1.lanes |= f2, rh |= f2, e2 = e2.next;
    while (e2 !== a2);
  } else
    null === e2 && (c2.lanes = 0);
  return [b2.memoizedState, c2.dispatch];
}
function Xh(a2) {
  var b2 = Uh(), c2 = b2.queue;
  if (null === c2)
    throw Error(p$2(311));
  c2.lastRenderedReducer = a2;
  var d2 = c2.dispatch, e2 = c2.pending, f2 = b2.memoizedState;
  if (null !== e2) {
    c2.pending = null;
    var g2 = e2 = e2.next;
    do
      f2 = a2(f2, g2.action), g2 = g2.next;
    while (g2 !== e2);
    He(f2, b2.memoizedState) || (dh$1 = true);
    b2.memoizedState = f2;
    null === b2.baseQueue && (b2.baseState = f2);
    c2.lastRenderedState = f2;
  }
  return [f2, d2];
}
function Yh() {
}
function Zh(a2, b2) {
  var c2 = M$1, d2 = Uh(), e2 = b2(), f2 = !He(d2.memoizedState, e2);
  f2 && (d2.memoizedState = e2, dh$1 = true);
  d2 = d2.queue;
  $h(ai.bind(null, c2, d2, a2), [a2]);
  if (d2.getSnapshot !== b2 || f2 || null !== O && O.memoizedState.tag & 1) {
    c2.flags |= 2048;
    bi(9, ci.bind(null, c2, d2, e2, b2), void 0, null);
    if (null === Q$1)
      throw Error(p$2(349));
    0 !== (Hh & 30) || di(c2, b2, e2);
  }
  return e2;
}
function di(a2, b2, c2) {
  a2.flags |= 16384;
  a2 = { getSnapshot: b2, value: c2 };
  b2 = M$1.updateQueue;
  null === b2 ? (b2 = { lastEffect: null, stores: null }, M$1.updateQueue = b2, b2.stores = [a2]) : (c2 = b2.stores, null === c2 ? b2.stores = [a2] : c2.push(a2));
}
function ci(a2, b2, c2, d2) {
  b2.value = c2;
  b2.getSnapshot = d2;
  ei(b2) && fi(a2);
}
function ai(a2, b2, c2) {
  return c2(function() {
    ei(b2) && fi(a2);
  });
}
function ei(a2) {
  var b2 = a2.getSnapshot;
  a2 = a2.value;
  try {
    var c2 = b2();
    return !He(a2, c2);
  } catch (d2) {
    return true;
  }
}
function fi(a2) {
  var b2 = ih(a2, 1);
  null !== b2 && gi(b2, a2, 1, -1);
}
function hi(a2) {
  var b2 = Th();
  "function" === typeof a2 && (a2 = a2());
  b2.memoizedState = b2.baseState = a2;
  a2 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: Vh, lastRenderedState: a2 };
  b2.queue = a2;
  a2 = a2.dispatch = ii.bind(null, M$1, a2);
  return [b2.memoizedState, a2];
}
function bi(a2, b2, c2, d2) {
  a2 = { tag: a2, create: b2, destroy: c2, deps: d2, next: null };
  b2 = M$1.updateQueue;
  null === b2 ? (b2 = { lastEffect: null, stores: null }, M$1.updateQueue = b2, b2.lastEffect = a2.next = a2) : (c2 = b2.lastEffect, null === c2 ? b2.lastEffect = a2.next = a2 : (d2 = c2.next, c2.next = a2, a2.next = d2, b2.lastEffect = a2));
  return a2;
}
function ji() {
  return Uh().memoizedState;
}
function ki(a2, b2, c2, d2) {
  var e2 = Th();
  M$1.flags |= a2;
  e2.memoizedState = bi(1 | b2, c2, void 0, void 0 === d2 ? null : d2);
}
function li(a2, b2, c2, d2) {
  var e2 = Uh();
  d2 = void 0 === d2 ? null : d2;
  var f2 = void 0;
  if (null !== N$1) {
    var g2 = N$1.memoizedState;
    f2 = g2.destroy;
    if (null !== d2 && Mh(d2, g2.deps)) {
      e2.memoizedState = bi(b2, c2, f2, d2);
      return;
    }
  }
  M$1.flags |= a2;
  e2.memoizedState = bi(1 | b2, c2, f2, d2);
}
function mi(a2, b2) {
  return ki(8390656, 8, a2, b2);
}
function $h(a2, b2) {
  return li(2048, 8, a2, b2);
}
function ni(a2, b2) {
  return li(4, 2, a2, b2);
}
function oi(a2, b2) {
  return li(4, 4, a2, b2);
}
function pi(a2, b2) {
  if ("function" === typeof b2)
    return a2 = a2(), b2(a2), function() {
      b2(null);
    };
  if (null !== b2 && void 0 !== b2)
    return a2 = a2(), b2.current = a2, function() {
      b2.current = null;
    };
}
function qi(a2, b2, c2) {
  c2 = null !== c2 && void 0 !== c2 ? c2.concat([a2]) : null;
  return li(4, 4, pi.bind(null, b2, a2), c2);
}
function ri() {
}
function si(a2, b2) {
  var c2 = Uh();
  b2 = void 0 === b2 ? null : b2;
  var d2 = c2.memoizedState;
  if (null !== d2 && null !== b2 && Mh(b2, d2[1]))
    return d2[0];
  c2.memoizedState = [a2, b2];
  return a2;
}
function ti(a2, b2) {
  var c2 = Uh();
  b2 = void 0 === b2 ? null : b2;
  var d2 = c2.memoizedState;
  if (null !== d2 && null !== b2 && Mh(b2, d2[1]))
    return d2[0];
  a2 = a2();
  c2.memoizedState = [a2, b2];
  return a2;
}
function ui(a2, b2, c2) {
  if (0 === (Hh & 21))
    return a2.baseState && (a2.baseState = false, dh$1 = true), a2.memoizedState = c2;
  He(c2, b2) || (c2 = yc(), M$1.lanes |= c2, rh |= c2, a2.baseState = true);
  return b2;
}
function vi(a2, b2) {
  var c2 = C$1;
  C$1 = 0 !== c2 && 4 > c2 ? c2 : 4;
  a2(true);
  var d2 = Gh.transition;
  Gh.transition = {};
  try {
    a2(false), b2();
  } finally {
    C$1 = c2, Gh.transition = d2;
  }
}
function wi() {
  return Uh().memoizedState;
}
function xi(a2, b2, c2) {
  var d2 = yi(a2);
  c2 = { lane: d2, action: c2, hasEagerState: false, eagerState: null, next: null };
  if (zi(a2))
    Ai(b2, c2);
  else if (c2 = hh(a2, b2, c2, d2), null !== c2) {
    var e2 = R();
    gi(c2, a2, d2, e2);
    Bi(c2, b2, d2);
  }
}
function ii(a2, b2, c2) {
  var d2 = yi(a2), e2 = { lane: d2, action: c2, hasEagerState: false, eagerState: null, next: null };
  if (zi(a2))
    Ai(b2, e2);
  else {
    var f2 = a2.alternate;
    if (0 === a2.lanes && (null === f2 || 0 === f2.lanes) && (f2 = b2.lastRenderedReducer, null !== f2))
      try {
        var g2 = b2.lastRenderedState, h2 = f2(g2, c2);
        e2.hasEagerState = true;
        e2.eagerState = h2;
        if (He(h2, g2)) {
          var k2 = b2.interleaved;
          null === k2 ? (e2.next = e2, gh(b2)) : (e2.next = k2.next, k2.next = e2);
          b2.interleaved = e2;
          return;
        }
      } catch (l2) {
      } finally {
      }
    c2 = hh(a2, b2, e2, d2);
    null !== c2 && (e2 = R(), gi(c2, a2, d2, e2), Bi(c2, b2, d2));
  }
}
function zi(a2) {
  var b2 = a2.alternate;
  return a2 === M$1 || null !== b2 && b2 === M$1;
}
function Ai(a2, b2) {
  Jh = Ih = true;
  var c2 = a2.pending;
  null === c2 ? b2.next = b2 : (b2.next = c2.next, c2.next = b2);
  a2.pending = b2;
}
function Bi(a2, b2, c2) {
  if (0 !== (c2 & 4194240)) {
    var d2 = b2.lanes;
    d2 &= a2.pendingLanes;
    c2 |= d2;
    b2.lanes = c2;
    Cc(a2, c2);
  }
}
var Rh = { readContext: eh, useCallback: P$1, useContext: P$1, useEffect: P$1, useImperativeHandle: P$1, useInsertionEffect: P$1, useLayoutEffect: P$1, useMemo: P$1, useReducer: P$1, useRef: P$1, useState: P$1, useDebugValue: P$1, useDeferredValue: P$1, useTransition: P$1, useMutableSource: P$1, useSyncExternalStore: P$1, useId: P$1, unstable_isNewReconciler: false }, Oh = { readContext: eh, useCallback: function(a2, b2) {
  Th().memoizedState = [a2, void 0 === b2 ? null : b2];
  return a2;
}, useContext: eh, useEffect: mi, useImperativeHandle: function(a2, b2, c2) {
  c2 = null !== c2 && void 0 !== c2 ? c2.concat([a2]) : null;
  return ki(
    4194308,
    4,
    pi.bind(null, b2, a2),
    c2
  );
}, useLayoutEffect: function(a2, b2) {
  return ki(4194308, 4, a2, b2);
}, useInsertionEffect: function(a2, b2) {
  return ki(4, 2, a2, b2);
}, useMemo: function(a2, b2) {
  var c2 = Th();
  b2 = void 0 === b2 ? null : b2;
  a2 = a2();
  c2.memoizedState = [a2, b2];
  return a2;
}, useReducer: function(a2, b2, c2) {
  var d2 = Th();
  b2 = void 0 !== c2 ? c2(b2) : b2;
  d2.memoizedState = d2.baseState = b2;
  a2 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a2, lastRenderedState: b2 };
  d2.queue = a2;
  a2 = a2.dispatch = xi.bind(null, M$1, a2);
  return [d2.memoizedState, a2];
}, useRef: function(a2) {
  var b2 = Th();
  a2 = { current: a2 };
  return b2.memoizedState = a2;
}, useState: hi, useDebugValue: ri, useDeferredValue: function(a2) {
  return Th().memoizedState = a2;
}, useTransition: function() {
  var a2 = hi(false), b2 = a2[0];
  a2 = vi.bind(null, a2[1]);
  Th().memoizedState = a2;
  return [b2, a2];
}, useMutableSource: function() {
}, useSyncExternalStore: function(a2, b2, c2) {
  var d2 = M$1, e2 = Th();
  if (I$1) {
    if (void 0 === c2)
      throw Error(p$2(407));
    c2 = c2();
  } else {
    c2 = b2();
    if (null === Q$1)
      throw Error(p$2(349));
    0 !== (Hh & 30) || di(d2, b2, c2);
  }
  e2.memoizedState = c2;
  var f2 = { value: c2, getSnapshot: b2 };
  e2.queue = f2;
  mi(ai.bind(
    null,
    d2,
    f2,
    a2
  ), [a2]);
  d2.flags |= 2048;
  bi(9, ci.bind(null, d2, f2, c2, b2), void 0, null);
  return c2;
}, useId: function() {
  var a2 = Th(), b2 = Q$1.identifierPrefix;
  if (I$1) {
    var c2 = sg;
    var d2 = rg;
    c2 = (d2 & ~(1 << 32 - oc(d2) - 1)).toString(32) + c2;
    b2 = ":" + b2 + "R" + c2;
    c2 = Kh++;
    0 < c2 && (b2 += "H" + c2.toString(32));
    b2 += ":";
  } else
    c2 = Lh++, b2 = ":" + b2 + "r" + c2.toString(32) + ":";
  return a2.memoizedState = b2;
}, unstable_isNewReconciler: false }, Ph = {
  readContext: eh,
  useCallback: si,
  useContext: eh,
  useEffect: $h,
  useImperativeHandle: qi,
  useInsertionEffect: ni,
  useLayoutEffect: oi,
  useMemo: ti,
  useReducer: Wh,
  useRef: ji,
  useState: function() {
    return Wh(Vh);
  },
  useDebugValue: ri,
  useDeferredValue: function(a2) {
    var b2 = Uh();
    return ui(b2, N$1.memoizedState, a2);
  },
  useTransition: function() {
    var a2 = Wh(Vh)[0], b2 = Uh().memoizedState;
    return [a2, b2];
  },
  useMutableSource: Yh,
  useSyncExternalStore: Zh,
  useId: wi,
  unstable_isNewReconciler: false
}, Qh = { readContext: eh, useCallback: si, useContext: eh, useEffect: $h, useImperativeHandle: qi, useInsertionEffect: ni, useLayoutEffect: oi, useMemo: ti, useReducer: Xh, useRef: ji, useState: function() {
  return Xh(Vh);
}, useDebugValue: ri, useDeferredValue: function(a2) {
  var b2 = Uh();
  return null === N$1 ? b2.memoizedState = a2 : ui(b2, N$1.memoizedState, a2);
}, useTransition: function() {
  var a2 = Xh(Vh)[0], b2 = Uh().memoizedState;
  return [a2, b2];
}, useMutableSource: Yh, useSyncExternalStore: Zh, useId: wi, unstable_isNewReconciler: false };
function Ci(a2, b2) {
  if (a2 && a2.defaultProps) {
    b2 = A$1({}, b2);
    a2 = a2.defaultProps;
    for (var c2 in a2)
      void 0 === b2[c2] && (b2[c2] = a2[c2]);
    return b2;
  }
  return b2;
}
function Di(a2, b2, c2, d2) {
  b2 = a2.memoizedState;
  c2 = c2(d2, b2);
  c2 = null === c2 || void 0 === c2 ? b2 : A$1({}, b2, c2);
  a2.memoizedState = c2;
  0 === a2.lanes && (a2.updateQueue.baseState = c2);
}
var Ei = { isMounted: function(a2) {
  return (a2 = a2._reactInternals) ? Vb(a2) === a2 : false;
}, enqueueSetState: function(a2, b2, c2) {
  a2 = a2._reactInternals;
  var d2 = R(), e2 = yi(a2), f2 = mh(d2, e2);
  f2.payload = b2;
  void 0 !== c2 && null !== c2 && (f2.callback = c2);
  b2 = nh(a2, f2, e2);
  null !== b2 && (gi(b2, a2, e2, d2), oh(b2, a2, e2));
}, enqueueReplaceState: function(a2, b2, c2) {
  a2 = a2._reactInternals;
  var d2 = R(), e2 = yi(a2), f2 = mh(d2, e2);
  f2.tag = 1;
  f2.payload = b2;
  void 0 !== c2 && null !== c2 && (f2.callback = c2);
  b2 = nh(a2, f2, e2);
  null !== b2 && (gi(b2, a2, e2, d2), oh(b2, a2, e2));
}, enqueueForceUpdate: function(a2, b2) {
  a2 = a2._reactInternals;
  var c2 = R(), d2 = yi(a2), e2 = mh(c2, d2);
  e2.tag = 2;
  void 0 !== b2 && null !== b2 && (e2.callback = b2);
  b2 = nh(a2, e2, d2);
  null !== b2 && (gi(b2, a2, d2, c2), oh(b2, a2, d2));
} };
function Fi(a2, b2, c2, d2, e2, f2, g2) {
  a2 = a2.stateNode;
  return "function" === typeof a2.shouldComponentUpdate ? a2.shouldComponentUpdate(d2, f2, g2) : b2.prototype && b2.prototype.isPureReactComponent ? !Ie(c2, d2) || !Ie(e2, f2) : true;
}
function Gi(a2, b2, c2) {
  var d2 = false, e2 = Vf;
  var f2 = b2.contextType;
  "object" === typeof f2 && null !== f2 ? f2 = eh(f2) : (e2 = Zf(b2) ? Xf : H$1.current, d2 = b2.contextTypes, f2 = (d2 = null !== d2 && void 0 !== d2) ? Yf(a2, e2) : Vf);
  b2 = new b2(c2, f2);
  a2.memoizedState = null !== b2.state && void 0 !== b2.state ? b2.state : null;
  b2.updater = Ei;
  a2.stateNode = b2;
  b2._reactInternals = a2;
  d2 && (a2 = a2.stateNode, a2.__reactInternalMemoizedUnmaskedChildContext = e2, a2.__reactInternalMemoizedMaskedChildContext = f2);
  return b2;
}
function Hi(a2, b2, c2, d2) {
  a2 = b2.state;
  "function" === typeof b2.componentWillReceiveProps && b2.componentWillReceiveProps(c2, d2);
  "function" === typeof b2.UNSAFE_componentWillReceiveProps && b2.UNSAFE_componentWillReceiveProps(c2, d2);
  b2.state !== a2 && Ei.enqueueReplaceState(b2, b2.state, null);
}
function Ii(a2, b2, c2, d2) {
  var e2 = a2.stateNode;
  e2.props = c2;
  e2.state = a2.memoizedState;
  e2.refs = {};
  kh(a2);
  var f2 = b2.contextType;
  "object" === typeof f2 && null !== f2 ? e2.context = eh(f2) : (f2 = Zf(b2) ? Xf : H$1.current, e2.context = Yf(a2, f2));
  e2.state = a2.memoizedState;
  f2 = b2.getDerivedStateFromProps;
  "function" === typeof f2 && (Di(a2, b2, f2, c2), e2.state = a2.memoizedState);
  "function" === typeof b2.getDerivedStateFromProps || "function" === typeof e2.getSnapshotBeforeUpdate || "function" !== typeof e2.UNSAFE_componentWillMount && "function" !== typeof e2.componentWillMount || (b2 = e2.state, "function" === typeof e2.componentWillMount && e2.componentWillMount(), "function" === typeof e2.UNSAFE_componentWillMount && e2.UNSAFE_componentWillMount(), b2 !== e2.state && Ei.enqueueReplaceState(e2, e2.state, null), qh(a2, c2, e2, d2), e2.state = a2.memoizedState);
  "function" === typeof e2.componentDidMount && (a2.flags |= 4194308);
}
function Ji(a2, b2) {
  try {
    var c2 = "", d2 = b2;
    do
      c2 += Pa(d2), d2 = d2.return;
    while (d2);
    var e2 = c2;
  } catch (f2) {
    e2 = "\nError generating stack: " + f2.message + "\n" + f2.stack;
  }
  return { value: a2, source: b2, stack: e2, digest: null };
}
function Ki(a2, b2, c2) {
  return { value: a2, source: null, stack: null != c2 ? c2 : null, digest: null != b2 ? b2 : null };
}
function Li(a2, b2) {
  try {
    console.error(b2.value);
  } catch (c2) {
    setTimeout(function() {
      throw c2;
    });
  }
}
var Mi = "function" === typeof WeakMap ? WeakMap : Map;
function Ni(a2, b2, c2) {
  c2 = mh(-1, c2);
  c2.tag = 3;
  c2.payload = { element: null };
  var d2 = b2.value;
  c2.callback = function() {
    Oi || (Oi = true, Pi = d2);
    Li(a2, b2);
  };
  return c2;
}
function Qi(a2, b2, c2) {
  c2 = mh(-1, c2);
  c2.tag = 3;
  var d2 = a2.type.getDerivedStateFromError;
  if ("function" === typeof d2) {
    var e2 = b2.value;
    c2.payload = function() {
      return d2(e2);
    };
    c2.callback = function() {
      Li(a2, b2);
    };
  }
  var f2 = a2.stateNode;
  null !== f2 && "function" === typeof f2.componentDidCatch && (c2.callback = function() {
    Li(a2, b2);
    "function" !== typeof d2 && (null === Ri ? Ri = /* @__PURE__ */ new Set([this]) : Ri.add(this));
    var c3 = b2.stack;
    this.componentDidCatch(b2.value, { componentStack: null !== c3 ? c3 : "" });
  });
  return c2;
}
function Si(a2, b2, c2) {
  var d2 = a2.pingCache;
  if (null === d2) {
    d2 = a2.pingCache = new Mi();
    var e2 = /* @__PURE__ */ new Set();
    d2.set(b2, e2);
  } else
    e2 = d2.get(b2), void 0 === e2 && (e2 = /* @__PURE__ */ new Set(), d2.set(b2, e2));
  e2.has(c2) || (e2.add(c2), a2 = Ti.bind(null, a2, b2, c2), b2.then(a2, a2));
}
function Ui(a2) {
  do {
    var b2;
    if (b2 = 13 === a2.tag)
      b2 = a2.memoizedState, b2 = null !== b2 ? null !== b2.dehydrated ? true : false : true;
    if (b2)
      return a2;
    a2 = a2.return;
  } while (null !== a2);
  return null;
}
function Vi(a2, b2, c2, d2, e2) {
  if (0 === (a2.mode & 1))
    return a2 === b2 ? a2.flags |= 65536 : (a2.flags |= 128, c2.flags |= 131072, c2.flags &= -52805, 1 === c2.tag && (null === c2.alternate ? c2.tag = 17 : (b2 = mh(-1, 1), b2.tag = 2, nh(c2, b2, 1))), c2.lanes |= 1), a2;
  a2.flags |= 65536;
  a2.lanes = e2;
  return a2;
}
var Wi = ua.ReactCurrentOwner, dh$1 = false;
function Xi(a2, b2, c2, d2) {
  b2.child = null === a2 ? Vg(b2, null, c2, d2) : Ug(b2, a2.child, c2, d2);
}
function Yi(a2, b2, c2, d2, e2) {
  c2 = c2.render;
  var f2 = b2.ref;
  ch(b2, e2);
  d2 = Nh(a2, b2, c2, d2, f2, e2);
  c2 = Sh();
  if (null !== a2 && !dh$1)
    return b2.updateQueue = a2.updateQueue, b2.flags &= -2053, a2.lanes &= ~e2, Zi(a2, b2, e2);
  I$1 && c2 && vg(b2);
  b2.flags |= 1;
  Xi(a2, b2, d2, e2);
  return b2.child;
}
function $i(a2, b2, c2, d2, e2) {
  if (null === a2) {
    var f2 = c2.type;
    if ("function" === typeof f2 && !aj(f2) && void 0 === f2.defaultProps && null === c2.compare && void 0 === c2.defaultProps)
      return b2.tag = 15, b2.type = f2, bj(a2, b2, f2, d2, e2);
    a2 = Rg(c2.type, null, d2, b2, b2.mode, e2);
    a2.ref = b2.ref;
    a2.return = b2;
    return b2.child = a2;
  }
  f2 = a2.child;
  if (0 === (a2.lanes & e2)) {
    var g2 = f2.memoizedProps;
    c2 = c2.compare;
    c2 = null !== c2 ? c2 : Ie;
    if (c2(g2, d2) && a2.ref === b2.ref)
      return Zi(a2, b2, e2);
  }
  b2.flags |= 1;
  a2 = Pg(f2, d2);
  a2.ref = b2.ref;
  a2.return = b2;
  return b2.child = a2;
}
function bj(a2, b2, c2, d2, e2) {
  if (null !== a2) {
    var f2 = a2.memoizedProps;
    if (Ie(f2, d2) && a2.ref === b2.ref)
      if (dh$1 = false, b2.pendingProps = d2 = f2, 0 !== (a2.lanes & e2))
        0 !== (a2.flags & 131072) && (dh$1 = true);
      else
        return b2.lanes = a2.lanes, Zi(a2, b2, e2);
  }
  return cj(a2, b2, c2, d2, e2);
}
function dj(a2, b2, c2) {
  var d2 = b2.pendingProps, e2 = d2.children, f2 = null !== a2 ? a2.memoizedState : null;
  if ("hidden" === d2.mode)
    if (0 === (b2.mode & 1))
      b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G$1(ej, fj), fj |= c2;
    else {
      if (0 === (c2 & 1073741824))
        return a2 = null !== f2 ? f2.baseLanes | c2 : c2, b2.lanes = b2.childLanes = 1073741824, b2.memoizedState = { baseLanes: a2, cachePool: null, transitions: null }, b2.updateQueue = null, G$1(ej, fj), fj |= a2, null;
      b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
      d2 = null !== f2 ? f2.baseLanes : c2;
      G$1(ej, fj);
      fj |= d2;
    }
  else
    null !== f2 ? (d2 = f2.baseLanes | c2, b2.memoizedState = null) : d2 = c2, G$1(ej, fj), fj |= d2;
  Xi(a2, b2, e2, c2);
  return b2.child;
}
function gj(a2, b2) {
  var c2 = b2.ref;
  if (null === a2 && null !== c2 || null !== a2 && a2.ref !== c2)
    b2.flags |= 512, b2.flags |= 2097152;
}
function cj(a2, b2, c2, d2, e2) {
  var f2 = Zf(c2) ? Xf : H$1.current;
  f2 = Yf(b2, f2);
  ch(b2, e2);
  c2 = Nh(a2, b2, c2, d2, f2, e2);
  d2 = Sh();
  if (null !== a2 && !dh$1)
    return b2.updateQueue = a2.updateQueue, b2.flags &= -2053, a2.lanes &= ~e2, Zi(a2, b2, e2);
  I$1 && d2 && vg(b2);
  b2.flags |= 1;
  Xi(a2, b2, c2, e2);
  return b2.child;
}
function hj(a2, b2, c2, d2, e2) {
  if (Zf(c2)) {
    var f2 = true;
    cg(b2);
  } else
    f2 = false;
  ch(b2, e2);
  if (null === b2.stateNode)
    ij(a2, b2), Gi(b2, c2, d2), Ii(b2, c2, d2, e2), d2 = true;
  else if (null === a2) {
    var g2 = b2.stateNode, h2 = b2.memoizedProps;
    g2.props = h2;
    var k2 = g2.context, l2 = c2.contextType;
    "object" === typeof l2 && null !== l2 ? l2 = eh(l2) : (l2 = Zf(c2) ? Xf : H$1.current, l2 = Yf(b2, l2));
    var m2 = c2.getDerivedStateFromProps, q2 = "function" === typeof m2 || "function" === typeof g2.getSnapshotBeforeUpdate;
    q2 || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== d2 || k2 !== l2) && Hi(b2, g2, d2, l2);
    jh = false;
    var r2 = b2.memoizedState;
    g2.state = r2;
    qh(b2, d2, g2, e2);
    k2 = b2.memoizedState;
    h2 !== d2 || r2 !== k2 || Wf.current || jh ? ("function" === typeof m2 && (Di(b2, c2, m2, d2), k2 = b2.memoizedState), (h2 = jh || Fi(b2, c2, h2, d2, r2, k2, l2)) ? (q2 || "function" !== typeof g2.UNSAFE_componentWillMount && "function" !== typeof g2.componentWillMount || ("function" === typeof g2.componentWillMount && g2.componentWillMount(), "function" === typeof g2.UNSAFE_componentWillMount && g2.UNSAFE_componentWillMount()), "function" === typeof g2.componentDidMount && (b2.flags |= 4194308)) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), b2.memoizedProps = d2, b2.memoizedState = k2), g2.props = d2, g2.state = k2, g2.context = l2, d2 = h2) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), d2 = false);
  } else {
    g2 = b2.stateNode;
    lh(a2, b2);
    h2 = b2.memoizedProps;
    l2 = b2.type === b2.elementType ? h2 : Ci(b2.type, h2);
    g2.props = l2;
    q2 = b2.pendingProps;
    r2 = g2.context;
    k2 = c2.contextType;
    "object" === typeof k2 && null !== k2 ? k2 = eh(k2) : (k2 = Zf(c2) ? Xf : H$1.current, k2 = Yf(b2, k2));
    var y2 = c2.getDerivedStateFromProps;
    (m2 = "function" === typeof y2 || "function" === typeof g2.getSnapshotBeforeUpdate) || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== q2 || r2 !== k2) && Hi(b2, g2, d2, k2);
    jh = false;
    r2 = b2.memoizedState;
    g2.state = r2;
    qh(b2, d2, g2, e2);
    var n2 = b2.memoizedState;
    h2 !== q2 || r2 !== n2 || Wf.current || jh ? ("function" === typeof y2 && (Di(b2, c2, y2, d2), n2 = b2.memoizedState), (l2 = jh || Fi(b2, c2, l2, d2, r2, n2, k2) || false) ? (m2 || "function" !== typeof g2.UNSAFE_componentWillUpdate && "function" !== typeof g2.componentWillUpdate || ("function" === typeof g2.componentWillUpdate && g2.componentWillUpdate(d2, n2, k2), "function" === typeof g2.UNSAFE_componentWillUpdate && g2.UNSAFE_componentWillUpdate(d2, n2, k2)), "function" === typeof g2.componentDidUpdate && (b2.flags |= 4), "function" === typeof g2.getSnapshotBeforeUpdate && (b2.flags |= 1024)) : ("function" !== typeof g2.componentDidUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 1024), b2.memoizedProps = d2, b2.memoizedState = n2), g2.props = d2, g2.state = n2, g2.context = k2, d2 = l2) : ("function" !== typeof g2.componentDidUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 1024), d2 = false);
  }
  return jj(a2, b2, c2, d2, f2, e2);
}
function jj(a2, b2, c2, d2, e2, f2) {
  gj(a2, b2);
  var g2 = 0 !== (b2.flags & 128);
  if (!d2 && !g2)
    return e2 && dg(b2, c2, false), Zi(a2, b2, f2);
  d2 = b2.stateNode;
  Wi.current = b2;
  var h2 = g2 && "function" !== typeof c2.getDerivedStateFromError ? null : d2.render();
  b2.flags |= 1;
  null !== a2 && g2 ? (b2.child = Ug(b2, a2.child, null, f2), b2.child = Ug(b2, null, h2, f2)) : Xi(a2, b2, h2, f2);
  b2.memoizedState = d2.state;
  e2 && dg(b2, c2, true);
  return b2.child;
}
function kj(a2) {
  var b2 = a2.stateNode;
  b2.pendingContext ? ag(a2, b2.pendingContext, b2.pendingContext !== b2.context) : b2.context && ag(a2, b2.context, false);
  yh(a2, b2.containerInfo);
}
function lj(a2, b2, c2, d2, e2) {
  Ig();
  Jg(e2);
  b2.flags |= 256;
  Xi(a2, b2, c2, d2);
  return b2.child;
}
var mj = { dehydrated: null, treeContext: null, retryLane: 0 };
function nj(a2) {
  return { baseLanes: a2, cachePool: null, transitions: null };
}
function oj(a2, b2, c2) {
  var d2 = b2.pendingProps, e2 = L$1.current, f2 = false, g2 = 0 !== (b2.flags & 128), h2;
  (h2 = g2) || (h2 = null !== a2 && null === a2.memoizedState ? false : 0 !== (e2 & 2));
  if (h2)
    f2 = true, b2.flags &= -129;
  else if (null === a2 || null !== a2.memoizedState)
    e2 |= 1;
  G$1(L$1, e2 & 1);
  if (null === a2) {
    Eg(b2);
    a2 = b2.memoizedState;
    if (null !== a2 && (a2 = a2.dehydrated, null !== a2))
      return 0 === (b2.mode & 1) ? b2.lanes = 1 : "$!" === a2.data ? b2.lanes = 8 : b2.lanes = 1073741824, null;
    g2 = d2.children;
    a2 = d2.fallback;
    return f2 ? (d2 = b2.mode, f2 = b2.child, g2 = { mode: "hidden", children: g2 }, 0 === (d2 & 1) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = g2) : f2 = pj(g2, d2, 0, null), a2 = Tg(a2, d2, c2, null), f2.return = b2, a2.return = b2, f2.sibling = a2, b2.child = f2, b2.child.memoizedState = nj(c2), b2.memoizedState = mj, a2) : qj(b2, g2);
  }
  e2 = a2.memoizedState;
  if (null !== e2 && (h2 = e2.dehydrated, null !== h2))
    return rj(a2, b2, g2, d2, h2, e2, c2);
  if (f2) {
    f2 = d2.fallback;
    g2 = b2.mode;
    e2 = a2.child;
    h2 = e2.sibling;
    var k2 = { mode: "hidden", children: d2.children };
    0 === (g2 & 1) && b2.child !== e2 ? (d2 = b2.child, d2.childLanes = 0, d2.pendingProps = k2, b2.deletions = null) : (d2 = Pg(e2, k2), d2.subtreeFlags = e2.subtreeFlags & 14680064);
    null !== h2 ? f2 = Pg(h2, f2) : (f2 = Tg(f2, g2, c2, null), f2.flags |= 2);
    f2.return = b2;
    d2.return = b2;
    d2.sibling = f2;
    b2.child = d2;
    d2 = f2;
    f2 = b2.child;
    g2 = a2.child.memoizedState;
    g2 = null === g2 ? nj(c2) : { baseLanes: g2.baseLanes | c2, cachePool: null, transitions: g2.transitions };
    f2.memoizedState = g2;
    f2.childLanes = a2.childLanes & ~c2;
    b2.memoizedState = mj;
    return d2;
  }
  f2 = a2.child;
  a2 = f2.sibling;
  d2 = Pg(f2, { mode: "visible", children: d2.children });
  0 === (b2.mode & 1) && (d2.lanes = c2);
  d2.return = b2;
  d2.sibling = null;
  null !== a2 && (c2 = b2.deletions, null === c2 ? (b2.deletions = [a2], b2.flags |= 16) : c2.push(a2));
  b2.child = d2;
  b2.memoizedState = null;
  return d2;
}
function qj(a2, b2) {
  b2 = pj({ mode: "visible", children: b2 }, a2.mode, 0, null);
  b2.return = a2;
  return a2.child = b2;
}
function sj(a2, b2, c2, d2) {
  null !== d2 && Jg(d2);
  Ug(b2, a2.child, null, c2);
  a2 = qj(b2, b2.pendingProps.children);
  a2.flags |= 2;
  b2.memoizedState = null;
  return a2;
}
function rj(a2, b2, c2, d2, e2, f2, g2) {
  if (c2) {
    if (b2.flags & 256)
      return b2.flags &= -257, d2 = Ki(Error(p$2(422))), sj(a2, b2, g2, d2);
    if (null !== b2.memoizedState)
      return b2.child = a2.child, b2.flags |= 128, null;
    f2 = d2.fallback;
    e2 = b2.mode;
    d2 = pj({ mode: "visible", children: d2.children }, e2, 0, null);
    f2 = Tg(f2, e2, g2, null);
    f2.flags |= 2;
    d2.return = b2;
    f2.return = b2;
    d2.sibling = f2;
    b2.child = d2;
    0 !== (b2.mode & 1) && Ug(b2, a2.child, null, g2);
    b2.child.memoizedState = nj(g2);
    b2.memoizedState = mj;
    return f2;
  }
  if (0 === (b2.mode & 1))
    return sj(a2, b2, g2, null);
  if ("$!" === e2.data) {
    d2 = e2.nextSibling && e2.nextSibling.dataset;
    if (d2)
      var h2 = d2.dgst;
    d2 = h2;
    f2 = Error(p$2(419));
    d2 = Ki(f2, d2, void 0);
    return sj(a2, b2, g2, d2);
  }
  h2 = 0 !== (g2 & a2.childLanes);
  if (dh$1 || h2) {
    d2 = Q$1;
    if (null !== d2) {
      switch (g2 & -g2) {
        case 4:
          e2 = 2;
          break;
        case 16:
          e2 = 8;
          break;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          e2 = 32;
          break;
        case 536870912:
          e2 = 268435456;
          break;
        default:
          e2 = 0;
      }
      e2 = 0 !== (e2 & (d2.suspendedLanes | g2)) ? 0 : e2;
      0 !== e2 && e2 !== f2.retryLane && (f2.retryLane = e2, ih(a2, e2), gi(d2, a2, e2, -1));
    }
    tj();
    d2 = Ki(Error(p$2(421)));
    return sj(a2, b2, g2, d2);
  }
  if ("$?" === e2.data)
    return b2.flags |= 128, b2.child = a2.child, b2 = uj.bind(null, a2), e2._reactRetry = b2, null;
  a2 = f2.treeContext;
  yg = Lf(e2.nextSibling);
  xg = b2;
  I$1 = true;
  zg = null;
  null !== a2 && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a2.id, sg = a2.overflow, qg = b2);
  b2 = qj(b2, d2.children);
  b2.flags |= 4096;
  return b2;
}
function vj(a2, b2, c2) {
  a2.lanes |= b2;
  var d2 = a2.alternate;
  null !== d2 && (d2.lanes |= b2);
  bh(a2.return, b2, c2);
}
function wj(a2, b2, c2, d2, e2) {
  var f2 = a2.memoizedState;
  null === f2 ? a2.memoizedState = { isBackwards: b2, rendering: null, renderingStartTime: 0, last: d2, tail: c2, tailMode: e2 } : (f2.isBackwards = b2, f2.rendering = null, f2.renderingStartTime = 0, f2.last = d2, f2.tail = c2, f2.tailMode = e2);
}
function xj(a2, b2, c2) {
  var d2 = b2.pendingProps, e2 = d2.revealOrder, f2 = d2.tail;
  Xi(a2, b2, d2.children, c2);
  d2 = L$1.current;
  if (0 !== (d2 & 2))
    d2 = d2 & 1 | 2, b2.flags |= 128;
  else {
    if (null !== a2 && 0 !== (a2.flags & 128))
      a:
        for (a2 = b2.child; null !== a2; ) {
          if (13 === a2.tag)
            null !== a2.memoizedState && vj(a2, c2, b2);
          else if (19 === a2.tag)
            vj(a2, c2, b2);
          else if (null !== a2.child) {
            a2.child.return = a2;
            a2 = a2.child;
            continue;
          }
          if (a2 === b2)
            break a;
          for (; null === a2.sibling; ) {
            if (null === a2.return || a2.return === b2)
              break a;
            a2 = a2.return;
          }
          a2.sibling.return = a2.return;
          a2 = a2.sibling;
        }
    d2 &= 1;
  }
  G$1(L$1, d2);
  if (0 === (b2.mode & 1))
    b2.memoizedState = null;
  else
    switch (e2) {
      case "forwards":
        c2 = b2.child;
        for (e2 = null; null !== c2; )
          a2 = c2.alternate, null !== a2 && null === Ch(a2) && (e2 = c2), c2 = c2.sibling;
        c2 = e2;
        null === c2 ? (e2 = b2.child, b2.child = null) : (e2 = c2.sibling, c2.sibling = null);
        wj(b2, false, e2, c2, f2);
        break;
      case "backwards":
        c2 = null;
        e2 = b2.child;
        for (b2.child = null; null !== e2; ) {
          a2 = e2.alternate;
          if (null !== a2 && null === Ch(a2)) {
            b2.child = e2;
            break;
          }
          a2 = e2.sibling;
          e2.sibling = c2;
          c2 = e2;
          e2 = a2;
        }
        wj(b2, true, c2, null, f2);
        break;
      case "together":
        wj(b2, false, null, null, void 0);
        break;
      default:
        b2.memoizedState = null;
    }
  return b2.child;
}
function ij(a2, b2) {
  0 === (b2.mode & 1) && null !== a2 && (a2.alternate = null, b2.alternate = null, b2.flags |= 2);
}
function Zi(a2, b2, c2) {
  null !== a2 && (b2.dependencies = a2.dependencies);
  rh |= b2.lanes;
  if (0 === (c2 & b2.childLanes))
    return null;
  if (null !== a2 && b2.child !== a2.child)
    throw Error(p$2(153));
  if (null !== b2.child) {
    a2 = b2.child;
    c2 = Pg(a2, a2.pendingProps);
    b2.child = c2;
    for (c2.return = b2; null !== a2.sibling; )
      a2 = a2.sibling, c2 = c2.sibling = Pg(a2, a2.pendingProps), c2.return = b2;
    c2.sibling = null;
  }
  return b2.child;
}
function yj(a2, b2, c2) {
  switch (b2.tag) {
    case 3:
      kj(b2);
      Ig();
      break;
    case 5:
      Ah(b2);
      break;
    case 1:
      Zf(b2.type) && cg(b2);
      break;
    case 4:
      yh(b2, b2.stateNode.containerInfo);
      break;
    case 10:
      var d2 = b2.type._context, e2 = b2.memoizedProps.value;
      G$1(Wg, d2._currentValue);
      d2._currentValue = e2;
      break;
    case 13:
      d2 = b2.memoizedState;
      if (null !== d2) {
        if (null !== d2.dehydrated)
          return G$1(L$1, L$1.current & 1), b2.flags |= 128, null;
        if (0 !== (c2 & b2.child.childLanes))
          return oj(a2, b2, c2);
        G$1(L$1, L$1.current & 1);
        a2 = Zi(a2, b2, c2);
        return null !== a2 ? a2.sibling : null;
      }
      G$1(L$1, L$1.current & 1);
      break;
    case 19:
      d2 = 0 !== (c2 & b2.childLanes);
      if (0 !== (a2.flags & 128)) {
        if (d2)
          return xj(a2, b2, c2);
        b2.flags |= 128;
      }
      e2 = b2.memoizedState;
      null !== e2 && (e2.rendering = null, e2.tail = null, e2.lastEffect = null);
      G$1(L$1, L$1.current);
      if (d2)
        break;
      else
        return null;
    case 22:
    case 23:
      return b2.lanes = 0, dj(a2, b2, c2);
  }
  return Zi(a2, b2, c2);
}
var zj, Aj, Bj, Cj;
zj = function(a2, b2) {
  for (var c2 = b2.child; null !== c2; ) {
    if (5 === c2.tag || 6 === c2.tag)
      a2.appendChild(c2.stateNode);
    else if (4 !== c2.tag && null !== c2.child) {
      c2.child.return = c2;
      c2 = c2.child;
      continue;
    }
    if (c2 === b2)
      break;
    for (; null === c2.sibling; ) {
      if (null === c2.return || c2.return === b2)
        return;
      c2 = c2.return;
    }
    c2.sibling.return = c2.return;
    c2 = c2.sibling;
  }
};
Aj = function() {
};
Bj = function(a2, b2, c2, d2) {
  var e2 = a2.memoizedProps;
  if (e2 !== d2) {
    a2 = b2.stateNode;
    xh(uh.current);
    var f2 = null;
    switch (c2) {
      case "input":
        e2 = Ya(a2, e2);
        d2 = Ya(a2, d2);
        f2 = [];
        break;
      case "select":
        e2 = A$1({}, e2, { value: void 0 });
        d2 = A$1({}, d2, { value: void 0 });
        f2 = [];
        break;
      case "textarea":
        e2 = gb(a2, e2);
        d2 = gb(a2, d2);
        f2 = [];
        break;
      default:
        "function" !== typeof e2.onClick && "function" === typeof d2.onClick && (a2.onclick = Bf);
    }
    ub(c2, d2);
    var g2;
    c2 = null;
    for (l2 in e2)
      if (!d2.hasOwnProperty(l2) && e2.hasOwnProperty(l2) && null != e2[l2])
        if ("style" === l2) {
          var h2 = e2[l2];
          for (g2 in h2)
            h2.hasOwnProperty(g2) && (c2 || (c2 = {}), c2[g2] = "");
        } else
          "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ea.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
    for (l2 in d2) {
      var k2 = d2[l2];
      h2 = null != e2 ? e2[l2] : void 0;
      if (d2.hasOwnProperty(l2) && k2 !== h2 && (null != k2 || null != h2))
        if ("style" === l2)
          if (h2) {
            for (g2 in h2)
              !h2.hasOwnProperty(g2) || k2 && k2.hasOwnProperty(g2) || (c2 || (c2 = {}), c2[g2] = "");
            for (g2 in k2)
              k2.hasOwnProperty(g2) && h2[g2] !== k2[g2] && (c2 || (c2 = {}), c2[g2] = k2[g2]);
          } else
            c2 || (f2 || (f2 = []), f2.push(
              l2,
              c2
            )), c2 = k2;
        else
          "dangerouslySetInnerHTML" === l2 ? (k2 = k2 ? k2.__html : void 0, h2 = h2 ? h2.__html : void 0, null != k2 && h2 !== k2 && (f2 = f2 || []).push(l2, k2)) : "children" === l2 ? "string" !== typeof k2 && "number" !== typeof k2 || (f2 = f2 || []).push(l2, "" + k2) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ea.hasOwnProperty(l2) ? (null != k2 && "onScroll" === l2 && D$1("scroll", a2), f2 || h2 === k2 || (f2 = [])) : (f2 = f2 || []).push(l2, k2));
    }
    c2 && (f2 = f2 || []).push("style", c2);
    var l2 = f2;
    if (b2.updateQueue = l2)
      b2.flags |= 4;
  }
};
Cj = function(a2, b2, c2, d2) {
  c2 !== d2 && (b2.flags |= 4);
};
function Dj(a2, b2) {
  if (!I$1)
    switch (a2.tailMode) {
      case "hidden":
        b2 = a2.tail;
        for (var c2 = null; null !== b2; )
          null !== b2.alternate && (c2 = b2), b2 = b2.sibling;
        null === c2 ? a2.tail = null : c2.sibling = null;
        break;
      case "collapsed":
        c2 = a2.tail;
        for (var d2 = null; null !== c2; )
          null !== c2.alternate && (d2 = c2), c2 = c2.sibling;
        null === d2 ? b2 || null === a2.tail ? a2.tail = null : a2.tail.sibling = null : d2.sibling = null;
    }
}
function S$1(a2) {
  var b2 = null !== a2.alternate && a2.alternate.child === a2.child, c2 = 0, d2 = 0;
  if (b2)
    for (var e2 = a2.child; null !== e2; )
      c2 |= e2.lanes | e2.childLanes, d2 |= e2.subtreeFlags & 14680064, d2 |= e2.flags & 14680064, e2.return = a2, e2 = e2.sibling;
  else
    for (e2 = a2.child; null !== e2; )
      c2 |= e2.lanes | e2.childLanes, d2 |= e2.subtreeFlags, d2 |= e2.flags, e2.return = a2, e2 = e2.sibling;
  a2.subtreeFlags |= d2;
  a2.childLanes = c2;
  return b2;
}
function Ej(a2, b2, c2) {
  var d2 = b2.pendingProps;
  wg(b2);
  switch (b2.tag) {
    case 2:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return S$1(b2), null;
    case 1:
      return Zf(b2.type) && $f(), S$1(b2), null;
    case 3:
      d2 = b2.stateNode;
      zh();
      E$1(Wf);
      E$1(H$1);
      Eh();
      d2.pendingContext && (d2.context = d2.pendingContext, d2.pendingContext = null);
      if (null === a2 || null === a2.child)
        Gg(b2) ? b2.flags |= 4 : null === a2 || a2.memoizedState.isDehydrated && 0 === (b2.flags & 256) || (b2.flags |= 1024, null !== zg && (Fj(zg), zg = null));
      Aj(a2, b2);
      S$1(b2);
      return null;
    case 5:
      Bh(b2);
      var e2 = xh(wh.current);
      c2 = b2.type;
      if (null !== a2 && null != b2.stateNode)
        Bj(a2, b2, c2, d2, e2), a2.ref !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
      else {
        if (!d2) {
          if (null === b2.stateNode)
            throw Error(p$2(166));
          S$1(b2);
          return null;
        }
        a2 = xh(uh.current);
        if (Gg(b2)) {
          d2 = b2.stateNode;
          c2 = b2.type;
          var f2 = b2.memoizedProps;
          d2[Of] = b2;
          d2[Pf] = f2;
          a2 = 0 !== (b2.mode & 1);
          switch (c2) {
            case "dialog":
              D$1("cancel", d2);
              D$1("close", d2);
              break;
            case "iframe":
            case "object":
            case "embed":
              D$1("load", d2);
              break;
            case "video":
            case "audio":
              for (e2 = 0; e2 < lf.length; e2++)
                D$1(lf[e2], d2);
              break;
            case "source":
              D$1("error", d2);
              break;
            case "img":
            case "image":
            case "link":
              D$1(
                "error",
                d2
              );
              D$1("load", d2);
              break;
            case "details":
              D$1("toggle", d2);
              break;
            case "input":
              Za(d2, f2);
              D$1("invalid", d2);
              break;
            case "select":
              d2._wrapperState = { wasMultiple: !!f2.multiple };
              D$1("invalid", d2);
              break;
            case "textarea":
              hb(d2, f2), D$1("invalid", d2);
          }
          ub(c2, f2);
          e2 = null;
          for (var g2 in f2)
            if (f2.hasOwnProperty(g2)) {
              var h2 = f2[g2];
              "children" === g2 ? "string" === typeof h2 ? d2.textContent !== h2 && (true !== f2.suppressHydrationWarning && Af(d2.textContent, h2, a2), e2 = ["children", h2]) : "number" === typeof h2 && d2.textContent !== "" + h2 && (true !== f2.suppressHydrationWarning && Af(
                d2.textContent,
                h2,
                a2
              ), e2 = ["children", "" + h2]) : ea.hasOwnProperty(g2) && null != h2 && "onScroll" === g2 && D$1("scroll", d2);
            }
          switch (c2) {
            case "input":
              Va(d2);
              db(d2, f2, true);
              break;
            case "textarea":
              Va(d2);
              jb(d2);
              break;
            case "select":
            case "option":
              break;
            default:
              "function" === typeof f2.onClick && (d2.onclick = Bf);
          }
          d2 = e2;
          b2.updateQueue = d2;
          null !== d2 && (b2.flags |= 4);
        } else {
          g2 = 9 === e2.nodeType ? e2 : e2.ownerDocument;
          "http://www.w3.org/1999/xhtml" === a2 && (a2 = kb(c2));
          "http://www.w3.org/1999/xhtml" === a2 ? "script" === c2 ? (a2 = g2.createElement("div"), a2.innerHTML = "<script><\/script>", a2 = a2.removeChild(a2.firstChild)) : "string" === typeof d2.is ? a2 = g2.createElement(c2, { is: d2.is }) : (a2 = g2.createElement(c2), "select" === c2 && (g2 = a2, d2.multiple ? g2.multiple = true : d2.size && (g2.size = d2.size))) : a2 = g2.createElementNS(a2, c2);
          a2[Of] = b2;
          a2[Pf] = d2;
          zj(a2, b2, false, false);
          b2.stateNode = a2;
          a: {
            g2 = vb(c2, d2);
            switch (c2) {
              case "dialog":
                D$1("cancel", a2);
                D$1("close", a2);
                e2 = d2;
                break;
              case "iframe":
              case "object":
              case "embed":
                D$1("load", a2);
                e2 = d2;
                break;
              case "video":
              case "audio":
                for (e2 = 0; e2 < lf.length; e2++)
                  D$1(lf[e2], a2);
                e2 = d2;
                break;
              case "source":
                D$1("error", a2);
                e2 = d2;
                break;
              case "img":
              case "image":
              case "link":
                D$1(
                  "error",
                  a2
                );
                D$1("load", a2);
                e2 = d2;
                break;
              case "details":
                D$1("toggle", a2);
                e2 = d2;
                break;
              case "input":
                Za(a2, d2);
                e2 = Ya(a2, d2);
                D$1("invalid", a2);
                break;
              case "option":
                e2 = d2;
                break;
              case "select":
                a2._wrapperState = { wasMultiple: !!d2.multiple };
                e2 = A$1({}, d2, { value: void 0 });
                D$1("invalid", a2);
                break;
              case "textarea":
                hb(a2, d2);
                e2 = gb(a2, d2);
                D$1("invalid", a2);
                break;
              default:
                e2 = d2;
            }
            ub(c2, e2);
            h2 = e2;
            for (f2 in h2)
              if (h2.hasOwnProperty(f2)) {
                var k2 = h2[f2];
                "style" === f2 ? sb(a2, k2) : "dangerouslySetInnerHTML" === f2 ? (k2 = k2 ? k2.__html : void 0, null != k2 && nb(a2, k2)) : "children" === f2 ? "string" === typeof k2 ? ("textarea" !== c2 || "" !== k2) && ob(a2, k2) : "number" === typeof k2 && ob(a2, "" + k2) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (ea.hasOwnProperty(f2) ? null != k2 && "onScroll" === f2 && D$1("scroll", a2) : null != k2 && ta(a2, f2, k2, g2));
              }
            switch (c2) {
              case "input":
                Va(a2);
                db(a2, d2, false);
                break;
              case "textarea":
                Va(a2);
                jb(a2);
                break;
              case "option":
                null != d2.value && a2.setAttribute("value", "" + Sa(d2.value));
                break;
              case "select":
                a2.multiple = !!d2.multiple;
                f2 = d2.value;
                null != f2 ? fb(a2, !!d2.multiple, f2, false) : null != d2.defaultValue && fb(
                  a2,
                  !!d2.multiple,
                  d2.defaultValue,
                  true
                );
                break;
              default:
                "function" === typeof e2.onClick && (a2.onclick = Bf);
            }
            switch (c2) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                d2 = !!d2.autoFocus;
                break a;
              case "img":
                d2 = true;
                break a;
              default:
                d2 = false;
            }
          }
          d2 && (b2.flags |= 4);
        }
        null !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
      }
      S$1(b2);
      return null;
    case 6:
      if (a2 && null != b2.stateNode)
        Cj(a2, b2, a2.memoizedProps, d2);
      else {
        if ("string" !== typeof d2 && null === b2.stateNode)
          throw Error(p$2(166));
        c2 = xh(wh.current);
        xh(uh.current);
        if (Gg(b2)) {
          d2 = b2.stateNode;
          c2 = b2.memoizedProps;
          d2[Of] = b2;
          if (f2 = d2.nodeValue !== c2) {
            if (a2 = xg, null !== a2)
              switch (a2.tag) {
                case 3:
                  Af(d2.nodeValue, c2, 0 !== (a2.mode & 1));
                  break;
                case 5:
                  true !== a2.memoizedProps.suppressHydrationWarning && Af(d2.nodeValue, c2, 0 !== (a2.mode & 1));
              }
          }
          f2 && (b2.flags |= 4);
        } else
          d2 = (9 === c2.nodeType ? c2 : c2.ownerDocument).createTextNode(d2), d2[Of] = b2, b2.stateNode = d2;
      }
      S$1(b2);
      return null;
    case 13:
      E$1(L$1);
      d2 = b2.memoizedState;
      if (null === a2 || null !== a2.memoizedState && null !== a2.memoizedState.dehydrated) {
        if (I$1 && null !== yg && 0 !== (b2.mode & 1) && 0 === (b2.flags & 128))
          Hg(), Ig(), b2.flags |= 98560, f2 = false;
        else if (f2 = Gg(b2), null !== d2 && null !== d2.dehydrated) {
          if (null === a2) {
            if (!f2)
              throw Error(p$2(318));
            f2 = b2.memoizedState;
            f2 = null !== f2 ? f2.dehydrated : null;
            if (!f2)
              throw Error(p$2(317));
            f2[Of] = b2;
          } else
            Ig(), 0 === (b2.flags & 128) && (b2.memoizedState = null), b2.flags |= 4;
          S$1(b2);
          f2 = false;
        } else
          null !== zg && (Fj(zg), zg = null), f2 = true;
        if (!f2)
          return b2.flags & 65536 ? b2 : null;
      }
      if (0 !== (b2.flags & 128))
        return b2.lanes = c2, b2;
      d2 = null !== d2;
      d2 !== (null !== a2 && null !== a2.memoizedState) && d2 && (b2.child.flags |= 8192, 0 !== (b2.mode & 1) && (null === a2 || 0 !== (L$1.current & 1) ? 0 === T$1 && (T$1 = 3) : tj()));
      null !== b2.updateQueue && (b2.flags |= 4);
      S$1(b2);
      return null;
    case 4:
      return zh(), Aj(a2, b2), null === a2 && sf(b2.stateNode.containerInfo), S$1(b2), null;
    case 10:
      return ah(b2.type._context), S$1(b2), null;
    case 17:
      return Zf(b2.type) && $f(), S$1(b2), null;
    case 19:
      E$1(L$1);
      f2 = b2.memoizedState;
      if (null === f2)
        return S$1(b2), null;
      d2 = 0 !== (b2.flags & 128);
      g2 = f2.rendering;
      if (null === g2)
        if (d2)
          Dj(f2, false);
        else {
          if (0 !== T$1 || null !== a2 && 0 !== (a2.flags & 128))
            for (a2 = b2.child; null !== a2; ) {
              g2 = Ch(a2);
              if (null !== g2) {
                b2.flags |= 128;
                Dj(f2, false);
                d2 = g2.updateQueue;
                null !== d2 && (b2.updateQueue = d2, b2.flags |= 4);
                b2.subtreeFlags = 0;
                d2 = c2;
                for (c2 = b2.child; null !== c2; )
                  f2 = c2, a2 = d2, f2.flags &= 14680066, g2 = f2.alternate, null === g2 ? (f2.childLanes = 0, f2.lanes = a2, f2.child = null, f2.subtreeFlags = 0, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g2.childLanes, f2.lanes = g2.lanes, f2.child = g2.child, f2.subtreeFlags = 0, f2.deletions = null, f2.memoizedProps = g2.memoizedProps, f2.memoizedState = g2.memoizedState, f2.updateQueue = g2.updateQueue, f2.type = g2.type, a2 = g2.dependencies, f2.dependencies = null === a2 ? null : { lanes: a2.lanes, firstContext: a2.firstContext }), c2 = c2.sibling;
                G$1(L$1, L$1.current & 1 | 2);
                return b2.child;
              }
              a2 = a2.sibling;
            }
          null !== f2.tail && B$1() > Gj && (b2.flags |= 128, d2 = true, Dj(f2, false), b2.lanes = 4194304);
        }
      else {
        if (!d2)
          if (a2 = Ch(g2), null !== a2) {
            if (b2.flags |= 128, d2 = true, c2 = a2.updateQueue, null !== c2 && (b2.updateQueue = c2, b2.flags |= 4), Dj(f2, true), null === f2.tail && "hidden" === f2.tailMode && !g2.alternate && !I$1)
              return S$1(b2), null;
          } else
            2 * B$1() - f2.renderingStartTime > Gj && 1073741824 !== c2 && (b2.flags |= 128, d2 = true, Dj(f2, false), b2.lanes = 4194304);
        f2.isBackwards ? (g2.sibling = b2.child, b2.child = g2) : (c2 = f2.last, null !== c2 ? c2.sibling = g2 : b2.child = g2, f2.last = g2);
      }
      if (null !== f2.tail)
        return b2 = f2.tail, f2.rendering = b2, f2.tail = b2.sibling, f2.renderingStartTime = B$1(), b2.sibling = null, c2 = L$1.current, G$1(L$1, d2 ? c2 & 1 | 2 : c2 & 1), b2;
      S$1(b2);
      return null;
    case 22:
    case 23:
      return Hj(), d2 = null !== b2.memoizedState, null !== a2 && null !== a2.memoizedState !== d2 && (b2.flags |= 8192), d2 && 0 !== (b2.mode & 1) ? 0 !== (fj & 1073741824) && (S$1(b2), b2.subtreeFlags & 6 && (b2.flags |= 8192)) : S$1(b2), null;
    case 24:
      return null;
    case 25:
      return null;
  }
  throw Error(p$2(156, b2.tag));
}
function Ij(a2, b2) {
  wg(b2);
  switch (b2.tag) {
    case 1:
      return Zf(b2.type) && $f(), a2 = b2.flags, a2 & 65536 ? (b2.flags = a2 & -65537 | 128, b2) : null;
    case 3:
      return zh(), E$1(Wf), E$1(H$1), Eh(), a2 = b2.flags, 0 !== (a2 & 65536) && 0 === (a2 & 128) ? (b2.flags = a2 & -65537 | 128, b2) : null;
    case 5:
      return Bh(b2), null;
    case 13:
      E$1(L$1);
      a2 = b2.memoizedState;
      if (null !== a2 && null !== a2.dehydrated) {
        if (null === b2.alternate)
          throw Error(p$2(340));
        Ig();
      }
      a2 = b2.flags;
      return a2 & 65536 ? (b2.flags = a2 & -65537 | 128, b2) : null;
    case 19:
      return E$1(L$1), null;
    case 4:
      return zh(), null;
    case 10:
      return ah(b2.type._context), null;
    case 22:
    case 23:
      return Hj(), null;
    case 24:
      return null;
    default:
      return null;
  }
}
var Jj = false, U$1 = false, Kj = "function" === typeof WeakSet ? WeakSet : Set, V$1 = null;
function Lj(a2, b2) {
  var c2 = a2.ref;
  if (null !== c2)
    if ("function" === typeof c2)
      try {
        c2(null);
      } catch (d2) {
        W$1(a2, b2, d2);
      }
    else
      c2.current = null;
}
function Mj(a2, b2, c2) {
  try {
    c2();
  } catch (d2) {
    W$1(a2, b2, d2);
  }
}
var Nj = false;
function Oj(a2, b2) {
  Cf = dd;
  a2 = Me$1();
  if (Ne$1(a2)) {
    if ("selectionStart" in a2)
      var c2 = { start: a2.selectionStart, end: a2.selectionEnd };
    else
      a: {
        c2 = (c2 = a2.ownerDocument) && c2.defaultView || window;
        var d2 = c2.getSelection && c2.getSelection();
        if (d2 && 0 !== d2.rangeCount) {
          c2 = d2.anchorNode;
          var e2 = d2.anchorOffset, f2 = d2.focusNode;
          d2 = d2.focusOffset;
          try {
            c2.nodeType, f2.nodeType;
          } catch (F2) {
            c2 = null;
            break a;
          }
          var g2 = 0, h2 = -1, k2 = -1, l2 = 0, m2 = 0, q2 = a2, r2 = null;
          b:
            for (; ; ) {
              for (var y2; ; ) {
                q2 !== c2 || 0 !== e2 && 3 !== q2.nodeType || (h2 = g2 + e2);
                q2 !== f2 || 0 !== d2 && 3 !== q2.nodeType || (k2 = g2 + d2);
                3 === q2.nodeType && (g2 += q2.nodeValue.length);
                if (null === (y2 = q2.firstChild))
                  break;
                r2 = q2;
                q2 = y2;
              }
              for (; ; ) {
                if (q2 === a2)
                  break b;
                r2 === c2 && ++l2 === e2 && (h2 = g2);
                r2 === f2 && ++m2 === d2 && (k2 = g2);
                if (null !== (y2 = q2.nextSibling))
                  break;
                q2 = r2;
                r2 = q2.parentNode;
              }
              q2 = y2;
            }
          c2 = -1 === h2 || -1 === k2 ? null : { start: h2, end: k2 };
        } else
          c2 = null;
      }
    c2 = c2 || { start: 0, end: 0 };
  } else
    c2 = null;
  Df = { focusedElem: a2, selectionRange: c2 };
  dd = false;
  for (V$1 = b2; null !== V$1; )
    if (b2 = V$1, a2 = b2.child, 0 !== (b2.subtreeFlags & 1028) && null !== a2)
      a2.return = b2, V$1 = a2;
    else
      for (; null !== V$1; ) {
        b2 = V$1;
        try {
          var n2 = b2.alternate;
          if (0 !== (b2.flags & 1024))
            switch (b2.tag) {
              case 0:
              case 11:
              case 15:
                break;
              case 1:
                if (null !== n2) {
                  var t2 = n2.memoizedProps, J2 = n2.memoizedState, x2 = b2.stateNode, w2 = x2.getSnapshotBeforeUpdate(b2.elementType === b2.type ? t2 : Ci(b2.type, t2), J2);
                  x2.__reactInternalSnapshotBeforeUpdate = w2;
                }
                break;
              case 3:
                var u2 = b2.stateNode.containerInfo;
                1 === u2.nodeType ? u2.textContent = "" : 9 === u2.nodeType && u2.documentElement && u2.removeChild(u2.documentElement);
                break;
              case 5:
              case 6:
              case 4:
              case 17:
                break;
              default:
                throw Error(p$2(163));
            }
        } catch (F2) {
          W$1(b2, b2.return, F2);
        }
        a2 = b2.sibling;
        if (null !== a2) {
          a2.return = b2.return;
          V$1 = a2;
          break;
        }
        V$1 = b2.return;
      }
  n2 = Nj;
  Nj = false;
  return n2;
}
function Pj(a2, b2, c2) {
  var d2 = b2.updateQueue;
  d2 = null !== d2 ? d2.lastEffect : null;
  if (null !== d2) {
    var e2 = d2 = d2.next;
    do {
      if ((e2.tag & a2) === a2) {
        var f2 = e2.destroy;
        e2.destroy = void 0;
        void 0 !== f2 && Mj(b2, c2, f2);
      }
      e2 = e2.next;
    } while (e2 !== d2);
  }
}
function Qj(a2, b2) {
  b2 = b2.updateQueue;
  b2 = null !== b2 ? b2.lastEffect : null;
  if (null !== b2) {
    var c2 = b2 = b2.next;
    do {
      if ((c2.tag & a2) === a2) {
        var d2 = c2.create;
        c2.destroy = d2();
      }
      c2 = c2.next;
    } while (c2 !== b2);
  }
}
function Rj(a2) {
  var b2 = a2.ref;
  if (null !== b2) {
    var c2 = a2.stateNode;
    switch (a2.tag) {
      case 5:
        a2 = c2;
        break;
      default:
        a2 = c2;
    }
    "function" === typeof b2 ? b2(a2) : b2.current = a2;
  }
}
function Sj(a2) {
  var b2 = a2.alternate;
  null !== b2 && (a2.alternate = null, Sj(b2));
  a2.child = null;
  a2.deletions = null;
  a2.sibling = null;
  5 === a2.tag && (b2 = a2.stateNode, null !== b2 && (delete b2[Of], delete b2[Pf], delete b2[of$4], delete b2[Qf], delete b2[Rf]));
  a2.stateNode = null;
  a2.return = null;
  a2.dependencies = null;
  a2.memoizedProps = null;
  a2.memoizedState = null;
  a2.pendingProps = null;
  a2.stateNode = null;
  a2.updateQueue = null;
}
function Tj(a2) {
  return 5 === a2.tag || 3 === a2.tag || 4 === a2.tag;
}
function Uj(a2) {
  a:
    for (; ; ) {
      for (; null === a2.sibling; ) {
        if (null === a2.return || Tj(a2.return))
          return null;
        a2 = a2.return;
      }
      a2.sibling.return = a2.return;
      for (a2 = a2.sibling; 5 !== a2.tag && 6 !== a2.tag && 18 !== a2.tag; ) {
        if (a2.flags & 2)
          continue a;
        if (null === a2.child || 4 === a2.tag)
          continue a;
        else
          a2.child.return = a2, a2 = a2.child;
      }
      if (!(a2.flags & 2))
        return a2.stateNode;
    }
}
function Vj(a2, b2, c2) {
  var d2 = a2.tag;
  if (5 === d2 || 6 === d2)
    a2 = a2.stateNode, b2 ? 8 === c2.nodeType ? c2.parentNode.insertBefore(a2, b2) : c2.insertBefore(a2, b2) : (8 === c2.nodeType ? (b2 = c2.parentNode, b2.insertBefore(a2, c2)) : (b2 = c2, b2.appendChild(a2)), c2 = c2._reactRootContainer, null !== c2 && void 0 !== c2 || null !== b2.onclick || (b2.onclick = Bf));
  else if (4 !== d2 && (a2 = a2.child, null !== a2))
    for (Vj(a2, b2, c2), a2 = a2.sibling; null !== a2; )
      Vj(a2, b2, c2), a2 = a2.sibling;
}
function Wj(a2, b2, c2) {
  var d2 = a2.tag;
  if (5 === d2 || 6 === d2)
    a2 = a2.stateNode, b2 ? c2.insertBefore(a2, b2) : c2.appendChild(a2);
  else if (4 !== d2 && (a2 = a2.child, null !== a2))
    for (Wj(a2, b2, c2), a2 = a2.sibling; null !== a2; )
      Wj(a2, b2, c2), a2 = a2.sibling;
}
var X$1 = null, Xj = false;
function Yj(a2, b2, c2) {
  for (c2 = c2.child; null !== c2; )
    Zj(a2, b2, c2), c2 = c2.sibling;
}
function Zj(a2, b2, c2) {
  if (lc && "function" === typeof lc.onCommitFiberUnmount)
    try {
      lc.onCommitFiberUnmount(kc, c2);
    } catch (h2) {
    }
  switch (c2.tag) {
    case 5:
      U$1 || Lj(c2, b2);
    case 6:
      var d2 = X$1, e2 = Xj;
      X$1 = null;
      Yj(a2, b2, c2);
      X$1 = d2;
      Xj = e2;
      null !== X$1 && (Xj ? (a2 = X$1, c2 = c2.stateNode, 8 === a2.nodeType ? a2.parentNode.removeChild(c2) : a2.removeChild(c2)) : X$1.removeChild(c2.stateNode));
      break;
    case 18:
      null !== X$1 && (Xj ? (a2 = X$1, c2 = c2.stateNode, 8 === a2.nodeType ? Kf(a2.parentNode, c2) : 1 === a2.nodeType && Kf(a2, c2), bd(a2)) : Kf(X$1, c2.stateNode));
      break;
    case 4:
      d2 = X$1;
      e2 = Xj;
      X$1 = c2.stateNode.containerInfo;
      Xj = true;
      Yj(a2, b2, c2);
      X$1 = d2;
      Xj = e2;
      break;
    case 0:
    case 11:
    case 14:
    case 15:
      if (!U$1 && (d2 = c2.updateQueue, null !== d2 && (d2 = d2.lastEffect, null !== d2))) {
        e2 = d2 = d2.next;
        do {
          var f2 = e2, g2 = f2.destroy;
          f2 = f2.tag;
          void 0 !== g2 && (0 !== (f2 & 2) ? Mj(c2, b2, g2) : 0 !== (f2 & 4) && Mj(c2, b2, g2));
          e2 = e2.next;
        } while (e2 !== d2);
      }
      Yj(a2, b2, c2);
      break;
    case 1:
      if (!U$1 && (Lj(c2, b2), d2 = c2.stateNode, "function" === typeof d2.componentWillUnmount))
        try {
          d2.props = c2.memoizedProps, d2.state = c2.memoizedState, d2.componentWillUnmount();
        } catch (h2) {
          W$1(c2, b2, h2);
        }
      Yj(a2, b2, c2);
      break;
    case 21:
      Yj(a2, b2, c2);
      break;
    case 22:
      c2.mode & 1 ? (U$1 = (d2 = U$1) || null !== c2.memoizedState, Yj(a2, b2, c2), U$1 = d2) : Yj(a2, b2, c2);
      break;
    default:
      Yj(a2, b2, c2);
  }
}
function ak(a2) {
  var b2 = a2.updateQueue;
  if (null !== b2) {
    a2.updateQueue = null;
    var c2 = a2.stateNode;
    null === c2 && (c2 = a2.stateNode = new Kj());
    b2.forEach(function(b3) {
      var d2 = bk.bind(null, a2, b3);
      c2.has(b3) || (c2.add(b3), b3.then(d2, d2));
    });
  }
}
function ck(a2, b2) {
  var c2 = b2.deletions;
  if (null !== c2)
    for (var d2 = 0; d2 < c2.length; d2++) {
      var e2 = c2[d2];
      try {
        var f2 = a2, g2 = b2, h2 = g2;
        a:
          for (; null !== h2; ) {
            switch (h2.tag) {
              case 5:
                X$1 = h2.stateNode;
                Xj = false;
                break a;
              case 3:
                X$1 = h2.stateNode.containerInfo;
                Xj = true;
                break a;
              case 4:
                X$1 = h2.stateNode.containerInfo;
                Xj = true;
                break a;
            }
            h2 = h2.return;
          }
        if (null === X$1)
          throw Error(p$2(160));
        Zj(f2, g2, e2);
        X$1 = null;
        Xj = false;
        var k2 = e2.alternate;
        null !== k2 && (k2.return = null);
        e2.return = null;
      } catch (l2) {
        W$1(e2, b2, l2);
      }
    }
  if (b2.subtreeFlags & 12854)
    for (b2 = b2.child; null !== b2; )
      dk(b2, a2), b2 = b2.sibling;
}
function dk(a2, b2) {
  var c2 = a2.alternate, d2 = a2.flags;
  switch (a2.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
      ck(b2, a2);
      ek(a2);
      if (d2 & 4) {
        try {
          Pj(3, a2, a2.return), Qj(3, a2);
        } catch (t2) {
          W$1(a2, a2.return, t2);
        }
        try {
          Pj(5, a2, a2.return);
        } catch (t2) {
          W$1(a2, a2.return, t2);
        }
      }
      break;
    case 1:
      ck(b2, a2);
      ek(a2);
      d2 & 512 && null !== c2 && Lj(c2, c2.return);
      break;
    case 5:
      ck(b2, a2);
      ek(a2);
      d2 & 512 && null !== c2 && Lj(c2, c2.return);
      if (a2.flags & 32) {
        var e2 = a2.stateNode;
        try {
          ob(e2, "");
        } catch (t2) {
          W$1(a2, a2.return, t2);
        }
      }
      if (d2 & 4 && (e2 = a2.stateNode, null != e2)) {
        var f2 = a2.memoizedProps, g2 = null !== c2 ? c2.memoizedProps : f2, h2 = a2.type, k2 = a2.updateQueue;
        a2.updateQueue = null;
        if (null !== k2)
          try {
            "input" === h2 && "radio" === f2.type && null != f2.name && ab(e2, f2);
            vb(h2, g2);
            var l2 = vb(h2, f2);
            for (g2 = 0; g2 < k2.length; g2 += 2) {
              var m2 = k2[g2], q2 = k2[g2 + 1];
              "style" === m2 ? sb(e2, q2) : "dangerouslySetInnerHTML" === m2 ? nb(e2, q2) : "children" === m2 ? ob(e2, q2) : ta(e2, m2, q2, l2);
            }
            switch (h2) {
              case "input":
                bb(e2, f2);
                break;
              case "textarea":
                ib(e2, f2);
                break;
              case "select":
                var r2 = e2._wrapperState.wasMultiple;
                e2._wrapperState.wasMultiple = !!f2.multiple;
                var y2 = f2.value;
                null != y2 ? fb(e2, !!f2.multiple, y2, false) : r2 !== !!f2.multiple && (null != f2.defaultValue ? fb(
                  e2,
                  !!f2.multiple,
                  f2.defaultValue,
                  true
                ) : fb(e2, !!f2.multiple, f2.multiple ? [] : "", false));
            }
            e2[Pf] = f2;
          } catch (t2) {
            W$1(a2, a2.return, t2);
          }
      }
      break;
    case 6:
      ck(b2, a2);
      ek(a2);
      if (d2 & 4) {
        if (null === a2.stateNode)
          throw Error(p$2(162));
        e2 = a2.stateNode;
        f2 = a2.memoizedProps;
        try {
          e2.nodeValue = f2;
        } catch (t2) {
          W$1(a2, a2.return, t2);
        }
      }
      break;
    case 3:
      ck(b2, a2);
      ek(a2);
      if (d2 & 4 && null !== c2 && c2.memoizedState.isDehydrated)
        try {
          bd(b2.containerInfo);
        } catch (t2) {
          W$1(a2, a2.return, t2);
        }
      break;
    case 4:
      ck(b2, a2);
      ek(a2);
      break;
    case 13:
      ck(b2, a2);
      ek(a2);
      e2 = a2.child;
      e2.flags & 8192 && (f2 = null !== e2.memoizedState, e2.stateNode.isHidden = f2, !f2 || null !== e2.alternate && null !== e2.alternate.memoizedState || (fk = B$1()));
      d2 & 4 && ak(a2);
      break;
    case 22:
      m2 = null !== c2 && null !== c2.memoizedState;
      a2.mode & 1 ? (U$1 = (l2 = U$1) || m2, ck(b2, a2), U$1 = l2) : ck(b2, a2);
      ek(a2);
      if (d2 & 8192) {
        l2 = null !== a2.memoizedState;
        if ((a2.stateNode.isHidden = l2) && !m2 && 0 !== (a2.mode & 1))
          for (V$1 = a2, m2 = a2.child; null !== m2; ) {
            for (q2 = V$1 = m2; null !== V$1; ) {
              r2 = V$1;
              y2 = r2.child;
              switch (r2.tag) {
                case 0:
                case 11:
                case 14:
                case 15:
                  Pj(4, r2, r2.return);
                  break;
                case 1:
                  Lj(r2, r2.return);
                  var n2 = r2.stateNode;
                  if ("function" === typeof n2.componentWillUnmount) {
                    d2 = r2;
                    c2 = r2.return;
                    try {
                      b2 = d2, n2.props = b2.memoizedProps, n2.state = b2.memoizedState, n2.componentWillUnmount();
                    } catch (t2) {
                      W$1(d2, c2, t2);
                    }
                  }
                  break;
                case 5:
                  Lj(r2, r2.return);
                  break;
                case 22:
                  if (null !== r2.memoizedState) {
                    gk(q2);
                    continue;
                  }
              }
              null !== y2 ? (y2.return = r2, V$1 = y2) : gk(q2);
            }
            m2 = m2.sibling;
          }
        a:
          for (m2 = null, q2 = a2; ; ) {
            if (5 === q2.tag) {
              if (null === m2) {
                m2 = q2;
                try {
                  e2 = q2.stateNode, l2 ? (f2 = e2.style, "function" === typeof f2.setProperty ? f2.setProperty("display", "none", "important") : f2.display = "none") : (h2 = q2.stateNode, k2 = q2.memoizedProps.style, g2 = void 0 !== k2 && null !== k2 && k2.hasOwnProperty("display") ? k2.display : null, h2.style.display = rb("display", g2));
                } catch (t2) {
                  W$1(a2, a2.return, t2);
                }
              }
            } else if (6 === q2.tag) {
              if (null === m2)
                try {
                  q2.stateNode.nodeValue = l2 ? "" : q2.memoizedProps;
                } catch (t2) {
                  W$1(a2, a2.return, t2);
                }
            } else if ((22 !== q2.tag && 23 !== q2.tag || null === q2.memoizedState || q2 === a2) && null !== q2.child) {
              q2.child.return = q2;
              q2 = q2.child;
              continue;
            }
            if (q2 === a2)
              break a;
            for (; null === q2.sibling; ) {
              if (null === q2.return || q2.return === a2)
                break a;
              m2 === q2 && (m2 = null);
              q2 = q2.return;
            }
            m2 === q2 && (m2 = null);
            q2.sibling.return = q2.return;
            q2 = q2.sibling;
          }
      }
      break;
    case 19:
      ck(b2, a2);
      ek(a2);
      d2 & 4 && ak(a2);
      break;
    case 21:
      break;
    default:
      ck(
        b2,
        a2
      ), ek(a2);
  }
}
function ek(a2) {
  var b2 = a2.flags;
  if (b2 & 2) {
    try {
      a: {
        for (var c2 = a2.return; null !== c2; ) {
          if (Tj(c2)) {
            var d2 = c2;
            break a;
          }
          c2 = c2.return;
        }
        throw Error(p$2(160));
      }
      switch (d2.tag) {
        case 5:
          var e2 = d2.stateNode;
          d2.flags & 32 && (ob(e2, ""), d2.flags &= -33);
          var f2 = Uj(a2);
          Wj(a2, f2, e2);
          break;
        case 3:
        case 4:
          var g2 = d2.stateNode.containerInfo, h2 = Uj(a2);
          Vj(a2, h2, g2);
          break;
        default:
          throw Error(p$2(161));
      }
    } catch (k2) {
      W$1(a2, a2.return, k2);
    }
    a2.flags &= -3;
  }
  b2 & 4096 && (a2.flags &= -4097);
}
function hk(a2, b2, c2) {
  V$1 = a2;
  ik(a2);
}
function ik(a2, b2, c2) {
  for (var d2 = 0 !== (a2.mode & 1); null !== V$1; ) {
    var e2 = V$1, f2 = e2.child;
    if (22 === e2.tag && d2) {
      var g2 = null !== e2.memoizedState || Jj;
      if (!g2) {
        var h2 = e2.alternate, k2 = null !== h2 && null !== h2.memoizedState || U$1;
        h2 = Jj;
        var l2 = U$1;
        Jj = g2;
        if ((U$1 = k2) && !l2)
          for (V$1 = e2; null !== V$1; )
            g2 = V$1, k2 = g2.child, 22 === g2.tag && null !== g2.memoizedState ? jk(e2) : null !== k2 ? (k2.return = g2, V$1 = k2) : jk(e2);
        for (; null !== f2; )
          V$1 = f2, ik(f2), f2 = f2.sibling;
        V$1 = e2;
        Jj = h2;
        U$1 = l2;
      }
      kk(a2);
    } else
      0 !== (e2.subtreeFlags & 8772) && null !== f2 ? (f2.return = e2, V$1 = f2) : kk(a2);
  }
}
function kk(a2) {
  for (; null !== V$1; ) {
    var b2 = V$1;
    if (0 !== (b2.flags & 8772)) {
      var c2 = b2.alternate;
      try {
        if (0 !== (b2.flags & 8772))
          switch (b2.tag) {
            case 0:
            case 11:
            case 15:
              U$1 || Qj(5, b2);
              break;
            case 1:
              var d2 = b2.stateNode;
              if (b2.flags & 4 && !U$1)
                if (null === c2)
                  d2.componentDidMount();
                else {
                  var e2 = b2.elementType === b2.type ? c2.memoizedProps : Ci(b2.type, c2.memoizedProps);
                  d2.componentDidUpdate(e2, c2.memoizedState, d2.__reactInternalSnapshotBeforeUpdate);
                }
              var f2 = b2.updateQueue;
              null !== f2 && sh(b2, f2, d2);
              break;
            case 3:
              var g2 = b2.updateQueue;
              if (null !== g2) {
                c2 = null;
                if (null !== b2.child)
                  switch (b2.child.tag) {
                    case 5:
                      c2 = b2.child.stateNode;
                      break;
                    case 1:
                      c2 = b2.child.stateNode;
                  }
                sh(b2, g2, c2);
              }
              break;
            case 5:
              var h2 = b2.stateNode;
              if (null === c2 && b2.flags & 4) {
                c2 = h2;
                var k2 = b2.memoizedProps;
                switch (b2.type) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    k2.autoFocus && c2.focus();
                    break;
                  case "img":
                    k2.src && (c2.src = k2.src);
                }
              }
              break;
            case 6:
              break;
            case 4:
              break;
            case 12:
              break;
            case 13:
              if (null === b2.memoizedState) {
                var l2 = b2.alternate;
                if (null !== l2) {
                  var m2 = l2.memoizedState;
                  if (null !== m2) {
                    var q2 = m2.dehydrated;
                    null !== q2 && bd(q2);
                  }
                }
              }
              break;
            case 19:
            case 17:
            case 21:
            case 22:
            case 23:
            case 25:
              break;
            default:
              throw Error(p$2(163));
          }
        U$1 || b2.flags & 512 && Rj(b2);
      } catch (r2) {
        W$1(b2, b2.return, r2);
      }
    }
    if (b2 === a2) {
      V$1 = null;
      break;
    }
    c2 = b2.sibling;
    if (null !== c2) {
      c2.return = b2.return;
      V$1 = c2;
      break;
    }
    V$1 = b2.return;
  }
}
function gk(a2) {
  for (; null !== V$1; ) {
    var b2 = V$1;
    if (b2 === a2) {
      V$1 = null;
      break;
    }
    var c2 = b2.sibling;
    if (null !== c2) {
      c2.return = b2.return;
      V$1 = c2;
      break;
    }
    V$1 = b2.return;
  }
}
function jk(a2) {
  for (; null !== V$1; ) {
    var b2 = V$1;
    try {
      switch (b2.tag) {
        case 0:
        case 11:
        case 15:
          var c2 = b2.return;
          try {
            Qj(4, b2);
          } catch (k2) {
            W$1(b2, c2, k2);
          }
          break;
        case 1:
          var d2 = b2.stateNode;
          if ("function" === typeof d2.componentDidMount) {
            var e2 = b2.return;
            try {
              d2.componentDidMount();
            } catch (k2) {
              W$1(b2, e2, k2);
            }
          }
          var f2 = b2.return;
          try {
            Rj(b2);
          } catch (k2) {
            W$1(b2, f2, k2);
          }
          break;
        case 5:
          var g2 = b2.return;
          try {
            Rj(b2);
          } catch (k2) {
            W$1(b2, g2, k2);
          }
      }
    } catch (k2) {
      W$1(b2, b2.return, k2);
    }
    if (b2 === a2) {
      V$1 = null;
      break;
    }
    var h2 = b2.sibling;
    if (null !== h2) {
      h2.return = b2.return;
      V$1 = h2;
      break;
    }
    V$1 = b2.return;
  }
}
var lk = Math.ceil, mk = ua.ReactCurrentDispatcher, nk = ua.ReactCurrentOwner, ok = ua.ReactCurrentBatchConfig, K$1 = 0, Q$1 = null, Y$1 = null, Z$1 = 0, fj = 0, ej = Uf(0), T$1 = 0, pk = null, rh = 0, qk = 0, rk = 0, sk = null, tk = null, fk = 0, Gj = Infinity, uk = null, Oi = false, Pi = null, Ri = null, vk = false, wk = null, xk = 0, yk = 0, zk = null, Ak = -1, Bk = 0;
function R() {
  return 0 !== (K$1 & 6) ? B$1() : -1 !== Ak ? Ak : Ak = B$1();
}
function yi(a2) {
  if (0 === (a2.mode & 1))
    return 1;
  if (0 !== (K$1 & 2) && 0 !== Z$1)
    return Z$1 & -Z$1;
  if (null !== Kg.transition)
    return 0 === Bk && (Bk = yc()), Bk;
  a2 = C$1;
  if (0 !== a2)
    return a2;
  a2 = window.event;
  a2 = void 0 === a2 ? 16 : jd(a2.type);
  return a2;
}
function gi(a2, b2, c2, d2) {
  if (50 < yk)
    throw yk = 0, zk = null, Error(p$2(185));
  Ac(a2, c2, d2);
  if (0 === (K$1 & 2) || a2 !== Q$1)
    a2 === Q$1 && (0 === (K$1 & 2) && (qk |= c2), 4 === T$1 && Ck(a2, Z$1)), Dk(a2, d2), 1 === c2 && 0 === K$1 && 0 === (b2.mode & 1) && (Gj = B$1() + 500, fg && jg());
}
function Dk(a2, b2) {
  var c2 = a2.callbackNode;
  wc(a2, b2);
  var d2 = uc(a2, a2 === Q$1 ? Z$1 : 0);
  if (0 === d2)
    null !== c2 && bc(c2), a2.callbackNode = null, a2.callbackPriority = 0;
  else if (b2 = d2 & -d2, a2.callbackPriority !== b2) {
    null != c2 && bc(c2);
    if (1 === b2)
      0 === a2.tag ? ig(Ek.bind(null, a2)) : hg(Ek.bind(null, a2)), Jf(function() {
        0 === (K$1 & 6) && jg();
      }), c2 = null;
    else {
      switch (Dc(d2)) {
        case 1:
          c2 = fc;
          break;
        case 4:
          c2 = gc;
          break;
        case 16:
          c2 = hc;
          break;
        case 536870912:
          c2 = jc;
          break;
        default:
          c2 = hc;
      }
      c2 = Fk(c2, Gk.bind(null, a2));
    }
    a2.callbackPriority = b2;
    a2.callbackNode = c2;
  }
}
function Gk(a2, b2) {
  Ak = -1;
  Bk = 0;
  if (0 !== (K$1 & 6))
    throw Error(p$2(327));
  var c2 = a2.callbackNode;
  if (Hk() && a2.callbackNode !== c2)
    return null;
  var d2 = uc(a2, a2 === Q$1 ? Z$1 : 0);
  if (0 === d2)
    return null;
  if (0 !== (d2 & 30) || 0 !== (d2 & a2.expiredLanes) || b2)
    b2 = Ik(a2, d2);
  else {
    b2 = d2;
    var e2 = K$1;
    K$1 |= 2;
    var f2 = Jk();
    if (Q$1 !== a2 || Z$1 !== b2)
      uk = null, Gj = B$1() + 500, Kk(a2, b2);
    do
      try {
        Lk();
        break;
      } catch (h2) {
        Mk(a2, h2);
      }
    while (1);
    $g();
    mk.current = f2;
    K$1 = e2;
    null !== Y$1 ? b2 = 0 : (Q$1 = null, Z$1 = 0, b2 = T$1);
  }
  if (0 !== b2) {
    2 === b2 && (e2 = xc(a2), 0 !== e2 && (d2 = e2, b2 = Nk(a2, e2)));
    if (1 === b2)
      throw c2 = pk, Kk(a2, 0), Ck(a2, d2), Dk(a2, B$1()), c2;
    if (6 === b2)
      Ck(a2, d2);
    else {
      e2 = a2.current.alternate;
      if (0 === (d2 & 30) && !Ok(e2) && (b2 = Ik(a2, d2), 2 === b2 && (f2 = xc(a2), 0 !== f2 && (d2 = f2, b2 = Nk(a2, f2))), 1 === b2))
        throw c2 = pk, Kk(a2, 0), Ck(a2, d2), Dk(a2, B$1()), c2;
      a2.finishedWork = e2;
      a2.finishedLanes = d2;
      switch (b2) {
        case 0:
        case 1:
          throw Error(p$2(345));
        case 2:
          Pk(a2, tk, uk);
          break;
        case 3:
          Ck(a2, d2);
          if ((d2 & 130023424) === d2 && (b2 = fk + 500 - B$1(), 10 < b2)) {
            if (0 !== uc(a2, 0))
              break;
            e2 = a2.suspendedLanes;
            if ((e2 & d2) !== d2) {
              R();
              a2.pingedLanes |= a2.suspendedLanes & e2;
              break;
            }
            a2.timeoutHandle = Ff(Pk.bind(null, a2, tk, uk), b2);
            break;
          }
          Pk(a2, tk, uk);
          break;
        case 4:
          Ck(a2, d2);
          if ((d2 & 4194240) === d2)
            break;
          b2 = a2.eventTimes;
          for (e2 = -1; 0 < d2; ) {
            var g2 = 31 - oc(d2);
            f2 = 1 << g2;
            g2 = b2[g2];
            g2 > e2 && (e2 = g2);
            d2 &= ~f2;
          }
          d2 = e2;
          d2 = B$1() - d2;
          d2 = (120 > d2 ? 120 : 480 > d2 ? 480 : 1080 > d2 ? 1080 : 1920 > d2 ? 1920 : 3e3 > d2 ? 3e3 : 4320 > d2 ? 4320 : 1960 * lk(d2 / 1960)) - d2;
          if (10 < d2) {
            a2.timeoutHandle = Ff(Pk.bind(null, a2, tk, uk), d2);
            break;
          }
          Pk(a2, tk, uk);
          break;
        case 5:
          Pk(a2, tk, uk);
          break;
        default:
          throw Error(p$2(329));
      }
    }
  }
  Dk(a2, B$1());
  return a2.callbackNode === c2 ? Gk.bind(null, a2) : null;
}
function Nk(a2, b2) {
  var c2 = sk;
  a2.current.memoizedState.isDehydrated && (Kk(a2, b2).flags |= 256);
  a2 = Ik(a2, b2);
  2 !== a2 && (b2 = tk, tk = c2, null !== b2 && Fj(b2));
  return a2;
}
function Fj(a2) {
  null === tk ? tk = a2 : tk.push.apply(tk, a2);
}
function Ok(a2) {
  for (var b2 = a2; ; ) {
    if (b2.flags & 16384) {
      var c2 = b2.updateQueue;
      if (null !== c2 && (c2 = c2.stores, null !== c2))
        for (var d2 = 0; d2 < c2.length; d2++) {
          var e2 = c2[d2], f2 = e2.getSnapshot;
          e2 = e2.value;
          try {
            if (!He(f2(), e2))
              return false;
          } catch (g2) {
            return false;
          }
        }
    }
    c2 = b2.child;
    if (b2.subtreeFlags & 16384 && null !== c2)
      c2.return = b2, b2 = c2;
    else {
      if (b2 === a2)
        break;
      for (; null === b2.sibling; ) {
        if (null === b2.return || b2.return === a2)
          return true;
        b2 = b2.return;
      }
      b2.sibling.return = b2.return;
      b2 = b2.sibling;
    }
  }
  return true;
}
function Ck(a2, b2) {
  b2 &= ~rk;
  b2 &= ~qk;
  a2.suspendedLanes |= b2;
  a2.pingedLanes &= ~b2;
  for (a2 = a2.expirationTimes; 0 < b2; ) {
    var c2 = 31 - oc(b2), d2 = 1 << c2;
    a2[c2] = -1;
    b2 &= ~d2;
  }
}
function Ek(a2) {
  if (0 !== (K$1 & 6))
    throw Error(p$2(327));
  Hk();
  var b2 = uc(a2, 0);
  if (0 === (b2 & 1))
    return Dk(a2, B$1()), null;
  var c2 = Ik(a2, b2);
  if (0 !== a2.tag && 2 === c2) {
    var d2 = xc(a2);
    0 !== d2 && (b2 = d2, c2 = Nk(a2, d2));
  }
  if (1 === c2)
    throw c2 = pk, Kk(a2, 0), Ck(a2, b2), Dk(a2, B$1()), c2;
  if (6 === c2)
    throw Error(p$2(345));
  a2.finishedWork = a2.current.alternate;
  a2.finishedLanes = b2;
  Pk(a2, tk, uk);
  Dk(a2, B$1());
  return null;
}
function Qk(a2, b2) {
  var c2 = K$1;
  K$1 |= 1;
  try {
    return a2(b2);
  } finally {
    K$1 = c2, 0 === K$1 && (Gj = B$1() + 500, fg && jg());
  }
}
function Rk(a2) {
  null !== wk && 0 === wk.tag && 0 === (K$1 & 6) && Hk();
  var b2 = K$1;
  K$1 |= 1;
  var c2 = ok.transition, d2 = C$1;
  try {
    if (ok.transition = null, C$1 = 1, a2)
      return a2();
  } finally {
    C$1 = d2, ok.transition = c2, K$1 = b2, 0 === (K$1 & 6) && jg();
  }
}
function Hj() {
  fj = ej.current;
  E$1(ej);
}
function Kk(a2, b2) {
  a2.finishedWork = null;
  a2.finishedLanes = 0;
  var c2 = a2.timeoutHandle;
  -1 !== c2 && (a2.timeoutHandle = -1, Gf(c2));
  if (null !== Y$1)
    for (c2 = Y$1.return; null !== c2; ) {
      var d2 = c2;
      wg(d2);
      switch (d2.tag) {
        case 1:
          d2 = d2.type.childContextTypes;
          null !== d2 && void 0 !== d2 && $f();
          break;
        case 3:
          zh();
          E$1(Wf);
          E$1(H$1);
          Eh();
          break;
        case 5:
          Bh(d2);
          break;
        case 4:
          zh();
          break;
        case 13:
          E$1(L$1);
          break;
        case 19:
          E$1(L$1);
          break;
        case 10:
          ah(d2.type._context);
          break;
        case 22:
        case 23:
          Hj();
      }
      c2 = c2.return;
    }
  Q$1 = a2;
  Y$1 = a2 = Pg(a2.current, null);
  Z$1 = fj = b2;
  T$1 = 0;
  pk = null;
  rk = qk = rh = 0;
  tk = sk = null;
  if (null !== fh) {
    for (b2 = 0; b2 < fh.length; b2++)
      if (c2 = fh[b2], d2 = c2.interleaved, null !== d2) {
        c2.interleaved = null;
        var e2 = d2.next, f2 = c2.pending;
        if (null !== f2) {
          var g2 = f2.next;
          f2.next = e2;
          d2.next = g2;
        }
        c2.pending = d2;
      }
    fh = null;
  }
  return a2;
}
function Mk(a2, b2) {
  do {
    var c2 = Y$1;
    try {
      $g();
      Fh.current = Rh;
      if (Ih) {
        for (var d2 = M$1.memoizedState; null !== d2; ) {
          var e2 = d2.queue;
          null !== e2 && (e2.pending = null);
          d2 = d2.next;
        }
        Ih = false;
      }
      Hh = 0;
      O = N$1 = M$1 = null;
      Jh = false;
      Kh = 0;
      nk.current = null;
      if (null === c2 || null === c2.return) {
        T$1 = 1;
        pk = b2;
        Y$1 = null;
        break;
      }
      a: {
        var f2 = a2, g2 = c2.return, h2 = c2, k2 = b2;
        b2 = Z$1;
        h2.flags |= 32768;
        if (null !== k2 && "object" === typeof k2 && "function" === typeof k2.then) {
          var l2 = k2, m2 = h2, q2 = m2.tag;
          if (0 === (m2.mode & 1) && (0 === q2 || 11 === q2 || 15 === q2)) {
            var r2 = m2.alternate;
            r2 ? (m2.updateQueue = r2.updateQueue, m2.memoizedState = r2.memoizedState, m2.lanes = r2.lanes) : (m2.updateQueue = null, m2.memoizedState = null);
          }
          var y2 = Ui(g2);
          if (null !== y2) {
            y2.flags &= -257;
            Vi(y2, g2, h2, f2, b2);
            y2.mode & 1 && Si(f2, l2, b2);
            b2 = y2;
            k2 = l2;
            var n2 = b2.updateQueue;
            if (null === n2) {
              var t2 = /* @__PURE__ */ new Set();
              t2.add(k2);
              b2.updateQueue = t2;
            } else
              n2.add(k2);
            break a;
          } else {
            if (0 === (b2 & 1)) {
              Si(f2, l2, b2);
              tj();
              break a;
            }
            k2 = Error(p$2(426));
          }
        } else if (I$1 && h2.mode & 1) {
          var J2 = Ui(g2);
          if (null !== J2) {
            0 === (J2.flags & 65536) && (J2.flags |= 256);
            Vi(J2, g2, h2, f2, b2);
            Jg(Ji(k2, h2));
            break a;
          }
        }
        f2 = k2 = Ji(k2, h2);
        4 !== T$1 && (T$1 = 2);
        null === sk ? sk = [f2] : sk.push(f2);
        f2 = g2;
        do {
          switch (f2.tag) {
            case 3:
              f2.flags |= 65536;
              b2 &= -b2;
              f2.lanes |= b2;
              var x2 = Ni(f2, k2, b2);
              ph(f2, x2);
              break a;
            case 1:
              h2 = k2;
              var w2 = f2.type, u2 = f2.stateNode;
              if (0 === (f2.flags & 128) && ("function" === typeof w2.getDerivedStateFromError || null !== u2 && "function" === typeof u2.componentDidCatch && (null === Ri || !Ri.has(u2)))) {
                f2.flags |= 65536;
                b2 &= -b2;
                f2.lanes |= b2;
                var F2 = Qi(f2, h2, b2);
                ph(f2, F2);
                break a;
              }
          }
          f2 = f2.return;
        } while (null !== f2);
      }
      Sk(c2);
    } catch (na) {
      b2 = na;
      Y$1 === c2 && null !== c2 && (Y$1 = c2 = c2.return);
      continue;
    }
    break;
  } while (1);
}
function Jk() {
  var a2 = mk.current;
  mk.current = Rh;
  return null === a2 ? Rh : a2;
}
function tj() {
  if (0 === T$1 || 3 === T$1 || 2 === T$1)
    T$1 = 4;
  null === Q$1 || 0 === (rh & 268435455) && 0 === (qk & 268435455) || Ck(Q$1, Z$1);
}
function Ik(a2, b2) {
  var c2 = K$1;
  K$1 |= 2;
  var d2 = Jk();
  if (Q$1 !== a2 || Z$1 !== b2)
    uk = null, Kk(a2, b2);
  do
    try {
      Tk();
      break;
    } catch (e2) {
      Mk(a2, e2);
    }
  while (1);
  $g();
  K$1 = c2;
  mk.current = d2;
  if (null !== Y$1)
    throw Error(p$2(261));
  Q$1 = null;
  Z$1 = 0;
  return T$1;
}
function Tk() {
  for (; null !== Y$1; )
    Uk(Y$1);
}
function Lk() {
  for (; null !== Y$1 && !cc(); )
    Uk(Y$1);
}
function Uk(a2) {
  var b2 = Vk(a2.alternate, a2, fj);
  a2.memoizedProps = a2.pendingProps;
  null === b2 ? Sk(a2) : Y$1 = b2;
  nk.current = null;
}
function Sk(a2) {
  var b2 = a2;
  do {
    var c2 = b2.alternate;
    a2 = b2.return;
    if (0 === (b2.flags & 32768)) {
      if (c2 = Ej(c2, b2, fj), null !== c2) {
        Y$1 = c2;
        return;
      }
    } else {
      c2 = Ij(c2, b2);
      if (null !== c2) {
        c2.flags &= 32767;
        Y$1 = c2;
        return;
      }
      if (null !== a2)
        a2.flags |= 32768, a2.subtreeFlags = 0, a2.deletions = null;
      else {
        T$1 = 6;
        Y$1 = null;
        return;
      }
    }
    b2 = b2.sibling;
    if (null !== b2) {
      Y$1 = b2;
      return;
    }
    Y$1 = b2 = a2;
  } while (null !== b2);
  0 === T$1 && (T$1 = 5);
}
function Pk(a2, b2, c2) {
  var d2 = C$1, e2 = ok.transition;
  try {
    ok.transition = null, C$1 = 1, Wk(a2, b2, c2, d2);
  } finally {
    ok.transition = e2, C$1 = d2;
  }
  return null;
}
function Wk(a2, b2, c2, d2) {
  do
    Hk();
  while (null !== wk);
  if (0 !== (K$1 & 6))
    throw Error(p$2(327));
  c2 = a2.finishedWork;
  var e2 = a2.finishedLanes;
  if (null === c2)
    return null;
  a2.finishedWork = null;
  a2.finishedLanes = 0;
  if (c2 === a2.current)
    throw Error(p$2(177));
  a2.callbackNode = null;
  a2.callbackPriority = 0;
  var f2 = c2.lanes | c2.childLanes;
  Bc(a2, f2);
  a2 === Q$1 && (Y$1 = Q$1 = null, Z$1 = 0);
  0 === (c2.subtreeFlags & 2064) && 0 === (c2.flags & 2064) || vk || (vk = true, Fk(hc, function() {
    Hk();
    return null;
  }));
  f2 = 0 !== (c2.flags & 15990);
  if (0 !== (c2.subtreeFlags & 15990) || f2) {
    f2 = ok.transition;
    ok.transition = null;
    var g2 = C$1;
    C$1 = 1;
    var h2 = K$1;
    K$1 |= 4;
    nk.current = null;
    Oj(a2, c2);
    dk(c2, a2);
    Oe$1(Df);
    dd = !!Cf;
    Df = Cf = null;
    a2.current = c2;
    hk(c2);
    dc();
    K$1 = h2;
    C$1 = g2;
    ok.transition = f2;
  } else
    a2.current = c2;
  vk && (vk = false, wk = a2, xk = e2);
  f2 = a2.pendingLanes;
  0 === f2 && (Ri = null);
  mc(c2.stateNode);
  Dk(a2, B$1());
  if (null !== b2)
    for (d2 = a2.onRecoverableError, c2 = 0; c2 < b2.length; c2++)
      e2 = b2[c2], d2(e2.value, { componentStack: e2.stack, digest: e2.digest });
  if (Oi)
    throw Oi = false, a2 = Pi, Pi = null, a2;
  0 !== (xk & 1) && 0 !== a2.tag && Hk();
  f2 = a2.pendingLanes;
  0 !== (f2 & 1) ? a2 === zk ? yk++ : (yk = 0, zk = a2) : yk = 0;
  jg();
  return null;
}
function Hk() {
  if (null !== wk) {
    var a2 = Dc(xk), b2 = ok.transition, c2 = C$1;
    try {
      ok.transition = null;
      C$1 = 16 > a2 ? 16 : a2;
      if (null === wk)
        var d2 = false;
      else {
        a2 = wk;
        wk = null;
        xk = 0;
        if (0 !== (K$1 & 6))
          throw Error(p$2(331));
        var e2 = K$1;
        K$1 |= 4;
        for (V$1 = a2.current; null !== V$1; ) {
          var f2 = V$1, g2 = f2.child;
          if (0 !== (V$1.flags & 16)) {
            var h2 = f2.deletions;
            if (null !== h2) {
              for (var k2 = 0; k2 < h2.length; k2++) {
                var l2 = h2[k2];
                for (V$1 = l2; null !== V$1; ) {
                  var m2 = V$1;
                  switch (m2.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Pj(8, m2, f2);
                  }
                  var q2 = m2.child;
                  if (null !== q2)
                    q2.return = m2, V$1 = q2;
                  else
                    for (; null !== V$1; ) {
                      m2 = V$1;
                      var r2 = m2.sibling, y2 = m2.return;
                      Sj(m2);
                      if (m2 === l2) {
                        V$1 = null;
                        break;
                      }
                      if (null !== r2) {
                        r2.return = y2;
                        V$1 = r2;
                        break;
                      }
                      V$1 = y2;
                    }
                }
              }
              var n2 = f2.alternate;
              if (null !== n2) {
                var t2 = n2.child;
                if (null !== t2) {
                  n2.child = null;
                  do {
                    var J2 = t2.sibling;
                    t2.sibling = null;
                    t2 = J2;
                  } while (null !== t2);
                }
              }
              V$1 = f2;
            }
          }
          if (0 !== (f2.subtreeFlags & 2064) && null !== g2)
            g2.return = f2, V$1 = g2;
          else
            b:
              for (; null !== V$1; ) {
                f2 = V$1;
                if (0 !== (f2.flags & 2048))
                  switch (f2.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Pj(9, f2, f2.return);
                  }
                var x2 = f2.sibling;
                if (null !== x2) {
                  x2.return = f2.return;
                  V$1 = x2;
                  break b;
                }
                V$1 = f2.return;
              }
        }
        var w2 = a2.current;
        for (V$1 = w2; null !== V$1; ) {
          g2 = V$1;
          var u2 = g2.child;
          if (0 !== (g2.subtreeFlags & 2064) && null !== u2)
            u2.return = g2, V$1 = u2;
          else
            b:
              for (g2 = w2; null !== V$1; ) {
                h2 = V$1;
                if (0 !== (h2.flags & 2048))
                  try {
                    switch (h2.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Qj(9, h2);
                    }
                  } catch (na) {
                    W$1(h2, h2.return, na);
                  }
                if (h2 === g2) {
                  V$1 = null;
                  break b;
                }
                var F2 = h2.sibling;
                if (null !== F2) {
                  F2.return = h2.return;
                  V$1 = F2;
                  break b;
                }
                V$1 = h2.return;
              }
        }
        K$1 = e2;
        jg();
        if (lc && "function" === typeof lc.onPostCommitFiberRoot)
          try {
            lc.onPostCommitFiberRoot(kc, a2);
          } catch (na) {
          }
        d2 = true;
      }
      return d2;
    } finally {
      C$1 = c2, ok.transition = b2;
    }
  }
  return false;
}
function Xk(a2, b2, c2) {
  b2 = Ji(c2, b2);
  b2 = Ni(a2, b2, 1);
  a2 = nh(a2, b2, 1);
  b2 = R();
  null !== a2 && (Ac(a2, 1, b2), Dk(a2, b2));
}
function W$1(a2, b2, c2) {
  if (3 === a2.tag)
    Xk(a2, a2, c2);
  else
    for (; null !== b2; ) {
      if (3 === b2.tag) {
        Xk(b2, a2, c2);
        break;
      } else if (1 === b2.tag) {
        var d2 = b2.stateNode;
        if ("function" === typeof b2.type.getDerivedStateFromError || "function" === typeof d2.componentDidCatch && (null === Ri || !Ri.has(d2))) {
          a2 = Ji(c2, a2);
          a2 = Qi(b2, a2, 1);
          b2 = nh(b2, a2, 1);
          a2 = R();
          null !== b2 && (Ac(b2, 1, a2), Dk(b2, a2));
          break;
        }
      }
      b2 = b2.return;
    }
}
function Ti(a2, b2, c2) {
  var d2 = a2.pingCache;
  null !== d2 && d2.delete(b2);
  b2 = R();
  a2.pingedLanes |= a2.suspendedLanes & c2;
  Q$1 === a2 && (Z$1 & c2) === c2 && (4 === T$1 || 3 === T$1 && (Z$1 & 130023424) === Z$1 && 500 > B$1() - fk ? Kk(a2, 0) : rk |= c2);
  Dk(a2, b2);
}
function Yk(a2, b2) {
  0 === b2 && (0 === (a2.mode & 1) ? b2 = 1 : (b2 = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
  var c2 = R();
  a2 = ih(a2, b2);
  null !== a2 && (Ac(a2, b2, c2), Dk(a2, c2));
}
function uj(a2) {
  var b2 = a2.memoizedState, c2 = 0;
  null !== b2 && (c2 = b2.retryLane);
  Yk(a2, c2);
}
function bk(a2, b2) {
  var c2 = 0;
  switch (a2.tag) {
    case 13:
      var d2 = a2.stateNode;
      var e2 = a2.memoizedState;
      null !== e2 && (c2 = e2.retryLane);
      break;
    case 19:
      d2 = a2.stateNode;
      break;
    default:
      throw Error(p$2(314));
  }
  null !== d2 && d2.delete(b2);
  Yk(a2, c2);
}
var Vk;
Vk = function(a2, b2, c2) {
  if (null !== a2)
    if (a2.memoizedProps !== b2.pendingProps || Wf.current)
      dh$1 = true;
    else {
      if (0 === (a2.lanes & c2) && 0 === (b2.flags & 128))
        return dh$1 = false, yj(a2, b2, c2);
      dh$1 = 0 !== (a2.flags & 131072) ? true : false;
    }
  else
    dh$1 = false, I$1 && 0 !== (b2.flags & 1048576) && ug(b2, ng, b2.index);
  b2.lanes = 0;
  switch (b2.tag) {
    case 2:
      var d2 = b2.type;
      ij(a2, b2);
      a2 = b2.pendingProps;
      var e2 = Yf(b2, H$1.current);
      ch(b2, c2);
      e2 = Nh(null, b2, d2, a2, e2, c2);
      var f2 = Sh();
      b2.flags |= 1;
      "object" === typeof e2 && null !== e2 && "function" === typeof e2.render && void 0 === e2.$$typeof ? (b2.tag = 1, b2.memoizedState = null, b2.updateQueue = null, Zf(d2) ? (f2 = true, cg(b2)) : f2 = false, b2.memoizedState = null !== e2.state && void 0 !== e2.state ? e2.state : null, kh(b2), e2.updater = Ei, b2.stateNode = e2, e2._reactInternals = b2, Ii(b2, d2, a2, c2), b2 = jj(null, b2, d2, true, f2, c2)) : (b2.tag = 0, I$1 && f2 && vg(b2), Xi(null, b2, e2, c2), b2 = b2.child);
      return b2;
    case 16:
      d2 = b2.elementType;
      a: {
        ij(a2, b2);
        a2 = b2.pendingProps;
        e2 = d2._init;
        d2 = e2(d2._payload);
        b2.type = d2;
        e2 = b2.tag = Zk(d2);
        a2 = Ci(d2, a2);
        switch (e2) {
          case 0:
            b2 = cj(null, b2, d2, a2, c2);
            break a;
          case 1:
            b2 = hj(null, b2, d2, a2, c2);
            break a;
          case 11:
            b2 = Yi(null, b2, d2, a2, c2);
            break a;
          case 14:
            b2 = $i(null, b2, d2, Ci(d2.type, a2), c2);
            break a;
        }
        throw Error(p$2(
          306,
          d2,
          ""
        ));
      }
      return b2;
    case 0:
      return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Ci(d2, e2), cj(a2, b2, d2, e2, c2);
    case 1:
      return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Ci(d2, e2), hj(a2, b2, d2, e2, c2);
    case 3:
      a: {
        kj(b2);
        if (null === a2)
          throw Error(p$2(387));
        d2 = b2.pendingProps;
        f2 = b2.memoizedState;
        e2 = f2.element;
        lh(a2, b2);
        qh(b2, d2, null, c2);
        var g2 = b2.memoizedState;
        d2 = g2.element;
        if (f2.isDehydrated)
          if (f2 = { element: d2, isDehydrated: false, cache: g2.cache, pendingSuspenseBoundaries: g2.pendingSuspenseBoundaries, transitions: g2.transitions }, b2.updateQueue.baseState = f2, b2.memoizedState = f2, b2.flags & 256) {
            e2 = Ji(Error(p$2(423)), b2);
            b2 = lj(a2, b2, d2, c2, e2);
            break a;
          } else if (d2 !== e2) {
            e2 = Ji(Error(p$2(424)), b2);
            b2 = lj(a2, b2, d2, c2, e2);
            break a;
          } else
            for (yg = Lf(b2.stateNode.containerInfo.firstChild), xg = b2, I$1 = true, zg = null, c2 = Vg(b2, null, d2, c2), b2.child = c2; c2; )
              c2.flags = c2.flags & -3 | 4096, c2 = c2.sibling;
        else {
          Ig();
          if (d2 === e2) {
            b2 = Zi(a2, b2, c2);
            break a;
          }
          Xi(a2, b2, d2, c2);
        }
        b2 = b2.child;
      }
      return b2;
    case 5:
      return Ah(b2), null === a2 && Eg(b2), d2 = b2.type, e2 = b2.pendingProps, f2 = null !== a2 ? a2.memoizedProps : null, g2 = e2.children, Ef(d2, e2) ? g2 = null : null !== f2 && Ef(d2, f2) && (b2.flags |= 32), gj(a2, b2), Xi(a2, b2, g2, c2), b2.child;
    case 6:
      return null === a2 && Eg(b2), null;
    case 13:
      return oj(a2, b2, c2);
    case 4:
      return yh(b2, b2.stateNode.containerInfo), d2 = b2.pendingProps, null === a2 ? b2.child = Ug(b2, null, d2, c2) : Xi(a2, b2, d2, c2), b2.child;
    case 11:
      return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Ci(d2, e2), Yi(a2, b2, d2, e2, c2);
    case 7:
      return Xi(a2, b2, b2.pendingProps, c2), b2.child;
    case 8:
      return Xi(a2, b2, b2.pendingProps.children, c2), b2.child;
    case 12:
      return Xi(a2, b2, b2.pendingProps.children, c2), b2.child;
    case 10:
      a: {
        d2 = b2.type._context;
        e2 = b2.pendingProps;
        f2 = b2.memoizedProps;
        g2 = e2.value;
        G$1(Wg, d2._currentValue);
        d2._currentValue = g2;
        if (null !== f2)
          if (He(f2.value, g2)) {
            if (f2.children === e2.children && !Wf.current) {
              b2 = Zi(a2, b2, c2);
              break a;
            }
          } else
            for (f2 = b2.child, null !== f2 && (f2.return = b2); null !== f2; ) {
              var h2 = f2.dependencies;
              if (null !== h2) {
                g2 = f2.child;
                for (var k2 = h2.firstContext; null !== k2; ) {
                  if (k2.context === d2) {
                    if (1 === f2.tag) {
                      k2 = mh(-1, c2 & -c2);
                      k2.tag = 2;
                      var l2 = f2.updateQueue;
                      if (null !== l2) {
                        l2 = l2.shared;
                        var m2 = l2.pending;
                        null === m2 ? k2.next = k2 : (k2.next = m2.next, m2.next = k2);
                        l2.pending = k2;
                      }
                    }
                    f2.lanes |= c2;
                    k2 = f2.alternate;
                    null !== k2 && (k2.lanes |= c2);
                    bh(
                      f2.return,
                      c2,
                      b2
                    );
                    h2.lanes |= c2;
                    break;
                  }
                  k2 = k2.next;
                }
              } else if (10 === f2.tag)
                g2 = f2.type === b2.type ? null : f2.child;
              else if (18 === f2.tag) {
                g2 = f2.return;
                if (null === g2)
                  throw Error(p$2(341));
                g2.lanes |= c2;
                h2 = g2.alternate;
                null !== h2 && (h2.lanes |= c2);
                bh(g2, c2, b2);
                g2 = f2.sibling;
              } else
                g2 = f2.child;
              if (null !== g2)
                g2.return = f2;
              else
                for (g2 = f2; null !== g2; ) {
                  if (g2 === b2) {
                    g2 = null;
                    break;
                  }
                  f2 = g2.sibling;
                  if (null !== f2) {
                    f2.return = g2.return;
                    g2 = f2;
                    break;
                  }
                  g2 = g2.return;
                }
              f2 = g2;
            }
        Xi(a2, b2, e2.children, c2);
        b2 = b2.child;
      }
      return b2;
    case 9:
      return e2 = b2.type, d2 = b2.pendingProps.children, ch(b2, c2), e2 = eh(e2), d2 = d2(e2), b2.flags |= 1, Xi(a2, b2, d2, c2), b2.child;
    case 14:
      return d2 = b2.type, e2 = Ci(d2, b2.pendingProps), e2 = Ci(d2.type, e2), $i(a2, b2, d2, e2, c2);
    case 15:
      return bj(a2, b2, b2.type, b2.pendingProps, c2);
    case 17:
      return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Ci(d2, e2), ij(a2, b2), b2.tag = 1, Zf(d2) ? (a2 = true, cg(b2)) : a2 = false, ch(b2, c2), Gi(b2, d2, e2), Ii(b2, d2, e2, c2), jj(null, b2, d2, true, a2, c2);
    case 19:
      return xj(a2, b2, c2);
    case 22:
      return dj(a2, b2, c2);
  }
  throw Error(p$2(156, b2.tag));
};
function Fk(a2, b2) {
  return ac(a2, b2);
}
function $k(a2, b2, c2, d2) {
  this.tag = a2;
  this.key = c2;
  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = b2;
  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
  this.mode = d2;
  this.subtreeFlags = this.flags = 0;
  this.deletions = null;
  this.childLanes = this.lanes = 0;
  this.alternate = null;
}
function Bg(a2, b2, c2, d2) {
  return new $k(a2, b2, c2, d2);
}
function aj(a2) {
  a2 = a2.prototype;
  return !(!a2 || !a2.isReactComponent);
}
function Zk(a2) {
  if ("function" === typeof a2)
    return aj(a2) ? 1 : 0;
  if (void 0 !== a2 && null !== a2) {
    a2 = a2.$$typeof;
    if (a2 === Da)
      return 11;
    if (a2 === Ga)
      return 14;
  }
  return 2;
}
function Pg(a2, b2) {
  var c2 = a2.alternate;
  null === c2 ? (c2 = Bg(a2.tag, b2, a2.key, a2.mode), c2.elementType = a2.elementType, c2.type = a2.type, c2.stateNode = a2.stateNode, c2.alternate = a2, a2.alternate = c2) : (c2.pendingProps = b2, c2.type = a2.type, c2.flags = 0, c2.subtreeFlags = 0, c2.deletions = null);
  c2.flags = a2.flags & 14680064;
  c2.childLanes = a2.childLanes;
  c2.lanes = a2.lanes;
  c2.child = a2.child;
  c2.memoizedProps = a2.memoizedProps;
  c2.memoizedState = a2.memoizedState;
  c2.updateQueue = a2.updateQueue;
  b2 = a2.dependencies;
  c2.dependencies = null === b2 ? null : { lanes: b2.lanes, firstContext: b2.firstContext };
  c2.sibling = a2.sibling;
  c2.index = a2.index;
  c2.ref = a2.ref;
  return c2;
}
function Rg(a2, b2, c2, d2, e2, f2) {
  var g2 = 2;
  d2 = a2;
  if ("function" === typeof a2)
    aj(a2) && (g2 = 1);
  else if ("string" === typeof a2)
    g2 = 5;
  else
    a:
      switch (a2) {
        case ya:
          return Tg(c2.children, e2, f2, b2);
        case za:
          g2 = 8;
          e2 |= 8;
          break;
        case Aa:
          return a2 = Bg(12, c2, b2, e2 | 2), a2.elementType = Aa, a2.lanes = f2, a2;
        case Ea:
          return a2 = Bg(13, c2, b2, e2), a2.elementType = Ea, a2.lanes = f2, a2;
        case Fa:
          return a2 = Bg(19, c2, b2, e2), a2.elementType = Fa, a2.lanes = f2, a2;
        case Ia:
          return pj(c2, e2, f2, b2);
        default:
          if ("object" === typeof a2 && null !== a2)
            switch (a2.$$typeof) {
              case Ba:
                g2 = 10;
                break a;
              case Ca:
                g2 = 9;
                break a;
              case Da:
                g2 = 11;
                break a;
              case Ga:
                g2 = 14;
                break a;
              case Ha:
                g2 = 16;
                d2 = null;
                break a;
            }
          throw Error(p$2(130, null == a2 ? a2 : typeof a2, ""));
      }
  b2 = Bg(g2, c2, b2, e2);
  b2.elementType = a2;
  b2.type = d2;
  b2.lanes = f2;
  return b2;
}
function Tg(a2, b2, c2, d2) {
  a2 = Bg(7, a2, d2, b2);
  a2.lanes = c2;
  return a2;
}
function pj(a2, b2, c2, d2) {
  a2 = Bg(22, a2, d2, b2);
  a2.elementType = Ia;
  a2.lanes = c2;
  a2.stateNode = { isHidden: false };
  return a2;
}
function Qg(a2, b2, c2) {
  a2 = Bg(6, a2, null, b2);
  a2.lanes = c2;
  return a2;
}
function Sg(a2, b2, c2) {
  b2 = Bg(4, null !== a2.children ? a2.children : [], a2.key, b2);
  b2.lanes = c2;
  b2.stateNode = { containerInfo: a2.containerInfo, pendingChildren: null, implementation: a2.implementation };
  return b2;
}
function al(a2, b2, c2, d2, e2) {
  this.tag = b2;
  this.containerInfo = a2;
  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
  this.timeoutHandle = -1;
  this.callbackNode = this.pendingContext = this.context = null;
  this.callbackPriority = 0;
  this.eventTimes = zc(0);
  this.expirationTimes = zc(-1);
  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
  this.entanglements = zc(0);
  this.identifierPrefix = d2;
  this.onRecoverableError = e2;
  this.mutableSourceEagerHydrationData = null;
}
function bl(a2, b2, c2, d2, e2, f2, g2, h2, k2) {
  a2 = new al(a2, b2, c2, h2, k2);
  1 === b2 ? (b2 = 1, true === f2 && (b2 |= 8)) : b2 = 0;
  f2 = Bg(3, null, null, b2);
  a2.current = f2;
  f2.stateNode = a2;
  f2.memoizedState = { element: d2, isDehydrated: c2, cache: null, transitions: null, pendingSuspenseBoundaries: null };
  kh(f2);
  return a2;
}
function cl(a2, b2, c2) {
  var d2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
  return { $$typeof: wa, key: null == d2 ? null : "" + d2, children: a2, containerInfo: b2, implementation: c2 };
}
function dl(a2) {
  if (!a2)
    return Vf;
  a2 = a2._reactInternals;
  a: {
    if (Vb(a2) !== a2 || 1 !== a2.tag)
      throw Error(p$2(170));
    var b2 = a2;
    do {
      switch (b2.tag) {
        case 3:
          b2 = b2.stateNode.context;
          break a;
        case 1:
          if (Zf(b2.type)) {
            b2 = b2.stateNode.__reactInternalMemoizedMergedChildContext;
            break a;
          }
      }
      b2 = b2.return;
    } while (null !== b2);
    throw Error(p$2(171));
  }
  if (1 === a2.tag) {
    var c2 = a2.type;
    if (Zf(c2))
      return bg(a2, c2, b2);
  }
  return b2;
}
function el(a2, b2, c2, d2, e2, f2, g2, h2, k2) {
  a2 = bl(c2, d2, true, a2, e2, f2, g2, h2, k2);
  a2.context = dl(null);
  c2 = a2.current;
  d2 = R();
  e2 = yi(c2);
  f2 = mh(d2, e2);
  f2.callback = void 0 !== b2 && null !== b2 ? b2 : null;
  nh(c2, f2, e2);
  a2.current.lanes = e2;
  Ac(a2, e2, d2);
  Dk(a2, d2);
  return a2;
}
function fl(a2, b2, c2, d2) {
  var e2 = b2.current, f2 = R(), g2 = yi(e2);
  c2 = dl(c2);
  null === b2.context ? b2.context = c2 : b2.pendingContext = c2;
  b2 = mh(f2, g2);
  b2.payload = { element: a2 };
  d2 = void 0 === d2 ? null : d2;
  null !== d2 && (b2.callback = d2);
  a2 = nh(e2, b2, g2);
  null !== a2 && (gi(a2, e2, g2, f2), oh(a2, e2, g2));
  return g2;
}
function gl(a2) {
  a2 = a2.current;
  if (!a2.child)
    return null;
  switch (a2.child.tag) {
    case 5:
      return a2.child.stateNode;
    default:
      return a2.child.stateNode;
  }
}
function hl(a2, b2) {
  a2 = a2.memoizedState;
  if (null !== a2 && null !== a2.dehydrated) {
    var c2 = a2.retryLane;
    a2.retryLane = 0 !== c2 && c2 < b2 ? c2 : b2;
  }
}
function il(a2, b2) {
  hl(a2, b2);
  (a2 = a2.alternate) && hl(a2, b2);
}
function jl() {
  return null;
}
var kl = "function" === typeof reportError ? reportError : function(a2) {
  console.error(a2);
};
function ll(a2) {
  this._internalRoot = a2;
}
ml.prototype.render = ll.prototype.render = function(a2) {
  var b2 = this._internalRoot;
  if (null === b2)
    throw Error(p$2(409));
  fl(a2, b2, null, null);
};
ml.prototype.unmount = ll.prototype.unmount = function() {
  var a2 = this._internalRoot;
  if (null !== a2) {
    this._internalRoot = null;
    var b2 = a2.containerInfo;
    Rk(function() {
      fl(null, a2, null, null);
    });
    b2[uf] = null;
  }
};
function ml(a2) {
  this._internalRoot = a2;
}
ml.prototype.unstable_scheduleHydration = function(a2) {
  if (a2) {
    var b2 = Hc();
    a2 = { blockedOn: null, target: a2, priority: b2 };
    for (var c2 = 0; c2 < Qc.length && 0 !== b2 && b2 < Qc[c2].priority; c2++)
      ;
    Qc.splice(c2, 0, a2);
    0 === c2 && Vc(a2);
  }
};
function nl(a2) {
  return !(!a2 || 1 !== a2.nodeType && 9 !== a2.nodeType && 11 !== a2.nodeType);
}
function ol(a2) {
  return !(!a2 || 1 !== a2.nodeType && 9 !== a2.nodeType && 11 !== a2.nodeType && (8 !== a2.nodeType || " react-mount-point-unstable " !== a2.nodeValue));
}
function pl() {
}
function ql(a2, b2, c2, d2, e2) {
  if (e2) {
    if ("function" === typeof d2) {
      var f2 = d2;
      d2 = function() {
        var a3 = gl(g2);
        f2.call(a3);
      };
    }
    var g2 = el(b2, d2, a2, 0, null, false, false, "", pl);
    a2._reactRootContainer = g2;
    a2[uf] = g2.current;
    sf(8 === a2.nodeType ? a2.parentNode : a2);
    Rk();
    return g2;
  }
  for (; e2 = a2.lastChild; )
    a2.removeChild(e2);
  if ("function" === typeof d2) {
    var h2 = d2;
    d2 = function() {
      var a3 = gl(k2);
      h2.call(a3);
    };
  }
  var k2 = bl(a2, 0, false, null, null, false, false, "", pl);
  a2._reactRootContainer = k2;
  a2[uf] = k2.current;
  sf(8 === a2.nodeType ? a2.parentNode : a2);
  Rk(function() {
    fl(b2, k2, c2, d2);
  });
  return k2;
}
function rl(a2, b2, c2, d2, e2) {
  var f2 = c2._reactRootContainer;
  if (f2) {
    var g2 = f2;
    if ("function" === typeof e2) {
      var h2 = e2;
      e2 = function() {
        var a3 = gl(g2);
        h2.call(a3);
      };
    }
    fl(b2, g2, a2, e2);
  } else
    g2 = ql(c2, b2, a2, e2, d2);
  return gl(g2);
}
Ec = function(a2) {
  switch (a2.tag) {
    case 3:
      var b2 = a2.stateNode;
      if (b2.current.memoizedState.isDehydrated) {
        var c2 = tc(b2.pendingLanes);
        0 !== c2 && (Cc(b2, c2 | 1), Dk(b2, B$1()), 0 === (K$1 & 6) && (Gj = B$1() + 500, jg()));
      }
      break;
    case 13:
      Rk(function() {
        var b3 = ih(a2, 1);
        if (null !== b3) {
          var c3 = R();
          gi(b3, a2, 1, c3);
        }
      }), il(a2, 1);
  }
};
Fc = function(a2) {
  if (13 === a2.tag) {
    var b2 = ih(a2, 134217728);
    if (null !== b2) {
      var c2 = R();
      gi(b2, a2, 134217728, c2);
    }
    il(a2, 134217728);
  }
};
Gc = function(a2) {
  if (13 === a2.tag) {
    var b2 = yi(a2), c2 = ih(a2, b2);
    if (null !== c2) {
      var d2 = R();
      gi(c2, a2, b2, d2);
    }
    il(a2, b2);
  }
};
Hc = function() {
  return C$1;
};
Ic = function(a2, b2) {
  var c2 = C$1;
  try {
    return C$1 = a2, b2();
  } finally {
    C$1 = c2;
  }
};
yb = function(a2, b2, c2) {
  switch (b2) {
    case "input":
      bb(a2, c2);
      b2 = c2.name;
      if ("radio" === c2.type && null != b2) {
        for (c2 = a2; c2.parentNode; )
          c2 = c2.parentNode;
        c2 = c2.querySelectorAll("input[name=" + JSON.stringify("" + b2) + '][type="radio"]');
        for (b2 = 0; b2 < c2.length; b2++) {
          var d2 = c2[b2];
          if (d2 !== a2 && d2.form === a2.form) {
            var e2 = Db(d2);
            if (!e2)
              throw Error(p$2(90));
            Wa(d2);
            bb(d2, e2);
          }
        }
      }
      break;
    case "textarea":
      ib(a2, c2);
      break;
    case "select":
      b2 = c2.value, null != b2 && fb(a2, !!c2.multiple, b2, false);
  }
};
Gb = Qk;
Hb = Rk;
var sl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Qk] }, tl = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.3.1", rendererPackageName: "react-dom" };
var ul = { bundleType: tl.bundleType, version: tl.version, rendererPackageName: tl.rendererPackageName, rendererConfig: tl.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a2) {
  a2 = Zb(a2);
  return null === a2 ? null : a2.stateNode;
}, findFiberByHostInstance: tl.findFiberByHostInstance || jl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.3.1-next-f1338f8080-20240426" };
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
  var vl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (!vl.isDisabled && vl.supportsFiber)
    try {
      kc = vl.inject(ul), lc = vl;
    } catch (a2) {
    }
}
reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = sl;
reactDom_production_min.createPortal = function(a2, b2) {
  var c2 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
  if (!nl(b2))
    throw Error(p$2(200));
  return cl(a2, b2, null, c2);
};
reactDom_production_min.createRoot = function(a2, b2) {
  if (!nl(a2))
    throw Error(p$2(299));
  var c2 = false, d2 = "", e2 = kl;
  null !== b2 && void 0 !== b2 && (true === b2.unstable_strictMode && (c2 = true), void 0 !== b2.identifierPrefix && (d2 = b2.identifierPrefix), void 0 !== b2.onRecoverableError && (e2 = b2.onRecoverableError));
  b2 = bl(a2, 1, false, null, null, c2, false, d2, e2);
  a2[uf] = b2.current;
  sf(8 === a2.nodeType ? a2.parentNode : a2);
  return new ll(b2);
};
reactDom_production_min.findDOMNode = function(a2) {
  if (null == a2)
    return null;
  if (1 === a2.nodeType)
    return a2;
  var b2 = a2._reactInternals;
  if (void 0 === b2) {
    if ("function" === typeof a2.render)
      throw Error(p$2(188));
    a2 = Object.keys(a2).join(",");
    throw Error(p$2(268, a2));
  }
  a2 = Zb(b2);
  a2 = null === a2 ? null : a2.stateNode;
  return a2;
};
reactDom_production_min.flushSync = function(a2) {
  return Rk(a2);
};
reactDom_production_min.hydrate = function(a2, b2, c2) {
  if (!ol(b2))
    throw Error(p$2(200));
  return rl(null, a2, b2, true, c2);
};
reactDom_production_min.hydrateRoot = function(a2, b2, c2) {
  if (!nl(a2))
    throw Error(p$2(405));
  var d2 = null != c2 && c2.hydratedSources || null, e2 = false, f2 = "", g2 = kl;
  null !== c2 && void 0 !== c2 && (true === c2.unstable_strictMode && (e2 = true), void 0 !== c2.identifierPrefix && (f2 = c2.identifierPrefix), void 0 !== c2.onRecoverableError && (g2 = c2.onRecoverableError));
  b2 = el(b2, null, a2, 1, null != c2 ? c2 : null, e2, false, f2, g2);
  a2[uf] = b2.current;
  sf(a2);
  if (d2)
    for (a2 = 0; a2 < d2.length; a2++)
      c2 = d2[a2], e2 = c2._getVersion, e2 = e2(c2._source), null == b2.mutableSourceEagerHydrationData ? b2.mutableSourceEagerHydrationData = [c2, e2] : b2.mutableSourceEagerHydrationData.push(
        c2,
        e2
      );
  return new ml(b2);
};
reactDom_production_min.render = function(a2, b2, c2) {
  if (!ol(b2))
    throw Error(p$2(200));
  return rl(null, a2, b2, false, c2);
};
reactDom_production_min.unmountComponentAtNode = function(a2) {
  if (!ol(a2))
    throw Error(p$2(40));
  return a2._reactRootContainer ? (Rk(function() {
    rl(null, null, a2, false, function() {
      a2._reactRootContainer = null;
      a2[uf] = null;
    });
  }), true) : false;
};
reactDom_production_min.unstable_batchedUpdates = Qk;
reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a2, b2, c2, d2) {
  if (!ol(c2))
    throw Error(p$2(200));
  if (null == a2 || void 0 === a2._reactInternals)
    throw Error(p$2(38));
  return rl(a2, b2, c2, false, d2);
};
reactDom_production_min.version = "18.3.1-next-f1338f8080-20240426";
function checkDCE() {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
    return;
  }
  try {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    console.error(err);
  }
}
{
  checkDCE();
  reactDom.exports = reactDom_production_min;
}
var reactDomExports = reactDom.exports;
const defaultContext = /* @__PURE__ */ reactExports.createContext(void 0);
const QueryClientSharingContext = /* @__PURE__ */ reactExports.createContext(false);
function getQueryClientContext(context, contextSharing) {
  if (context) {
    return context;
  }
  if (contextSharing && typeof window !== "undefined") {
    if (!window.ReactQueryClientContext) {
      window.ReactQueryClientContext = defaultContext;
    }
    return window.ReactQueryClientContext;
  }
  return defaultContext;
}
const QueryClientProvider = ({
  client: client2,
  children: children2,
  context,
  contextSharing = false
}) => {
  reactExports.useEffect(() => {
    client2.mount();
    return () => {
      client2.unmount();
    };
  }, [client2]);
  const Context2 = getQueryClientContext(context, contextSharing);
  return /* @__PURE__ */ reactExports.createElement(QueryClientSharingContext.Provider, {
    value: !context && contextSharing
  }, /* @__PURE__ */ reactExports.createElement(Context2.Provider, {
    value: client2
  }, children2));
};
var buffer$1 = {};
var base64Js = {};
base64Js.byteLength = byteLength;
base64Js.toByteArray = toByteArray;
base64Js.fromByteArray = fromByteArray;
var lookup$5 = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var i$1 = 0, len = code.length; i$1 < len; ++i$1) {
  lookup$5[i$1] = code[i$1];
  revLookup[code.charCodeAt(i$1)] = i$1;
}
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
  var len2 = b64.length;
  if (len2 % 4 > 0) {
    throw new Error("Invalid string. Length must be a multiple of 4");
  }
  var validLen = b64.indexOf("=");
  if (validLen === -1)
    validLen = len2;
  var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
}
function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0;
  var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i2;
  for (i2 = 0; i2 < len2; i2 += 4) {
    tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
    arr[curByte++] = tmp >> 16 & 255;
    arr[curByte++] = tmp >> 8 & 255;
    arr[curByte++] = tmp & 255;
  }
  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
    arr[curByte++] = tmp & 255;
  }
  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 255;
    arr[curByte++] = tmp & 255;
  }
  return arr;
}
function tripletToBase64(num) {
  return lookup$5[num >> 18 & 63] + lookup$5[num >> 12 & 63] + lookup$5[num >> 6 & 63] + lookup$5[num & 63];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i2 = start; i2 < end; i2 += 3) {
    tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
    output.push(tripletToBase64(tmp));
  }
  return output.join("");
}
function fromByteArray(uint8) {
  var tmp;
  var len2 = uint8.length;
  var extraBytes = len2 % 3;
  var parts = [];
  var maxChunkLength = 16383;
  for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
    parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
  }
  if (extraBytes === 1) {
    tmp = uint8[len2 - 1];
    parts.push(
      lookup$5[tmp >> 2] + lookup$5[tmp << 4 & 63] + "=="
    );
  } else if (extraBytes === 2) {
    tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
    parts.push(
      lookup$5[tmp >> 10] + lookup$5[tmp >> 4 & 63] + lookup$5[tmp << 2 & 63] + "="
    );
  }
  return parts.join("");
}
var ieee754 = {};
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
ieee754.read = function(buffer2, offset, isLE, mLen, nBytes) {
  var e2, m2;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i2 = isLE ? nBytes - 1 : 0;
  var d2 = isLE ? -1 : 1;
  var s2 = buffer2[offset + i2];
  i2 += d2;
  e2 = s2 & (1 << -nBits) - 1;
  s2 >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e2 = e2 * 256 + buffer2[offset + i2], i2 += d2, nBits -= 8) {
  }
  m2 = e2 & (1 << -nBits) - 1;
  e2 >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m2 = m2 * 256 + buffer2[offset + i2], i2 += d2, nBits -= 8) {
  }
  if (e2 === 0) {
    e2 = 1 - eBias;
  } else if (e2 === eMax) {
    return m2 ? NaN : (s2 ? -1 : 1) * Infinity;
  } else {
    m2 = m2 + Math.pow(2, mLen);
    e2 = e2 - eBias;
  }
  return (s2 ? -1 : 1) * m2 * Math.pow(2, e2 - mLen);
};
ieee754.write = function(buffer2, value, offset, isLE, mLen, nBytes) {
  var e2, m2, c2;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i2 = isLE ? 0 : nBytes - 1;
  var d2 = isLE ? 1 : -1;
  var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);
  if (isNaN(value) || value === Infinity) {
    m2 = isNaN(value) ? 1 : 0;
    e2 = eMax;
  } else {
    e2 = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c2 = Math.pow(2, -e2)) < 1) {
      e2--;
      c2 *= 2;
    }
    if (e2 + eBias >= 1) {
      value += rt / c2;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c2 >= 2) {
      e2++;
      c2 /= 2;
    }
    if (e2 + eBias >= eMax) {
      m2 = 0;
      e2 = eMax;
    } else if (e2 + eBias >= 1) {
      m2 = (value * c2 - 1) * Math.pow(2, mLen);
      e2 = e2 + eBias;
    } else {
      m2 = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e2 = 0;
    }
  }
  for (; mLen >= 8; buffer2[offset + i2] = m2 & 255, i2 += d2, m2 /= 256, mLen -= 8) {
  }
  e2 = e2 << mLen | m2;
  eLen += mLen;
  for (; eLen > 0; buffer2[offset + i2] = e2 & 255, i2 += d2, e2 /= 256, eLen -= 8) {
  }
  buffer2[offset + i2 - d2] |= s2 * 128;
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
(function(exports2) {
  var base64 = base64Js;
  var ieee754$1 = ieee754;
  var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
  exports2.Buffer = Buffer;
  exports2.SlowBuffer = SlowBuffer;
  exports2.INSPECT_MAX_BYTES = 50;
  var K_MAX_LENGTH = 2147483647;
  exports2.kMaxLength = K_MAX_LENGTH;
  Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
  if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
    console.error(
      "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
    );
  }
  function typedArraySupport() {
    try {
      var arr = new Uint8Array(1);
      var proto = { foo: function() {
        return 42;
      } };
      Object.setPrototypeOf(proto, Uint8Array.prototype);
      Object.setPrototypeOf(arr, proto);
      return arr.foo() === 42;
    } catch (e2) {
      return false;
    }
  }
  Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
      if (!Buffer.isBuffer(this))
        return void 0;
      return this.buffer;
    }
  });
  Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
      if (!Buffer.isBuffer(this))
        return void 0;
      return this.byteOffset;
    }
  });
  function createBuffer(length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"');
    }
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
  }
  function Buffer(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      if (typeof encodingOrOffset === "string") {
        throw new TypeError(
          'The "string" argument must be of type string. Received type number'
        );
      }
      return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
  }
  Buffer.poolSize = 8192;
  function from(value, encodingOrOffset, length) {
    if (typeof value === "string") {
      return fromString(value, encodingOrOffset);
    }
    if (ArrayBuffer.isView(value)) {
      return fromArrayView(value);
    }
    if (value == null) {
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof value === "number") {
      throw new TypeError(
        'The "value" argument must not be of type number. Received type number'
      );
    }
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) {
      return Buffer.from(valueOf, encodingOrOffset, length);
    }
    var b2 = fromObject(value);
    if (b2)
      return b2;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
      return Buffer.from(
        value[Symbol.toPrimitive]("string"),
        encodingOrOffset,
        length
      );
    }
    throw new TypeError(
      "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
    );
  }
  Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
  };
  Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
  Object.setPrototypeOf(Buffer, Uint8Array);
  function assertSize(size2) {
    if (typeof size2 !== "number") {
      throw new TypeError('"size" argument must be of type number');
    } else if (size2 < 0) {
      throw new RangeError('The value "' + size2 + '" is invalid for option "size"');
    }
  }
  function alloc(size2, fill, encoding) {
    assertSize(size2);
    if (size2 <= 0) {
      return createBuffer(size2);
    }
    if (fill !== void 0) {
      return typeof encoding === "string" ? createBuffer(size2).fill(fill, encoding) : createBuffer(size2).fill(fill);
    }
    return createBuffer(size2);
  }
  Buffer.alloc = function(size2, fill, encoding) {
    return alloc(size2, fill, encoding);
  };
  function allocUnsafe(size2) {
    assertSize(size2);
    return createBuffer(size2 < 0 ? 0 : checked(size2) | 0);
  }
  Buffer.allocUnsafe = function(size2) {
    return allocUnsafe(size2);
  };
  Buffer.allocUnsafeSlow = function(size2) {
    return allocUnsafe(size2);
  };
  function fromString(string2, encoding) {
    if (typeof encoding !== "string" || encoding === "") {
      encoding = "utf8";
    }
    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError("Unknown encoding: " + encoding);
    }
    var length = byteLength2(string2, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string2, encoding);
    if (actual !== length) {
      buf = buf.slice(0, actual);
    }
    return buf;
  }
  function fromArrayLike(array2) {
    var length = array2.length < 0 ? 0 : checked(array2.length) | 0;
    var buf = createBuffer(length);
    for (var i2 = 0; i2 < length; i2 += 1) {
      buf[i2] = array2[i2] & 255;
    }
    return buf;
  }
  function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
      var copy2 = new Uint8Array(arrayView);
      return fromArrayBuffer(copy2.buffer, copy2.byteOffset, copy2.byteLength);
    }
    return fromArrayLike(arrayView);
  }
  function fromArrayBuffer(array2, byteOffset, length) {
    if (byteOffset < 0 || array2.byteLength < byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds');
    }
    if (array2.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds');
    }
    var buf;
    if (byteOffset === void 0 && length === void 0) {
      buf = new Uint8Array(array2);
    } else if (length === void 0) {
      buf = new Uint8Array(array2, byteOffset);
    } else {
      buf = new Uint8Array(array2, byteOffset, length);
    }
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
  }
  function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
      var len2 = checked(obj.length) | 0;
      var buf = createBuffer(len2);
      if (buf.length === 0) {
        return buf;
      }
      obj.copy(buf, 0, 0, len2);
      return buf;
    }
    if (obj.length !== void 0) {
      if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
        return createBuffer(0);
      }
      return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data);
    }
  }
  function checked(length) {
    if (length >= K_MAX_LENGTH) {
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    }
    return length | 0;
  }
  function SlowBuffer(length) {
    if (+length != length) {
      length = 0;
    }
    return Buffer.alloc(+length);
  }
  Buffer.isBuffer = function isBuffer2(b2) {
    return b2 != null && b2._isBuffer === true && b2 !== Buffer.prototype;
  };
  Buffer.compare = function compare(a2, b2) {
    if (isInstance(a2, Uint8Array))
      a2 = Buffer.from(a2, a2.offset, a2.byteLength);
    if (isInstance(b2, Uint8Array))
      b2 = Buffer.from(b2, b2.offset, b2.byteLength);
    if (!Buffer.isBuffer(a2) || !Buffer.isBuffer(b2)) {
      throw new TypeError(
        'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
      );
    }
    if (a2 === b2)
      return 0;
    var x2 = a2.length;
    var y2 = b2.length;
    for (var i2 = 0, len2 = Math.min(x2, y2); i2 < len2; ++i2) {
      if (a2[i2] !== b2[i2]) {
        x2 = a2[i2];
        y2 = b2[i2];
        break;
      }
    }
    if (x2 < y2)
      return -1;
    if (y2 < x2)
      return 1;
    return 0;
  };
  Buffer.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return true;
      default:
        return false;
    }
  };
  Buffer.concat = function concat2(list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    if (list.length === 0) {
      return Buffer.alloc(0);
    }
    var i2;
    if (length === void 0) {
      length = 0;
      for (i2 = 0; i2 < list.length; ++i2) {
        length += list[i2].length;
      }
    }
    var buffer2 = Buffer.allocUnsafe(length);
    var pos = 0;
    for (i2 = 0; i2 < list.length; ++i2) {
      var buf = list[i2];
      if (isInstance(buf, Uint8Array)) {
        if (pos + buf.length > buffer2.length) {
          Buffer.from(buf).copy(buffer2, pos);
        } else {
          Uint8Array.prototype.set.call(
            buffer2,
            buf,
            pos
          );
        }
      } else if (!Buffer.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      } else {
        buf.copy(buffer2, pos);
      }
      pos += buf.length;
    }
    return buffer2;
  };
  function byteLength2(string2, encoding) {
    if (Buffer.isBuffer(string2)) {
      return string2.length;
    }
    if (ArrayBuffer.isView(string2) || isInstance(string2, ArrayBuffer)) {
      return string2.byteLength;
    }
    if (typeof string2 !== "string") {
      throw new TypeError(
        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string2
      );
    }
    var len2 = string2.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len2 === 0)
      return 0;
    var loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "ascii":
        case "latin1":
        case "binary":
          return len2;
        case "utf8":
        case "utf-8":
          return utf8ToBytes(string2).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return len2 * 2;
        case "hex":
          return len2 >>> 1;
        case "base64":
          return base64ToBytes(string2).length;
        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string2).length;
          }
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer.byteLength = byteLength2;
  function slowToString(encoding, start, end) {
    var loweredCase = false;
    if (start === void 0 || start < 0) {
      start = 0;
    }
    if (start > this.length) {
      return "";
    }
    if (end === void 0 || end > this.length) {
      end = this.length;
    }
    if (end <= 0) {
      return "";
    }
    end >>>= 0;
    start >>>= 0;
    if (end <= start) {
      return "";
    }
    if (!encoding)
      encoding = "utf8";
    while (true) {
      switch (encoding) {
        case "hex":
          return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
          return utf8Slice(this, start, end);
        case "ascii":
          return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
          return latin1Slice(this, start, end);
        case "base64":
          return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return utf16leSlice(this, start, end);
        default:
          if (loweredCase)
            throw new TypeError("Unknown encoding: " + encoding);
          encoding = (encoding + "").toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer.prototype._isBuffer = true;
  function swap2(b2, n2, m2) {
    var i2 = b2[n2];
    b2[n2] = b2[m2];
    b2[m2] = i2;
  }
  Buffer.prototype.swap16 = function swap16() {
    var len2 = this.length;
    if (len2 % 2 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    }
    for (var i2 = 0; i2 < len2; i2 += 2) {
      swap2(this, i2, i2 + 1);
    }
    return this;
  };
  Buffer.prototype.swap32 = function swap32() {
    var len2 = this.length;
    if (len2 % 4 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    }
    for (var i2 = 0; i2 < len2; i2 += 4) {
      swap2(this, i2, i2 + 3);
      swap2(this, i2 + 1, i2 + 2);
    }
    return this;
  };
  Buffer.prototype.swap64 = function swap64() {
    var len2 = this.length;
    if (len2 % 8 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    }
    for (var i2 = 0; i2 < len2; i2 += 8) {
      swap2(this, i2, i2 + 7);
      swap2(this, i2 + 1, i2 + 6);
      swap2(this, i2 + 2, i2 + 5);
      swap2(this, i2 + 3, i2 + 4);
    }
    return this;
  };
  Buffer.prototype.toString = function toString2() {
    var length = this.length;
    if (length === 0)
      return "";
    if (arguments.length === 0)
      return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };
  Buffer.prototype.toLocaleString = Buffer.prototype.toString;
  Buffer.prototype.equals = function equals(b2) {
    if (!Buffer.isBuffer(b2))
      throw new TypeError("Argument must be a Buffer");
    if (this === b2)
      return true;
    return Buffer.compare(this, b2) === 0;
  };
  Buffer.prototype.inspect = function inspect() {
    var str = "";
    var max2 = exports2.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max2).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max2)
      str += " ... ";
    return "<Buffer " + str + ">";
  };
  if (customInspectSymbol) {
    Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
  }
  Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
      target = Buffer.from(target, target.offset, target.byteLength);
    }
    if (!Buffer.isBuffer(target)) {
      throw new TypeError(
        'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
      );
    }
    if (start === void 0) {
      start = 0;
    }
    if (end === void 0) {
      end = target ? target.length : 0;
    }
    if (thisStart === void 0) {
      thisStart = 0;
    }
    if (thisEnd === void 0) {
      thisEnd = this.length;
    }
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError("out of range index");
    }
    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }
    if (thisStart >= thisEnd) {
      return -1;
    }
    if (start >= end) {
      return 1;
    }
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target)
      return 0;
    var x2 = thisEnd - thisStart;
    var y2 = end - start;
    var len2 = Math.min(x2, y2);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for (var i2 = 0; i2 < len2; ++i2) {
      if (thisCopy[i2] !== targetCopy[i2]) {
        x2 = thisCopy[i2];
        y2 = targetCopy[i2];
        break;
      }
    }
    if (x2 < y2)
      return -1;
    if (y2 < x2)
      return 1;
    return 0;
  };
  function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {
    if (buffer2.length === 0)
      return -1;
    if (typeof byteOffset === "string") {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 2147483647) {
      byteOffset = 2147483647;
    } else if (byteOffset < -2147483648) {
      byteOffset = -2147483648;
    }
    byteOffset = +byteOffset;
    if (numberIsNaN(byteOffset)) {
      byteOffset = dir ? 0 : buffer2.length - 1;
    }
    if (byteOffset < 0)
      byteOffset = buffer2.length + byteOffset;
    if (byteOffset >= buffer2.length) {
      if (dir)
        return -1;
      else
        byteOffset = buffer2.length - 1;
    } else if (byteOffset < 0) {
      if (dir)
        byteOffset = 0;
      else
        return -1;
    }
    if (typeof val === "string") {
      val = Buffer.from(val, encoding);
    }
    if (Buffer.isBuffer(val)) {
      if (val.length === 0) {
        return -1;
      }
      return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
      val = val & 255;
      if (typeof Uint8Array.prototype.indexOf === "function") {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
        }
      }
      return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
  }
  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== void 0) {
      encoding = String(encoding).toLowerCase();
      if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }
    function read(buf, i3) {
      if (indexSize === 1) {
        return buf[i3];
      } else {
        return buf.readUInt16BE(i3 * indexSize);
      }
    }
    var i2;
    if (dir) {
      var foundIndex = -1;
      for (i2 = byteOffset; i2 < arrLength; i2++) {
        if (read(arr, i2) === read(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
          if (foundIndex === -1)
            foundIndex = i2;
          if (i2 - foundIndex + 1 === valLength)
            return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1)
            i2 -= i2 - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength)
        byteOffset = arrLength - valLength;
      for (i2 = byteOffset; i2 >= 0; i2--) {
        var found = true;
        for (var j2 = 0; j2 < valLength; j2++) {
          if (read(arr, i2 + j2) !== read(val, j2)) {
            found = false;
            break;
          }
        }
        if (found)
          return i2;
      }
    }
    return -1;
  }
  Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };
  Buffer.prototype.indexOf = function indexOf2(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };
  Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };
  function hexWrite(buf, string2, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }
    var strLen = string2.length;
    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i2 = 0; i2 < length; ++i2) {
      var parsed = parseInt(string2.substr(i2 * 2, 2), 16);
      if (numberIsNaN(parsed))
        return i2;
      buf[offset + i2] = parsed;
    }
    return i2;
  }
  function utf8Write(buf, string2, offset, length) {
    return blitBuffer(utf8ToBytes(string2, buf.length - offset), buf, offset, length);
  }
  function asciiWrite(buf, string2, offset, length) {
    return blitBuffer(asciiToBytes(string2), buf, offset, length);
  }
  function base64Write(buf, string2, offset, length) {
    return blitBuffer(base64ToBytes(string2), buf, offset, length);
  }
  function ucs2Write(buf, string2, offset, length) {
    return blitBuffer(utf16leToBytes(string2, buf.length - offset), buf, offset, length);
  }
  Buffer.prototype.write = function write(string2, offset, length, encoding) {
    if (offset === void 0) {
      encoding = "utf8";
      length = this.length;
      offset = 0;
    } else if (length === void 0 && typeof offset === "string") {
      encoding = offset;
      length = this.length;
      offset = 0;
    } else if (isFinite(offset)) {
      offset = offset >>> 0;
      if (isFinite(length)) {
        length = length >>> 0;
        if (encoding === void 0)
          encoding = "utf8";
      } else {
        encoding = length;
        length = void 0;
      }
    } else {
      throw new Error(
        "Buffer.write(string, encoding, offset[, length]) is no longer supported"
      );
    }
    var remaining = this.length - offset;
    if (length === void 0 || length > remaining)
      length = remaining;
    if (string2.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
      throw new RangeError("Attempt to write outside buffer bounds");
    }
    if (!encoding)
      encoding = "utf8";
    var loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "hex":
          return hexWrite(this, string2, offset, length);
        case "utf8":
        case "utf-8":
          return utf8Write(this, string2, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
          return asciiWrite(this, string2, offset, length);
        case "base64":
          return base64Write(this, string2, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return ucs2Write(this, string2, offset, length);
        default:
          if (loweredCase)
            throw new TypeError("Unknown encoding: " + encoding);
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };
  Buffer.prototype.toJSON = function toJSON() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf);
    } else {
      return base64.fromByteArray(buf.slice(start, end));
    }
  }
  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i2 = start;
    while (i2 < end) {
      var firstByte = buf[i2];
      var codePoint = null;
      var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
      if (i2 + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 128) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf[i2 + 1];
            if ((secondByte & 192) === 128) {
              tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
              if (tempCodePoint > 127) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf[i2 + 1];
            thirdByte = buf[i2 + 2];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
              if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf[i2 + 1];
            thirdByte = buf[i2 + 2];
            fourthByte = buf[i2 + 3];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
              if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        codePoint = 65533;
        bytesPerSequence = 1;
      } else if (codePoint > 65535) {
        codePoint -= 65536;
        res.push(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      res.push(codePoint);
      i2 += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }
  var MAX_ARGUMENTS_LENGTH = 4096;
  function decodeCodePointsArray(codePoints) {
    var len2 = codePoints.length;
    if (len2 <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints);
    }
    var res = "";
    var i2 = 0;
    while (i2 < len2) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res;
  }
  function asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for (var i2 = start; i2 < end; ++i2) {
      ret += String.fromCharCode(buf[i2] & 127);
    }
    return ret;
  }
  function latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for (var i2 = start; i2 < end; ++i2) {
      ret += String.fromCharCode(buf[i2]);
    }
    return ret;
  }
  function hexSlice(buf, start, end) {
    var len2 = buf.length;
    if (!start || start < 0)
      start = 0;
    if (!end || end < 0 || end > len2)
      end = len2;
    var out = "";
    for (var i2 = start; i2 < end; ++i2) {
      out += hexSliceLookupTable[buf[i2]];
    }
    return out;
  }
  function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    for (var i2 = 0; i2 < bytes.length - 1; i2 += 2) {
      res += String.fromCharCode(bytes[i2] + bytes[i2 + 1] * 256);
    }
    return res;
  }
  Buffer.prototype.slice = function slice(start, end) {
    var len2 = this.length;
    start = ~~start;
    end = end === void 0 ? len2 : ~~end;
    if (start < 0) {
      start += len2;
      if (start < 0)
        start = 0;
    } else if (start > len2) {
      start = len2;
    }
    if (end < 0) {
      end += len2;
      if (end < 0)
        end = 0;
    } else if (end > len2) {
      end = len2;
    }
    if (end < start)
      end = start;
    var newBuf = this.subarray(start, end);
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
  };
  function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0)
      throw new RangeError("offset is not uint");
    if (offset + ext > length)
      throw new RangeError("Trying to access beyond buffer length");
  }
  Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert)
      checkOffset(offset, byteLength3, this.length);
    var val = this[offset];
    var mul = 1;
    var i2 = 0;
    while (++i2 < byteLength3 && (mul *= 256)) {
      val += this[offset + i2] * mul;
    }
    return val;
  };
  Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) {
      checkOffset(offset, byteLength3, this.length);
    }
    var val = this[offset + --byteLength3];
    var mul = 1;
    while (byteLength3 > 0 && (mul *= 256)) {
      val += this[offset + --byteLength3] * mul;
    }
    return val;
  };
  Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 1, this.length);
    return this[offset];
  };
  Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
  };
  Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
  };
  Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
  };
  Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };
  Buffer.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert)
      checkOffset(offset, byteLength3, this.length);
    var val = this[offset];
    var mul = 1;
    var i2 = 0;
    while (++i2 < byteLength3 && (mul *= 256)) {
      val += this[offset + i2] * mul;
    }
    mul *= 128;
    if (val >= mul)
      val -= Math.pow(2, 8 * byteLength3);
    return val;
  };
  Buffer.prototype.readIntBE = function readIntBE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert)
      checkOffset(offset, byteLength3, this.length);
    var i2 = byteLength3;
    var mul = 1;
    var val = this[offset + --i2];
    while (i2 > 0 && (mul *= 256)) {
      val += this[offset + --i2] * mul;
    }
    mul *= 128;
    if (val >= mul)
      val -= Math.pow(2, 8 * byteLength3);
    return val;
  };
  Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128))
      return this[offset];
    return (255 - this[offset] + 1) * -1;
  };
  Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
  };
  Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
  };
  Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };
  Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };
  Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return ieee754$1.read(this, offset, true, 23, 4);
  };
  Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return ieee754$1.read(this, offset, false, 23, 4);
  };
  Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 8, this.length);
    return ieee754$1.read(this, offset, true, 52, 8);
  };
  Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 8, this.length);
    return ieee754$1.read(this, offset, false, 52, 8);
  };
  function checkInt(buf, value, offset, ext, max2, min2) {
    if (!Buffer.isBuffer(buf))
      throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max2 || value < min2)
      throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length)
      throw new RangeError("Index out of range");
  }
  Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength3, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength3) - 1;
      checkInt(this, value, offset, byteLength3, maxBytes, 0);
    }
    var mul = 1;
    var i2 = 0;
    this[offset] = value & 255;
    while (++i2 < byteLength3 && (mul *= 256)) {
      this[offset + i2] = value / mul & 255;
    }
    return offset + byteLength3;
  };
  Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength3, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength3) - 1;
      checkInt(this, value, offset, byteLength3, maxBytes, 0);
    }
    var i2 = byteLength3 - 1;
    var mul = 1;
    this[offset + i2] = value & 255;
    while (--i2 >= 0 && (mul *= 256)) {
      this[offset + i2] = value / mul & 255;
    }
    return offset + byteLength3;
  };
  Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 1, 255, 0);
    this[offset] = value & 255;
    return offset + 1;
  };
  Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };
  Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
  };
  Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 255;
    return offset + 4;
  };
  Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
  };
  Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength3, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength3 - 1);
      checkInt(this, value, offset, byteLength3, limit - 1, -limit);
    }
    var i2 = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 255;
    while (++i2 < byteLength3 && (mul *= 256)) {
      if (value < 0 && sub === 0 && this[offset + i2 - 1] !== 0) {
        sub = 1;
      }
      this[offset + i2] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength3;
  };
  Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength3, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength3 - 1);
      checkInt(this, value, offset, byteLength3, limit - 1, -limit);
    }
    var i2 = byteLength3 - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i2] = value & 255;
    while (--i2 >= 0 && (mul *= 256)) {
      if (value < 0 && sub === 0 && this[offset + i2 + 1] !== 0) {
        sub = 1;
      }
      this[offset + i2] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength3;
  };
  Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 1, 127, -128);
    if (value < 0)
      value = 255 + value + 1;
    this[offset] = value & 255;
    return offset + 1;
  };
  Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };
  Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
  };
  Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 2147483647, -2147483648);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
  };
  Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (value < 0)
      value = 4294967295 + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
  };
  function checkIEEE754(buf, value, offset, ext, max2, min2) {
    if (offset + ext > buf.length)
      throw new RangeError("Index out of range");
    if (offset < 0)
      throw new RangeError("Index out of range");
  }
  function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }
    ieee754$1.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }
  Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
  };
  Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
  };
  function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }
    ieee754$1.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }
  Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
  };
  Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
  };
  Buffer.prototype.copy = function copy2(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target))
      throw new TypeError("argument should be a Buffer");
    if (!start)
      start = 0;
    if (!end && end !== 0)
      end = this.length;
    if (targetStart >= target.length)
      targetStart = target.length;
    if (!targetStart)
      targetStart = 0;
    if (end > 0 && end < start)
      end = start;
    if (end === start)
      return 0;
    if (target.length === 0 || this.length === 0)
      return 0;
    if (targetStart < 0) {
      throw new RangeError("targetStart out of bounds");
    }
    if (start < 0 || start >= this.length)
      throw new RangeError("Index out of range");
    if (end < 0)
      throw new RangeError("sourceEnd out of bounds");
    if (end > this.length)
      end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }
    var len2 = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
      this.copyWithin(targetStart, start, end);
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, end),
        targetStart
      );
    }
    return len2;
  };
  Buffer.prototype.fill = function fill(val, start, end, encoding) {
    if (typeof val === "string") {
      if (typeof start === "string") {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === "string") {
        encoding = end;
        end = this.length;
      }
      if (encoding !== void 0 && typeof encoding !== "string") {
        throw new TypeError("encoding must be a string");
      }
      if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      if (val.length === 1) {
        var code2 = val.charCodeAt(0);
        if (encoding === "utf8" && code2 < 128 || encoding === "latin1") {
          val = code2;
        }
      }
    } else if (typeof val === "number") {
      val = val & 255;
    } else if (typeof val === "boolean") {
      val = Number(val);
    }
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError("Out of range index");
    }
    if (end <= start) {
      return this;
    }
    start = start >>> 0;
    end = end === void 0 ? this.length : end >>> 0;
    if (!val)
      val = 0;
    var i2;
    if (typeof val === "number") {
      for (i2 = start; i2 < end; ++i2) {
        this[i2] = val;
      }
    } else {
      var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
      var len2 = bytes.length;
      if (len2 === 0) {
        throw new TypeError('The value "' + val + '" is invalid for argument "value"');
      }
      for (i2 = 0; i2 < end - start; ++i2) {
        this[i2 + start] = bytes[i2 % len2];
      }
    }
    return this;
  };
  var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
  function base64clean(str) {
    str = str.split("=")[0];
    str = str.trim().replace(INVALID_BASE64_RE, "");
    if (str.length < 2)
      return "";
    while (str.length % 4 !== 0) {
      str = str + "=";
    }
    return str;
  }
  function utf8ToBytes(string2, units) {
    units = units || Infinity;
    var codePoint;
    var length = string2.length;
    var leadSurrogate = null;
    var bytes = [];
    for (var i2 = 0; i2 < length; ++i2) {
      codePoint = string2.charCodeAt(i2);
      if (codePoint > 55295 && codePoint < 57344) {
        if (!leadSurrogate) {
          if (codePoint > 56319) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            continue;
          } else if (i2 + 1 === length) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            continue;
          }
          leadSurrogate = codePoint;
          continue;
        }
        if (codePoint < 56320) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
          leadSurrogate = codePoint;
          continue;
        }
        codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
      } else if (leadSurrogate) {
        if ((units -= 3) > -1)
          bytes.push(239, 191, 189);
      }
      leadSurrogate = null;
      if (codePoint < 128) {
        if ((units -= 1) < 0)
          break;
        bytes.push(codePoint);
      } else if (codePoint < 2048) {
        if ((units -= 2) < 0)
          break;
        bytes.push(
          codePoint >> 6 | 192,
          codePoint & 63 | 128
        );
      } else if (codePoint < 65536) {
        if ((units -= 3) < 0)
          break;
        bytes.push(
          codePoint >> 12 | 224,
          codePoint >> 6 & 63 | 128,
          codePoint & 63 | 128
        );
      } else if (codePoint < 1114112) {
        if ((units -= 4) < 0)
          break;
        bytes.push(
          codePoint >> 18 | 240,
          codePoint >> 12 & 63 | 128,
          codePoint >> 6 & 63 | 128,
          codePoint & 63 | 128
        );
      } else {
        throw new Error("Invalid code point");
      }
    }
    return bytes;
  }
  function asciiToBytes(str) {
    var byteArray = [];
    for (var i2 = 0; i2 < str.length; ++i2) {
      byteArray.push(str.charCodeAt(i2) & 255);
    }
    return byteArray;
  }
  function utf16leToBytes(str, units) {
    var c2, hi2, lo;
    var byteArray = [];
    for (var i2 = 0; i2 < str.length; ++i2) {
      if ((units -= 2) < 0)
        break;
      c2 = str.charCodeAt(i2);
      hi2 = c2 >> 8;
      lo = c2 % 256;
      byteArray.push(lo);
      byteArray.push(hi2);
    }
    return byteArray;
  }
  function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
  }
  function blitBuffer(src2, dst, offset, length) {
    for (var i2 = 0; i2 < length; ++i2) {
      if (i2 + offset >= dst.length || i2 >= src2.length)
        break;
      dst[i2 + offset] = src2[i2];
    }
    return i2;
  }
  function isInstance(obj, type2) {
    return obj instanceof type2 || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type2.name;
  }
  function numberIsNaN(obj) {
    return obj !== obj;
  }
  var hexSliceLookupTable = function() {
    var alphabet2 = "0123456789abcdef";
    var table = new Array(256);
    for (var i2 = 0; i2 < 16; ++i2) {
      var i16 = i2 * 16;
      for (var j2 = 0; j2 < 16; ++j2) {
        table[i16 + j2] = alphabet2[i2] + alphabet2[j2];
      }
    }
    return table;
  }();
})(buffer$1);
var browser$d = { exports: {} };
var process = browser$d.exports = {};
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
  throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
  throw new Error("clearTimeout has not been defined");
}
(function() {
  try {
    if (typeof setTimeout === "function") {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e2) {
    cachedSetTimeout = defaultSetTimout;
  }
  try {
    if (typeof clearTimeout === "function") {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e2) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    return setTimeout(fun, 0);
  }
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    return cachedSetTimeout(fun, 0);
  } catch (e2) {
    try {
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e3) {
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    return clearTimeout(marker);
  }
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    return cachedClearTimeout(marker);
  } catch (e2) {
    try {
      return cachedClearTimeout.call(null, marker);
    } catch (e3) {
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout2 = runTimeout(cleanUpNextTick);
  draining = true;
  var len2 = queue.length;
  while (len2) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len2) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len2 = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout2);
}
process.nextTick = function(fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      args[i2 - 1] = arguments[i2];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
};
function Item(fun, array2) {
  this.fun = fun;
  this.array = array2;
}
Item.prototype.run = function() {
  this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = "";
process.versions = {};
function noop() {
}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name2) {
  return [];
};
process.binding = function(name2) {
  throw new Error("process.binding is not supported");
};
process.cwd = function() {
  return "/";
};
process.chdir = function(dir) {
  throw new Error("process.chdir is not supported");
};
process.umask = function() {
  return 0;
};
var browserExports = browser$d.exports;
const process$1 = /* @__PURE__ */ getDefaultExportFromCjs(browserExports);
(function(Object2) {
  function get() {
    var _global2 = this || self;
    delete Object2.prototype.__magic__;
    return _global2;
  }
  if (typeof globalThis === "object") {
    return globalThis;
  }
  if (this) {
    return get();
  } else {
    Object2.defineProperty(Object2.prototype, "__magic__", {
      configurable: true,
      get
    });
    var _global = __magic__;
    return _global;
  }
})(Object);
var naclUtil = { exports: {} };
(function(module) {
  (function(root, f2) {
    if (module.exports)
      module.exports = f2();
    else if (root.nacl)
      root.nacl.util = f2();
    else {
      root.nacl = {};
      root.nacl.util = f2();
    }
  })(commonjsGlobal, function() {
    var util2 = {};
    function validateBase64(s2) {
      if (!/^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(s2)) {
        throw new TypeError("invalid encoding");
      }
    }
    util2.decodeUTF8 = function(s2) {
      if (typeof s2 !== "string")
        throw new TypeError("expected string");
      var i2, d2 = unescape(encodeURIComponent(s2)), b2 = new Uint8Array(d2.length);
      for (i2 = 0; i2 < d2.length; i2++)
        b2[i2] = d2.charCodeAt(i2);
      return b2;
    };
    util2.encodeUTF8 = function(arr) {
      var i2, s2 = [];
      for (i2 = 0; i2 < arr.length; i2++)
        s2.push(String.fromCharCode(arr[i2]));
      return decodeURIComponent(escape(s2.join("")));
    };
    if (typeof atob === "undefined") {
      if (typeof buffer$1.Buffer.from !== "undefined") {
        util2.encodeBase64 = function(arr) {
          return buffer$1.Buffer.from(arr).toString("base64");
        };
        util2.decodeBase64 = function(s2) {
          validateBase64(s2);
          return new Uint8Array(Array.prototype.slice.call(buffer$1.Buffer.from(s2, "base64"), 0));
        };
      } else {
        util2.encodeBase64 = function(arr) {
          return new buffer$1.Buffer(arr).toString("base64");
        };
        util2.decodeBase64 = function(s2) {
          validateBase64(s2);
          return new Uint8Array(Array.prototype.slice.call(new buffer$1.Buffer(s2, "base64"), 0));
        };
      }
    } else {
      util2.encodeBase64 = function(arr) {
        var i2, s2 = [], len2 = arr.length;
        for (i2 = 0; i2 < len2; i2++)
          s2.push(String.fromCharCode(arr[i2]));
        return btoa(s2.join(""));
      };
      util2.decodeBase64 = function(s2) {
        validateBase64(s2);
        var i2, d2 = atob(s2), b2 = new Uint8Array(d2.length);
        for (i2 = 0; i2 < d2.length; i2++)
          b2[i2] = d2.charCodeAt(i2);
        return b2;
      };
    }
    return util2;
  });
})(naclUtil);
var naclUtilExports = naclUtil.exports;
const nacl$2 = /* @__PURE__ */ getDefaultExportFromCjs(naclUtilExports);
function commonjsRequire(path) {
  throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var naclFast = { exports: {} };
var cryptoBrowserify = {};
var browser$c = { exports: {} };
var safeBuffer$1 = { exports: {} };
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
var hasRequiredSafeBuffer$1;
function requireSafeBuffer$1() {
  if (hasRequiredSafeBuffer$1)
    return safeBuffer$1.exports;
  hasRequiredSafeBuffer$1 = 1;
  (function(module, exports2) {
    var buffer2 = buffer$1;
    var Buffer = buffer2.Buffer;
    function copyProps(src2, dst) {
      for (var key2 in src2) {
        dst[key2] = src2[key2];
      }
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer2;
    } else {
      copyProps(buffer2, exports2);
      exports2.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer.prototype);
    copyProps(Buffer, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size2, fill, encoding) {
      if (typeof size2 !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer(size2);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size2) {
      if (typeof size2 !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer(size2);
    };
    SafeBuffer.allocUnsafeSlow = function(size2) {
      if (typeof size2 !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer2.SlowBuffer(size2);
    };
  })(safeBuffer$1, safeBuffer$1.exports);
  return safeBuffer$1.exports;
}
var hasRequiredBrowser$b;
function requireBrowser$b() {
  if (hasRequiredBrowser$b)
    return browser$c.exports;
  hasRequiredBrowser$b = 1;
  var MAX_BYTES = 65536;
  var MAX_UINT32 = 4294967295;
  function oldBrowser() {
    throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
  }
  var Buffer = requireSafeBuffer$1().Buffer;
  var crypto2 = commonjsGlobal.crypto || commonjsGlobal.msCrypto;
  if (crypto2 && crypto2.getRandomValues) {
    browser$c.exports = randomBytes;
  } else {
    browser$c.exports = oldBrowser;
  }
  function randomBytes(size2, cb2) {
    if (size2 > MAX_UINT32)
      throw new RangeError("requested too many random bytes");
    var bytes = Buffer.allocUnsafe(size2);
    if (size2 > 0) {
      if (size2 > MAX_BYTES) {
        for (var generated = 0; generated < size2; generated += MAX_BYTES) {
          crypto2.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
        }
      } else {
        crypto2.getRandomValues(bytes);
      }
    }
    if (typeof cb2 === "function") {
      return process$1.nextTick(function() {
        cb2(null, bytes);
      });
    }
    return bytes;
  }
  return browser$c.exports;
}
var inherits_browser = { exports: {} };
var hasRequiredInherits_browser;
function requireInherits_browser() {
  if (hasRequiredInherits_browser)
    return inherits_browser.exports;
  hasRequiredInherits_browser = 1;
  if (typeof Object.create === "function") {
    inherits_browser.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    inherits_browser.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
  return inherits_browser.exports;
}
var readableBrowser$1 = { exports: {} };
var events = { exports: {} };
var hasRequiredEvents;
function requireEvents() {
  if (hasRequiredEvents)
    return events.exports;
  hasRequiredEvents = 1;
  var R2 = typeof Reflect === "object" ? Reflect : null;
  var ReflectApply = R2 && typeof R2.apply === "function" ? R2.apply : function ReflectApply2(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  };
  var ReflectOwnKeys;
  if (R2 && typeof R2.ownKeys === "function") {
    ReflectOwnKeys = R2.ownKeys;
  } else if (Object.getOwnPropertySymbols) {
    ReflectOwnKeys = function ReflectOwnKeys2(target) {
      return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
    };
  } else {
    ReflectOwnKeys = function ReflectOwnKeys2(target) {
      return Object.getOwnPropertyNames(target);
    };
  }
  function ProcessEmitWarning(warning) {
    if (console && console.warn)
      console.warn(warning);
  }
  var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
    return value !== value;
  };
  function EventEmitter() {
    EventEmitter.init.call(this);
  }
  events.exports = EventEmitter;
  events.exports.once = once;
  EventEmitter.EventEmitter = EventEmitter;
  EventEmitter.prototype._events = void 0;
  EventEmitter.prototype._eventsCount = 0;
  EventEmitter.prototype._maxListeners = void 0;
  var defaultMaxListeners = 10;
  function checkListener(listener) {
    if (typeof listener !== "function") {
      throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
    }
  }
  Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
      }
      defaultMaxListeners = arg;
    }
  });
  EventEmitter.init = function() {
    if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
      this._events = /* @__PURE__ */ Object.create(null);
      this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || void 0;
  };
  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n2) {
    if (typeof n2 !== "number" || n2 < 0 || NumberIsNaN(n2)) {
      throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n2 + ".");
    }
    this._maxListeners = n2;
    return this;
  };
  function _getMaxListeners(that) {
    if (that._maxListeners === void 0)
      return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }
  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
  };
  EventEmitter.prototype.emit = function emit(type2) {
    var args = [];
    for (var i2 = 1; i2 < arguments.length; i2++)
      args.push(arguments[i2]);
    var doError = type2 === "error";
    var events2 = this._events;
    if (events2 !== void 0)
      doError = doError && events2.error === void 0;
    else if (!doError)
      return false;
    if (doError) {
      var er;
      if (args.length > 0)
        er = args[0];
      if (er instanceof Error) {
        throw er;
      }
      var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
      err.context = er;
      throw err;
    }
    var handler = events2[type2];
    if (handler === void 0)
      return false;
    if (typeof handler === "function") {
      ReflectApply(handler, this, args);
    } else {
      var len2 = handler.length;
      var listeners = arrayClone(handler, len2);
      for (var i2 = 0; i2 < len2; ++i2)
        ReflectApply(listeners[i2], this, args);
    }
    return true;
  };
  function _addListener(target, type2, listener, prepend2) {
    var m2;
    var events2;
    var existing;
    checkListener(listener);
    events2 = target._events;
    if (events2 === void 0) {
      events2 = target._events = /* @__PURE__ */ Object.create(null);
      target._eventsCount = 0;
    } else {
      if (events2.newListener !== void 0) {
        target.emit(
          "newListener",
          type2,
          listener.listener ? listener.listener : listener
        );
        events2 = target._events;
      }
      existing = events2[type2];
    }
    if (existing === void 0) {
      existing = events2[type2] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === "function") {
        existing = events2[type2] = prepend2 ? [listener, existing] : [existing, listener];
      } else if (prepend2) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
      m2 = _getMaxListeners(target);
      if (m2 > 0 && existing.length > m2 && !existing.warned) {
        existing.warned = true;
        var w2 = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type2) + " listeners added. Use emitter.setMaxListeners() to increase limit");
        w2.name = "MaxListenersExceededWarning";
        w2.emitter = target;
        w2.type = type2;
        w2.count = existing.length;
        ProcessEmitWarning(w2);
      }
    }
    return target;
  }
  EventEmitter.prototype.addListener = function addListener(type2, listener) {
    return _addListener(this, type2, listener, false);
  };
  EventEmitter.prototype.on = EventEmitter.prototype.addListener;
  EventEmitter.prototype.prependListener = function prependListener(type2, listener) {
    return _addListener(this, type2, listener, true);
  };
  function onceWrapper() {
    if (!this.fired) {
      this.target.removeListener(this.type, this.wrapFn);
      this.fired = true;
      if (arguments.length === 0)
        return this.listener.call(this.target);
      return this.listener.apply(this.target, arguments);
    }
  }
  function _onceWrap(target, type2, listener) {
    var state2 = { fired: false, wrapFn: void 0, target, type: type2, listener };
    var wrapped = onceWrapper.bind(state2);
    wrapped.listener = listener;
    state2.wrapFn = wrapped;
    return wrapped;
  }
  EventEmitter.prototype.once = function once2(type2, listener) {
    checkListener(listener);
    this.on(type2, _onceWrap(this, type2, listener));
    return this;
  };
  EventEmitter.prototype.prependOnceListener = function prependOnceListener(type2, listener) {
    checkListener(listener);
    this.prependListener(type2, _onceWrap(this, type2, listener));
    return this;
  };
  EventEmitter.prototype.removeListener = function removeListener(type2, listener) {
    var list, events2, position, i2, originalListener;
    checkListener(listener);
    events2 = this._events;
    if (events2 === void 0)
      return this;
    list = events2[type2];
    if (list === void 0)
      return this;
    if (list === listener || list.listener === listener) {
      if (--this._eventsCount === 0)
        this._events = /* @__PURE__ */ Object.create(null);
      else {
        delete events2[type2];
        if (events2.removeListener)
          this.emit("removeListener", type2, list.listener || listener);
      }
    } else if (typeof list !== "function") {
      position = -1;
      for (i2 = list.length - 1; i2 >= 0; i2--) {
        if (list[i2] === listener || list[i2].listener === listener) {
          originalListener = list[i2].listener;
          position = i2;
          break;
        }
      }
      if (position < 0)
        return this;
      if (position === 0)
        list.shift();
      else {
        spliceOne(list, position);
      }
      if (list.length === 1)
        events2[type2] = list[0];
      if (events2.removeListener !== void 0)
        this.emit("removeListener", type2, originalListener || listener);
    }
    return this;
  };
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(type2) {
    var listeners, events2, i2;
    events2 = this._events;
    if (events2 === void 0)
      return this;
    if (events2.removeListener === void 0) {
      if (arguments.length === 0) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      } else if (events2[type2] !== void 0) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else
          delete events2[type2];
      }
      return this;
    }
    if (arguments.length === 0) {
      var keys2 = Object.keys(events2);
      var key2;
      for (i2 = 0; i2 < keys2.length; ++i2) {
        key2 = keys2[i2];
        if (key2 === "removeListener")
          continue;
        this.removeAllListeners(key2);
      }
      this.removeAllListeners("removeListener");
      this._events = /* @__PURE__ */ Object.create(null);
      this._eventsCount = 0;
      return this;
    }
    listeners = events2[type2];
    if (typeof listeners === "function") {
      this.removeListener(type2, listeners);
    } else if (listeners !== void 0) {
      for (i2 = listeners.length - 1; i2 >= 0; i2--) {
        this.removeListener(type2, listeners[i2]);
      }
    }
    return this;
  };
  function _listeners(target, type2, unwrap2) {
    var events2 = target._events;
    if (events2 === void 0)
      return [];
    var evlistener = events2[type2];
    if (evlistener === void 0)
      return [];
    if (typeof evlistener === "function")
      return unwrap2 ? [evlistener.listener || evlistener] : [evlistener];
    return unwrap2 ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
  }
  EventEmitter.prototype.listeners = function listeners(type2) {
    return _listeners(this, type2, true);
  };
  EventEmitter.prototype.rawListeners = function rawListeners(type2) {
    return _listeners(this, type2, false);
  };
  EventEmitter.listenerCount = function(emitter, type2) {
    if (typeof emitter.listenerCount === "function") {
      return emitter.listenerCount(type2);
    } else {
      return listenerCount.call(emitter, type2);
    }
  };
  EventEmitter.prototype.listenerCount = listenerCount;
  function listenerCount(type2) {
    var events2 = this._events;
    if (events2 !== void 0) {
      var evlistener = events2[type2];
      if (typeof evlistener === "function") {
        return 1;
      } else if (evlistener !== void 0) {
        return evlistener.length;
      }
    }
    return 0;
  }
  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
  };
  function arrayClone(arr, n2) {
    var copy2 = new Array(n2);
    for (var i2 = 0; i2 < n2; ++i2)
      copy2[i2] = arr[i2];
    return copy2;
  }
  function spliceOne(list, index2) {
    for (; index2 + 1 < list.length; index2++)
      list[index2] = list[index2 + 1];
    list.pop();
  }
  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i2 = 0; i2 < ret.length; ++i2) {
      ret[i2] = arr[i2].listener || arr[i2];
    }
    return ret;
  }
  function once(emitter, name2) {
    return new Promise(function(resolve, reject) {
      function errorListener(err) {
        emitter.removeListener(name2, resolver);
        reject(err);
      }
      function resolver() {
        if (typeof emitter.removeListener === "function") {
          emitter.removeListener("error", errorListener);
        }
        resolve([].slice.call(arguments));
      }
      eventTargetAgnosticAddListener(emitter, name2, resolver, { once: true });
      if (name2 !== "error") {
        addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
      }
    });
  }
  function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") {
      eventTargetAgnosticAddListener(emitter, "error", handler, flags);
    }
  }
  function eventTargetAgnosticAddListener(emitter, name2, listener, flags) {
    if (typeof emitter.on === "function") {
      if (flags.once) {
        emitter.once(name2, listener);
      } else {
        emitter.on(name2, listener);
      }
    } else if (typeof emitter.addEventListener === "function") {
      emitter.addEventListener(name2, function wrapListener(arg) {
        if (flags.once) {
          emitter.removeEventListener(name2, wrapListener);
        }
        listener(arg);
      });
    } else {
      throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
    }
  }
  return events.exports;
}
var streamBrowser$1;
var hasRequiredStreamBrowser$1;
function requireStreamBrowser$1() {
  if (hasRequiredStreamBrowser$1)
    return streamBrowser$1;
  hasRequiredStreamBrowser$1 = 1;
  streamBrowser$1 = requireEvents().EventEmitter;
  return streamBrowser$1;
}
var util$1 = {};
var types = {};
var shams$1;
var hasRequiredShams$1;
function requireShams$1() {
  if (hasRequiredShams$1)
    return shams$1;
  hasRequiredShams$1 = 1;
  shams$1 = function hasSymbols2() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
      return false;
    }
    if (typeof Symbol.iterator === "symbol") {
      return true;
    }
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") {
      return false;
    }
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
      return false;
    }
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
      return false;
    }
    var symVal = 42;
    obj[sym] = symVal;
    for (sym in obj) {
      return false;
    }
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
      return false;
    }
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
      return false;
    }
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) {
      return false;
    }
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
      return false;
    }
    if (typeof Object.getOwnPropertyDescriptor === "function") {
      var descriptor2 = Object.getOwnPropertyDescriptor(obj, sym);
      if (descriptor2.value !== symVal || descriptor2.enumerable !== true) {
        return false;
      }
    }
    return true;
  };
  return shams$1;
}
var shams;
var hasRequiredShams;
function requireShams() {
  if (hasRequiredShams)
    return shams;
  hasRequiredShams = 1;
  var hasSymbols2 = requireShams$1();
  shams = function hasToStringTagShams() {
    return hasSymbols2() && !!Symbol.toStringTag;
  };
  return shams;
}
var esErrors;
var hasRequiredEsErrors;
function requireEsErrors() {
  if (hasRequiredEsErrors)
    return esErrors;
  hasRequiredEsErrors = 1;
  esErrors = Error;
  return esErrors;
}
var _eval;
var hasRequired_eval;
function require_eval() {
  if (hasRequired_eval)
    return _eval;
  hasRequired_eval = 1;
  _eval = EvalError;
  return _eval;
}
var range$2;
var hasRequiredRange;
function requireRange() {
  if (hasRequiredRange)
    return range$2;
  hasRequiredRange = 1;
  range$2 = RangeError;
  return range$2;
}
var ref;
var hasRequiredRef;
function requireRef() {
  if (hasRequiredRef)
    return ref;
  hasRequiredRef = 1;
  ref = ReferenceError;
  return ref;
}
var syntax;
var hasRequiredSyntax;
function requireSyntax() {
  if (hasRequiredSyntax)
    return syntax;
  hasRequiredSyntax = 1;
  syntax = SyntaxError;
  return syntax;
}
var type$1;
var hasRequiredType;
function requireType() {
  if (hasRequiredType)
    return type$1;
  hasRequiredType = 1;
  type$1 = TypeError;
  return type$1;
}
var uri;
var hasRequiredUri;
function requireUri() {
  if (hasRequiredUri)
    return uri;
  hasRequiredUri = 1;
  uri = URIError;
  return uri;
}
var hasSymbols;
var hasRequiredHasSymbols;
function requireHasSymbols() {
  if (hasRequiredHasSymbols)
    return hasSymbols;
  hasRequiredHasSymbols = 1;
  var origSymbol = typeof Symbol !== "undefined" && Symbol;
  var hasSymbolSham = requireShams$1();
  hasSymbols = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") {
      return false;
    }
    if (typeof Symbol !== "function") {
      return false;
    }
    if (typeof origSymbol("foo") !== "symbol") {
      return false;
    }
    if (typeof Symbol("bar") !== "symbol") {
      return false;
    }
    return hasSymbolSham();
  };
  return hasSymbols;
}
var hasProto;
var hasRequiredHasProto;
function requireHasProto() {
  if (hasRequiredHasProto)
    return hasProto;
  hasRequiredHasProto = 1;
  var test = {
    __proto__: null,
    foo: {}
  };
  var $Object = Object;
  hasProto = function hasProto2() {
    return { __proto__: test }.foo === test.foo && !(test instanceof $Object);
  };
  return hasProto;
}
var implementation;
var hasRequiredImplementation;
function requireImplementation() {
  if (hasRequiredImplementation)
    return implementation;
  hasRequiredImplementation = 1;
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
  var toStr = Object.prototype.toString;
  var max2 = Math.max;
  var funcType = "[object Function]";
  var concatty = function concatty2(a2, b2) {
    var arr = [];
    for (var i2 = 0; i2 < a2.length; i2 += 1) {
      arr[i2] = a2[i2];
    }
    for (var j2 = 0; j2 < b2.length; j2 += 1) {
      arr[j2 + a2.length] = b2[j2];
    }
    return arr;
  };
  var slicy = function slicy2(arrLike, offset) {
    var arr = [];
    for (var i2 = offset || 0, j2 = 0; i2 < arrLike.length; i2 += 1, j2 += 1) {
      arr[j2] = arrLike[i2];
    }
    return arr;
  };
  var joiny = function(arr, joiner) {
    var str = "";
    for (var i2 = 0; i2 < arr.length; i2 += 1) {
      str += arr[i2];
      if (i2 + 1 < arr.length) {
        str += joiner;
      }
    }
    return str;
  };
  implementation = function bind3(that) {
    var target = this;
    if (typeof target !== "function" || toStr.apply(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);
    var bound;
    var binder = function() {
      if (this instanceof bound) {
        var result = target.apply(
          this,
          concatty(args, arguments)
        );
        if (Object(result) === result) {
          return result;
        }
        return this;
      }
      return target.apply(
        that,
        concatty(args, arguments)
      );
    };
    var boundLength = max2(0, target.length - args.length);
    var boundArgs = [];
    for (var i2 = 0; i2 < boundLength; i2++) {
      boundArgs[i2] = "$" + i2;
    }
    bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
      var Empty = function Empty2() {
      };
      Empty.prototype = target.prototype;
      bound.prototype = new Empty();
      Empty.prototype = null;
    }
    return bound;
  };
  return implementation;
}
var functionBind;
var hasRequiredFunctionBind;
function requireFunctionBind() {
  if (hasRequiredFunctionBind)
    return functionBind;
  hasRequiredFunctionBind = 1;
  var implementation2 = requireImplementation();
  functionBind = Function.prototype.bind || implementation2;
  return functionBind;
}
var hasown;
var hasRequiredHasown;
function requireHasown() {
  if (hasRequiredHasown)
    return hasown;
  hasRequiredHasown = 1;
  var call = Function.prototype.call;
  var $hasOwn = Object.prototype.hasOwnProperty;
  var bind3 = requireFunctionBind();
  hasown = bind3.call(call, $hasOwn);
  return hasown;
}
var getIntrinsic;
var hasRequiredGetIntrinsic;
function requireGetIntrinsic() {
  if (hasRequiredGetIntrinsic)
    return getIntrinsic;
  hasRequiredGetIntrinsic = 1;
  var undefined$1;
  var $Error = requireEsErrors();
  var $EvalError = require_eval();
  var $RangeError = requireRange();
  var $ReferenceError = requireRef();
  var $SyntaxError = requireSyntax();
  var $TypeError = requireType();
  var $URIError = requireUri();
  var $Function = Function;
  var getEvalledConstructor = function(expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e2) {
    }
  };
  var $gOPD = Object.getOwnPropertyDescriptor;
  if ($gOPD) {
    try {
      $gOPD({}, "");
    } catch (e2) {
      $gOPD = null;
    }
  }
  var throwTypeError = function() {
    throw new $TypeError();
  };
  var ThrowTypeError = $gOPD ? function() {
    try {
      arguments.callee;
      return throwTypeError;
    } catch (calleeThrows) {
      try {
        return $gOPD(arguments, "callee").get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  }() : throwTypeError;
  var hasSymbols2 = requireHasSymbols()();
  var hasProto2 = requireHasProto()();
  var getProto = Object.getPrototypeOf || (hasProto2 ? function(x2) {
    return x2.__proto__;
  } : null);
  var needsEval = {};
  var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined$1 : getProto(Uint8Array);
  var INTRINSICS = {
    __proto__: null,
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined$1 : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined$1 : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols2 && getProto ? getProto([][Symbol.iterator]()) : undefined$1,
    "%AsyncFromSyncIteratorPrototype%": undefined$1,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined$1 : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined$1 : BigInt,
    "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined$1 : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined$1 : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined$1 : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": $Error,
    "%eval%": eval,
    // eslint-disable-line no-eval
    "%EvalError%": $EvalError,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined$1 : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined$1 : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined$1 : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined$1 : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined$1 : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined$1 : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols2 && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
    "%JSON%": typeof JSON === "object" ? JSON : undefined$1,
    "%Map%": typeof Map === "undefined" ? undefined$1 : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols2 || !getProto ? undefined$1 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": Object,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined$1 : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined$1 : Proxy,
    "%RangeError%": $RangeError,
    "%ReferenceError%": $ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined$1 : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined$1 : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols2 || !getProto ? undefined$1 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined$1 : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols2 && getProto ? getProto(""[Symbol.iterator]()) : undefined$1,
    "%Symbol%": hasSymbols2 ? Symbol : undefined$1,
    "%SyntaxError%": $SyntaxError,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined$1 : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined$1 : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined$1 : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined$1 : Uint32Array,
    "%URIError%": $URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined$1 : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined$1 : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined$1 : WeakSet
  };
  if (getProto) {
    try {
      null.error;
    } catch (e2) {
      var errorProto = getProto(getProto(e2));
      INTRINSICS["%Error.prototype%"] = errorProto;
    }
  }
  var doEval = function doEval2(name2) {
    var value;
    if (name2 === "%AsyncFunction%") {
      value = getEvalledConstructor("async function () {}");
    } else if (name2 === "%GeneratorFunction%") {
      value = getEvalledConstructor("function* () {}");
    } else if (name2 === "%AsyncGeneratorFunction%") {
      value = getEvalledConstructor("async function* () {}");
    } else if (name2 === "%AsyncGenerator%") {
      var fn = doEval2("%AsyncGeneratorFunction%");
      if (fn) {
        value = fn.prototype;
      }
    } else if (name2 === "%AsyncIteratorPrototype%") {
      var gen = doEval2("%AsyncGenerator%");
      if (gen && getProto) {
        value = getProto(gen.prototype);
      }
    }
    INTRINSICS[name2] = value;
    return value;
  };
  var LEGACY_ALIASES = {
    __proto__: null,
    "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
    "%ArrayPrototype%": ["Array", "prototype"],
    "%ArrayProto_entries%": ["Array", "prototype", "entries"],
    "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
    "%ArrayProto_keys%": ["Array", "prototype", "keys"],
    "%ArrayProto_values%": ["Array", "prototype", "values"],
    "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
    "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
    "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
    "%BooleanPrototype%": ["Boolean", "prototype"],
    "%DataViewPrototype%": ["DataView", "prototype"],
    "%DatePrototype%": ["Date", "prototype"],
    "%ErrorPrototype%": ["Error", "prototype"],
    "%EvalErrorPrototype%": ["EvalError", "prototype"],
    "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
    "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
    "%FunctionPrototype%": ["Function", "prototype"],
    "%Generator%": ["GeneratorFunction", "prototype"],
    "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
    "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
    "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
    "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
    "%JSONParse%": ["JSON", "parse"],
    "%JSONStringify%": ["JSON", "stringify"],
    "%MapPrototype%": ["Map", "prototype"],
    "%NumberPrototype%": ["Number", "prototype"],
    "%ObjectPrototype%": ["Object", "prototype"],
    "%ObjProto_toString%": ["Object", "prototype", "toString"],
    "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
    "%PromisePrototype%": ["Promise", "prototype"],
    "%PromiseProto_then%": ["Promise", "prototype", "then"],
    "%Promise_all%": ["Promise", "all"],
    "%Promise_reject%": ["Promise", "reject"],
    "%Promise_resolve%": ["Promise", "resolve"],
    "%RangeErrorPrototype%": ["RangeError", "prototype"],
    "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
    "%RegExpPrototype%": ["RegExp", "prototype"],
    "%SetPrototype%": ["Set", "prototype"],
    "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
    "%StringPrototype%": ["String", "prototype"],
    "%SymbolPrototype%": ["Symbol", "prototype"],
    "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
    "%TypedArrayPrototype%": ["TypedArray", "prototype"],
    "%TypeErrorPrototype%": ["TypeError", "prototype"],
    "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
    "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
    "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
    "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
    "%URIErrorPrototype%": ["URIError", "prototype"],
    "%WeakMapPrototype%": ["WeakMap", "prototype"],
    "%WeakSetPrototype%": ["WeakSet", "prototype"]
  };
  var bind3 = requireFunctionBind();
  var hasOwn = requireHasown();
  var $concat = bind3.call(Function.call, Array.prototype.concat);
  var $spliceApply = bind3.call(Function.apply, Array.prototype.splice);
  var $replace = bind3.call(Function.call, String.prototype.replace);
  var $strSlice = bind3.call(Function.call, String.prototype.slice);
  var $exec = bind3.call(Function.call, RegExp.prototype.exec);
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = function stringToPath2(string2) {
    var first2 = $strSlice(string2, 0, 1);
    var last2 = $strSlice(string2, -1);
    if (first2 === "%" && last2 !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    } else if (last2 === "%" && first2 !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    }
    var result = [];
    $replace(string2, rePropName, function(match2, number2, quote, subString) {
      result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number2 || match2;
    });
    return result;
  };
  var getBaseIntrinsic = function getBaseIntrinsic2(name2, allowMissing) {
    var intrinsicName = name2;
    var alias2;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
      alias2 = LEGACY_ALIASES[intrinsicName];
      intrinsicName = "%" + alias2[0] + "%";
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
      var value = INTRINSICS[intrinsicName];
      if (value === needsEval) {
        value = doEval(intrinsicName);
      }
      if (typeof value === "undefined" && !allowMissing) {
        throw new $TypeError("intrinsic " + name2 + " exists, but is not available. Please file an issue!");
      }
      return {
        alias: alias2,
        name: intrinsicName,
        value
      };
    }
    throw new $SyntaxError("intrinsic " + name2 + " does not exist!");
  };
  getIntrinsic = function GetIntrinsic(name2, allowMissing) {
    if (typeof name2 !== "string" || name2.length === 0) {
      throw new $TypeError("intrinsic name must be a non-empty string");
    }
    if (arguments.length > 1 && typeof allowMissing !== "boolean") {
      throw new $TypeError('"allowMissing" argument must be a boolean');
    }
    if ($exec(/^%?[^%]*%?$/, name2) === null) {
      throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    }
    var parts = stringToPath(name2);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias2 = intrinsic.alias;
    if (alias2) {
      intrinsicBaseName = alias2[0];
      $spliceApply(parts, $concat([0, 1], alias2));
    }
    for (var i2 = 1, isOwn = true; i2 < parts.length; i2 += 1) {
      var part = parts[i2];
      var first2 = $strSlice(part, 0, 1);
      var last2 = $strSlice(part, -1);
      if ((first2 === '"' || first2 === "'" || first2 === "`" || (last2 === '"' || last2 === "'" || last2 === "`")) && first2 !== last2) {
        throw new $SyntaxError("property names with quotes must have matching quotes");
      }
      if (part === "constructor" || !isOwn) {
        skipFurtherCaching = true;
      }
      intrinsicBaseName += "." + part;
      intrinsicRealName = "%" + intrinsicBaseName + "%";
      if (hasOwn(INTRINSICS, intrinsicRealName)) {
        value = INTRINSICS[intrinsicRealName];
      } else if (value != null) {
        if (!(part in value)) {
          if (!allowMissing) {
            throw new $TypeError("base intrinsic for " + name2 + " exists, but the property is not available.");
          }
          return void 0;
        }
        if ($gOPD && i2 + 1 >= parts.length) {
          var desc = $gOPD(value, part);
          isOwn = !!desc;
          if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
            value = desc.get;
          } else {
            value = value[part];
          }
        } else {
          isOwn = hasOwn(value, part);
          value = value[part];
        }
        if (isOwn && !skipFurtherCaching) {
          INTRINSICS[intrinsicRealName] = value;
        }
      }
    }
    return value;
  };
  return getIntrinsic;
}
var callBind = { exports: {} };
var esDefineProperty;
var hasRequiredEsDefineProperty;
function requireEsDefineProperty() {
  if (hasRequiredEsDefineProperty)
    return esDefineProperty;
  hasRequiredEsDefineProperty = 1;
  var GetIntrinsic = requireGetIntrinsic();
  var $defineProperty = GetIntrinsic("%Object.defineProperty%", true) || false;
  if ($defineProperty) {
    try {
      $defineProperty({}, "a", { value: 1 });
    } catch (e2) {
      $defineProperty = false;
    }
  }
  esDefineProperty = $defineProperty;
  return esDefineProperty;
}
var gopd;
var hasRequiredGopd;
function requireGopd() {
  if (hasRequiredGopd)
    return gopd;
  hasRequiredGopd = 1;
  var GetIntrinsic = requireGetIntrinsic();
  var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
  if ($gOPD) {
    try {
      $gOPD([], "length");
    } catch (e2) {
      $gOPD = null;
    }
  }
  gopd = $gOPD;
  return gopd;
}
var defineDataProperty;
var hasRequiredDefineDataProperty;
function requireDefineDataProperty() {
  if (hasRequiredDefineDataProperty)
    return defineDataProperty;
  hasRequiredDefineDataProperty = 1;
  var $defineProperty = requireEsDefineProperty();
  var $SyntaxError = requireSyntax();
  var $TypeError = requireType();
  var gopd2 = requireGopd();
  defineDataProperty = function defineDataProperty2(obj, property, value) {
    if (!obj || typeof obj !== "object" && typeof obj !== "function") {
      throw new $TypeError("`obj` must be an object or a function`");
    }
    if (typeof property !== "string" && typeof property !== "symbol") {
      throw new $TypeError("`property` must be a string or a symbol`");
    }
    if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
      throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
      throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
      throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
      throw new $TypeError("`loose`, if provided, must be a boolean");
    }
    var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
    var nonWritable = arguments.length > 4 ? arguments[4] : null;
    var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
    var loose = arguments.length > 6 ? arguments[6] : false;
    var desc = !!gopd2 && gopd2(obj, property);
    if ($defineProperty) {
      $defineProperty(obj, property, {
        configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
        enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
        value,
        writable: nonWritable === null && desc ? desc.writable : !nonWritable
      });
    } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
      obj[property] = value;
    } else {
      throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
    }
  };
  return defineDataProperty;
}
var hasPropertyDescriptors_1;
var hasRequiredHasPropertyDescriptors;
function requireHasPropertyDescriptors() {
  if (hasRequiredHasPropertyDescriptors)
    return hasPropertyDescriptors_1;
  hasRequiredHasPropertyDescriptors = 1;
  var $defineProperty = requireEsDefineProperty();
  var hasPropertyDescriptors = function hasPropertyDescriptors2() {
    return !!$defineProperty;
  };
  hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
    if (!$defineProperty) {
      return null;
    }
    try {
      return $defineProperty([], "length", { value: 1 }).length !== 1;
    } catch (e2) {
      return true;
    }
  };
  hasPropertyDescriptors_1 = hasPropertyDescriptors;
  return hasPropertyDescriptors_1;
}
var setFunctionLength;
var hasRequiredSetFunctionLength;
function requireSetFunctionLength() {
  if (hasRequiredSetFunctionLength)
    return setFunctionLength;
  hasRequiredSetFunctionLength = 1;
  var GetIntrinsic = requireGetIntrinsic();
  var define = requireDefineDataProperty();
  var hasDescriptors = requireHasPropertyDescriptors()();
  var gOPD = requireGopd();
  var $TypeError = requireType();
  var $floor = GetIntrinsic("%Math.floor%");
  setFunctionLength = function setFunctionLength2(fn, length) {
    if (typeof fn !== "function") {
      throw new $TypeError("`fn` is not a function");
    }
    if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
      throw new $TypeError("`length` must be a positive 32-bit integer");
    }
    var loose = arguments.length > 2 && !!arguments[2];
    var functionLengthIsConfigurable = true;
    var functionLengthIsWritable = true;
    if ("length" in fn && gOPD) {
      var desc = gOPD(fn, "length");
      if (desc && !desc.configurable) {
        functionLengthIsConfigurable = false;
      }
      if (desc && !desc.writable) {
        functionLengthIsWritable = false;
      }
    }
    if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
      if (hasDescriptors) {
        define(
          /** @type {Parameters<define>[0]} */
          fn,
          "length",
          length,
          true,
          true
        );
      } else {
        define(
          /** @type {Parameters<define>[0]} */
          fn,
          "length",
          length
        );
      }
    }
    return fn;
  };
  return setFunctionLength;
}
var hasRequiredCallBind;
function requireCallBind() {
  if (hasRequiredCallBind)
    return callBind.exports;
  hasRequiredCallBind = 1;
  (function(module) {
    var bind3 = requireFunctionBind();
    var GetIntrinsic = requireGetIntrinsic();
    var setFunctionLength2 = requireSetFunctionLength();
    var $TypeError = requireType();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind3.call($call, $apply);
    var $defineProperty = requireEsDefineProperty();
    var $max = GetIntrinsic("%Math.max%");
    module.exports = function callBind2(originalFunction) {
      if (typeof originalFunction !== "function") {
        throw new $TypeError("a function is required");
      }
      var func = $reflectApply(bind3, $call, arguments);
      return setFunctionLength2(
        func,
        1 + $max(0, originalFunction.length - (arguments.length - 1)),
        true
      );
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind3, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module.exports, "apply", { value: applyBind });
    } else {
      module.exports.apply = applyBind;
    }
  })(callBind);
  return callBind.exports;
}
var callBound;
var hasRequiredCallBound;
function requireCallBound() {
  if (hasRequiredCallBound)
    return callBound;
  hasRequiredCallBound = 1;
  var GetIntrinsic = requireGetIntrinsic();
  var callBind2 = requireCallBind();
  var $indexOf = callBind2(GetIntrinsic("String.prototype.indexOf"));
  callBound = function callBoundIntrinsic(name2, allowMissing) {
    var intrinsic = GetIntrinsic(name2, !!allowMissing);
    if (typeof intrinsic === "function" && $indexOf(name2, ".prototype.") > -1) {
      return callBind2(intrinsic);
    }
    return intrinsic;
  };
  return callBound;
}
var isArguments;
var hasRequiredIsArguments;
function requireIsArguments() {
  if (hasRequiredIsArguments)
    return isArguments;
  hasRequiredIsArguments = 1;
  var hasToStringTag = requireShams()();
  var callBound2 = requireCallBound();
  var $toString = callBound2("Object.prototype.toString");
  var isStandardArguments = function isArguments2(value) {
    if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) {
      return false;
    }
    return $toString(value) === "[object Arguments]";
  };
  var isLegacyArguments = function isArguments2(value) {
    if (isStandardArguments(value)) {
      return true;
    }
    return value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && $toString(value.callee) === "[object Function]";
  };
  var supportsStandardArguments = function() {
    return isStandardArguments(arguments);
  }();
  isStandardArguments.isLegacyArguments = isLegacyArguments;
  isArguments = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
  return isArguments;
}
var isGeneratorFunction;
var hasRequiredIsGeneratorFunction;
function requireIsGeneratorFunction() {
  if (hasRequiredIsGeneratorFunction)
    return isGeneratorFunction;
  hasRequiredIsGeneratorFunction = 1;
  var toStr = Object.prototype.toString;
  var fnToStr = Function.prototype.toString;
  var isFnRegex = /^\s*(?:function)?\*/;
  var hasToStringTag = requireShams()();
  var getProto = Object.getPrototypeOf;
  var getGeneratorFunc = function() {
    if (!hasToStringTag) {
      return false;
    }
    try {
      return Function("return function*() {}")();
    } catch (e2) {
    }
  };
  var GeneratorFunction;
  isGeneratorFunction = function isGeneratorFunction2(fn) {
    if (typeof fn !== "function") {
      return false;
    }
    if (isFnRegex.test(fnToStr.call(fn))) {
      return true;
    }
    if (!hasToStringTag) {
      var str = toStr.call(fn);
      return str === "[object GeneratorFunction]";
    }
    if (!getProto) {
      return false;
    }
    if (typeof GeneratorFunction === "undefined") {
      var generatorFunc = getGeneratorFunc();
      GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
    }
    return getProto(fn) === GeneratorFunction;
  };
  return isGeneratorFunction;
}
var isCallable;
var hasRequiredIsCallable;
function requireIsCallable() {
  if (hasRequiredIsCallable)
    return isCallable;
  hasRequiredIsCallable = 1;
  var fnToStr = Function.prototype.toString;
  var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
  var badArrayLike;
  var isCallableMarker;
  if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") {
    try {
      badArrayLike = Object.defineProperty({}, "length", {
        get: function() {
          throw isCallableMarker;
        }
      });
      isCallableMarker = {};
      reflectApply(function() {
        throw 42;
      }, null, badArrayLike);
    } catch (_2) {
      if (_2 !== isCallableMarker) {
        reflectApply = null;
      }
    }
  } else {
    reflectApply = null;
  }
  var constructorRegex = /^\s*class\b/;
  var isES6ClassFn = function isES6ClassFunction(value) {
    try {
      var fnStr = fnToStr.call(value);
      return constructorRegex.test(fnStr);
    } catch (e2) {
      return false;
    }
  };
  var tryFunctionObject = function tryFunctionToStr(value) {
    try {
      if (isES6ClassFn(value)) {
        return false;
      }
      fnToStr.call(value);
      return true;
    } catch (e2) {
      return false;
    }
  };
  var toStr = Object.prototype.toString;
  var objectClass = "[object Object]";
  var fnClass = "[object Function]";
  var genClass = "[object GeneratorFunction]";
  var ddaClass = "[object HTMLAllCollection]";
  var ddaClass2 = "[object HTML document.all class]";
  var ddaClass3 = "[object HTMLCollection]";
  var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag;
  var isIE68 = !(0 in [,]);
  var isDDA = function isDocumentDotAll() {
    return false;
  };
  if (typeof document === "object") {
    var all2 = document.all;
    if (toStr.call(all2) === toStr.call(document.all)) {
      isDDA = function isDocumentDotAll(value) {
        if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) {
          try {
            var str = toStr.call(value);
            return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value("") == null;
          } catch (e2) {
          }
        }
        return false;
      };
    }
  }
  isCallable = reflectApply ? function isCallable2(value) {
    if (isDDA(value)) {
      return true;
    }
    if (!value) {
      return false;
    }
    if (typeof value !== "function" && typeof value !== "object") {
      return false;
    }
    try {
      reflectApply(value, null, badArrayLike);
    } catch (e2) {
      if (e2 !== isCallableMarker) {
        return false;
      }
    }
    return !isES6ClassFn(value) && tryFunctionObject(value);
  } : function isCallable2(value) {
    if (isDDA(value)) {
      return true;
    }
    if (!value) {
      return false;
    }
    if (typeof value !== "function" && typeof value !== "object") {
      return false;
    }
    if (hasToStringTag) {
      return tryFunctionObject(value);
    }
    if (isES6ClassFn(value)) {
      return false;
    }
    var strClass = toStr.call(value);
    if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
      return false;
    }
    return tryFunctionObject(value);
  };
  return isCallable;
}
var forEach_1;
var hasRequiredForEach;
function requireForEach() {
  if (hasRequiredForEach)
    return forEach_1;
  hasRequiredForEach = 1;
  var isCallable2 = requireIsCallable();
  var toStr = Object.prototype.toString;
  var hasOwnProperty2 = Object.prototype.hasOwnProperty;
  var forEachArray = function forEachArray2(array2, iterator, receiver) {
    for (var i2 = 0, len2 = array2.length; i2 < len2; i2++) {
      if (hasOwnProperty2.call(array2, i2)) {
        if (receiver == null) {
          iterator(array2[i2], i2, array2);
        } else {
          iterator.call(receiver, array2[i2], i2, array2);
        }
      }
    }
  };
  var forEachString = function forEachString2(string2, iterator, receiver) {
    for (var i2 = 0, len2 = string2.length; i2 < len2; i2++) {
      if (receiver == null) {
        iterator(string2.charAt(i2), i2, string2);
      } else {
        iterator.call(receiver, string2.charAt(i2), i2, string2);
      }
    }
  };
  var forEachObject = function forEachObject2(object2, iterator, receiver) {
    for (var k2 in object2) {
      if (hasOwnProperty2.call(object2, k2)) {
        if (receiver == null) {
          iterator(object2[k2], k2, object2);
        } else {
          iterator.call(receiver, object2[k2], k2, object2);
        }
      }
    }
  };
  var forEach3 = function forEach4(list, iterator, thisArg) {
    if (!isCallable2(iterator)) {
      throw new TypeError("iterator must be a function");
    }
    var receiver;
    if (arguments.length >= 3) {
      receiver = thisArg;
    }
    if (toStr.call(list) === "[object Array]") {
      forEachArray(list, iterator, receiver);
    } else if (typeof list === "string") {
      forEachString(list, iterator, receiver);
    } else {
      forEachObject(list, iterator, receiver);
    }
  };
  forEach_1 = forEach3;
  return forEach_1;
}
var possibleTypedArrayNames;
var hasRequiredPossibleTypedArrayNames;
function requirePossibleTypedArrayNames() {
  if (hasRequiredPossibleTypedArrayNames)
    return possibleTypedArrayNames;
  hasRequiredPossibleTypedArrayNames = 1;
  possibleTypedArrayNames = [
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Int16Array",
    "Int32Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array"
  ];
  return possibleTypedArrayNames;
}
var availableTypedArrays;
var hasRequiredAvailableTypedArrays;
function requireAvailableTypedArrays() {
  if (hasRequiredAvailableTypedArrays)
    return availableTypedArrays;
  hasRequiredAvailableTypedArrays = 1;
  var possibleNames = requirePossibleTypedArrayNames();
  var g2 = typeof globalThis === "undefined" ? commonjsGlobal : globalThis;
  availableTypedArrays = function availableTypedArrays2() {
    var out = [];
    for (var i2 = 0; i2 < possibleNames.length; i2++) {
      if (typeof g2[possibleNames[i2]] === "function") {
        out[out.length] = possibleNames[i2];
      }
    }
    return out;
  };
  return availableTypedArrays;
}
var whichTypedArray;
var hasRequiredWhichTypedArray;
function requireWhichTypedArray() {
  if (hasRequiredWhichTypedArray)
    return whichTypedArray;
  hasRequiredWhichTypedArray = 1;
  var forEach3 = requireForEach();
  var availableTypedArrays2 = requireAvailableTypedArrays();
  var callBind2 = requireCallBind();
  var callBound2 = requireCallBound();
  var gOPD = requireGopd();
  var $toString = callBound2("Object.prototype.toString");
  var hasToStringTag = requireShams()();
  var g2 = typeof globalThis === "undefined" ? commonjsGlobal : globalThis;
  var typedArrays = availableTypedArrays2();
  var $slice = callBound2("String.prototype.slice");
  var getPrototypeOf2 = Object.getPrototypeOf;
  var $indexOf = callBound2("Array.prototype.indexOf", true) || function indexOf2(array2, value) {
    for (var i2 = 0; i2 < array2.length; i2 += 1) {
      if (array2[i2] === value) {
        return i2;
      }
    }
    return -1;
  };
  var cache = { __proto__: null };
  if (hasToStringTag && gOPD && getPrototypeOf2) {
    forEach3(typedArrays, function(typedArray) {
      var arr = new g2[typedArray]();
      if (Symbol.toStringTag in arr) {
        var proto = getPrototypeOf2(arr);
        var descriptor2 = gOPD(proto, Symbol.toStringTag);
        if (!descriptor2) {
          var superProto = getPrototypeOf2(proto);
          descriptor2 = gOPD(superProto, Symbol.toStringTag);
        }
        cache["$" + typedArray] = callBind2(descriptor2.get);
      }
    });
  } else {
    forEach3(typedArrays, function(typedArray) {
      var arr = new g2[typedArray]();
      var fn = arr.slice || arr.set;
      if (fn) {
        cache["$" + typedArray] = callBind2(fn);
      }
    });
  }
  var tryTypedArrays = function tryAllTypedArrays(value) {
    var found = false;
    forEach3(
      // eslint-disable-next-line no-extra-parens
      /** @type {Record<`\$${TypedArrayName}`, Getter>} */
      /** @type {any} */
      cache,
      /** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
      function(getter, typedArray) {
        if (!found) {
          try {
            if ("$" + getter(value) === typedArray) {
              found = $slice(typedArray, 1);
            }
          } catch (e2) {
          }
        }
      }
    );
    return found;
  };
  var trySlices = function tryAllSlices(value) {
    var found = false;
    forEach3(
      // eslint-disable-next-line no-extra-parens
      /** @type {Record<`\$${TypedArrayName}`, Getter>} */
      /** @type {any} */
      cache,
      /** @type {(getter: typeof cache, name: `\$${import('.').TypedArrayName}`) => void} */
      function(getter, name2) {
        if (!found) {
          try {
            getter(value);
            found = $slice(name2, 1);
          } catch (e2) {
          }
        }
      }
    );
    return found;
  };
  whichTypedArray = function whichTypedArray2(value) {
    if (!value || typeof value !== "object") {
      return false;
    }
    if (!hasToStringTag) {
      var tag = $slice($toString(value), 8, -1);
      if ($indexOf(typedArrays, tag) > -1) {
        return tag;
      }
      if (tag !== "Object") {
        return false;
      }
      return trySlices(value);
    }
    if (!gOPD) {
      return null;
    }
    return tryTypedArrays(value);
  };
  return whichTypedArray;
}
var isTypedArray;
var hasRequiredIsTypedArray;
function requireIsTypedArray() {
  if (hasRequiredIsTypedArray)
    return isTypedArray;
  hasRequiredIsTypedArray = 1;
  var whichTypedArray2 = requireWhichTypedArray();
  isTypedArray = function isTypedArray2(value) {
    return !!whichTypedArray2(value);
  };
  return isTypedArray;
}
var hasRequiredTypes;
function requireTypes() {
  if (hasRequiredTypes)
    return types;
  hasRequiredTypes = 1;
  (function(exports2) {
    var isArgumentsObject = requireIsArguments();
    var isGeneratorFunction2 = requireIsGeneratorFunction();
    var whichTypedArray2 = requireWhichTypedArray();
    var isTypedArray2 = requireIsTypedArray();
    function uncurryThis(f2) {
      return f2.call.bind(f2);
    }
    var BigIntSupported = typeof BigInt !== "undefined";
    var SymbolSupported = typeof Symbol !== "undefined";
    var ObjectToString = uncurryThis(Object.prototype.toString);
    var numberValue = uncurryThis(Number.prototype.valueOf);
    var stringValue = uncurryThis(String.prototype.valueOf);
    var booleanValue = uncurryThis(Boolean.prototype.valueOf);
    if (BigIntSupported) {
      var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
    }
    if (SymbolSupported) {
      var symbolValue = uncurryThis(Symbol.prototype.valueOf);
    }
    function checkBoxedPrimitive(value, prototypeValueOf) {
      if (typeof value !== "object") {
        return false;
      }
      try {
        prototypeValueOf(value);
        return true;
      } catch (e2) {
        return false;
      }
    }
    exports2.isArgumentsObject = isArgumentsObject;
    exports2.isGeneratorFunction = isGeneratorFunction2;
    exports2.isTypedArray = isTypedArray2;
    function isPromise(input) {
      return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
    }
    exports2.isPromise = isPromise;
    function isArrayBufferView2(value) {
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        return ArrayBuffer.isView(value);
      }
      return isTypedArray2(value) || isDataView(value);
    }
    exports2.isArrayBufferView = isArrayBufferView2;
    function isUint8Array(value) {
      return whichTypedArray2(value) === "Uint8Array";
    }
    exports2.isUint8Array = isUint8Array;
    function isUint8ClampedArray(value) {
      return whichTypedArray2(value) === "Uint8ClampedArray";
    }
    exports2.isUint8ClampedArray = isUint8ClampedArray;
    function isUint16Array(value) {
      return whichTypedArray2(value) === "Uint16Array";
    }
    exports2.isUint16Array = isUint16Array;
    function isUint32Array(value) {
      return whichTypedArray2(value) === "Uint32Array";
    }
    exports2.isUint32Array = isUint32Array;
    function isInt8Array(value) {
      return whichTypedArray2(value) === "Int8Array";
    }
    exports2.isInt8Array = isInt8Array;
    function isInt16Array(value) {
      return whichTypedArray2(value) === "Int16Array";
    }
    exports2.isInt16Array = isInt16Array;
    function isInt32Array(value) {
      return whichTypedArray2(value) === "Int32Array";
    }
    exports2.isInt32Array = isInt32Array;
    function isFloat32Array(value) {
      return whichTypedArray2(value) === "Float32Array";
    }
    exports2.isFloat32Array = isFloat32Array;
    function isFloat64Array(value) {
      return whichTypedArray2(value) === "Float64Array";
    }
    exports2.isFloat64Array = isFloat64Array;
    function isBigInt64Array(value) {
      return whichTypedArray2(value) === "BigInt64Array";
    }
    exports2.isBigInt64Array = isBigInt64Array;
    function isBigUint64Array(value) {
      return whichTypedArray2(value) === "BigUint64Array";
    }
    exports2.isBigUint64Array = isBigUint64Array;
    function isMapToString(value) {
      return ObjectToString(value) === "[object Map]";
    }
    isMapToString.working = typeof Map !== "undefined" && isMapToString(/* @__PURE__ */ new Map());
    function isMap(value) {
      if (typeof Map === "undefined") {
        return false;
      }
      return isMapToString.working ? isMapToString(value) : value instanceof Map;
    }
    exports2.isMap = isMap;
    function isSetToString(value) {
      return ObjectToString(value) === "[object Set]";
    }
    isSetToString.working = typeof Set !== "undefined" && isSetToString(/* @__PURE__ */ new Set());
    function isSet(value) {
      if (typeof Set === "undefined") {
        return false;
      }
      return isSetToString.working ? isSetToString(value) : value instanceof Set;
    }
    exports2.isSet = isSet;
    function isWeakMapToString(value) {
      return ObjectToString(value) === "[object WeakMap]";
    }
    isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(/* @__PURE__ */ new WeakMap());
    function isWeakMap(value) {
      if (typeof WeakMap === "undefined") {
        return false;
      }
      return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
    }
    exports2.isWeakMap = isWeakMap;
    function isWeakSetToString(value) {
      return ObjectToString(value) === "[object WeakSet]";
    }
    isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(/* @__PURE__ */ new WeakSet());
    function isWeakSet(value) {
      return isWeakSetToString(value);
    }
    exports2.isWeakSet = isWeakSet;
    function isArrayBufferToString(value) {
      return ObjectToString(value) === "[object ArrayBuffer]";
    }
    isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
    function isArrayBuffer2(value) {
      if (typeof ArrayBuffer === "undefined") {
        return false;
      }
      return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
    }
    exports2.isArrayBuffer = isArrayBuffer2;
    function isDataViewToString(value) {
      return ObjectToString(value) === "[object DataView]";
    }
    isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
    function isDataView(value) {
      if (typeof DataView === "undefined") {
        return false;
      }
      return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
    }
    exports2.isDataView = isDataView;
    var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : void 0;
    function isSharedArrayBufferToString(value) {
      return ObjectToString(value) === "[object SharedArrayBuffer]";
    }
    function isSharedArrayBuffer(value) {
      if (typeof SharedArrayBufferCopy === "undefined") {
        return false;
      }
      if (typeof isSharedArrayBufferToString.working === "undefined") {
        isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
      }
      return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
    }
    exports2.isSharedArrayBuffer = isSharedArrayBuffer;
    function isAsyncFunction(value) {
      return ObjectToString(value) === "[object AsyncFunction]";
    }
    exports2.isAsyncFunction = isAsyncFunction;
    function isMapIterator(value) {
      return ObjectToString(value) === "[object Map Iterator]";
    }
    exports2.isMapIterator = isMapIterator;
    function isSetIterator(value) {
      return ObjectToString(value) === "[object Set Iterator]";
    }
    exports2.isSetIterator = isSetIterator;
    function isGeneratorObject(value) {
      return ObjectToString(value) === "[object Generator]";
    }
    exports2.isGeneratorObject = isGeneratorObject;
    function isWebAssemblyCompiledModule(value) {
      return ObjectToString(value) === "[object WebAssembly.Module]";
    }
    exports2.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
    function isNumberObject(value) {
      return checkBoxedPrimitive(value, numberValue);
    }
    exports2.isNumberObject = isNumberObject;
    function isStringObject(value) {
      return checkBoxedPrimitive(value, stringValue);
    }
    exports2.isStringObject = isStringObject;
    function isBooleanObject(value) {
      return checkBoxedPrimitive(value, booleanValue);
    }
    exports2.isBooleanObject = isBooleanObject;
    function isBigIntObject(value) {
      return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
    }
    exports2.isBigIntObject = isBigIntObject;
    function isSymbolObject(value) {
      return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
    }
    exports2.isSymbolObject = isSymbolObject;
    function isBoxedPrimitive(value) {
      return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
    }
    exports2.isBoxedPrimitive = isBoxedPrimitive;
    function isAnyArrayBuffer(value) {
      return typeof Uint8Array !== "undefined" && (isArrayBuffer2(value) || isSharedArrayBuffer(value));
    }
    exports2.isAnyArrayBuffer = isAnyArrayBuffer;
    ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(method) {
      Object.defineProperty(exports2, method, {
        enumerable: false,
        value: function() {
          throw new Error(method + " is not supported in userland");
        }
      });
    });
  })(types);
  return types;
}
var isBufferBrowser;
var hasRequiredIsBufferBrowser;
function requireIsBufferBrowser() {
  if (hasRequiredIsBufferBrowser)
    return isBufferBrowser;
  hasRequiredIsBufferBrowser = 1;
  isBufferBrowser = function isBuffer2(arg) {
    return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
  };
  return isBufferBrowser;
}
var hasRequiredUtil$1;
function requireUtil$1() {
  if (hasRequiredUtil$1)
    return util$1;
  hasRequiredUtil$1 = 1;
  (function(exports2) {
    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {
      var keys2 = Object.keys(obj);
      var descriptors = {};
      for (var i2 = 0; i2 < keys2.length; i2++) {
        descriptors[keys2[i2]] = Object.getOwnPropertyDescriptor(obj, keys2[i2]);
      }
      return descriptors;
    };
    var formatRegExp = /%[sdj%]/g;
    exports2.format = function(f2) {
      if (!isString2(f2)) {
        var objects = [];
        for (var i2 = 0; i2 < arguments.length; i2++) {
          objects.push(inspect(arguments[i2]));
        }
        return objects.join(" ");
      }
      var i2 = 1;
      var args = arguments;
      var len2 = args.length;
      var str = String(f2).replace(formatRegExp, function(x3) {
        if (x3 === "%%")
          return "%";
        if (i2 >= len2)
          return x3;
        switch (x3) {
          case "%s":
            return String(args[i2++]);
          case "%d":
            return Number(args[i2++]);
          case "%j":
            try {
              return JSON.stringify(args[i2++]);
            } catch (_2) {
              return "[Circular]";
            }
          default:
            return x3;
        }
      });
      for (var x2 = args[i2]; i2 < len2; x2 = args[++i2]) {
        if (isNull(x2) || !isObject2(x2)) {
          str += " " + x2;
        } else {
          str += " " + inspect(x2);
        }
      }
      return str;
    };
    exports2.deprecate = function(fn, msg) {
      if (typeof process$1 !== "undefined" && process$1.noDeprecation === true) {
        return fn;
      }
      if (typeof process$1 === "undefined") {
        return function() {
          return exports2.deprecate(fn, msg).apply(this, arguments);
        };
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (process$1.throwDeprecation) {
            throw new Error(msg);
          } else if (process$1.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    };
    var debugs = {};
    var debugEnvRegex = /^$/;
    if ({}.NODE_DEBUG) {
      var debugEnv = {}.NODE_DEBUG;
      debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase();
      debugEnvRegex = new RegExp("^" + debugEnv + "$", "i");
    }
    exports2.debuglog = function(set) {
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (debugEnvRegex.test(set)) {
          var pid = process$1.pid;
          debugs[set] = function() {
            var msg = exports2.format.apply(exports2, arguments);
            console.error("%s %d: %s", set, pid, msg);
          };
        } else {
          debugs[set] = function() {
          };
        }
      }
      return debugs[set];
    };
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      if (arguments.length >= 3)
        ctx.depth = arguments[2];
      if (arguments.length >= 4)
        ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        ctx.showHidden = opts;
      } else if (opts) {
        exports2._extend(ctx, opts);
      }
      if (isUndefined2(ctx.showHidden))
        ctx.showHidden = false;
      if (isUndefined2(ctx.depth))
        ctx.depth = 2;
      if (isUndefined2(ctx.colors))
        ctx.colors = false;
      if (isUndefined2(ctx.customInspect))
        ctx.customInspect = true;
      if (ctx.colors)
        ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports2.inspect = inspect;
    inspect.colors = {
      "bold": [1, 22],
      "italic": [3, 23],
      "underline": [4, 24],
      "inverse": [7, 27],
      "white": [37, 39],
      "grey": [90, 39],
      "black": [30, 39],
      "blue": [34, 39],
      "cyan": [36, 39],
      "green": [32, 39],
      "magenta": [35, 39],
      "red": [31, 39],
      "yellow": [33, 39]
    };
    inspect.styles = {
      "special": "cyan",
      "number": "yellow",
      "boolean": "yellow",
      "undefined": "grey",
      "null": "bold",
      "string": "green",
      "date": "magenta",
      // "name": intentionally not styling
      "regexp": "red"
    };
    function stylizeWithColor(str, styleType) {
      var style2 = inspect.styles[styleType];
      if (style2) {
        return "\x1B[" + inspect.colors[style2][0] + "m" + str + "\x1B[" + inspect.colors[style2][1] + "m";
      } else {
        return str;
      }
    }
    function stylizeNoColor(str, styleType) {
      return str;
    }
    function arrayToHash(array2) {
      var hash2 = {};
      array2.forEach(function(val, idx) {
        hash2[val] = true;
      });
      return hash2;
    }
    function formatValue(ctx, value, recurseTimes) {
      if (ctx.customInspect && value && isFunction2(value.inspect) && // Filter out the util module, it's inspect function is special
      value.inspect !== exports2.inspect && // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString2(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }
      var keys2 = Object.keys(value);
      var visibleKeys = arrayToHash(keys2);
      if (ctx.showHidden) {
        keys2 = Object.getOwnPropertyNames(value);
      }
      if (isError(value) && (keys2.indexOf("message") >= 0 || keys2.indexOf("description") >= 0)) {
        return formatError(value);
      }
      if (keys2.length === 0) {
        if (isFunction2(value)) {
          var name2 = value.name ? ": " + value.name : "";
          return ctx.stylize("[Function" + name2 + "]", "special");
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        }
        if (isDate2(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), "date");
        }
        if (isError(value)) {
          return formatError(value);
        }
      }
      var base2 = "", array2 = false, braces = ["{", "}"];
      if (isArray2(value)) {
        array2 = true;
        braces = ["[", "]"];
      }
      if (isFunction2(value)) {
        var n2 = value.name ? ": " + value.name : "";
        base2 = " [Function" + n2 + "]";
      }
      if (isRegExp(value)) {
        base2 = " " + RegExp.prototype.toString.call(value);
      }
      if (isDate2(value)) {
        base2 = " " + Date.prototype.toUTCString.call(value);
      }
      if (isError(value)) {
        base2 = " " + formatError(value);
      }
      if (keys2.length === 0 && (!array2 || value.length == 0)) {
        return braces[0] + base2 + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        } else {
          return ctx.stylize("[Object]", "special");
        }
      }
      ctx.seen.push(value);
      var output;
      if (array2) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys2);
      } else {
        output = keys2.map(function(key2) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key2, array2);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output, base2, braces);
    }
    function formatPrimitive(ctx, value) {
      if (isUndefined2(value))
        return ctx.stylize("undefined", "undefined");
      if (isString2(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, "string");
      }
      if (isNumber2(value))
        return ctx.stylize("" + value, "number");
      if (isBoolean(value))
        return ctx.stylize("" + value, "boolean");
      if (isNull(value))
        return ctx.stylize("null", "null");
    }
    function formatError(value) {
      return "[" + Error.prototype.toString.call(value) + "]";
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys2) {
      var output = [];
      for (var i2 = 0, l2 = value.length; i2 < l2; ++i2) {
        if (hasOwnProperty2(value, String(i2))) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            String(i2),
            true
          ));
        } else {
          output.push("");
        }
      }
      keys2.forEach(function(key2) {
        if (!key2.match(/^\d+$/)) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            key2,
            true
          ));
        }
      });
      return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key2, array2) {
      var name2, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key2) || { value: value[key2] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize("[Getter/Setter]", "special");
        } else {
          str = ctx.stylize("[Getter]", "special");
        }
      } else {
        if (desc.set) {
          str = ctx.stylize("[Setter]", "special");
        }
      }
      if (!hasOwnProperty2(visibleKeys, key2)) {
        name2 = "[" + key2 + "]";
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf("\n") > -1) {
            if (array2) {
              str = str.split("\n").map(function(line) {
                return "  " + line;
              }).join("\n").slice(2);
            } else {
              str = "\n" + str.split("\n").map(function(line) {
                return "   " + line;
              }).join("\n");
            }
          }
        } else {
          str = ctx.stylize("[Circular]", "special");
        }
      }
      if (isUndefined2(name2)) {
        if (array2 && key2.match(/^\d+$/)) {
          return str;
        }
        name2 = JSON.stringify("" + key2);
        if (name2.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name2 = name2.slice(1, -1);
          name2 = ctx.stylize(name2, "name");
        } else {
          name2 = name2.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name2 = ctx.stylize(name2, "string");
        }
      }
      return name2 + ": " + str;
    }
    function reduceToSingleString(output, base2, braces) {
      var length = output.reduce(function(prev, cur) {
        if (cur.indexOf("\n") >= 0)
          ;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base2 === "" ? "" : base2 + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
      }
      return braces[0] + base2 + " " + output.join(", ") + " " + braces[1];
    }
    exports2.types = requireTypes();
    function isArray2(ar) {
      return Array.isArray(ar);
    }
    exports2.isArray = isArray2;
    function isBoolean(arg) {
      return typeof arg === "boolean";
    }
    exports2.isBoolean = isBoolean;
    function isNull(arg) {
      return arg === null;
    }
    exports2.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports2.isNullOrUndefined = isNullOrUndefined;
    function isNumber2(arg) {
      return typeof arg === "number";
    }
    exports2.isNumber = isNumber2;
    function isString2(arg) {
      return typeof arg === "string";
    }
    exports2.isString = isString2;
    function isSymbol(arg) {
      return typeof arg === "symbol";
    }
    exports2.isSymbol = isSymbol;
    function isUndefined2(arg) {
      return arg === void 0;
    }
    exports2.isUndefined = isUndefined2;
    function isRegExp(re2) {
      return isObject2(re2) && objectToString(re2) === "[object RegExp]";
    }
    exports2.isRegExp = isRegExp;
    exports2.types.isRegExp = isRegExp;
    function isObject2(arg) {
      return typeof arg === "object" && arg !== null;
    }
    exports2.isObject = isObject2;
    function isDate2(d2) {
      return isObject2(d2) && objectToString(d2) === "[object Date]";
    }
    exports2.isDate = isDate2;
    exports2.types.isDate = isDate2;
    function isError(e2) {
      return isObject2(e2) && (objectToString(e2) === "[object Error]" || e2 instanceof Error);
    }
    exports2.isError = isError;
    exports2.types.isNativeError = isError;
    function isFunction2(arg) {
      return typeof arg === "function";
    }
    exports2.isFunction = isFunction2;
    function isPrimitive(arg) {
      return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
      typeof arg === "undefined";
    }
    exports2.isPrimitive = isPrimitive;
    exports2.isBuffer = requireIsBufferBrowser();
    function objectToString(o2) {
      return Object.prototype.toString.call(o2);
    }
    function pad(n2) {
      return n2 < 10 ? "0" + n2.toString(10) : n2.toString(10);
    }
    var months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    function timestamp() {
      var d2 = /* @__PURE__ */ new Date();
      var time = [
        pad(d2.getHours()),
        pad(d2.getMinutes()),
        pad(d2.getSeconds())
      ].join(":");
      return [d2.getDate(), months[d2.getMonth()], time].join(" ");
    }
    exports2.log = function() {
      console.log("%s - %s", timestamp(), exports2.format.apply(exports2, arguments));
    };
    exports2.inherits = requireInherits_browser();
    exports2._extend = function(origin, add) {
      if (!add || !isObject2(add))
        return origin;
      var keys2 = Object.keys(add);
      var i2 = keys2.length;
      while (i2--) {
        origin[keys2[i2]] = add[keys2[i2]];
      }
      return origin;
    };
    function hasOwnProperty2(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : void 0;
    exports2.promisify = function promisify(original) {
      if (typeof original !== "function")
        throw new TypeError('The "original" argument must be of type Function');
      if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== "function") {
          throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        }
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn,
          enumerable: false,
          writable: false,
          configurable: true
        });
        return fn;
      }
      function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
          promiseResolve = resolve;
          promiseReject = reject;
        });
        var args = [];
        for (var i2 = 0; i2 < arguments.length; i2++) {
          args.push(arguments[i2]);
        }
        args.push(function(err, value) {
          if (err) {
            promiseReject(err);
          } else {
            promiseResolve(value);
          }
        });
        try {
          original.apply(this, args);
        } catch (err) {
          promiseReject(err);
        }
        return promise;
      }
      Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
      if (kCustomPromisifiedSymbol)
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn,
          enumerable: false,
          writable: false,
          configurable: true
        });
      return Object.defineProperties(
        fn,
        getOwnPropertyDescriptors(original)
      );
    };
    exports2.promisify.custom = kCustomPromisifiedSymbol;
    function callbackifyOnRejected(reason, cb2) {
      if (!reason) {
        var newReason = new Error("Promise was rejected with a falsy value");
        newReason.reason = reason;
        reason = newReason;
      }
      return cb2(reason);
    }
    function callbackify(original) {
      if (typeof original !== "function") {
        throw new TypeError('The "original" argument must be of type Function');
      }
      function callbackified() {
        var args = [];
        for (var i2 = 0; i2 < arguments.length; i2++) {
          args.push(arguments[i2]);
        }
        var maybeCb = args.pop();
        if (typeof maybeCb !== "function") {
          throw new TypeError("The last argument must be of type Function");
        }
        var self2 = this;
        var cb2 = function() {
          return maybeCb.apply(self2, arguments);
        };
        original.apply(this, args).then(
          function(ret) {
            process$1.nextTick(cb2.bind(null, null, ret));
          },
          function(rej) {
            process$1.nextTick(callbackifyOnRejected.bind(null, rej, cb2));
          }
        );
      }
      Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
      Object.defineProperties(
        callbackified,
        getOwnPropertyDescriptors(original)
      );
      return callbackified;
    }
    exports2.callbackify = callbackify;
  })(util$1);
  return util$1;
}
var buffer_list;
var hasRequiredBuffer_list;
function requireBuffer_list() {
  if (hasRequiredBuffer_list)
    return buffer_list;
  hasRequiredBuffer_list = 1;
  function ownKeys2(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = null != arguments[i2] ? arguments[i2] : {};
      i2 % 2 ? ownKeys2(Object(source), true).forEach(function(key2) {
        _defineProperty(target, key2, source[key2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
      });
    }
    return target;
  }
  function _defineProperty(obj, key2, value) {
    key2 = _toPropertyKey(key2);
    if (key2 in obj) {
      Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key2] = value;
    }
    return obj;
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor2 = props[i2];
      descriptor2.enumerable = descriptor2.enumerable || false;
      descriptor2.configurable = true;
      if ("value" in descriptor2)
        descriptor2.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor2.key), descriptor2);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _toPropertyKey(arg) {
    var key2 = _toPrimitive(arg, "string");
    return typeof key2 === "symbol" ? key2 : String(key2);
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  var _require = buffer$1, Buffer = _require.Buffer;
  var _require2 = requireUtil$1(), inspect = _require2.inspect;
  var custom = inspect && inspect.custom || "inspect";
  function copyBuffer(src2, target, offset) {
    Buffer.prototype.copy.call(src2, target, offset);
  }
  buffer_list = /* @__PURE__ */ function() {
    function BufferList2() {
      _classCallCheck(this, BufferList2);
      this.head = null;
      this.tail = null;
      this.length = 0;
    }
    _createClass(BufferList2, [{
      key: "push",
      value: function push(v2) {
        var entry = {
          data: v2,
          next: null
        };
        if (this.length > 0)
          this.tail.next = entry;
        else
          this.head = entry;
        this.tail = entry;
        ++this.length;
      }
    }, {
      key: "unshift",
      value: function unshift(v2) {
        var entry = {
          data: v2,
          next: this.head
        };
        if (this.length === 0)
          this.tail = entry;
        this.head = entry;
        ++this.length;
      }
    }, {
      key: "shift",
      value: function shift() {
        if (this.length === 0)
          return;
        var ret = this.head.data;
        if (this.length === 1)
          this.head = this.tail = null;
        else
          this.head = this.head.next;
        --this.length;
        return ret;
      }
    }, {
      key: "clear",
      value: function clear() {
        this.head = this.tail = null;
        this.length = 0;
      }
    }, {
      key: "join",
      value: function join(s2) {
        if (this.length === 0)
          return "";
        var p2 = this.head;
        var ret = "" + p2.data;
        while (p2 = p2.next)
          ret += s2 + p2.data;
        return ret;
      }
    }, {
      key: "concat",
      value: function concat2(n2) {
        if (this.length === 0)
          return Buffer.alloc(0);
        var ret = Buffer.allocUnsafe(n2 >>> 0);
        var p2 = this.head;
        var i2 = 0;
        while (p2) {
          copyBuffer(p2.data, ret, i2);
          i2 += p2.data.length;
          p2 = p2.next;
        }
        return ret;
      }
      // Consumes a specified amount of bytes or characters from the buffered data.
    }, {
      key: "consume",
      value: function consume(n2, hasStrings) {
        var ret;
        if (n2 < this.head.data.length) {
          ret = this.head.data.slice(0, n2);
          this.head.data = this.head.data.slice(n2);
        } else if (n2 === this.head.data.length) {
          ret = this.shift();
        } else {
          ret = hasStrings ? this._getString(n2) : this._getBuffer(n2);
        }
        return ret;
      }
    }, {
      key: "first",
      value: function first2() {
        return this.head.data;
      }
      // Consumes a specified amount of characters from the buffered data.
    }, {
      key: "_getString",
      value: function _getString(n2) {
        var p2 = this.head;
        var c2 = 1;
        var ret = p2.data;
        n2 -= ret.length;
        while (p2 = p2.next) {
          var str = p2.data;
          var nb2 = n2 > str.length ? str.length : n2;
          if (nb2 === str.length)
            ret += str;
          else
            ret += str.slice(0, n2);
          n2 -= nb2;
          if (n2 === 0) {
            if (nb2 === str.length) {
              ++c2;
              if (p2.next)
                this.head = p2.next;
              else
                this.head = this.tail = null;
            } else {
              this.head = p2;
              p2.data = str.slice(nb2);
            }
            break;
          }
          ++c2;
        }
        this.length -= c2;
        return ret;
      }
      // Consumes a specified amount of bytes from the buffered data.
    }, {
      key: "_getBuffer",
      value: function _getBuffer(n2) {
        var ret = Buffer.allocUnsafe(n2);
        var p2 = this.head;
        var c2 = 1;
        p2.data.copy(ret);
        n2 -= p2.data.length;
        while (p2 = p2.next) {
          var buf = p2.data;
          var nb2 = n2 > buf.length ? buf.length : n2;
          buf.copy(ret, ret.length - n2, 0, nb2);
          n2 -= nb2;
          if (n2 === 0) {
            if (nb2 === buf.length) {
              ++c2;
              if (p2.next)
                this.head = p2.next;
              else
                this.head = this.tail = null;
            } else {
              this.head = p2;
              p2.data = buf.slice(nb2);
            }
            break;
          }
          ++c2;
        }
        this.length -= c2;
        return ret;
      }
      // Make sure the linked list only shows the minimal necessary information.
    }, {
      key: custom,
      value: function value(_2, options) {
        return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
          // Only inspect one level.
          depth: 0,
          // It should not recurse.
          customInspect: false
        }));
      }
    }]);
    return BufferList2;
  }();
  return buffer_list;
}
var destroy_1$1;
var hasRequiredDestroy$1;
function requireDestroy$1() {
  if (hasRequiredDestroy$1)
    return destroy_1$1;
  hasRequiredDestroy$1 = 1;
  function destroy(err, cb2) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
      if (cb2) {
        cb2(err);
      } else if (err) {
        if (!this._writableState) {
          process$1.nextTick(emitErrorNT, this, err);
        } else if (!this._writableState.errorEmitted) {
          this._writableState.errorEmitted = true;
          process$1.nextTick(emitErrorNT, this, err);
        }
      }
      return this;
    }
    if (this._readableState) {
      this._readableState.destroyed = true;
    }
    if (this._writableState) {
      this._writableState.destroyed = true;
    }
    this._destroy(err || null, function(err2) {
      if (!cb2 && err2) {
        if (!_this._writableState) {
          process$1.nextTick(emitErrorAndCloseNT, _this, err2);
        } else if (!_this._writableState.errorEmitted) {
          _this._writableState.errorEmitted = true;
          process$1.nextTick(emitErrorAndCloseNT, _this, err2);
        } else {
          process$1.nextTick(emitCloseNT, _this);
        }
      } else if (cb2) {
        process$1.nextTick(emitCloseNT, _this);
        cb2(err2);
      } else {
        process$1.nextTick(emitCloseNT, _this);
      }
    });
    return this;
  }
  function emitErrorAndCloseNT(self2, err) {
    emitErrorNT(self2, err);
    emitCloseNT(self2);
  }
  function emitCloseNT(self2) {
    if (self2._writableState && !self2._writableState.emitClose)
      return;
    if (self2._readableState && !self2._readableState.emitClose)
      return;
    self2.emit("close");
  }
  function undestroy() {
    if (this._readableState) {
      this._readableState.destroyed = false;
      this._readableState.reading = false;
      this._readableState.ended = false;
      this._readableState.endEmitted = false;
    }
    if (this._writableState) {
      this._writableState.destroyed = false;
      this._writableState.ended = false;
      this._writableState.ending = false;
      this._writableState.finalCalled = false;
      this._writableState.prefinished = false;
      this._writableState.finished = false;
      this._writableState.errorEmitted = false;
    }
  }
  function emitErrorNT(self2, err) {
    self2.emit("error", err);
  }
  function errorOrDestroy(stream, err) {
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy)
      stream.destroy(err);
    else
      stream.emit("error", err);
  }
  destroy_1$1 = {
    destroy,
    undestroy,
    errorOrDestroy
  };
  return destroy_1$1;
}
var errorsBrowser = {};
var hasRequiredErrorsBrowser;
function requireErrorsBrowser() {
  if (hasRequiredErrorsBrowser)
    return errorsBrowser;
  hasRequiredErrorsBrowser = 1;
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }
  var codes = {};
  function createErrorType(code2, message2, Base) {
    if (!Base) {
      Base = Error;
    }
    function getMessage(arg1, arg2, arg3) {
      if (typeof message2 === "string") {
        return message2;
      } else {
        return message2(arg1, arg2, arg3);
      }
    }
    var NodeError = /* @__PURE__ */ function(_Base) {
      _inheritsLoose(NodeError2, _Base);
      function NodeError2(arg1, arg2, arg3) {
        return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
      }
      return NodeError2;
    }(Base);
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code2;
    codes[code2] = NodeError;
  }
  function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
      var len2 = expected.length;
      expected = expected.map(function(i2) {
        return String(i2);
      });
      if (len2 > 2) {
        return "one of ".concat(thing, " ").concat(expected.slice(0, len2 - 1).join(", "), ", or ") + expected[len2 - 1];
      } else if (len2 === 2) {
        return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
      } else {
        return "of ".concat(thing, " ").concat(expected[0]);
      }
    } else {
      return "of ".concat(thing, " ").concat(String(expected));
    }
  }
  function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
  }
  function endsWith(str, search, this_len) {
    if (this_len === void 0 || this_len > str.length) {
      this_len = str.length;
    }
    return str.substring(this_len - search.length, this_len) === search;
  }
  function includes(str, search, start) {
    if (typeof start !== "number") {
      start = 0;
    }
    if (start + search.length > str.length) {
      return false;
    } else {
      return str.indexOf(search, start) !== -1;
    }
  }
  createErrorType("ERR_INVALID_OPT_VALUE", function(name2, value) {
    return 'The value "' + value + '" is invalid for option "' + name2 + '"';
  }, TypeError);
  createErrorType("ERR_INVALID_ARG_TYPE", function(name2, expected, actual) {
    var determiner;
    if (typeof expected === "string" && startsWith(expected, "not ")) {
      determiner = "must not be";
      expected = expected.replace(/^not /, "");
    } else {
      determiner = "must be";
    }
    var msg;
    if (endsWith(name2, " argument")) {
      msg = "The ".concat(name2, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    } else {
      var type2 = includes(name2, ".") ? "property" : "argument";
      msg = 'The "'.concat(name2, '" ').concat(type2, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
  }, TypeError);
  createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
  createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name2) {
    return "The " + name2 + " method is not implemented";
  });
  createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
  createErrorType("ERR_STREAM_DESTROYED", function(name2) {
    return "Cannot call " + name2 + " after a stream was destroyed";
  });
  createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
  createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
  createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
  createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
  createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
  }, TypeError);
  createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
  errorsBrowser.codes = codes;
  return errorsBrowser;
}
var state;
var hasRequiredState;
function requireState() {
  if (hasRequiredState)
    return state;
  hasRequiredState = 1;
  var ERR_INVALID_OPT_VALUE = requireErrorsBrowser().codes.ERR_INVALID_OPT_VALUE;
  function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
  }
  function getHighWaterMark(state2, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
      if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
        var name2 = isDuplex ? duplexKey : "highWaterMark";
        throw new ERR_INVALID_OPT_VALUE(name2, hwm);
      }
      return Math.floor(hwm);
    }
    return state2.objectMode ? 16 : 16 * 1024;
  }
  state = {
    getHighWaterMark
  };
  return state;
}
var browser$b;
var hasRequiredBrowser$a;
function requireBrowser$a() {
  if (hasRequiredBrowser$a)
    return browser$b;
  hasRequiredBrowser$a = 1;
  browser$b = deprecate;
  function deprecate(fn, msg) {
    if (config("noDeprecation")) {
      return fn;
    }
    var warned = false;
    function deprecated() {
      if (!warned) {
        if (config("throwDeprecation")) {
          throw new Error(msg);
        } else if (config("traceDeprecation")) {
          console.trace(msg);
        } else {
          console.warn(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }
    return deprecated;
  }
  function config(name2) {
    try {
      if (!commonjsGlobal.localStorage)
        return false;
    } catch (_2) {
      return false;
    }
    var val = commonjsGlobal.localStorage[name2];
    if (null == val)
      return false;
    return String(val).toLowerCase() === "true";
  }
  return browser$b;
}
var _stream_writable$1;
var hasRequired_stream_writable$1;
function require_stream_writable$1() {
  if (hasRequired_stream_writable$1)
    return _stream_writable$1;
  hasRequired_stream_writable$1 = 1;
  _stream_writable$1 = Writable;
  function CorkedRequest(state2) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
      onCorkedFinish(_this, state2);
    };
  }
  var Duplex;
  Writable.WritableState = WritableState;
  var internalUtil = {
    deprecate: requireBrowser$a()
  };
  var Stream = requireStreamBrowser$1();
  var Buffer = buffer$1.Buffer;
  var OurUint8Array = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var destroyImpl = requireDestroy$1();
  var _require = requireState(), getHighWaterMark = _require.getHighWaterMark;
  var _require$codes = requireErrorsBrowser().codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
  var errorOrDestroy = destroyImpl.errorOrDestroy;
  requireInherits_browser()(Writable, Stream);
  function nop() {
  }
  function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require_stream_duplex$1();
    options = options || {};
    if (typeof isDuplex !== "boolean")
      isDuplex = stream instanceof Duplex;
    this.objectMode = !!options.objectMode;
    if (isDuplex)
      this.objectMode = this.objectMode || !!options.writableObjectMode;
    this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
    this.finalCalled = false;
    this.needDrain = false;
    this.ending = false;
    this.ended = false;
    this.finished = false;
    this.destroyed = false;
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.length = 0;
    this.writing = false;
    this.corked = 0;
    this.sync = true;
    this.bufferProcessing = false;
    this.onwrite = function(er) {
      onwrite(stream, er);
    };
    this.writecb = null;
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    this.pendingcb = 0;
    this.prefinished = false;
    this.errorEmitted = false;
    this.emitClose = options.emitClose !== false;
    this.autoDestroy = !!options.autoDestroy;
    this.bufferedRequestCount = 0;
    this.corkedRequestsFree = new CorkedRequest(this);
  }
  WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  (function() {
    try {
      Object.defineProperty(WritableState.prototype, "buffer", {
        get: internalUtil.deprecate(function writableStateBufferGetter() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
      });
    } catch (_2) {
    }
  })();
  var realHasInstance;
  if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
      value: function value(object2) {
        if (realHasInstance.call(this, object2))
          return true;
        if (this !== Writable)
          return false;
        return object2 && object2._writableState instanceof WritableState;
      }
    });
  } else {
    realHasInstance = function realHasInstance2(object2) {
      return object2 instanceof this;
    };
  }
  function Writable(options) {
    Duplex = Duplex || require_stream_duplex$1();
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this))
      return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex);
    this.writable = true;
    if (options) {
      if (typeof options.write === "function")
        this._write = options.write;
      if (typeof options.writev === "function")
        this._writev = options.writev;
      if (typeof options.destroy === "function")
        this._destroy = options.destroy;
      if (typeof options.final === "function")
        this._final = options.final;
    }
    Stream.call(this);
  }
  Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
  };
  function writeAfterEnd(stream, cb2) {
    var er = new ERR_STREAM_WRITE_AFTER_END();
    errorOrDestroy(stream, er);
    process$1.nextTick(cb2, er);
  }
  function validChunk(stream, state2, chunk, cb2) {
    var er;
    if (chunk === null) {
      er = new ERR_STREAM_NULL_VALUES();
    } else if (typeof chunk !== "string" && !state2.objectMode) {
      er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
    }
    if (er) {
      errorOrDestroy(stream, er);
      process$1.nextTick(cb2, er);
      return false;
    }
    return true;
  }
  Writable.prototype.write = function(chunk, encoding, cb2) {
    var state2 = this._writableState;
    var ret = false;
    var isBuf = !state2.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) {
      chunk = _uint8ArrayToBuffer(chunk);
    }
    if (typeof encoding === "function") {
      cb2 = encoding;
      encoding = null;
    }
    if (isBuf)
      encoding = "buffer";
    else if (!encoding)
      encoding = state2.defaultEncoding;
    if (typeof cb2 !== "function")
      cb2 = nop;
    if (state2.ending)
      writeAfterEnd(this, cb2);
    else if (isBuf || validChunk(this, state2, chunk, cb2)) {
      state2.pendingcb++;
      ret = writeOrBuffer(this, state2, isBuf, chunk, encoding, cb2);
    }
    return ret;
  };
  Writable.prototype.cork = function() {
    this._writableState.corked++;
  };
  Writable.prototype.uncork = function() {
    var state2 = this._writableState;
    if (state2.corked) {
      state2.corked--;
      if (!state2.writing && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest)
        clearBuffer(this, state2);
    }
  };
  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    if (typeof encoding === "string")
      encoding = encoding.toLowerCase();
    if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
      throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };
  Object.defineProperty(Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  function decodeChunk(state2, chunk, encoding) {
    if (!state2.objectMode && state2.decodeStrings !== false && typeof chunk === "string") {
      chunk = Buffer.from(chunk, encoding);
    }
    return chunk;
  }
  Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._writableState.highWaterMark;
    }
  });
  function writeOrBuffer(stream, state2, isBuf, chunk, encoding, cb2) {
    if (!isBuf) {
      var newChunk = decodeChunk(state2, chunk, encoding);
      if (chunk !== newChunk) {
        isBuf = true;
        encoding = "buffer";
        chunk = newChunk;
      }
    }
    var len2 = state2.objectMode ? 1 : chunk.length;
    state2.length += len2;
    var ret = state2.length < state2.highWaterMark;
    if (!ret)
      state2.needDrain = true;
    if (state2.writing || state2.corked) {
      var last2 = state2.lastBufferedRequest;
      state2.lastBufferedRequest = {
        chunk,
        encoding,
        isBuf,
        callback: cb2,
        next: null
      };
      if (last2) {
        last2.next = state2.lastBufferedRequest;
      } else {
        state2.bufferedRequest = state2.lastBufferedRequest;
      }
      state2.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state2, false, len2, chunk, encoding, cb2);
    }
    return ret;
  }
  function doWrite(stream, state2, writev, len2, chunk, encoding, cb2) {
    state2.writelen = len2;
    state2.writecb = cb2;
    state2.writing = true;
    state2.sync = true;
    if (state2.destroyed)
      state2.onwrite(new ERR_STREAM_DESTROYED("write"));
    else if (writev)
      stream._writev(chunk, state2.onwrite);
    else
      stream._write(chunk, encoding, state2.onwrite);
    state2.sync = false;
  }
  function onwriteError(stream, state2, sync, er, cb2) {
    --state2.pendingcb;
    if (sync) {
      process$1.nextTick(cb2, er);
      process$1.nextTick(finishMaybe, stream, state2);
      stream._writableState.errorEmitted = true;
      errorOrDestroy(stream, er);
    } else {
      cb2(er);
      stream._writableState.errorEmitted = true;
      errorOrDestroy(stream, er);
      finishMaybe(stream, state2);
    }
  }
  function onwriteStateUpdate(state2) {
    state2.writing = false;
    state2.writecb = null;
    state2.length -= state2.writelen;
    state2.writelen = 0;
  }
  function onwrite(stream, er) {
    var state2 = stream._writableState;
    var sync = state2.sync;
    var cb2 = state2.writecb;
    if (typeof cb2 !== "function")
      throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state2);
    if (er)
      onwriteError(stream, state2, sync, er, cb2);
    else {
      var finished = needFinish(state2) || stream.destroyed;
      if (!finished && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) {
        clearBuffer(stream, state2);
      }
      if (sync) {
        process$1.nextTick(afterWrite, stream, state2, finished, cb2);
      } else {
        afterWrite(stream, state2, finished, cb2);
      }
    }
  }
  function afterWrite(stream, state2, finished, cb2) {
    if (!finished)
      onwriteDrain(stream, state2);
    state2.pendingcb--;
    cb2();
    finishMaybe(stream, state2);
  }
  function onwriteDrain(stream, state2) {
    if (state2.length === 0 && state2.needDrain) {
      state2.needDrain = false;
      stream.emit("drain");
    }
  }
  function clearBuffer(stream, state2) {
    state2.bufferProcessing = true;
    var entry = state2.bufferedRequest;
    if (stream._writev && entry && entry.next) {
      var l2 = state2.bufferedRequestCount;
      var buffer2 = new Array(l2);
      var holder = state2.corkedRequestsFree;
      holder.entry = entry;
      var count = 0;
      var allBuffers = true;
      while (entry) {
        buffer2[count] = entry;
        if (!entry.isBuf)
          allBuffers = false;
        entry = entry.next;
        count += 1;
      }
      buffer2.allBuffers = allBuffers;
      doWrite(stream, state2, true, state2.length, buffer2, "", holder.finish);
      state2.pendingcb++;
      state2.lastBufferedRequest = null;
      if (holder.next) {
        state2.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state2.corkedRequestsFree = new CorkedRequest(state2);
      }
      state2.bufferedRequestCount = 0;
    } else {
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb2 = entry.callback;
        var len2 = state2.objectMode ? 1 : chunk.length;
        doWrite(stream, state2, false, len2, chunk, encoding, cb2);
        entry = entry.next;
        state2.bufferedRequestCount--;
        if (state2.writing) {
          break;
        }
      }
      if (entry === null)
        state2.lastBufferedRequest = null;
    }
    state2.bufferedRequest = entry;
    state2.bufferProcessing = false;
  }
  Writable.prototype._write = function(chunk, encoding, cb2) {
    cb2(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
  };
  Writable.prototype._writev = null;
  Writable.prototype.end = function(chunk, encoding, cb2) {
    var state2 = this._writableState;
    if (typeof chunk === "function") {
      cb2 = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === "function") {
      cb2 = encoding;
      encoding = null;
    }
    if (chunk !== null && chunk !== void 0)
      this.write(chunk, encoding);
    if (state2.corked) {
      state2.corked = 1;
      this.uncork();
    }
    if (!state2.ending)
      endWritable(this, state2, cb2);
    return this;
  };
  Object.defineProperty(Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._writableState.length;
    }
  });
  function needFinish(state2) {
    return state2.ending && state2.length === 0 && state2.bufferedRequest === null && !state2.finished && !state2.writing;
  }
  function callFinal(stream, state2) {
    stream._final(function(err) {
      state2.pendingcb--;
      if (err) {
        errorOrDestroy(stream, err);
      }
      state2.prefinished = true;
      stream.emit("prefinish");
      finishMaybe(stream, state2);
    });
  }
  function prefinish(stream, state2) {
    if (!state2.prefinished && !state2.finalCalled) {
      if (typeof stream._final === "function" && !state2.destroyed) {
        state2.pendingcb++;
        state2.finalCalled = true;
        process$1.nextTick(callFinal, stream, state2);
      } else {
        state2.prefinished = true;
        stream.emit("prefinish");
      }
    }
  }
  function finishMaybe(stream, state2) {
    var need = needFinish(state2);
    if (need) {
      prefinish(stream, state2);
      if (state2.pendingcb === 0) {
        state2.finished = true;
        stream.emit("finish");
        if (state2.autoDestroy) {
          var rState = stream._readableState;
          if (!rState || rState.autoDestroy && rState.endEmitted) {
            stream.destroy();
          }
        }
      }
    }
    return need;
  }
  function endWritable(stream, state2, cb2) {
    state2.ending = true;
    finishMaybe(stream, state2);
    if (cb2) {
      if (state2.finished)
        process$1.nextTick(cb2);
      else
        stream.once("finish", cb2);
    }
    state2.ended = true;
    stream.writable = false;
  }
  function onCorkedFinish(corkReq, state2, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while (entry) {
      var cb2 = entry.callback;
      state2.pendingcb--;
      cb2(err);
      entry = entry.next;
    }
    state2.corkedRequestsFree.next = corkReq;
  }
  Object.defineProperty(Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      if (this._writableState === void 0) {
        return false;
      }
      return this._writableState.destroyed;
    },
    set: function set(value) {
      if (!this._writableState) {
        return;
      }
      this._writableState.destroyed = value;
    }
  });
  Writable.prototype.destroy = destroyImpl.destroy;
  Writable.prototype._undestroy = destroyImpl.undestroy;
  Writable.prototype._destroy = function(err, cb2) {
    cb2(err);
  };
  return _stream_writable$1;
}
var _stream_duplex$1;
var hasRequired_stream_duplex$1;
function require_stream_duplex$1() {
  if (hasRequired_stream_duplex$1)
    return _stream_duplex$1;
  hasRequired_stream_duplex$1 = 1;
  var objectKeys = Object.keys || function(obj) {
    var keys3 = [];
    for (var key2 in obj)
      keys3.push(key2);
    return keys3;
  };
  _stream_duplex$1 = Duplex;
  var Readable = require_stream_readable$1();
  var Writable = require_stream_writable$1();
  requireInherits_browser()(Duplex, Readable);
  {
    var keys2 = objectKeys(Writable.prototype);
    for (var v2 = 0; v2 < keys2.length; v2++) {
      var method = keys2[v2];
      if (!Duplex.prototype[method])
        Duplex.prototype[method] = Writable.prototype[method];
    }
  }
  function Duplex(options) {
    if (!(this instanceof Duplex))
      return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
      if (options.readable === false)
        this.readable = false;
      if (options.writable === false)
        this.writable = false;
      if (options.allowHalfOpen === false) {
        this.allowHalfOpen = false;
        this.once("end", onend);
      }
    }
  }
  Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._writableState.highWaterMark;
    }
  });
  Object.defineProperty(Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  Object.defineProperty(Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._writableState.length;
    }
  });
  function onend() {
    if (this._writableState.ended)
      return;
    process$1.nextTick(onEndNT, this);
  }
  function onEndNT(self2) {
    self2.end();
  }
  Object.defineProperty(Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return false;
      }
      return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return;
      }
      this._readableState.destroyed = value;
      this._writableState.destroyed = value;
    }
  });
  return _stream_duplex$1;
}
var string_decoder = {};
var hasRequiredString_decoder;
function requireString_decoder() {
  if (hasRequiredString_decoder)
    return string_decoder;
  hasRequiredString_decoder = 1;
  var Buffer = requireSafeBuffer$1().Buffer;
  var isEncoding = Buffer.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch (encoding && encoding.toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
      case "raw":
        return true;
      default:
        return false;
    }
  };
  function _normalizeEncoding(enc) {
    if (!enc)
      return "utf8";
    var retried;
    while (true) {
      switch (enc) {
        case "utf8":
        case "utf-8":
          return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return "utf16le";
        case "latin1":
        case "binary":
          return "latin1";
        case "base64":
        case "ascii":
        case "hex":
          return enc;
        default:
          if (retried)
            return;
          enc = ("" + enc).toLowerCase();
          retried = true;
      }
    }
  }
  function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== "string" && (Buffer.isEncoding === isEncoding || !isEncoding(enc)))
      throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
  }
  string_decoder.StringDecoder = StringDecoder;
  function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb2;
    switch (this.encoding) {
      case "utf16le":
        this.text = utf16Text;
        this.end = utf16End;
        nb2 = 4;
        break;
      case "utf8":
        this.fillLast = utf8FillLast;
        nb2 = 4;
        break;
      case "base64":
        this.text = base64Text;
        this.end = base64End;
        nb2 = 3;
        break;
      default:
        this.write = simpleWrite;
        this.end = simpleEnd;
        return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb2);
  }
  StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0)
      return "";
    var r2;
    var i2;
    if (this.lastNeed) {
      r2 = this.fillLast(buf);
      if (r2 === void 0)
        return "";
      i2 = this.lastNeed;
      this.lastNeed = 0;
    } else {
      i2 = 0;
    }
    if (i2 < buf.length)
      return r2 ? r2 + this.text(buf, i2) : this.text(buf, i2);
    return r2 || "";
  };
  StringDecoder.prototype.end = utf8End;
  StringDecoder.prototype.text = utf8Text;
  StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
  };
  function utf8CheckByte(byte) {
    if (byte <= 127)
      return 0;
    else if (byte >> 5 === 6)
      return 2;
    else if (byte >> 4 === 14)
      return 3;
    else if (byte >> 3 === 30)
      return 4;
    return byte >> 6 === 2 ? -1 : -2;
  }
  function utf8CheckIncomplete(self2, buf, i2) {
    var j2 = buf.length - 1;
    if (j2 < i2)
      return 0;
    var nb2 = utf8CheckByte(buf[j2]);
    if (nb2 >= 0) {
      if (nb2 > 0)
        self2.lastNeed = nb2 - 1;
      return nb2;
    }
    if (--j2 < i2 || nb2 === -2)
      return 0;
    nb2 = utf8CheckByte(buf[j2]);
    if (nb2 >= 0) {
      if (nb2 > 0)
        self2.lastNeed = nb2 - 2;
      return nb2;
    }
    if (--j2 < i2 || nb2 === -2)
      return 0;
    nb2 = utf8CheckByte(buf[j2]);
    if (nb2 >= 0) {
      if (nb2 > 0) {
        if (nb2 === 2)
          nb2 = 0;
        else
          self2.lastNeed = nb2 - 3;
      }
      return nb2;
    }
    return 0;
  }
  function utf8CheckExtraBytes(self2, buf, p2) {
    if ((buf[0] & 192) !== 128) {
      self2.lastNeed = 0;
      return "�";
    }
    if (self2.lastNeed > 1 && buf.length > 1) {
      if ((buf[1] & 192) !== 128) {
        self2.lastNeed = 1;
        return "�";
      }
      if (self2.lastNeed > 2 && buf.length > 2) {
        if ((buf[2] & 192) !== 128) {
          self2.lastNeed = 2;
          return "�";
        }
      }
    }
  }
  function utf8FillLast(buf) {
    var p2 = this.lastTotal - this.lastNeed;
    var r2 = utf8CheckExtraBytes(this, buf);
    if (r2 !== void 0)
      return r2;
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, p2, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p2, 0, buf.length);
    this.lastNeed -= buf.length;
  }
  function utf8Text(buf, i2) {
    var total = utf8CheckIncomplete(this, buf, i2);
    if (!this.lastNeed)
      return buf.toString("utf8", i2);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i2, end);
  }
  function utf8End(buf) {
    var r2 = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed)
      return r2 + "�";
    return r2;
  }
  function utf16Text(buf, i2) {
    if ((buf.length - i2) % 2 === 0) {
      var r2 = buf.toString("utf16le", i2);
      if (r2) {
        var c2 = r2.charCodeAt(r2.length - 1);
        if (c2 >= 55296 && c2 <= 56319) {
          this.lastNeed = 2;
          this.lastTotal = 4;
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
          return r2.slice(0, -1);
        }
      }
      return r2;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i2, buf.length - 1);
  }
  function utf16End(buf) {
    var r2 = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
      var end = this.lastTotal - this.lastNeed;
      return r2 + this.lastChar.toString("utf16le", 0, end);
    }
    return r2;
  }
  function base64Text(buf, i2) {
    var n2 = (buf.length - i2) % 3;
    if (n2 === 0)
      return buf.toString("base64", i2);
    this.lastNeed = 3 - n2;
    this.lastTotal = 3;
    if (n2 === 1) {
      this.lastChar[0] = buf[buf.length - 1];
    } else {
      this.lastChar[0] = buf[buf.length - 2];
      this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i2, buf.length - n2);
  }
  function base64End(buf) {
    var r2 = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed)
      return r2 + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r2;
  }
  function simpleWrite(buf) {
    return buf.toString(this.encoding);
  }
  function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
  }
  return string_decoder;
}
var endOfStream;
var hasRequiredEndOfStream;
function requireEndOfStream() {
  if (hasRequiredEndOfStream)
    return endOfStream;
  hasRequiredEndOfStream = 1;
  var ERR_STREAM_PREMATURE_CLOSE = requireErrorsBrowser().codes.ERR_STREAM_PREMATURE_CLOSE;
  function once(callback) {
    var called = false;
    return function() {
      if (called)
        return;
      called = true;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      callback.apply(this, args);
    };
  }
  function noop2() {
  }
  function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
  }
  function eos(stream, opts, callback) {
    if (typeof opts === "function")
      return eos(stream, null, opts);
    if (!opts)
      opts = {};
    callback = once(callback || noop2);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish2() {
      if (!stream.writable)
        onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish2() {
      writable = false;
      writableEnded = true;
      if (!readable)
        callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend2() {
      readable = false;
      readableEnded = true;
      if (!writable)
        callback.call(stream);
    };
    var onerror = function onerror2(err) {
      callback.call(stream, err);
    };
    var onclose = function onclose2() {
      var err;
      if (readable && !readableEnded) {
        if (!stream._readableState || !stream._readableState.ended)
          err = new ERR_STREAM_PREMATURE_CLOSE();
        return callback.call(stream, err);
      }
      if (writable && !writableEnded) {
        if (!stream._writableState || !stream._writableState.ended)
          err = new ERR_STREAM_PREMATURE_CLOSE();
        return callback.call(stream, err);
      }
    };
    var onrequest = function onrequest2() {
      stream.req.on("finish", onfinish);
    };
    if (isRequest(stream)) {
      stream.on("complete", onfinish);
      stream.on("abort", onclose);
      if (stream.req)
        onrequest();
      else
        stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
      stream.on("end", onlegacyfinish);
      stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false)
      stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
      stream.removeListener("complete", onfinish);
      stream.removeListener("abort", onclose);
      stream.removeListener("request", onrequest);
      if (stream.req)
        stream.req.removeListener("finish", onfinish);
      stream.removeListener("end", onlegacyfinish);
      stream.removeListener("close", onlegacyfinish);
      stream.removeListener("finish", onfinish);
      stream.removeListener("end", onend);
      stream.removeListener("error", onerror);
      stream.removeListener("close", onclose);
    };
  }
  endOfStream = eos;
  return endOfStream;
}
var async_iterator;
var hasRequiredAsync_iterator;
function requireAsync_iterator() {
  if (hasRequiredAsync_iterator)
    return async_iterator;
  hasRequiredAsync_iterator = 1;
  var _Object$setPrototypeO;
  function _defineProperty(obj, key2, value) {
    key2 = _toPropertyKey(key2);
    if (key2 in obj) {
      Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key2] = value;
    }
    return obj;
  }
  function _toPropertyKey(arg) {
    var key2 = _toPrimitive(arg, "string");
    return typeof key2 === "symbol" ? key2 : String(key2);
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  var finished = requireEndOfStream();
  var kLastResolve = Symbol("lastResolve");
  var kLastReject = Symbol("lastReject");
  var kError = Symbol("error");
  var kEnded = Symbol("ended");
  var kLastPromise = Symbol("lastPromise");
  var kHandlePromise = Symbol("handlePromise");
  var kStream = Symbol("stream");
  function createIterResult(value, done) {
    return {
      value,
      done
    };
  }
  function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
      var data2 = iter[kStream].read();
      if (data2 !== null) {
        iter[kLastPromise] = null;
        iter[kLastResolve] = null;
        iter[kLastReject] = null;
        resolve(createIterResult(data2, false));
      }
    }
  }
  function onReadable(iter) {
    process$1.nextTick(readAndResolve, iter);
  }
  function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
      lastPromise.then(function() {
        if (iter[kEnded]) {
          resolve(createIterResult(void 0, true));
          return;
        }
        iter[kHandlePromise](resolve, reject);
      }, reject);
    };
  }
  var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
  });
  var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream() {
      return this[kStream];
    },
    next: function next() {
      var _this = this;
      var error = this[kError];
      if (error !== null) {
        return Promise.reject(error);
      }
      if (this[kEnded]) {
        return Promise.resolve(createIterResult(void 0, true));
      }
      if (this[kStream].destroyed) {
        return new Promise(function(resolve, reject) {
          process$1.nextTick(function() {
            if (_this[kError]) {
              reject(_this[kError]);
            } else {
              resolve(createIterResult(void 0, true));
            }
          });
        });
      }
      var lastPromise = this[kLastPromise];
      var promise;
      if (lastPromise) {
        promise = new Promise(wrapForNext(lastPromise, this));
      } else {
        var data2 = this[kStream].read();
        if (data2 !== null) {
          return Promise.resolve(createIterResult(data2, false));
        }
        promise = new Promise(this[kHandlePromise]);
      }
      this[kLastPromise] = promise;
      return promise;
    }
  }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
  }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    return new Promise(function(resolve, reject) {
      _this2[kStream].destroy(null, function(err) {
        if (err) {
          reject(err);
          return;
        }
        resolve(createIterResult(void 0, true));
      });
    });
  }), _Object$setPrototypeO), AsyncIteratorPrototype);
  var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
      value: stream,
      writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kLastReject, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kError, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kEnded, {
      value: stream._readableState.endEmitted,
      writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
      value: function value(resolve, reject) {
        var data2 = iterator[kStream].read();
        if (data2) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(data2, false));
        } else {
          iterator[kLastResolve] = resolve;
          iterator[kLastReject] = reject;
        }
      },
      writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
      if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
        var reject = iterator[kLastReject];
        if (reject !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          reject(err);
        }
        iterator[kError] = err;
        return;
      }
      var resolve = iterator[kLastResolve];
      if (resolve !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(void 0, true));
      }
      iterator[kEnded] = true;
    });
    stream.on("readable", onReadable.bind(null, iterator));
    return iterator;
  };
  async_iterator = createReadableStreamAsyncIterator;
  return async_iterator;
}
var fromBrowser;
var hasRequiredFromBrowser;
function requireFromBrowser() {
  if (hasRequiredFromBrowser)
    return fromBrowser;
  hasRequiredFromBrowser = 1;
  fromBrowser = function() {
    throw new Error("Readable.from is not available in the browser");
  };
  return fromBrowser;
}
var _stream_readable$1;
var hasRequired_stream_readable$1;
function require_stream_readable$1() {
  if (hasRequired_stream_readable$1)
    return _stream_readable$1;
  hasRequired_stream_readable$1 = 1;
  _stream_readable$1 = Readable;
  var Duplex;
  Readable.ReadableState = ReadableState;
  requireEvents().EventEmitter;
  var EElistenerCount = function EElistenerCount2(emitter, type2) {
    return emitter.listeners(type2).length;
  };
  var Stream = requireStreamBrowser$1();
  var Buffer = buffer$1.Buffer;
  var OurUint8Array = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var debugUtil = requireUtil$1();
  var debug;
  if (debugUtil && debugUtil.debuglog) {
    debug = debugUtil.debuglog("stream");
  } else {
    debug = function debug2() {
    };
  }
  var BufferList2 = requireBuffer_list();
  var destroyImpl = requireDestroy$1();
  var _require = requireState(), getHighWaterMark = _require.getHighWaterMark;
  var _require$codes = requireErrorsBrowser().codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
  var StringDecoder;
  var createReadableStreamAsyncIterator;
  var from;
  requireInherits_browser()(Readable, Stream);
  var errorOrDestroy = destroyImpl.errorOrDestroy;
  var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
  function prependListener(emitter, event, fn) {
    if (typeof emitter.prependListener === "function")
      return emitter.prependListener(event, fn);
    if (!emitter._events || !emitter._events[event])
      emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event]))
      emitter._events[event].unshift(fn);
    else
      emitter._events[event] = [fn, emitter._events[event]];
  }
  function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require_stream_duplex$1();
    options = options || {};
    if (typeof isDuplex !== "boolean")
      isDuplex = stream instanceof Duplex;
    this.objectMode = !!options.objectMode;
    if (isDuplex)
      this.objectMode = this.objectMode || !!options.readableObjectMode;
    this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
    this.buffer = new BufferList2();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    this.sync = true;
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    this.emitClose = options.emitClose !== false;
    this.autoDestroy = !!options.autoDestroy;
    this.destroyed = false;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.awaitDrain = 0;
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      if (!StringDecoder)
        StringDecoder = requireString_decoder().StringDecoder;
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable(options) {
    Duplex = Duplex || require_stream_duplex$1();
    if (!(this instanceof Readable))
      return new Readable(options);
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex);
    this.readable = true;
    if (options) {
      if (typeof options.read === "function")
        this._read = options.read;
      if (typeof options.destroy === "function")
        this._destroy = options.destroy;
    }
    Stream.call(this);
  }
  Object.defineProperty(Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      if (this._readableState === void 0) {
        return false;
      }
      return this._readableState.destroyed;
    },
    set: function set(value) {
      if (!this._readableState) {
        return;
      }
      this._readableState.destroyed = value;
    }
  });
  Readable.prototype.destroy = destroyImpl.destroy;
  Readable.prototype._undestroy = destroyImpl.undestroy;
  Readable.prototype._destroy = function(err, cb2) {
    cb2(err);
  };
  Readable.prototype.push = function(chunk, encoding) {
    var state2 = this._readableState;
    var skipChunkCheck;
    if (!state2.objectMode) {
      if (typeof chunk === "string") {
        encoding = encoding || state2.defaultEncoding;
        if (encoding !== state2.encoding) {
          chunk = Buffer.from(chunk, encoding);
          encoding = "";
        }
        skipChunkCheck = true;
      }
    } else {
      skipChunkCheck = true;
    }
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
  };
  Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
  };
  function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug("readableAddChunk", chunk);
    var state2 = stream._readableState;
    if (chunk === null) {
      state2.reading = false;
      onEofChunk(stream, state2);
    } else {
      var er;
      if (!skipChunkCheck)
        er = chunkInvalid(state2, chunk);
      if (er) {
        errorOrDestroy(stream, er);
      } else if (state2.objectMode || chunk && chunk.length > 0) {
        if (typeof chunk !== "string" && !state2.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (addToFront) {
          if (state2.endEmitted)
            errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
          else
            addChunk(stream, state2, chunk, true);
        } else if (state2.ended) {
          errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
        } else if (state2.destroyed) {
          return false;
        } else {
          state2.reading = false;
          if (state2.decoder && !encoding) {
            chunk = state2.decoder.write(chunk);
            if (state2.objectMode || chunk.length !== 0)
              addChunk(stream, state2, chunk, false);
            else
              maybeReadMore(stream, state2);
          } else {
            addChunk(stream, state2, chunk, false);
          }
        }
      } else if (!addToFront) {
        state2.reading = false;
        maybeReadMore(stream, state2);
      }
    }
    return !state2.ended && (state2.length < state2.highWaterMark || state2.length === 0);
  }
  function addChunk(stream, state2, chunk, addToFront) {
    if (state2.flowing && state2.length === 0 && !state2.sync) {
      state2.awaitDrain = 0;
      stream.emit("data", chunk);
    } else {
      state2.length += state2.objectMode ? 1 : chunk.length;
      if (addToFront)
        state2.buffer.unshift(chunk);
      else
        state2.buffer.push(chunk);
      if (state2.needReadable)
        emitReadable(stream);
    }
    maybeReadMore(stream, state2);
  }
  function chunkInvalid(state2, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state2.objectMode) {
      er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
    }
    return er;
  }
  Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
  };
  Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder)
      StringDecoder = requireString_decoder().StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder;
    this._readableState.encoding = this._readableState.decoder.encoding;
    var p2 = this._readableState.buffer.head;
    var content = "";
    while (p2 !== null) {
      content += decoder.write(p2.data);
      p2 = p2.next;
    }
    this._readableState.buffer.clear();
    if (content !== "")
      this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
  };
  var MAX_HWM = 1073741824;
  function computeNewHighWaterMark(n2) {
    if (n2 >= MAX_HWM) {
      n2 = MAX_HWM;
    } else {
      n2--;
      n2 |= n2 >>> 1;
      n2 |= n2 >>> 2;
      n2 |= n2 >>> 4;
      n2 |= n2 >>> 8;
      n2 |= n2 >>> 16;
      n2++;
    }
    return n2;
  }
  function howMuchToRead(n2, state2) {
    if (n2 <= 0 || state2.length === 0 && state2.ended)
      return 0;
    if (state2.objectMode)
      return 1;
    if (n2 !== n2) {
      if (state2.flowing && state2.length)
        return state2.buffer.head.data.length;
      else
        return state2.length;
    }
    if (n2 > state2.highWaterMark)
      state2.highWaterMark = computeNewHighWaterMark(n2);
    if (n2 <= state2.length)
      return n2;
    if (!state2.ended) {
      state2.needReadable = true;
      return 0;
    }
    return state2.length;
  }
  Readable.prototype.read = function(n2) {
    debug("read", n2);
    n2 = parseInt(n2, 10);
    var state2 = this._readableState;
    var nOrig = n2;
    if (n2 !== 0)
      state2.emittedReadable = false;
    if (n2 === 0 && state2.needReadable && ((state2.highWaterMark !== 0 ? state2.length >= state2.highWaterMark : state2.length > 0) || state2.ended)) {
      debug("read: emitReadable", state2.length, state2.ended);
      if (state2.length === 0 && state2.ended)
        endReadable(this);
      else
        emitReadable(this);
      return null;
    }
    n2 = howMuchToRead(n2, state2);
    if (n2 === 0 && state2.ended) {
      if (state2.length === 0)
        endReadable(this);
      return null;
    }
    var doRead = state2.needReadable;
    debug("need readable", doRead);
    if (state2.length === 0 || state2.length - n2 < state2.highWaterMark) {
      doRead = true;
      debug("length less than watermark", doRead);
    }
    if (state2.ended || state2.reading) {
      doRead = false;
      debug("reading or ended", doRead);
    } else if (doRead) {
      debug("do read");
      state2.reading = true;
      state2.sync = true;
      if (state2.length === 0)
        state2.needReadable = true;
      this._read(state2.highWaterMark);
      state2.sync = false;
      if (!state2.reading)
        n2 = howMuchToRead(nOrig, state2);
    }
    var ret;
    if (n2 > 0)
      ret = fromList(n2, state2);
    else
      ret = null;
    if (ret === null) {
      state2.needReadable = state2.length <= state2.highWaterMark;
      n2 = 0;
    } else {
      state2.length -= n2;
      state2.awaitDrain = 0;
    }
    if (state2.length === 0) {
      if (!state2.ended)
        state2.needReadable = true;
      if (nOrig !== n2 && state2.ended)
        endReadable(this);
    }
    if (ret !== null)
      this.emit("data", ret);
    return ret;
  };
  function onEofChunk(stream, state2) {
    debug("onEofChunk");
    if (state2.ended)
      return;
    if (state2.decoder) {
      var chunk = state2.decoder.end();
      if (chunk && chunk.length) {
        state2.buffer.push(chunk);
        state2.length += state2.objectMode ? 1 : chunk.length;
      }
    }
    state2.ended = true;
    if (state2.sync) {
      emitReadable(stream);
    } else {
      state2.needReadable = false;
      if (!state2.emittedReadable) {
        state2.emittedReadable = true;
        emitReadable_(stream);
      }
    }
  }
  function emitReadable(stream) {
    var state2 = stream._readableState;
    debug("emitReadable", state2.needReadable, state2.emittedReadable);
    state2.needReadable = false;
    if (!state2.emittedReadable) {
      debug("emitReadable", state2.flowing);
      state2.emittedReadable = true;
      process$1.nextTick(emitReadable_, stream);
    }
  }
  function emitReadable_(stream) {
    var state2 = stream._readableState;
    debug("emitReadable_", state2.destroyed, state2.length, state2.ended);
    if (!state2.destroyed && (state2.length || state2.ended)) {
      stream.emit("readable");
      state2.emittedReadable = false;
    }
    state2.needReadable = !state2.flowing && !state2.ended && state2.length <= state2.highWaterMark;
    flow2(stream);
  }
  function maybeReadMore(stream, state2) {
    if (!state2.readingMore) {
      state2.readingMore = true;
      process$1.nextTick(maybeReadMore_, stream, state2);
    }
  }
  function maybeReadMore_(stream, state2) {
    while (!state2.reading && !state2.ended && (state2.length < state2.highWaterMark || state2.flowing && state2.length === 0)) {
      var len2 = state2.length;
      debug("maybeReadMore read 0");
      stream.read(0);
      if (len2 === state2.length)
        break;
    }
    state2.readingMore = false;
  }
  Readable.prototype._read = function(n2) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
  };
  Readable.prototype.pipe = function(dest, pipeOpts) {
    var src2 = this;
    var state2 = this._readableState;
    switch (state2.pipesCount) {
      case 0:
        state2.pipes = dest;
        break;
      case 1:
        state2.pipes = [state2.pipes, dest];
        break;
      default:
        state2.pipes.push(dest);
        break;
    }
    state2.pipesCount += 1;
    debug("pipe count=%d opts=%j", state2.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process$1.stdout && dest !== process$1.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state2.endEmitted)
      process$1.nextTick(endFn);
    else
      src2.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
      debug("onunpipe");
      if (readable === src2) {
        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
          unpipeInfo.hasUnpiped = true;
          cleanup();
        }
      }
    }
    function onend() {
      debug("onend");
      dest.end();
    }
    var ondrain = pipeOnDrain(src2);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
      debug("cleanup");
      dest.removeListener("close", onclose);
      dest.removeListener("finish", onfinish);
      dest.removeListener("drain", ondrain);
      dest.removeListener("error", onerror);
      dest.removeListener("unpipe", onunpipe);
      src2.removeListener("end", onend);
      src2.removeListener("end", unpipe);
      src2.removeListener("data", ondata);
      cleanedUp = true;
      if (state2.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
        ondrain();
    }
    src2.on("data", ondata);
    function ondata(chunk) {
      debug("ondata");
      var ret = dest.write(chunk);
      debug("dest.write", ret);
      if (ret === false) {
        if ((state2.pipesCount === 1 && state2.pipes === dest || state2.pipesCount > 1 && indexOf2(state2.pipes, dest) !== -1) && !cleanedUp) {
          debug("false write response, pause", state2.awaitDrain);
          state2.awaitDrain++;
        }
        src2.pause();
      }
    }
    function onerror(er) {
      debug("onerror", er);
      unpipe();
      dest.removeListener("error", onerror);
      if (EElistenerCount(dest, "error") === 0)
        errorOrDestroy(dest, er);
    }
    prependListener(dest, "error", onerror);
    function onclose() {
      dest.removeListener("finish", onfinish);
      unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
      debug("onfinish");
      dest.removeListener("close", onclose);
      unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
      debug("unpipe");
      src2.unpipe(dest);
    }
    dest.emit("pipe", src2);
    if (!state2.flowing) {
      debug("pipe resume");
      src2.resume();
    }
    return dest;
  };
  function pipeOnDrain(src2) {
    return function pipeOnDrainFunctionResult() {
      var state2 = src2._readableState;
      debug("pipeOnDrain", state2.awaitDrain);
      if (state2.awaitDrain)
        state2.awaitDrain--;
      if (state2.awaitDrain === 0 && EElistenerCount(src2, "data")) {
        state2.flowing = true;
        flow2(src2);
      }
    };
  }
  Readable.prototype.unpipe = function(dest) {
    var state2 = this._readableState;
    var unpipeInfo = {
      hasUnpiped: false
    };
    if (state2.pipesCount === 0)
      return this;
    if (state2.pipesCount === 1) {
      if (dest && dest !== state2.pipes)
        return this;
      if (!dest)
        dest = state2.pipes;
      state2.pipes = null;
      state2.pipesCount = 0;
      state2.flowing = false;
      if (dest)
        dest.emit("unpipe", this, unpipeInfo);
      return this;
    }
    if (!dest) {
      var dests = state2.pipes;
      var len2 = state2.pipesCount;
      state2.pipes = null;
      state2.pipesCount = 0;
      state2.flowing = false;
      for (var i2 = 0; i2 < len2; i2++)
        dests[i2].emit("unpipe", this, {
          hasUnpiped: false
        });
      return this;
    }
    var index2 = indexOf2(state2.pipes, dest);
    if (index2 === -1)
      return this;
    state2.pipes.splice(index2, 1);
    state2.pipesCount -= 1;
    if (state2.pipesCount === 1)
      state2.pipes = state2.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
  };
  Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state2 = this._readableState;
    if (ev === "data") {
      state2.readableListening = this.listenerCount("readable") > 0;
      if (state2.flowing !== false)
        this.resume();
    } else if (ev === "readable") {
      if (!state2.endEmitted && !state2.readableListening) {
        state2.readableListening = state2.needReadable = true;
        state2.flowing = false;
        state2.emittedReadable = false;
        debug("on readable", state2.length, state2.reading);
        if (state2.length) {
          emitReadable(this);
        } else if (!state2.reading) {
          process$1.nextTick(nReadingNextTick, this);
        }
      }
    }
    return res;
  };
  Readable.prototype.addListener = Readable.prototype.on;
  Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") {
      process$1.nextTick(updateReadableListening, this);
    }
    return res;
  };
  Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === void 0) {
      process$1.nextTick(updateReadableListening, this);
    }
    return res;
  };
  function updateReadableListening(self2) {
    var state2 = self2._readableState;
    state2.readableListening = self2.listenerCount("readable") > 0;
    if (state2.resumeScheduled && !state2.paused) {
      state2.flowing = true;
    } else if (self2.listenerCount("data") > 0) {
      self2.resume();
    }
  }
  function nReadingNextTick(self2) {
    debug("readable nexttick read 0");
    self2.read(0);
  }
  Readable.prototype.resume = function() {
    var state2 = this._readableState;
    if (!state2.flowing) {
      debug("resume");
      state2.flowing = !state2.readableListening;
      resume(this, state2);
    }
    state2.paused = false;
    return this;
  };
  function resume(stream, state2) {
    if (!state2.resumeScheduled) {
      state2.resumeScheduled = true;
      process$1.nextTick(resume_, stream, state2);
    }
  }
  function resume_(stream, state2) {
    debug("resume", state2.reading);
    if (!state2.reading) {
      stream.read(0);
    }
    state2.resumeScheduled = false;
    stream.emit("resume");
    flow2(stream);
    if (state2.flowing && !state2.reading)
      stream.read(0);
  }
  Readable.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
      debug("pause");
      this._readableState.flowing = false;
      this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
  };
  function flow2(stream) {
    var state2 = stream._readableState;
    debug("flow", state2.flowing);
    while (state2.flowing && stream.read() !== null)
      ;
  }
  Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state2 = this._readableState;
    var paused = false;
    stream.on("end", function() {
      debug("wrapped end");
      if (state2.decoder && !state2.ended) {
        var chunk = state2.decoder.end();
        if (chunk && chunk.length)
          _this.push(chunk);
      }
      _this.push(null);
    });
    stream.on("data", function(chunk) {
      debug("wrapped data");
      if (state2.decoder)
        chunk = state2.decoder.write(chunk);
      if (state2.objectMode && (chunk === null || chunk === void 0))
        return;
      else if (!state2.objectMode && (!chunk || !chunk.length))
        return;
      var ret = _this.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });
    for (var i2 in stream) {
      if (this[i2] === void 0 && typeof stream[i2] === "function") {
        this[i2] = function methodWrap(method) {
          return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
          };
        }(i2);
      }
    }
    for (var n2 = 0; n2 < kProxyEvents.length; n2++) {
      stream.on(kProxyEvents[n2], this.emit.bind(this, kProxyEvents[n2]));
    }
    this._read = function(n3) {
      debug("wrapped _read", n3);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };
    return this;
  };
  if (typeof Symbol === "function") {
    Readable.prototype[Symbol.asyncIterator] = function() {
      if (createReadableStreamAsyncIterator === void 0) {
        createReadableStreamAsyncIterator = requireAsync_iterator();
      }
      return createReadableStreamAsyncIterator(this);
    };
  }
  Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._readableState.highWaterMark;
    }
  });
  Object.defineProperty(Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._readableState && this._readableState.buffer;
    }
  });
  Object.defineProperty(Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._readableState.flowing;
    },
    set: function set(state2) {
      if (this._readableState) {
        this._readableState.flowing = state2;
      }
    }
  });
  Readable._fromList = fromList;
  Object.defineProperty(Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._readableState.length;
    }
  });
  function fromList(n2, state2) {
    if (state2.length === 0)
      return null;
    var ret;
    if (state2.objectMode)
      ret = state2.buffer.shift();
    else if (!n2 || n2 >= state2.length) {
      if (state2.decoder)
        ret = state2.buffer.join("");
      else if (state2.buffer.length === 1)
        ret = state2.buffer.first();
      else
        ret = state2.buffer.concat(state2.length);
      state2.buffer.clear();
    } else {
      ret = state2.buffer.consume(n2, state2.decoder);
    }
    return ret;
  }
  function endReadable(stream) {
    var state2 = stream._readableState;
    debug("endReadable", state2.endEmitted);
    if (!state2.endEmitted) {
      state2.ended = true;
      process$1.nextTick(endReadableNT, state2, stream);
    }
  }
  function endReadableNT(state2, stream) {
    debug("endReadableNT", state2.endEmitted, state2.length);
    if (!state2.endEmitted && state2.length === 0) {
      state2.endEmitted = true;
      stream.readable = false;
      stream.emit("end");
      if (state2.autoDestroy) {
        var wState = stream._writableState;
        if (!wState || wState.autoDestroy && wState.finished) {
          stream.destroy();
        }
      }
    }
  }
  if (typeof Symbol === "function") {
    Readable.from = function(iterable, opts) {
      if (from === void 0) {
        from = requireFromBrowser();
      }
      return from(Readable, iterable, opts);
    };
  }
  function indexOf2(xs, x2) {
    for (var i2 = 0, l2 = xs.length; i2 < l2; i2++) {
      if (xs[i2] === x2)
        return i2;
    }
    return -1;
  }
  return _stream_readable$1;
}
var _stream_transform$1;
var hasRequired_stream_transform$1;
function require_stream_transform$1() {
  if (hasRequired_stream_transform$1)
    return _stream_transform$1;
  hasRequired_stream_transform$1 = 1;
  _stream_transform$1 = Transform;
  var _require$codes = requireErrorsBrowser().codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
  var Duplex = require_stream_duplex$1();
  requireInherits_browser()(Transform, Duplex);
  function afterTransform(er, data2) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb2 = ts.writecb;
    if (cb2 === null) {
      return this.emit("error", new ERR_MULTIPLE_CALLBACK());
    }
    ts.writechunk = null;
    ts.writecb = null;
    if (data2 != null)
      this.push(data2);
    cb2(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      this._read(rs.highWaterMark);
    }
  }
  function Transform(options) {
    if (!(this instanceof Transform))
      return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
      afterTransform: afterTransform.bind(this),
      needTransform: false,
      transforming: false,
      writecb: null,
      writechunk: null,
      writeencoding: null
    };
    this._readableState.needReadable = true;
    this._readableState.sync = false;
    if (options) {
      if (typeof options.transform === "function")
        this._transform = options.transform;
      if (typeof options.flush === "function")
        this._flush = options.flush;
    }
    this.on("prefinish", prefinish);
  }
  function prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) {
      this._flush(function(er, data2) {
        done(_this, er, data2);
      });
    } else {
      done(this, null, null);
    }
  }
  Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  };
  Transform.prototype._transform = function(chunk, encoding, cb2) {
    cb2(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
  };
  Transform.prototype._write = function(chunk, encoding, cb2) {
    var ts = this._transformState;
    ts.writecb = cb2;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
        this._read(rs.highWaterMark);
    }
  };
  Transform.prototype._read = function(n2) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      ts.needTransform = true;
    }
  };
  Transform.prototype._destroy = function(err, cb2) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
      cb2(err2);
    });
  };
  function done(stream, er, data2) {
    if (er)
      return stream.emit("error", er);
    if (data2 != null)
      stream.push(data2);
    if (stream._writableState.length)
      throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming)
      throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
  }
  return _stream_transform$1;
}
var _stream_passthrough$1;
var hasRequired_stream_passthrough$1;
function require_stream_passthrough$1() {
  if (hasRequired_stream_passthrough$1)
    return _stream_passthrough$1;
  hasRequired_stream_passthrough$1 = 1;
  _stream_passthrough$1 = PassThrough;
  var Transform = require_stream_transform$1();
  requireInherits_browser()(PassThrough, Transform);
  function PassThrough(options) {
    if (!(this instanceof PassThrough))
      return new PassThrough(options);
    Transform.call(this, options);
  }
  PassThrough.prototype._transform = function(chunk, encoding, cb2) {
    cb2(null, chunk);
  };
  return _stream_passthrough$1;
}
var pipeline_1;
var hasRequiredPipeline;
function requirePipeline() {
  if (hasRequiredPipeline)
    return pipeline_1;
  hasRequiredPipeline = 1;
  var eos;
  function once(callback) {
    var called = false;
    return function() {
      if (called)
        return;
      called = true;
      callback.apply(void 0, arguments);
    };
  }
  var _require$codes = requireErrorsBrowser().codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
  function noop2(err) {
    if (err)
      throw err;
  }
  function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
  }
  function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on("close", function() {
      closed = true;
    });
    if (eos === void 0)
      eos = requireEndOfStream();
    eos(stream, {
      readable: reading,
      writable: writing
    }, function(err) {
      if (err)
        return callback(err);
      closed = true;
      callback();
    });
    var destroyed = false;
    return function(err) {
      if (closed)
        return;
      if (destroyed)
        return;
      destroyed = true;
      if (isRequest(stream))
        return stream.abort();
      if (typeof stream.destroy === "function")
        return stream.destroy();
      callback(err || new ERR_STREAM_DESTROYED("pipe"));
    };
  }
  function call(fn) {
    fn();
  }
  function pipe2(from, to) {
    return from.pipe(to);
  }
  function popCallback(streams) {
    if (!streams.length)
      return noop2;
    if (typeof streams[streams.length - 1] !== "function")
      return noop2;
    return streams.pop();
  }
  function pipeline() {
    for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
      streams[_key] = arguments[_key];
    }
    var callback = popCallback(streams);
    if (Array.isArray(streams[0]))
      streams = streams[0];
    if (streams.length < 2) {
      throw new ERR_MISSING_ARGS("streams");
    }
    var error;
    var destroys = streams.map(function(stream, i2) {
      var reading = i2 < streams.length - 1;
      var writing = i2 > 0;
      return destroyer(stream, reading, writing, function(err) {
        if (!error)
          error = err;
        if (err)
          destroys.forEach(call);
        if (reading)
          return;
        destroys.forEach(call);
        callback(error);
      });
    });
    return streams.reduce(pipe2);
  }
  pipeline_1 = pipeline;
  return pipeline_1;
}
var hasRequiredReadableBrowser$1;
function requireReadableBrowser$1() {
  if (hasRequiredReadableBrowser$1)
    return readableBrowser$1.exports;
  hasRequiredReadableBrowser$1 = 1;
  (function(module, exports2) {
    exports2 = module.exports = require_stream_readable$1();
    exports2.Stream = exports2;
    exports2.Readable = exports2;
    exports2.Writable = require_stream_writable$1();
    exports2.Duplex = require_stream_duplex$1();
    exports2.Transform = require_stream_transform$1();
    exports2.PassThrough = require_stream_passthrough$1();
    exports2.finished = requireEndOfStream();
    exports2.pipeline = requirePipeline();
  })(readableBrowser$1, readableBrowser$1.exports);
  return readableBrowser$1.exports;
}
var hashBase$1;
var hasRequiredHashBase$1;
function requireHashBase$1() {
  if (hasRequiredHashBase$1)
    return hashBase$1;
  hasRequiredHashBase$1 = 1;
  var Buffer = requireSafeBuffer$1().Buffer;
  var Transform = requireReadableBrowser$1().Transform;
  var inherits = requireInherits_browser();
  function throwIfNotStringOrBuffer(val, prefix) {
    if (!Buffer.isBuffer(val) && typeof val !== "string") {
      throw new TypeError(prefix + " must be a string or a buffer");
    }
  }
  function HashBase(blockSize) {
    Transform.call(this);
    this._block = Buffer.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [0, 0, 0, 0];
    this._finalized = false;
  }
  inherits(HashBase, Transform);
  HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
      this.update(chunk, encoding);
    } catch (err) {
      error = err;
    }
    callback(error);
  };
  HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
      this.push(this.digest());
    } catch (err) {
      error = err;
    }
    callback(error);
  };
  HashBase.prototype.update = function(data2, encoding) {
    throwIfNotStringOrBuffer(data2, "Data");
    if (this._finalized)
      throw new Error("Digest already called");
    if (!Buffer.isBuffer(data2))
      data2 = Buffer.from(data2, encoding);
    var block = this._block;
    var offset = 0;
    while (this._blockOffset + data2.length - offset >= this._blockSize) {
      for (var i2 = this._blockOffset; i2 < this._blockSize; )
        block[i2++] = data2[offset++];
      this._update();
      this._blockOffset = 0;
    }
    while (offset < data2.length)
      block[this._blockOffset++] = data2[offset++];
    for (var j2 = 0, carry = data2.length * 8; carry > 0; ++j2) {
      this._length[j2] += carry;
      carry = this._length[j2] / 4294967296 | 0;
      if (carry > 0)
        this._length[j2] -= 4294967296 * carry;
    }
    return this;
  };
  HashBase.prototype._update = function() {
    throw new Error("_update is not implemented");
  };
  HashBase.prototype.digest = function(encoding) {
    if (this._finalized)
      throw new Error("Digest already called");
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== void 0)
      digest = digest.toString(encoding);
    this._block.fill(0);
    this._blockOffset = 0;
    for (var i2 = 0; i2 < 4; ++i2)
      this._length[i2] = 0;
    return digest;
  };
  HashBase.prototype._digest = function() {
    throw new Error("_digest is not implemented");
  };
  hashBase$1 = HashBase;
  return hashBase$1;
}
var md5_js;
var hasRequiredMd5_js;
function requireMd5_js() {
  if (hasRequiredMd5_js)
    return md5_js;
  hasRequiredMd5_js = 1;
  var inherits = requireInherits_browser();
  var HashBase = requireHashBase$1();
  var Buffer = requireSafeBuffer$1().Buffer;
  var ARRAY16 = new Array(16);
  function MD5() {
    HashBase.call(this, 64);
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
  }
  inherits(MD5, HashBase);
  MD5.prototype._update = function() {
    var M2 = ARRAY16;
    for (var i2 = 0; i2 < 16; ++i2)
      M2[i2] = this._block.readInt32LE(i2 * 4);
    var a2 = this._a;
    var b2 = this._b;
    var c2 = this._c;
    var d2 = this._d;
    a2 = fnF(a2, b2, c2, d2, M2[0], 3614090360, 7);
    d2 = fnF(d2, a2, b2, c2, M2[1], 3905402710, 12);
    c2 = fnF(c2, d2, a2, b2, M2[2], 606105819, 17);
    b2 = fnF(b2, c2, d2, a2, M2[3], 3250441966, 22);
    a2 = fnF(a2, b2, c2, d2, M2[4], 4118548399, 7);
    d2 = fnF(d2, a2, b2, c2, M2[5], 1200080426, 12);
    c2 = fnF(c2, d2, a2, b2, M2[6], 2821735955, 17);
    b2 = fnF(b2, c2, d2, a2, M2[7], 4249261313, 22);
    a2 = fnF(a2, b2, c2, d2, M2[8], 1770035416, 7);
    d2 = fnF(d2, a2, b2, c2, M2[9], 2336552879, 12);
    c2 = fnF(c2, d2, a2, b2, M2[10], 4294925233, 17);
    b2 = fnF(b2, c2, d2, a2, M2[11], 2304563134, 22);
    a2 = fnF(a2, b2, c2, d2, M2[12], 1804603682, 7);
    d2 = fnF(d2, a2, b2, c2, M2[13], 4254626195, 12);
    c2 = fnF(c2, d2, a2, b2, M2[14], 2792965006, 17);
    b2 = fnF(b2, c2, d2, a2, M2[15], 1236535329, 22);
    a2 = fnG(a2, b2, c2, d2, M2[1], 4129170786, 5);
    d2 = fnG(d2, a2, b2, c2, M2[6], 3225465664, 9);
    c2 = fnG(c2, d2, a2, b2, M2[11], 643717713, 14);
    b2 = fnG(b2, c2, d2, a2, M2[0], 3921069994, 20);
    a2 = fnG(a2, b2, c2, d2, M2[5], 3593408605, 5);
    d2 = fnG(d2, a2, b2, c2, M2[10], 38016083, 9);
    c2 = fnG(c2, d2, a2, b2, M2[15], 3634488961, 14);
    b2 = fnG(b2, c2, d2, a2, M2[4], 3889429448, 20);
    a2 = fnG(a2, b2, c2, d2, M2[9], 568446438, 5);
    d2 = fnG(d2, a2, b2, c2, M2[14], 3275163606, 9);
    c2 = fnG(c2, d2, a2, b2, M2[3], 4107603335, 14);
    b2 = fnG(b2, c2, d2, a2, M2[8], 1163531501, 20);
    a2 = fnG(a2, b2, c2, d2, M2[13], 2850285829, 5);
    d2 = fnG(d2, a2, b2, c2, M2[2], 4243563512, 9);
    c2 = fnG(c2, d2, a2, b2, M2[7], 1735328473, 14);
    b2 = fnG(b2, c2, d2, a2, M2[12], 2368359562, 20);
    a2 = fnH(a2, b2, c2, d2, M2[5], 4294588738, 4);
    d2 = fnH(d2, a2, b2, c2, M2[8], 2272392833, 11);
    c2 = fnH(c2, d2, a2, b2, M2[11], 1839030562, 16);
    b2 = fnH(b2, c2, d2, a2, M2[14], 4259657740, 23);
    a2 = fnH(a2, b2, c2, d2, M2[1], 2763975236, 4);
    d2 = fnH(d2, a2, b2, c2, M2[4], 1272893353, 11);
    c2 = fnH(c2, d2, a2, b2, M2[7], 4139469664, 16);
    b2 = fnH(b2, c2, d2, a2, M2[10], 3200236656, 23);
    a2 = fnH(a2, b2, c2, d2, M2[13], 681279174, 4);
    d2 = fnH(d2, a2, b2, c2, M2[0], 3936430074, 11);
    c2 = fnH(c2, d2, a2, b2, M2[3], 3572445317, 16);
    b2 = fnH(b2, c2, d2, a2, M2[6], 76029189, 23);
    a2 = fnH(a2, b2, c2, d2, M2[9], 3654602809, 4);
    d2 = fnH(d2, a2, b2, c2, M2[12], 3873151461, 11);
    c2 = fnH(c2, d2, a2, b2, M2[15], 530742520, 16);
    b2 = fnH(b2, c2, d2, a2, M2[2], 3299628645, 23);
    a2 = fnI(a2, b2, c2, d2, M2[0], 4096336452, 6);
    d2 = fnI(d2, a2, b2, c2, M2[7], 1126891415, 10);
    c2 = fnI(c2, d2, a2, b2, M2[14], 2878612391, 15);
    b2 = fnI(b2, c2, d2, a2, M2[5], 4237533241, 21);
    a2 = fnI(a2, b2, c2, d2, M2[12], 1700485571, 6);
    d2 = fnI(d2, a2, b2, c2, M2[3], 2399980690, 10);
    c2 = fnI(c2, d2, a2, b2, M2[10], 4293915773, 15);
    b2 = fnI(b2, c2, d2, a2, M2[1], 2240044497, 21);
    a2 = fnI(a2, b2, c2, d2, M2[8], 1873313359, 6);
    d2 = fnI(d2, a2, b2, c2, M2[15], 4264355552, 10);
    c2 = fnI(c2, d2, a2, b2, M2[6], 2734768916, 15);
    b2 = fnI(b2, c2, d2, a2, M2[13], 1309151649, 21);
    a2 = fnI(a2, b2, c2, d2, M2[4], 4149444226, 6);
    d2 = fnI(d2, a2, b2, c2, M2[11], 3174756917, 10);
    c2 = fnI(c2, d2, a2, b2, M2[2], 718787259, 15);
    b2 = fnI(b2, c2, d2, a2, M2[9], 3951481745, 21);
    this._a = this._a + a2 | 0;
    this._b = this._b + b2 | 0;
    this._c = this._c + c2 | 0;
    this._d = this._d + d2 | 0;
  };
  MD5.prototype._digest = function() {
    this._block[this._blockOffset++] = 128;
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);
      this._update();
      this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    var buffer2 = Buffer.allocUnsafe(16);
    buffer2.writeInt32LE(this._a, 0);
    buffer2.writeInt32LE(this._b, 4);
    buffer2.writeInt32LE(this._c, 8);
    buffer2.writeInt32LE(this._d, 12);
    return buffer2;
  };
  function rotl(x2, n2) {
    return x2 << n2 | x2 >>> 32 - n2;
  }
  function fnF(a2, b2, c2, d2, m2, k2, s2) {
    return rotl(a2 + (b2 & c2 | ~b2 & d2) + m2 + k2 | 0, s2) + b2 | 0;
  }
  function fnG(a2, b2, c2, d2, m2, k2, s2) {
    return rotl(a2 + (b2 & d2 | c2 & ~d2) + m2 + k2 | 0, s2) + b2 | 0;
  }
  function fnH(a2, b2, c2, d2, m2, k2, s2) {
    return rotl(a2 + (b2 ^ c2 ^ d2) + m2 + k2 | 0, s2) + b2 | 0;
  }
  function fnI(a2, b2, c2, d2, m2, k2, s2) {
    return rotl(a2 + (c2 ^ (b2 | ~d2)) + m2 + k2 | 0, s2) + b2 | 0;
  }
  md5_js = MD5;
  return md5_js;
}
var hashBase;
var hasRequiredHashBase;
function requireHashBase() {
  if (hasRequiredHashBase)
    return hashBase;
  hasRequiredHashBase = 1;
  var Buffer = requireSafeBuffer$1().Buffer;
  var Transform = requireReadableBrowser$1().Transform;
  var inherits = requireInherits_browser();
  function throwIfNotStringOrBuffer(val, prefix) {
    if (!Buffer.isBuffer(val) && typeof val !== "string") {
      throw new TypeError(prefix + " must be a string or a buffer");
    }
  }
  function HashBase(blockSize) {
    Transform.call(this);
    this._block = Buffer.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [0, 0, 0, 0];
    this._finalized = false;
  }
  inherits(HashBase, Transform);
  HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
      this.update(chunk, encoding);
    } catch (err) {
      error = err;
    }
    callback(error);
  };
  HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
      this.push(this.digest());
    } catch (err) {
      error = err;
    }
    callback(error);
  };
  HashBase.prototype.update = function(data2, encoding) {
    throwIfNotStringOrBuffer(data2, "Data");
    if (this._finalized)
      throw new Error("Digest already called");
    if (!Buffer.isBuffer(data2))
      data2 = Buffer.from(data2, encoding);
    var block = this._block;
    var offset = 0;
    while (this._blockOffset + data2.length - offset >= this._blockSize) {
      for (var i2 = this._blockOffset; i2 < this._blockSize; )
        block[i2++] = data2[offset++];
      this._update();
      this._blockOffset = 0;
    }
    while (offset < data2.length)
      block[this._blockOffset++] = data2[offset++];
    for (var j2 = 0, carry = data2.length * 8; carry > 0; ++j2) {
      this._length[j2] += carry;
      carry = this._length[j2] / 4294967296 | 0;
      if (carry > 0)
        this._length[j2] -= 4294967296 * carry;
    }
    return this;
  };
  HashBase.prototype._update = function() {
    throw new Error("_update is not implemented");
  };
  HashBase.prototype.digest = function(encoding) {
    if (this._finalized)
      throw new Error("Digest already called");
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== void 0)
      digest = digest.toString(encoding);
    this._block.fill(0);
    this._blockOffset = 0;
    for (var i2 = 0; i2 < 4; ++i2)
      this._length[i2] = 0;
    return digest;
  };
  HashBase.prototype._digest = function() {
    throw new Error("_digest is not implemented");
  };
  hashBase = HashBase;
  return hashBase;
}
var ripemd160;
var hasRequiredRipemd160;
function requireRipemd160() {
  if (hasRequiredRipemd160)
    return ripemd160;
  hasRequiredRipemd160 = 1;
  var Buffer = buffer$1.Buffer;
  var inherits = requireInherits_browser();
  var HashBase = requireHashBase();
  var ARRAY16 = new Array(16);
  var zl = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
  ];
  var zr = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
  ];
  var sl2 = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
  ];
  var sr = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
  ];
  var hl2 = [0, 1518500249, 1859775393, 2400959708, 2840853838];
  var hr = [1352829926, 1548603684, 1836072691, 2053994217, 0];
  function RIPEMD160() {
    HashBase.call(this, 64);
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
  }
  inherits(RIPEMD160, HashBase);
  RIPEMD160.prototype._update = function() {
    var words = ARRAY16;
    for (var j2 = 0; j2 < 16; ++j2)
      words[j2] = this._block.readInt32LE(j2 * 4);
    var al2 = this._a | 0;
    var bl2 = this._b | 0;
    var cl2 = this._c | 0;
    var dl2 = this._d | 0;
    var el2 = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    for (var i2 = 0; i2 < 80; i2 += 1) {
      var tl2;
      var tr;
      if (i2 < 16) {
        tl2 = fn1(al2, bl2, cl2, dl2, el2, words[zl[i2]], hl2[0], sl2[i2]);
        tr = fn5(ar, br, cr, dr, er, words[zr[i2]], hr[0], sr[i2]);
      } else if (i2 < 32) {
        tl2 = fn2(al2, bl2, cl2, dl2, el2, words[zl[i2]], hl2[1], sl2[i2]);
        tr = fn4(ar, br, cr, dr, er, words[zr[i2]], hr[1], sr[i2]);
      } else if (i2 < 48) {
        tl2 = fn3(al2, bl2, cl2, dl2, el2, words[zl[i2]], hl2[2], sl2[i2]);
        tr = fn3(ar, br, cr, dr, er, words[zr[i2]], hr[2], sr[i2]);
      } else if (i2 < 64) {
        tl2 = fn4(al2, bl2, cl2, dl2, el2, words[zl[i2]], hl2[3], sl2[i2]);
        tr = fn2(ar, br, cr, dr, er, words[zr[i2]], hr[3], sr[i2]);
      } else {
        tl2 = fn5(al2, bl2, cl2, dl2, el2, words[zl[i2]], hl2[4], sl2[i2]);
        tr = fn1(ar, br, cr, dr, er, words[zr[i2]], hr[4], sr[i2]);
      }
      al2 = el2;
      el2 = dl2;
      dl2 = rotl(cl2, 10);
      cl2 = bl2;
      bl2 = tl2;
      ar = er;
      er = dr;
      dr = rotl(cr, 10);
      cr = br;
      br = tr;
    }
    var t2 = this._b + cl2 + dr | 0;
    this._b = this._c + dl2 + er | 0;
    this._c = this._d + el2 + ar | 0;
    this._d = this._e + al2 + br | 0;
    this._e = this._a + bl2 + cr | 0;
    this._a = t2;
  };
  RIPEMD160.prototype._digest = function() {
    this._block[this._blockOffset++] = 128;
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);
      this._update();
      this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    var buffer2 = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20);
    buffer2.writeInt32LE(this._a, 0);
    buffer2.writeInt32LE(this._b, 4);
    buffer2.writeInt32LE(this._c, 8);
    buffer2.writeInt32LE(this._d, 12);
    buffer2.writeInt32LE(this._e, 16);
    return buffer2;
  };
  function rotl(x2, n2) {
    return x2 << n2 | x2 >>> 32 - n2;
  }
  function fn1(a2, b2, c2, d2, e2, m2, k2, s2) {
    return rotl(a2 + (b2 ^ c2 ^ d2) + m2 + k2 | 0, s2) + e2 | 0;
  }
  function fn2(a2, b2, c2, d2, e2, m2, k2, s2) {
    return rotl(a2 + (b2 & c2 | ~b2 & d2) + m2 + k2 | 0, s2) + e2 | 0;
  }
  function fn3(a2, b2, c2, d2, e2, m2, k2, s2) {
    return rotl(a2 + ((b2 | ~c2) ^ d2) + m2 + k2 | 0, s2) + e2 | 0;
  }
  function fn4(a2, b2, c2, d2, e2, m2, k2, s2) {
    return rotl(a2 + (b2 & d2 | c2 & ~d2) + m2 + k2 | 0, s2) + e2 | 0;
  }
  function fn5(a2, b2, c2, d2, e2, m2, k2, s2) {
    return rotl(a2 + (b2 ^ (c2 | ~d2)) + m2 + k2 | 0, s2) + e2 | 0;
  }
  ripemd160 = RIPEMD160;
  return ripemd160;
}
var sha_js = { exports: {} };
var hash$1;
var hasRequiredHash$1;
function requireHash$1() {
  if (hasRequiredHash$1)
    return hash$1;
  hasRequiredHash$1 = 1;
  var Buffer = requireSafeBuffer$1().Buffer;
  function Hash(blockSize, finalSize) {
    this._block = Buffer.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
  }
  Hash.prototype.update = function(data2, enc) {
    if (typeof data2 === "string") {
      enc = enc || "utf8";
      data2 = Buffer.from(data2, enc);
    }
    var block = this._block;
    var blockSize = this._blockSize;
    var length = data2.length;
    var accum = this._len;
    for (var offset = 0; offset < length; ) {
      var assigned = accum % blockSize;
      var remainder = Math.min(length - offset, blockSize - assigned);
      for (var i2 = 0; i2 < remainder; i2++) {
        block[assigned + i2] = data2[offset + i2];
      }
      accum += remainder;
      offset += remainder;
      if (accum % blockSize === 0) {
        this._update(block);
      }
    }
    this._len += length;
    return this;
  };
  Hash.prototype.digest = function(enc) {
    var rem = this._len % this._blockSize;
    this._block[rem] = 128;
    this._block.fill(0, rem + 1);
    if (rem >= this._finalSize) {
      this._update(this._block);
      this._block.fill(0);
    }
    var bits = this._len * 8;
    if (bits <= 4294967295) {
      this._block.writeUInt32BE(bits, this._blockSize - 4);
    } else {
      var lowBits = (bits & 4294967295) >>> 0;
      var highBits = (bits - lowBits) / 4294967296;
      this._block.writeUInt32BE(highBits, this._blockSize - 8);
      this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }
    this._update(this._block);
    var hash2 = this._hash();
    return enc ? hash2.toString(enc) : hash2;
  };
  Hash.prototype._update = function() {
    throw new Error("_update must be implemented by subclass");
  };
  hash$1 = Hash;
  return hash$1;
}
var sha$2;
var hasRequiredSha$1;
function requireSha$1() {
  if (hasRequiredSha$1)
    return sha$2;
  hasRequiredSha$1 = 1;
  var inherits = requireInherits_browser();
  var Hash = requireHash$1();
  var Buffer = requireSafeBuffer$1().Buffer;
  var K2 = [
    1518500249,
    1859775393,
    2400959708 | 0,
    3395469782 | 0
  ];
  var W2 = new Array(80);
  function Sha() {
    this.init();
    this._w = W2;
    Hash.call(this, 64, 56);
  }
  inherits(Sha, Hash);
  Sha.prototype.init = function() {
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
    return this;
  };
  function rotl5(num) {
    return num << 5 | num >>> 27;
  }
  function rotl30(num) {
    return num << 30 | num >>> 2;
  }
  function ft(s2, b2, c2, d2) {
    if (s2 === 0)
      return b2 & c2 | ~b2 & d2;
    if (s2 === 2)
      return b2 & c2 | b2 & d2 | c2 & d2;
    return b2 ^ c2 ^ d2;
  }
  Sha.prototype._update = function(M2) {
    var W3 = this._w;
    var a2 = this._a | 0;
    var b2 = this._b | 0;
    var c2 = this._c | 0;
    var d2 = this._d | 0;
    var e2 = this._e | 0;
    for (var i2 = 0; i2 < 16; ++i2)
      W3[i2] = M2.readInt32BE(i2 * 4);
    for (; i2 < 80; ++i2)
      W3[i2] = W3[i2 - 3] ^ W3[i2 - 8] ^ W3[i2 - 14] ^ W3[i2 - 16];
    for (var j2 = 0; j2 < 80; ++j2) {
      var s2 = ~~(j2 / 20);
      var t2 = rotl5(a2) + ft(s2, b2, c2, d2) + e2 + W3[j2] + K2[s2] | 0;
      e2 = d2;
      d2 = c2;
      c2 = rotl30(b2);
      b2 = a2;
      a2 = t2;
    }
    this._a = a2 + this._a | 0;
    this._b = b2 + this._b | 0;
    this._c = c2 + this._c | 0;
    this._d = d2 + this._d | 0;
    this._e = e2 + this._e | 0;
  };
  Sha.prototype._hash = function() {
    var H4 = Buffer.allocUnsafe(20);
    H4.writeInt32BE(this._a | 0, 0);
    H4.writeInt32BE(this._b | 0, 4);
    H4.writeInt32BE(this._c | 0, 8);
    H4.writeInt32BE(this._d | 0, 12);
    H4.writeInt32BE(this._e | 0, 16);
    return H4;
  };
  sha$2 = Sha;
  return sha$2;
}
var sha1;
var hasRequiredSha1;
function requireSha1() {
  if (hasRequiredSha1)
    return sha1;
  hasRequiredSha1 = 1;
  var inherits = requireInherits_browser();
  var Hash = requireHash$1();
  var Buffer = requireSafeBuffer$1().Buffer;
  var K2 = [
    1518500249,
    1859775393,
    2400959708 | 0,
    3395469782 | 0
  ];
  var W2 = new Array(80);
  function Sha1() {
    this.init();
    this._w = W2;
    Hash.call(this, 64, 56);
  }
  inherits(Sha1, Hash);
  Sha1.prototype.init = function() {
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
    return this;
  };
  function rotl1(num) {
    return num << 1 | num >>> 31;
  }
  function rotl5(num) {
    return num << 5 | num >>> 27;
  }
  function rotl30(num) {
    return num << 30 | num >>> 2;
  }
  function ft(s2, b2, c2, d2) {
    if (s2 === 0)
      return b2 & c2 | ~b2 & d2;
    if (s2 === 2)
      return b2 & c2 | b2 & d2 | c2 & d2;
    return b2 ^ c2 ^ d2;
  }
  Sha1.prototype._update = function(M2) {
    var W3 = this._w;
    var a2 = this._a | 0;
    var b2 = this._b | 0;
    var c2 = this._c | 0;
    var d2 = this._d | 0;
    var e2 = this._e | 0;
    for (var i2 = 0; i2 < 16; ++i2)
      W3[i2] = M2.readInt32BE(i2 * 4);
    for (; i2 < 80; ++i2)
      W3[i2] = rotl1(W3[i2 - 3] ^ W3[i2 - 8] ^ W3[i2 - 14] ^ W3[i2 - 16]);
    for (var j2 = 0; j2 < 80; ++j2) {
      var s2 = ~~(j2 / 20);
      var t2 = rotl5(a2) + ft(s2, b2, c2, d2) + e2 + W3[j2] + K2[s2] | 0;
      e2 = d2;
      d2 = c2;
      c2 = rotl30(b2);
      b2 = a2;
      a2 = t2;
    }
    this._a = a2 + this._a | 0;
    this._b = b2 + this._b | 0;
    this._c = c2 + this._c | 0;
    this._d = d2 + this._d | 0;
    this._e = e2 + this._e | 0;
  };
  Sha1.prototype._hash = function() {
    var H4 = Buffer.allocUnsafe(20);
    H4.writeInt32BE(this._a | 0, 0);
    H4.writeInt32BE(this._b | 0, 4);
    H4.writeInt32BE(this._c | 0, 8);
    H4.writeInt32BE(this._d | 0, 12);
    H4.writeInt32BE(this._e | 0, 16);
    return H4;
  };
  sha1 = Sha1;
  return sha1;
}
var sha256$5;
var hasRequiredSha256;
function requireSha256() {
  if (hasRequiredSha256)
    return sha256$5;
  hasRequiredSha256 = 1;
  var inherits = requireInherits_browser();
  var Hash = requireHash$1();
  var Buffer = requireSafeBuffer$1().Buffer;
  var K2 = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ];
  var W2 = new Array(64);
  function Sha256() {
    this.init();
    this._w = W2;
    Hash.call(this, 64, 56);
  }
  inherits(Sha256, Hash);
  Sha256.prototype.init = function() {
    this._a = 1779033703;
    this._b = 3144134277;
    this._c = 1013904242;
    this._d = 2773480762;
    this._e = 1359893119;
    this._f = 2600822924;
    this._g = 528734635;
    this._h = 1541459225;
    return this;
  };
  function ch2(x2, y2, z2) {
    return z2 ^ x2 & (y2 ^ z2);
  }
  function maj(x2, y2, z2) {
    return x2 & y2 | z2 & (x2 | y2);
  }
  function sigma0(x2) {
    return (x2 >>> 2 | x2 << 30) ^ (x2 >>> 13 | x2 << 19) ^ (x2 >>> 22 | x2 << 10);
  }
  function sigma1(x2) {
    return (x2 >>> 6 | x2 << 26) ^ (x2 >>> 11 | x2 << 21) ^ (x2 >>> 25 | x2 << 7);
  }
  function gamma0(x2) {
    return (x2 >>> 7 | x2 << 25) ^ (x2 >>> 18 | x2 << 14) ^ x2 >>> 3;
  }
  function gamma1(x2) {
    return (x2 >>> 17 | x2 << 15) ^ (x2 >>> 19 | x2 << 13) ^ x2 >>> 10;
  }
  Sha256.prototype._update = function(M2) {
    var W3 = this._w;
    var a2 = this._a | 0;
    var b2 = this._b | 0;
    var c2 = this._c | 0;
    var d2 = this._d | 0;
    var e2 = this._e | 0;
    var f2 = this._f | 0;
    var g2 = this._g | 0;
    var h2 = this._h | 0;
    for (var i2 = 0; i2 < 16; ++i2)
      W3[i2] = M2.readInt32BE(i2 * 4);
    for (; i2 < 64; ++i2)
      W3[i2] = gamma1(W3[i2 - 2]) + W3[i2 - 7] + gamma0(W3[i2 - 15]) + W3[i2 - 16] | 0;
    for (var j2 = 0; j2 < 64; ++j2) {
      var T1 = h2 + sigma1(e2) + ch2(e2, f2, g2) + K2[j2] + W3[j2] | 0;
      var T2 = sigma0(a2) + maj(a2, b2, c2) | 0;
      h2 = g2;
      g2 = f2;
      f2 = e2;
      e2 = d2 + T1 | 0;
      d2 = c2;
      c2 = b2;
      b2 = a2;
      a2 = T1 + T2 | 0;
    }
    this._a = a2 + this._a | 0;
    this._b = b2 + this._b | 0;
    this._c = c2 + this._c | 0;
    this._d = d2 + this._d | 0;
    this._e = e2 + this._e | 0;
    this._f = f2 + this._f | 0;
    this._g = g2 + this._g | 0;
    this._h = h2 + this._h | 0;
  };
  Sha256.prototype._hash = function() {
    var H4 = Buffer.allocUnsafe(32);
    H4.writeInt32BE(this._a, 0);
    H4.writeInt32BE(this._b, 4);
    H4.writeInt32BE(this._c, 8);
    H4.writeInt32BE(this._d, 12);
    H4.writeInt32BE(this._e, 16);
    H4.writeInt32BE(this._f, 20);
    H4.writeInt32BE(this._g, 24);
    H4.writeInt32BE(this._h, 28);
    return H4;
  };
  sha256$5 = Sha256;
  return sha256$5;
}
var sha224$1;
var hasRequiredSha224;
function requireSha224() {
  if (hasRequiredSha224)
    return sha224$1;
  hasRequiredSha224 = 1;
  var inherits = requireInherits_browser();
  var Sha256 = requireSha256();
  var Hash = requireHash$1();
  var Buffer = requireSafeBuffer$1().Buffer;
  var W2 = new Array(64);
  function Sha224() {
    this.init();
    this._w = W2;
    Hash.call(this, 64, 56);
  }
  inherits(Sha224, Sha256);
  Sha224.prototype.init = function() {
    this._a = 3238371032;
    this._b = 914150663;
    this._c = 812702999;
    this._d = 4144912697;
    this._e = 4290775857;
    this._f = 1750603025;
    this._g = 1694076839;
    this._h = 3204075428;
    return this;
  };
  Sha224.prototype._hash = function() {
    var H4 = Buffer.allocUnsafe(28);
    H4.writeInt32BE(this._a, 0);
    H4.writeInt32BE(this._b, 4);
    H4.writeInt32BE(this._c, 8);
    H4.writeInt32BE(this._d, 12);
    H4.writeInt32BE(this._e, 16);
    H4.writeInt32BE(this._f, 20);
    H4.writeInt32BE(this._g, 24);
    return H4;
  };
  sha224$1 = Sha224;
  return sha224$1;
}
var sha512$5;
var hasRequiredSha512;
function requireSha512() {
  if (hasRequiredSha512)
    return sha512$5;
  hasRequiredSha512 = 1;
  var inherits = requireInherits_browser();
  var Hash = requireHash$1();
  var Buffer = requireSafeBuffer$1().Buffer;
  var K2 = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
  ];
  var W2 = new Array(160);
  function Sha512() {
    this.init();
    this._w = W2;
    Hash.call(this, 128, 112);
  }
  inherits(Sha512, Hash);
  Sha512.prototype.init = function() {
    this._ah = 1779033703;
    this._bh = 3144134277;
    this._ch = 1013904242;
    this._dh = 2773480762;
    this._eh = 1359893119;
    this._fh = 2600822924;
    this._gh = 528734635;
    this._hh = 1541459225;
    this._al = 4089235720;
    this._bl = 2227873595;
    this._cl = 4271175723;
    this._dl = 1595750129;
    this._el = 2917565137;
    this._fl = 725511199;
    this._gl = 4215389547;
    this._hl = 327033209;
    return this;
  };
  function Ch2(x2, y2, z2) {
    return z2 ^ x2 & (y2 ^ z2);
  }
  function maj(x2, y2, z2) {
    return x2 & y2 | z2 & (x2 | y2);
  }
  function sigma0(x2, xl) {
    return (x2 >>> 28 | xl << 4) ^ (xl >>> 2 | x2 << 30) ^ (xl >>> 7 | x2 << 25);
  }
  function sigma1(x2, xl) {
    return (x2 >>> 14 | xl << 18) ^ (x2 >>> 18 | xl << 14) ^ (xl >>> 9 | x2 << 23);
  }
  function Gamma0(x2, xl) {
    return (x2 >>> 1 | xl << 31) ^ (x2 >>> 8 | xl << 24) ^ x2 >>> 7;
  }
  function Gamma0l(x2, xl) {
    return (x2 >>> 1 | xl << 31) ^ (x2 >>> 8 | xl << 24) ^ (x2 >>> 7 | xl << 25);
  }
  function Gamma1(x2, xl) {
    return (x2 >>> 19 | xl << 13) ^ (xl >>> 29 | x2 << 3) ^ x2 >>> 6;
  }
  function Gamma1l(x2, xl) {
    return (x2 >>> 19 | xl << 13) ^ (xl >>> 29 | x2 << 3) ^ (x2 >>> 6 | xl << 26);
  }
  function getCarry(a2, b2) {
    return a2 >>> 0 < b2 >>> 0 ? 1 : 0;
  }
  Sha512.prototype._update = function(M2) {
    var W3 = this._w;
    var ah2 = this._ah | 0;
    var bh2 = this._bh | 0;
    var ch2 = this._ch | 0;
    var dh2 = this._dh | 0;
    var eh2 = this._eh | 0;
    var fh2 = this._fh | 0;
    var gh2 = this._gh | 0;
    var hh2 = this._hh | 0;
    var al2 = this._al | 0;
    var bl2 = this._bl | 0;
    var cl2 = this._cl | 0;
    var dl2 = this._dl | 0;
    var el2 = this._el | 0;
    var fl2 = this._fl | 0;
    var gl2 = this._gl | 0;
    var hl2 = this._hl | 0;
    for (var i2 = 0; i2 < 32; i2 += 2) {
      W3[i2] = M2.readInt32BE(i2 * 4);
      W3[i2 + 1] = M2.readInt32BE(i2 * 4 + 4);
    }
    for (; i2 < 160; i2 += 2) {
      var xh2 = W3[i2 - 15 * 2];
      var xl = W3[i2 - 15 * 2 + 1];
      var gamma0 = Gamma0(xh2, xl);
      var gamma0l = Gamma0l(xl, xh2);
      xh2 = W3[i2 - 2 * 2];
      xl = W3[i2 - 2 * 2 + 1];
      var gamma1 = Gamma1(xh2, xl);
      var gamma1l = Gamma1l(xl, xh2);
      var Wi7h = W3[i2 - 7 * 2];
      var Wi7l = W3[i2 - 7 * 2 + 1];
      var Wi16h = W3[i2 - 16 * 2];
      var Wi16l = W3[i2 - 16 * 2 + 1];
      var Wil = gamma0l + Wi7l | 0;
      var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
      Wil = Wil + gamma1l | 0;
      Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
      Wil = Wil + Wi16l | 0;
      Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
      W3[i2] = Wih;
      W3[i2 + 1] = Wil;
    }
    for (var j2 = 0; j2 < 160; j2 += 2) {
      Wih = W3[j2];
      Wil = W3[j2 + 1];
      var majh = maj(ah2, bh2, ch2);
      var majl = maj(al2, bl2, cl2);
      var sigma0h = sigma0(ah2, al2);
      var sigma0l = sigma0(al2, ah2);
      var sigma1h = sigma1(eh2, el2);
      var sigma1l = sigma1(el2, eh2);
      var Kih = K2[j2];
      var Kil = K2[j2 + 1];
      var chh = Ch2(eh2, fh2, gh2);
      var chl = Ch2(el2, fl2, gl2);
      var t1l = hl2 + sigma1l | 0;
      var t1h = hh2 + sigma1h + getCarry(t1l, hl2) | 0;
      t1l = t1l + chl | 0;
      t1h = t1h + chh + getCarry(t1l, chl) | 0;
      t1l = t1l + Kil | 0;
      t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
      t1l = t1l + Wil | 0;
      t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
      var t2l = sigma0l + majl | 0;
      var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
      hh2 = gh2;
      hl2 = gl2;
      gh2 = fh2;
      gl2 = fl2;
      fh2 = eh2;
      fl2 = el2;
      el2 = dl2 + t1l | 0;
      eh2 = dh2 + t1h + getCarry(el2, dl2) | 0;
      dh2 = ch2;
      dl2 = cl2;
      ch2 = bh2;
      cl2 = bl2;
      bh2 = ah2;
      bl2 = al2;
      al2 = t1l + t2l | 0;
      ah2 = t1h + t2h + getCarry(al2, t1l) | 0;
    }
    this._al = this._al + al2 | 0;
    this._bl = this._bl + bl2 | 0;
    this._cl = this._cl + cl2 | 0;
    this._dl = this._dl + dl2 | 0;
    this._el = this._el + el2 | 0;
    this._fl = this._fl + fl2 | 0;
    this._gl = this._gl + gl2 | 0;
    this._hl = this._hl + hl2 | 0;
    this._ah = this._ah + ah2 + getCarry(this._al, al2) | 0;
    this._bh = this._bh + bh2 + getCarry(this._bl, bl2) | 0;
    this._ch = this._ch + ch2 + getCarry(this._cl, cl2) | 0;
    this._dh = this._dh + dh2 + getCarry(this._dl, dl2) | 0;
    this._eh = this._eh + eh2 + getCarry(this._el, el2) | 0;
    this._fh = this._fh + fh2 + getCarry(this._fl, fl2) | 0;
    this._gh = this._gh + gh2 + getCarry(this._gl, gl2) | 0;
    this._hh = this._hh + hh2 + getCarry(this._hl, hl2) | 0;
  };
  Sha512.prototype._hash = function() {
    var H4 = Buffer.allocUnsafe(64);
    function writeInt64BE(h2, l2, offset) {
      H4.writeInt32BE(h2, offset);
      H4.writeInt32BE(l2, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);
    return H4;
  };
  sha512$5 = Sha512;
  return sha512$5;
}
var sha384$1;
var hasRequiredSha384;
function requireSha384() {
  if (hasRequiredSha384)
    return sha384$1;
  hasRequiredSha384 = 1;
  var inherits = requireInherits_browser();
  var SHA512 = requireSha512();
  var Hash = requireHash$1();
  var Buffer = requireSafeBuffer$1().Buffer;
  var W2 = new Array(160);
  function Sha384() {
    this.init();
    this._w = W2;
    Hash.call(this, 128, 112);
  }
  inherits(Sha384, SHA512);
  Sha384.prototype.init = function() {
    this._ah = 3418070365;
    this._bh = 1654270250;
    this._ch = 2438529370;
    this._dh = 355462360;
    this._eh = 1731405415;
    this._fh = 2394180231;
    this._gh = 3675008525;
    this._hh = 1203062813;
    this._al = 3238371032;
    this._bl = 914150663;
    this._cl = 812702999;
    this._dl = 4144912697;
    this._el = 4290775857;
    this._fl = 1750603025;
    this._gl = 1694076839;
    this._hl = 3204075428;
    return this;
  };
  Sha384.prototype._hash = function() {
    var H4 = Buffer.allocUnsafe(48);
    function writeInt64BE(h2, l2, offset) {
      H4.writeInt32BE(h2, offset);
      H4.writeInt32BE(l2, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    return H4;
  };
  sha384$1 = Sha384;
  return sha384$1;
}
var hasRequiredSha_js;
function requireSha_js() {
  if (hasRequiredSha_js)
    return sha_js.exports;
  hasRequiredSha_js = 1;
  var exports2 = sha_js.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = exports2[algorithm];
    if (!Algorithm)
      throw new Error(algorithm + " is not supported (we accept pull requests)");
    return new Algorithm();
  };
  exports2.sha = requireSha$1();
  exports2.sha1 = requireSha1();
  exports2.sha224 = requireSha224();
  exports2.sha256 = requireSha256();
  exports2.sha384 = requireSha384();
  exports2.sha512 = requireSha512();
  return sha_js.exports;
}
var streamBrowserify;
var hasRequiredStreamBrowserify;
function requireStreamBrowserify() {
  if (hasRequiredStreamBrowserify)
    return streamBrowserify;
  hasRequiredStreamBrowserify = 1;
  streamBrowserify = Stream;
  var EE = requireEvents().EventEmitter;
  var inherits = requireInherits_browser();
  inherits(Stream, EE);
  Stream.Readable = require_stream_readable$1();
  Stream.Writable = require_stream_writable$1();
  Stream.Duplex = require_stream_duplex$1();
  Stream.Transform = require_stream_transform$1();
  Stream.PassThrough = require_stream_passthrough$1();
  Stream.finished = requireEndOfStream();
  Stream.pipeline = requirePipeline();
  Stream.Stream = Stream;
  function Stream() {
    EE.call(this);
  }
  Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }
    source.on("data", ondata);
    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }
    dest.on("drain", ondrain);
    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on("end", onend);
      source.on("close", onclose);
    }
    var didOnEnd = false;
    function onend() {
      if (didOnEnd)
        return;
      didOnEnd = true;
      dest.end();
    }
    function onclose() {
      if (didOnEnd)
        return;
      didOnEnd = true;
      if (typeof dest.destroy === "function")
        dest.destroy();
    }
    function onerror(er) {
      cleanup();
      if (EE.listenerCount(this, "error") === 0) {
        throw er;
      }
    }
    source.on("error", onerror);
    dest.on("error", onerror);
    function cleanup() {
      source.removeListener("data", ondata);
      dest.removeListener("drain", ondrain);
      source.removeListener("end", onend);
      source.removeListener("close", onclose);
      source.removeListener("error", onerror);
      dest.removeListener("error", onerror);
      source.removeListener("end", cleanup);
      source.removeListener("close", cleanup);
      dest.removeListener("close", cleanup);
    }
    source.on("end", cleanup);
    source.on("close", cleanup);
    dest.on("close", cleanup);
    dest.emit("pipe", source);
    return dest;
  };
  return streamBrowserify;
}
var cipherBase;
var hasRequiredCipherBase;
function requireCipherBase() {
  if (hasRequiredCipherBase)
    return cipherBase;
  hasRequiredCipherBase = 1;
  var Buffer = requireSafeBuffer$1().Buffer;
  var Transform = requireStreamBrowserify().Transform;
  var StringDecoder = requireString_decoder().StringDecoder;
  var inherits = requireInherits_browser();
  function CipherBase(hashMode) {
    Transform.call(this);
    this.hashMode = typeof hashMode === "string";
    if (this.hashMode) {
      this[hashMode] = this._finalOrDigest;
    } else {
      this.final = this._finalOrDigest;
    }
    if (this._final) {
      this.__final = this._final;
      this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
  }
  inherits(CipherBase, Transform);
  CipherBase.prototype.update = function(data2, inputEnc, outputEnc) {
    if (typeof data2 === "string") {
      data2 = Buffer.from(data2, inputEnc);
    }
    var outData = this._update(data2);
    if (this.hashMode)
      return this;
    if (outputEnc) {
      outData = this._toString(outData, outputEnc);
    }
    return outData;
  };
  CipherBase.prototype.setAutoPadding = function() {
  };
  CipherBase.prototype.getAuthTag = function() {
    throw new Error("trying to get auth tag in unsupported state");
  };
  CipherBase.prototype.setAuthTag = function() {
    throw new Error("trying to set auth tag in unsupported state");
  };
  CipherBase.prototype.setAAD = function() {
    throw new Error("trying to set aad in unsupported state");
  };
  CipherBase.prototype._transform = function(data2, _2, next) {
    var err;
    try {
      if (this.hashMode) {
        this._update(data2);
      } else {
        this.push(this._update(data2));
      }
    } catch (e2) {
      err = e2;
    } finally {
      next(err);
    }
  };
  CipherBase.prototype._flush = function(done) {
    var err;
    try {
      this.push(this.__final());
    } catch (e2) {
      err = e2;
    }
    done(err);
  };
  CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || Buffer.alloc(0);
    if (outputEnc) {
      outData = this._toString(outData, outputEnc, true);
    }
    return outData;
  };
  CipherBase.prototype._toString = function(value, enc, fin) {
    if (!this._decoder) {
      this._decoder = new StringDecoder(enc);
      this._encoding = enc;
    }
    if (this._encoding !== enc)
      throw new Error("can't switch encodings");
    var out = this._decoder.write(value);
    if (fin) {
      out += this._decoder.end();
    }
    return out;
  };
  cipherBase = CipherBase;
  return cipherBase;
}
var browser$a;
var hasRequiredBrowser$9;
function requireBrowser$9() {
  if (hasRequiredBrowser$9)
    return browser$a;
  hasRequiredBrowser$9 = 1;
  var inherits = requireInherits_browser();
  var MD5 = requireMd5_js();
  var RIPEMD160 = requireRipemd160();
  var sha2 = requireSha_js();
  var Base = requireCipherBase();
  function Hash(hash2) {
    Base.call(this, "digest");
    this._hash = hash2;
  }
  inherits(Hash, Base);
  Hash.prototype._update = function(data2) {
    this._hash.update(data2);
  };
  Hash.prototype._final = function() {
    return this._hash.digest();
  };
  browser$a = function createHash(alg) {
    alg = alg.toLowerCase();
    if (alg === "md5")
      return new MD5();
    if (alg === "rmd160" || alg === "ripemd160")
      return new RIPEMD160();
    return new Hash(sha2(alg));
  };
  return browser$a;
}
var legacy;
var hasRequiredLegacy;
function requireLegacy() {
  if (hasRequiredLegacy)
    return legacy;
  hasRequiredLegacy = 1;
  var inherits = requireInherits_browser();
  var Buffer = requireSafeBuffer$1().Buffer;
  var Base = requireCipherBase();
  var ZEROS = Buffer.alloc(128);
  var blocksize = 64;
  function Hmac(alg, key2) {
    Base.call(this, "digest");
    if (typeof key2 === "string") {
      key2 = Buffer.from(key2);
    }
    this._alg = alg;
    this._key = key2;
    if (key2.length > blocksize) {
      key2 = alg(key2);
    } else if (key2.length < blocksize) {
      key2 = Buffer.concat([key2, ZEROS], blocksize);
    }
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
    var opad = this._opad = Buffer.allocUnsafe(blocksize);
    for (var i2 = 0; i2 < blocksize; i2++) {
      ipad[i2] = key2[i2] ^ 54;
      opad[i2] = key2[i2] ^ 92;
    }
    this._hash = [ipad];
  }
  inherits(Hmac, Base);
  Hmac.prototype._update = function(data2) {
    this._hash.push(data2);
  };
  Hmac.prototype._final = function() {
    var h2 = this._alg(Buffer.concat(this._hash));
    return this._alg(Buffer.concat([this._opad, h2]));
  };
  legacy = Hmac;
  return legacy;
}
var md5;
var hasRequiredMd5;
function requireMd5() {
  if (hasRequiredMd5)
    return md5;
  hasRequiredMd5 = 1;
  var MD5 = requireMd5_js();
  md5 = function(buffer2) {
    return new MD5().update(buffer2).digest();
  };
  return md5;
}
var browser$9;
var hasRequiredBrowser$8;
function requireBrowser$8() {
  if (hasRequiredBrowser$8)
    return browser$9;
  hasRequiredBrowser$8 = 1;
  var inherits = requireInherits_browser();
  var Legacy = requireLegacy();
  var Base = requireCipherBase();
  var Buffer = requireSafeBuffer$1().Buffer;
  var md52 = requireMd5();
  var RIPEMD160 = requireRipemd160();
  var sha2 = requireSha_js();
  var ZEROS = Buffer.alloc(128);
  function Hmac(alg, key2) {
    Base.call(this, "digest");
    if (typeof key2 === "string") {
      key2 = Buffer.from(key2);
    }
    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
    this._alg = alg;
    this._key = key2;
    if (key2.length > blocksize) {
      var hash2 = alg === "rmd160" ? new RIPEMD160() : sha2(alg);
      key2 = hash2.update(key2).digest();
    } else if (key2.length < blocksize) {
      key2 = Buffer.concat([key2, ZEROS], blocksize);
    }
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
    var opad = this._opad = Buffer.allocUnsafe(blocksize);
    for (var i2 = 0; i2 < blocksize; i2++) {
      ipad[i2] = key2[i2] ^ 54;
      opad[i2] = key2[i2] ^ 92;
    }
    this._hash = alg === "rmd160" ? new RIPEMD160() : sha2(alg);
    this._hash.update(ipad);
  }
  inherits(Hmac, Base);
  Hmac.prototype._update = function(data2) {
    this._hash.update(data2);
  };
  Hmac.prototype._final = function() {
    var h2 = this._hash.digest();
    var hash2 = this._alg === "rmd160" ? new RIPEMD160() : sha2(this._alg);
    return hash2.update(this._opad).update(h2).digest();
  };
  browser$9 = function createHmac(alg, key2) {
    alg = alg.toLowerCase();
    if (alg === "rmd160" || alg === "ripemd160") {
      return new Hmac("rmd160", key2);
    }
    if (alg === "md5") {
      return new Legacy(md52, key2);
    }
    return new Hmac(alg, key2);
  };
  return browser$9;
}
const sha224WithRSAEncryption = {
  sign: "rsa",
  hash: "sha224",
  id: "302d300d06096086480165030402040500041c"
};
const sha256WithRSAEncryption = {
  sign: "rsa",
  hash: "sha256",
  id: "3031300d060960864801650304020105000420"
};
const sha384WithRSAEncryption = {
  sign: "rsa",
  hash: "sha384",
  id: "3041300d060960864801650304020205000430"
};
const sha512WithRSAEncryption = {
  sign: "rsa",
  hash: "sha512",
  id: "3051300d060960864801650304020305000440"
};
const sha256$4 = {
  sign: "ecdsa",
  hash: "sha256",
  id: ""
};
const sha224 = {
  sign: "ecdsa",
  hash: "sha224",
  id: ""
};
const sha384 = {
  sign: "ecdsa",
  hash: "sha384",
  id: ""
};
const sha512$4 = {
  sign: "ecdsa",
  hash: "sha512",
  id: ""
};
const DSA = {
  sign: "dsa",
  hash: "sha1",
  id: ""
};
const ripemd160WithRSA = {
  sign: "rsa",
  hash: "rmd160",
  id: "3021300906052b2403020105000414"
};
const md5WithRSAEncryption = {
  sign: "rsa",
  hash: "md5",
  id: "3020300c06082a864886f70d020505000410"
};
const require$$6$1 = {
  sha224WithRSAEncryption,
  "RSA-SHA224": {
    sign: "ecdsa/rsa",
    hash: "sha224",
    id: "302d300d06096086480165030402040500041c"
  },
  sha256WithRSAEncryption,
  "RSA-SHA256": {
    sign: "ecdsa/rsa",
    hash: "sha256",
    id: "3031300d060960864801650304020105000420"
  },
  sha384WithRSAEncryption,
  "RSA-SHA384": {
    sign: "ecdsa/rsa",
    hash: "sha384",
    id: "3041300d060960864801650304020205000430"
  },
  sha512WithRSAEncryption,
  "RSA-SHA512": {
    sign: "ecdsa/rsa",
    hash: "sha512",
    id: "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    sign: "rsa",
    hash: "sha1",
    id: "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    sign: "ecdsa",
    hash: "sha1",
    id: ""
  },
  sha256: sha256$4,
  sha224,
  sha384,
  sha512: sha512$4,
  "DSA-SHA": {
    sign: "dsa",
    hash: "sha1",
    id: ""
  },
  "DSA-SHA1": {
    sign: "dsa",
    hash: "sha1",
    id: ""
  },
  DSA,
  "DSA-WITH-SHA224": {
    sign: "dsa",
    hash: "sha224",
    id: ""
  },
  "DSA-SHA224": {
    sign: "dsa",
    hash: "sha224",
    id: ""
  },
  "DSA-WITH-SHA256": {
    sign: "dsa",
    hash: "sha256",
    id: ""
  },
  "DSA-SHA256": {
    sign: "dsa",
    hash: "sha256",
    id: ""
  },
  "DSA-WITH-SHA384": {
    sign: "dsa",
    hash: "sha384",
    id: ""
  },
  "DSA-SHA384": {
    sign: "dsa",
    hash: "sha384",
    id: ""
  },
  "DSA-WITH-SHA512": {
    sign: "dsa",
    hash: "sha512",
    id: ""
  },
  "DSA-SHA512": {
    sign: "dsa",
    hash: "sha512",
    id: ""
  },
  "DSA-RIPEMD160": {
    sign: "dsa",
    hash: "rmd160",
    id: ""
  },
  ripemd160WithRSA,
  "RSA-RIPEMD160": {
    sign: "rsa",
    hash: "rmd160",
    id: "3021300906052b2403020105000414"
  },
  md5WithRSAEncryption,
  "RSA-MD5": {
    sign: "rsa",
    hash: "md5",
    id: "3020300c06082a864886f70d020505000410"
  }
};
var algos;
var hasRequiredAlgos;
function requireAlgos() {
  if (hasRequiredAlgos)
    return algos;
  hasRequiredAlgos = 1;
  algos = require$$6$1;
  return algos;
}
var browser$8 = {};
var precondition;
var hasRequiredPrecondition;
function requirePrecondition() {
  if (hasRequiredPrecondition)
    return precondition;
  hasRequiredPrecondition = 1;
  var MAX_ALLOC = Math.pow(2, 30) - 1;
  precondition = function(iterations, keylen) {
    if (typeof iterations !== "number") {
      throw new TypeError("Iterations not a number");
    }
    if (iterations < 0) {
      throw new TypeError("Bad iterations");
    }
    if (typeof keylen !== "number") {
      throw new TypeError("Key length not a number");
    }
    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
      throw new TypeError("Bad key length");
    }
  };
  return precondition;
}
var defaultEncoding_1;
var hasRequiredDefaultEncoding;
function requireDefaultEncoding() {
  if (hasRequiredDefaultEncoding)
    return defaultEncoding_1;
  hasRequiredDefaultEncoding = 1;
  var defaultEncoding;
  if (commonjsGlobal.process && commonjsGlobal.process.browser) {
    defaultEncoding = "utf-8";
  } else if (commonjsGlobal.process && commonjsGlobal.process.version) {
    var pVersionMajor = parseInt(process$1.version.split(".")[0].slice(1), 10);
    defaultEncoding = pVersionMajor >= 6 ? "utf-8" : "binary";
  } else {
    defaultEncoding = "utf-8";
  }
  defaultEncoding_1 = defaultEncoding;
  return defaultEncoding_1;
}
var toBuffer;
var hasRequiredToBuffer;
function requireToBuffer() {
  if (hasRequiredToBuffer)
    return toBuffer;
  hasRequiredToBuffer = 1;
  var Buffer = requireSafeBuffer$1().Buffer;
  toBuffer = function(thing, encoding, name2) {
    if (Buffer.isBuffer(thing)) {
      return thing;
    } else if (typeof thing === "string") {
      return Buffer.from(thing, encoding);
    } else if (ArrayBuffer.isView(thing)) {
      return Buffer.from(thing.buffer);
    } else {
      throw new TypeError(name2 + " must be a string, a Buffer, a typed array or a DataView");
    }
  };
  return toBuffer;
}
var syncBrowser;
var hasRequiredSyncBrowser;
function requireSyncBrowser() {
  if (hasRequiredSyncBrowser)
    return syncBrowser;
  hasRequiredSyncBrowser = 1;
  var md52 = requireMd5();
  var RIPEMD160 = requireRipemd160();
  var sha2 = requireSha_js();
  var Buffer = requireSafeBuffer$1().Buffer;
  var checkParameters = requirePrecondition();
  var defaultEncoding = requireDefaultEncoding();
  var toBuffer2 = requireToBuffer();
  var ZEROS = Buffer.alloc(128);
  var sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
  };
  function Hmac(alg, key2, saltLen) {
    var hash2 = getDigest(alg);
    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
    if (key2.length > blocksize) {
      key2 = hash2(key2);
    } else if (key2.length < blocksize) {
      key2 = Buffer.concat([key2, ZEROS], blocksize);
    }
    var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
    var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);
    for (var i2 = 0; i2 < blocksize; i2++) {
      ipad[i2] = key2[i2] ^ 54;
      opad[i2] = key2[i2] ^ 92;
    }
    var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
    ipad.copy(ipad1, 0, 0, blocksize);
    this.ipad1 = ipad1;
    this.ipad2 = ipad;
    this.opad = opad;
    this.alg = alg;
    this.blocksize = blocksize;
    this.hash = hash2;
    this.size = sizes[alg];
  }
  Hmac.prototype.run = function(data2, ipad) {
    data2.copy(ipad, this.blocksize);
    var h2 = this.hash(ipad);
    h2.copy(this.opad, this.blocksize);
    return this.hash(this.opad);
  };
  function getDigest(alg) {
    function shaFunc(data2) {
      return sha2(alg).update(data2).digest();
    }
    function rmd160Func(data2) {
      return new RIPEMD160().update(data2).digest();
    }
    if (alg === "rmd160" || alg === "ripemd160")
      return rmd160Func;
    if (alg === "md5")
      return md52;
    return shaFunc;
  }
  function pbkdf2(password, salt, iterations, keylen, digest) {
    checkParameters(iterations, keylen);
    password = toBuffer2(password, defaultEncoding, "Password");
    salt = toBuffer2(salt, defaultEncoding, "Salt");
    digest = digest || "sha1";
    var hmac2 = new Hmac(digest, password, salt.length);
    var DK = Buffer.allocUnsafe(keylen);
    var block1 = Buffer.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);
    var destPos = 0;
    var hLen = sizes[digest];
    var l2 = Math.ceil(keylen / hLen);
    for (var i2 = 1; i2 <= l2; i2++) {
      block1.writeUInt32BE(i2, salt.length);
      var T2 = hmac2.run(block1, hmac2.ipad1);
      var U2 = T2;
      for (var j2 = 1; j2 < iterations; j2++) {
        U2 = hmac2.run(U2, hmac2.ipad2);
        for (var k2 = 0; k2 < hLen; k2++)
          T2[k2] ^= U2[k2];
      }
      T2.copy(DK, destPos);
      destPos += hLen;
    }
    return DK;
  }
  syncBrowser = pbkdf2;
  return syncBrowser;
}
var async;
var hasRequiredAsync;
function requireAsync() {
  if (hasRequiredAsync)
    return async;
  hasRequiredAsync = 1;
  var Buffer = requireSafeBuffer$1().Buffer;
  var checkParameters = requirePrecondition();
  var defaultEncoding = requireDefaultEncoding();
  var sync = requireSyncBrowser();
  var toBuffer2 = requireToBuffer();
  var ZERO_BUF;
  var subtle = commonjsGlobal.crypto && commonjsGlobal.crypto.subtle;
  var toBrowser = {
    sha: "SHA-1",
    "sha-1": "SHA-1",
    sha1: "SHA-1",
    sha256: "SHA-256",
    "sha-256": "SHA-256",
    sha384: "SHA-384",
    "sha-384": "SHA-384",
    "sha-512": "SHA-512",
    sha512: "SHA-512"
  };
  var checks = [];
  function checkNative(algo) {
    if (commonjsGlobal.process && !commonjsGlobal.process.browser) {
      return Promise.resolve(false);
    }
    if (!subtle || !subtle.importKey || !subtle.deriveBits) {
      return Promise.resolve(false);
    }
    if (checks[algo] !== void 0) {
      return checks[algo];
    }
    ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {
      return true;
    }).catch(function() {
      return false;
    });
    checks[algo] = prom;
    return prom;
  }
  var nextTick;
  function getNextTick() {
    if (nextTick) {
      return nextTick;
    }
    if (commonjsGlobal.process && commonjsGlobal.process.nextTick) {
      nextTick = commonjsGlobal.process.nextTick;
    } else if (commonjsGlobal.queueMicrotask) {
      nextTick = commonjsGlobal.queueMicrotask;
    } else if (commonjsGlobal.setImmediate) {
      nextTick = commonjsGlobal.setImmediate;
    } else {
      nextTick = commonjsGlobal.setTimeout;
    }
    return nextTick;
  }
  function browserPbkdf2(password, salt, iterations, length, algo) {
    return subtle.importKey(
      "raw",
      password,
      { name: "PBKDF2" },
      false,
      ["deriveBits"]
    ).then(function(key2) {
      return subtle.deriveBits({
        name: "PBKDF2",
        salt,
        iterations,
        hash: {
          name: algo
        }
      }, key2, length << 3);
    }).then(function(res) {
      return Buffer.from(res);
    });
  }
  function resolvePromise(promise, callback) {
    promise.then(function(out) {
      getNextTick()(function() {
        callback(null, out);
      });
    }, function(e2) {
      getNextTick()(function() {
        callback(e2);
      });
    });
  }
  async = function(password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === "function") {
      callback = digest;
      digest = void 0;
    }
    digest = digest || "sha1";
    var algo = toBrowser[digest.toLowerCase()];
    if (!algo || typeof commonjsGlobal.Promise !== "function") {
      getNextTick()(function() {
        var out;
        try {
          out = sync(password, salt, iterations, keylen, digest);
        } catch (e2) {
          return callback(e2);
        }
        callback(null, out);
      });
      return;
    }
    checkParameters(iterations, keylen);
    password = toBuffer2(password, defaultEncoding, "Password");
    salt = toBuffer2(salt, defaultEncoding, "Salt");
    if (typeof callback !== "function")
      throw new Error("No callback provided to pbkdf2");
    resolvePromise(checkNative(algo).then(function(resp) {
      if (resp)
        return browserPbkdf2(password, salt, iterations, keylen, algo);
      return sync(password, salt, iterations, keylen, digest);
    }), callback);
  };
  return async;
}
var hasRequiredBrowser$7;
function requireBrowser$7() {
  if (hasRequiredBrowser$7)
    return browser$8;
  hasRequiredBrowser$7 = 1;
  browser$8.pbkdf2 = requireAsync();
  browser$8.pbkdf2Sync = requireSyncBrowser();
  return browser$8;
}
var browser$7 = {};
var des$1 = {};
var utils$d = {};
var hasRequiredUtils$3;
function requireUtils$3() {
  if (hasRequiredUtils$3)
    return utils$d;
  hasRequiredUtils$3 = 1;
  utils$d.readUInt32BE = function readUInt32BE(bytes, off) {
    var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
    return res >>> 0;
  };
  utils$d.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
    bytes[0 + off] = value >>> 24;
    bytes[1 + off] = value >>> 16 & 255;
    bytes[2 + off] = value >>> 8 & 255;
    bytes[3 + off] = value & 255;
  };
  utils$d.ip = function ip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for (var i2 = 6; i2 >= 0; i2 -= 2) {
      for (var j2 = 0; j2 <= 24; j2 += 8) {
        outL <<= 1;
        outL |= inR >>> j2 + i2 & 1;
      }
      for (var j2 = 0; j2 <= 24; j2 += 8) {
        outL <<= 1;
        outL |= inL >>> j2 + i2 & 1;
      }
    }
    for (var i2 = 6; i2 >= 0; i2 -= 2) {
      for (var j2 = 1; j2 <= 25; j2 += 8) {
        outR <<= 1;
        outR |= inR >>> j2 + i2 & 1;
      }
      for (var j2 = 1; j2 <= 25; j2 += 8) {
        outR <<= 1;
        outR |= inL >>> j2 + i2 & 1;
      }
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  utils$d.rip = function rip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for (var i2 = 0; i2 < 4; i2++) {
      for (var j2 = 24; j2 >= 0; j2 -= 8) {
        outL <<= 1;
        outL |= inR >>> j2 + i2 & 1;
        outL <<= 1;
        outL |= inL >>> j2 + i2 & 1;
      }
    }
    for (var i2 = 4; i2 < 8; i2++) {
      for (var j2 = 24; j2 >= 0; j2 -= 8) {
        outR <<= 1;
        outR |= inR >>> j2 + i2 & 1;
        outR <<= 1;
        outR |= inL >>> j2 + i2 & 1;
      }
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  utils$d.pc1 = function pc1(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for (var i2 = 7; i2 >= 5; i2--) {
      for (var j2 = 0; j2 <= 24; j2 += 8) {
        outL <<= 1;
        outL |= inR >> j2 + i2 & 1;
      }
      for (var j2 = 0; j2 <= 24; j2 += 8) {
        outL <<= 1;
        outL |= inL >> j2 + i2 & 1;
      }
    }
    for (var j2 = 0; j2 <= 24; j2 += 8) {
      outL <<= 1;
      outL |= inR >> j2 + i2 & 1;
    }
    for (var i2 = 1; i2 <= 3; i2++) {
      for (var j2 = 0; j2 <= 24; j2 += 8) {
        outR <<= 1;
        outR |= inR >> j2 + i2 & 1;
      }
      for (var j2 = 0; j2 <= 24; j2 += 8) {
        outR <<= 1;
        outR |= inL >> j2 + i2 & 1;
      }
    }
    for (var j2 = 0; j2 <= 24; j2 += 8) {
      outR <<= 1;
      outR |= inL >> j2 + i2 & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  utils$d.r28shl = function r28shl(num, shift) {
    return num << shift & 268435455 | num >>> 28 - shift;
  };
  var pc2table = [
    // inL => outL
    14,
    11,
    17,
    4,
    27,
    23,
    25,
    0,
    13,
    22,
    7,
    18,
    5,
    9,
    16,
    24,
    2,
    20,
    12,
    21,
    1,
    8,
    15,
    26,
    // inR => outR
    15,
    4,
    25,
    19,
    9,
    1,
    26,
    16,
    5,
    11,
    23,
    8,
    12,
    7,
    17,
    0,
    22,
    3,
    10,
    14,
    6,
    20,
    27,
    24
  ];
  utils$d.pc2 = function pc2(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    var len2 = pc2table.length >>> 1;
    for (var i2 = 0; i2 < len2; i2++) {
      outL <<= 1;
      outL |= inL >>> pc2table[i2] & 1;
    }
    for (var i2 = len2; i2 < pc2table.length; i2++) {
      outR <<= 1;
      outR |= inR >>> pc2table[i2] & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  utils$d.expand = function expand(r2, out, off) {
    var outL = 0;
    var outR = 0;
    outL = (r2 & 1) << 5 | r2 >>> 27;
    for (var i2 = 23; i2 >= 15; i2 -= 4) {
      outL <<= 6;
      outL |= r2 >>> i2 & 63;
    }
    for (var i2 = 11; i2 >= 3; i2 -= 4) {
      outR |= r2 >>> i2 & 63;
      outR <<= 6;
    }
    outR |= (r2 & 31) << 1 | r2 >>> 31;
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  var sTable = [
    14,
    0,
    4,
    15,
    13,
    7,
    1,
    4,
    2,
    14,
    15,
    2,
    11,
    13,
    8,
    1,
    3,
    10,
    10,
    6,
    6,
    12,
    12,
    11,
    5,
    9,
    9,
    5,
    0,
    3,
    7,
    8,
    4,
    15,
    1,
    12,
    14,
    8,
    8,
    2,
    13,
    4,
    6,
    9,
    2,
    1,
    11,
    7,
    15,
    5,
    12,
    11,
    9,
    3,
    7,
    14,
    3,
    10,
    10,
    0,
    5,
    6,
    0,
    13,
    15,
    3,
    1,
    13,
    8,
    4,
    14,
    7,
    6,
    15,
    11,
    2,
    3,
    8,
    4,
    14,
    9,
    12,
    7,
    0,
    2,
    1,
    13,
    10,
    12,
    6,
    0,
    9,
    5,
    11,
    10,
    5,
    0,
    13,
    14,
    8,
    7,
    10,
    11,
    1,
    10,
    3,
    4,
    15,
    13,
    4,
    1,
    2,
    5,
    11,
    8,
    6,
    12,
    7,
    6,
    12,
    9,
    0,
    3,
    5,
    2,
    14,
    15,
    9,
    10,
    13,
    0,
    7,
    9,
    0,
    14,
    9,
    6,
    3,
    3,
    4,
    15,
    6,
    5,
    10,
    1,
    2,
    13,
    8,
    12,
    5,
    7,
    14,
    11,
    12,
    4,
    11,
    2,
    15,
    8,
    1,
    13,
    1,
    6,
    10,
    4,
    13,
    9,
    0,
    8,
    6,
    15,
    9,
    3,
    8,
    0,
    7,
    11,
    4,
    1,
    15,
    2,
    14,
    12,
    3,
    5,
    11,
    10,
    5,
    14,
    2,
    7,
    12,
    7,
    13,
    13,
    8,
    14,
    11,
    3,
    5,
    0,
    6,
    6,
    15,
    9,
    0,
    10,
    3,
    1,
    4,
    2,
    7,
    8,
    2,
    5,
    12,
    11,
    1,
    12,
    10,
    4,
    14,
    15,
    9,
    10,
    3,
    6,
    15,
    9,
    0,
    0,
    6,
    12,
    10,
    11,
    1,
    7,
    13,
    13,
    8,
    15,
    9,
    1,
    4,
    3,
    5,
    14,
    11,
    5,
    12,
    2,
    7,
    8,
    2,
    4,
    14,
    2,
    14,
    12,
    11,
    4,
    2,
    1,
    12,
    7,
    4,
    10,
    7,
    11,
    13,
    6,
    1,
    8,
    5,
    5,
    0,
    3,
    15,
    15,
    10,
    13,
    3,
    0,
    9,
    14,
    8,
    9,
    6,
    4,
    11,
    2,
    8,
    1,
    12,
    11,
    7,
    10,
    1,
    13,
    14,
    7,
    2,
    8,
    13,
    15,
    6,
    9,
    15,
    12,
    0,
    5,
    9,
    6,
    10,
    3,
    4,
    0,
    5,
    14,
    3,
    12,
    10,
    1,
    15,
    10,
    4,
    15,
    2,
    9,
    7,
    2,
    12,
    6,
    9,
    8,
    5,
    0,
    6,
    13,
    1,
    3,
    13,
    4,
    14,
    14,
    0,
    7,
    11,
    5,
    3,
    11,
    8,
    9,
    4,
    14,
    3,
    15,
    2,
    5,
    12,
    2,
    9,
    8,
    5,
    12,
    15,
    3,
    10,
    7,
    11,
    0,
    14,
    4,
    1,
    10,
    7,
    1,
    6,
    13,
    0,
    11,
    8,
    6,
    13,
    4,
    13,
    11,
    0,
    2,
    11,
    14,
    7,
    15,
    4,
    0,
    9,
    8,
    1,
    13,
    10,
    3,
    14,
    12,
    3,
    9,
    5,
    7,
    12,
    5,
    2,
    10,
    15,
    6,
    8,
    1,
    6,
    1,
    6,
    4,
    11,
    11,
    13,
    13,
    8,
    12,
    1,
    3,
    4,
    7,
    10,
    14,
    7,
    10,
    9,
    15,
    5,
    6,
    0,
    8,
    15,
    0,
    14,
    5,
    2,
    9,
    3,
    2,
    12,
    13,
    1,
    2,
    15,
    8,
    13,
    4,
    8,
    6,
    10,
    15,
    3,
    11,
    7,
    1,
    4,
    10,
    12,
    9,
    5,
    3,
    6,
    14,
    11,
    5,
    0,
    0,
    14,
    12,
    9,
    7,
    2,
    7,
    2,
    11,
    1,
    4,
    14,
    1,
    7,
    9,
    4,
    12,
    10,
    14,
    8,
    2,
    13,
    0,
    15,
    6,
    12,
    10,
    9,
    13,
    0,
    15,
    3,
    3,
    5,
    5,
    6,
    8,
    11
  ];
  utils$d.substitute = function substitute(inL, inR) {
    var out = 0;
    for (var i2 = 0; i2 < 4; i2++) {
      var b2 = inL >>> 18 - i2 * 6 & 63;
      var sb2 = sTable[i2 * 64 + b2];
      out <<= 4;
      out |= sb2;
    }
    for (var i2 = 0; i2 < 4; i2++) {
      var b2 = inR >>> 18 - i2 * 6 & 63;
      var sb2 = sTable[4 * 64 + i2 * 64 + b2];
      out <<= 4;
      out |= sb2;
    }
    return out >>> 0;
  };
  var permuteTable = [
    16,
    25,
    12,
    11,
    3,
    20,
    4,
    15,
    31,
    17,
    9,
    6,
    27,
    14,
    1,
    22,
    30,
    24,
    8,
    18,
    0,
    5,
    29,
    23,
    13,
    19,
    2,
    26,
    10,
    21,
    28,
    7
  ];
  utils$d.permute = function permute(num) {
    var out = 0;
    for (var i2 = 0; i2 < permuteTable.length; i2++) {
      out <<= 1;
      out |= num >>> permuteTable[i2] & 1;
    }
    return out >>> 0;
  };
  utils$d.padSplit = function padSplit(num, size2, group2) {
    var str = num.toString(2);
    while (str.length < size2)
      str = "0" + str;
    var out = [];
    for (var i2 = 0; i2 < size2; i2 += group2)
      out.push(str.slice(i2, i2 + group2));
    return out.join(" ");
  };
  return utils$d;
}
var minimalisticAssert;
var hasRequiredMinimalisticAssert;
function requireMinimalisticAssert() {
  if (hasRequiredMinimalisticAssert)
    return minimalisticAssert;
  hasRequiredMinimalisticAssert = 1;
  minimalisticAssert = assert;
  function assert(val, msg) {
    if (!val)
      throw new Error(msg || "Assertion failed");
  }
  assert.equal = function assertEqual(l2, r2, msg) {
    if (l2 != r2)
      throw new Error(msg || "Assertion failed: " + l2 + " != " + r2);
  };
  return minimalisticAssert;
}
var cipher;
var hasRequiredCipher;
function requireCipher() {
  if (hasRequiredCipher)
    return cipher;
  hasRequiredCipher = 1;
  var assert = requireMinimalisticAssert();
  function Cipher(options) {
    this.options = options;
    this.type = this.options.type;
    this.blockSize = 8;
    this._init();
    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
    this.padding = options.padding !== false;
  }
  cipher = Cipher;
  Cipher.prototype._init = function _init() {
  };
  Cipher.prototype.update = function update(data2) {
    if (data2.length === 0)
      return [];
    if (this.type === "decrypt")
      return this._updateDecrypt(data2);
    else
      return this._updateEncrypt(data2);
  };
  Cipher.prototype._buffer = function _buffer(data2, off) {
    var min2 = Math.min(this.buffer.length - this.bufferOff, data2.length - off);
    for (var i2 = 0; i2 < min2; i2++)
      this.buffer[this.bufferOff + i2] = data2[off + i2];
    this.bufferOff += min2;
    return min2;
  };
  Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
    this._update(this.buffer, 0, out, off);
    this.bufferOff = 0;
    return this.blockSize;
  };
  Cipher.prototype._updateEncrypt = function _updateEncrypt(data2) {
    var inputOff = 0;
    var outputOff = 0;
    var count = (this.bufferOff + data2.length) / this.blockSize | 0;
    var out = new Array(count * this.blockSize);
    if (this.bufferOff !== 0) {
      inputOff += this._buffer(data2, inputOff);
      if (this.bufferOff === this.buffer.length)
        outputOff += this._flushBuffer(out, outputOff);
    }
    var max2 = data2.length - (data2.length - inputOff) % this.blockSize;
    for (; inputOff < max2; inputOff += this.blockSize) {
      this._update(data2, inputOff, out, outputOff);
      outputOff += this.blockSize;
    }
    for (; inputOff < data2.length; inputOff++, this.bufferOff++)
      this.buffer[this.bufferOff] = data2[inputOff];
    return out;
  };
  Cipher.prototype._updateDecrypt = function _updateDecrypt(data2) {
    var inputOff = 0;
    var outputOff = 0;
    var count = Math.ceil((this.bufferOff + data2.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);
    for (; count > 0; count--) {
      inputOff += this._buffer(data2, inputOff);
      outputOff += this._flushBuffer(out, outputOff);
    }
    inputOff += this._buffer(data2, inputOff);
    return out;
  };
  Cipher.prototype.final = function final(buffer2) {
    var first2;
    if (buffer2)
      first2 = this.update(buffer2);
    var last2;
    if (this.type === "encrypt")
      last2 = this._finalEncrypt();
    else
      last2 = this._finalDecrypt();
    if (first2)
      return first2.concat(last2);
    else
      return last2;
  };
  Cipher.prototype._pad = function _pad(buffer2, off) {
    if (off === 0)
      return false;
    while (off < buffer2.length)
      buffer2[off++] = 0;
    return true;
  };
  Cipher.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff))
      return [];
    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
  };
  Cipher.prototype._unpad = function _unpad(buffer2) {
    return buffer2;
  };
  Cipher.prototype._finalDecrypt = function _finalDecrypt() {
    assert.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);
    return this._unpad(out);
  };
  return cipher;
}
var des;
var hasRequiredDes$1;
function requireDes$1() {
  if (hasRequiredDes$1)
    return des;
  hasRequiredDes$1 = 1;
  var assert = requireMinimalisticAssert();
  var inherits = requireInherits_browser();
  var utils2 = requireUtils$3();
  var Cipher = requireCipher();
  function DESState() {
    this.tmp = new Array(2);
    this.keys = null;
  }
  function DES(options) {
    Cipher.call(this, options);
    var state2 = new DESState();
    this._desState = state2;
    this.deriveKeys(state2, options.key);
  }
  inherits(DES, Cipher);
  des = DES;
  DES.create = function create(options) {
    return new DES(options);
  };
  var shiftTable = [
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1
  ];
  DES.prototype.deriveKeys = function deriveKeys(state2, key2) {
    state2.keys = new Array(16 * 2);
    assert.equal(key2.length, this.blockSize, "Invalid key length");
    var kL = utils2.readUInt32BE(key2, 0);
    var kR = utils2.readUInt32BE(key2, 4);
    utils2.pc1(kL, kR, state2.tmp, 0);
    kL = state2.tmp[0];
    kR = state2.tmp[1];
    for (var i2 = 0; i2 < state2.keys.length; i2 += 2) {
      var shift = shiftTable[i2 >>> 1];
      kL = utils2.r28shl(kL, shift);
      kR = utils2.r28shl(kR, shift);
      utils2.pc2(kL, kR, state2.keys, i2);
    }
  };
  DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state2 = this._desState;
    var l2 = utils2.readUInt32BE(inp, inOff);
    var r2 = utils2.readUInt32BE(inp, inOff + 4);
    utils2.ip(l2, r2, state2.tmp, 0);
    l2 = state2.tmp[0];
    r2 = state2.tmp[1];
    if (this.type === "encrypt")
      this._encrypt(state2, l2, r2, state2.tmp, 0);
    else
      this._decrypt(state2, l2, r2, state2.tmp, 0);
    l2 = state2.tmp[0];
    r2 = state2.tmp[1];
    utils2.writeUInt32BE(out, l2, outOff);
    utils2.writeUInt32BE(out, r2, outOff + 4);
  };
  DES.prototype._pad = function _pad(buffer2, off) {
    if (this.padding === false) {
      return false;
    }
    var value = buffer2.length - off;
    for (var i2 = off; i2 < buffer2.length; i2++)
      buffer2[i2] = value;
    return true;
  };
  DES.prototype._unpad = function _unpad(buffer2) {
    if (this.padding === false) {
      return buffer2;
    }
    var pad = buffer2[buffer2.length - 1];
    for (var i2 = buffer2.length - pad; i2 < buffer2.length; i2++)
      assert.equal(buffer2[i2], pad);
    return buffer2.slice(0, buffer2.length - pad);
  };
  DES.prototype._encrypt = function _encrypt(state2, lStart, rStart, out, off) {
    var l2 = lStart;
    var r2 = rStart;
    for (var i2 = 0; i2 < state2.keys.length; i2 += 2) {
      var keyL = state2.keys[i2];
      var keyR = state2.keys[i2 + 1];
      utils2.expand(r2, state2.tmp, 0);
      keyL ^= state2.tmp[0];
      keyR ^= state2.tmp[1];
      var s2 = utils2.substitute(keyL, keyR);
      var f2 = utils2.permute(s2);
      var t2 = r2;
      r2 = (l2 ^ f2) >>> 0;
      l2 = t2;
    }
    utils2.rip(r2, l2, out, off);
  };
  DES.prototype._decrypt = function _decrypt(state2, lStart, rStart, out, off) {
    var l2 = rStart;
    var r2 = lStart;
    for (var i2 = state2.keys.length - 2; i2 >= 0; i2 -= 2) {
      var keyL = state2.keys[i2];
      var keyR = state2.keys[i2 + 1];
      utils2.expand(l2, state2.tmp, 0);
      keyL ^= state2.tmp[0];
      keyR ^= state2.tmp[1];
      var s2 = utils2.substitute(keyL, keyR);
      var f2 = utils2.permute(s2);
      var t2 = l2;
      l2 = (r2 ^ f2) >>> 0;
      r2 = t2;
    }
    utils2.rip(l2, r2, out, off);
  };
  return des;
}
var cbc$1 = {};
var hasRequiredCbc$1;
function requireCbc$1() {
  if (hasRequiredCbc$1)
    return cbc$1;
  hasRequiredCbc$1 = 1;
  var assert = requireMinimalisticAssert();
  var inherits = requireInherits_browser();
  var proto = {};
  function CBCState(iv) {
    assert.equal(iv.length, 8, "Invalid IV length");
    this.iv = new Array(8);
    for (var i2 = 0; i2 < this.iv.length; i2++)
      this.iv[i2] = iv[i2];
  }
  function instantiate(Base) {
    function CBC(options) {
      Base.call(this, options);
      this._cbcInit();
    }
    inherits(CBC, Base);
    var keys2 = Object.keys(proto);
    for (var i2 = 0; i2 < keys2.length; i2++) {
      var key2 = keys2[i2];
      CBC.prototype[key2] = proto[key2];
    }
    CBC.create = function create(options) {
      return new CBC(options);
    };
    return CBC;
  }
  cbc$1.instantiate = instantiate;
  proto._cbcInit = function _cbcInit() {
    var state2 = new CBCState(this.options.iv);
    this._cbcState = state2;
  };
  proto._update = function _update(inp, inOff, out, outOff) {
    var state2 = this._cbcState;
    var superProto = this.constructor.super_.prototype;
    var iv = state2.iv;
    if (this.type === "encrypt") {
      for (var i2 = 0; i2 < this.blockSize; i2++)
        iv[i2] ^= inp[inOff + i2];
      superProto._update.call(this, iv, 0, out, outOff);
      for (var i2 = 0; i2 < this.blockSize; i2++)
        iv[i2] = out[outOff + i2];
    } else {
      superProto._update.call(this, inp, inOff, out, outOff);
      for (var i2 = 0; i2 < this.blockSize; i2++)
        out[outOff + i2] ^= iv[i2];
      for (var i2 = 0; i2 < this.blockSize; i2++)
        iv[i2] = inp[inOff + i2];
    }
  };
  return cbc$1;
}
var ede;
var hasRequiredEde;
function requireEde() {
  if (hasRequiredEde)
    return ede;
  hasRequiredEde = 1;
  var assert = requireMinimalisticAssert();
  var inherits = requireInherits_browser();
  var Cipher = requireCipher();
  var DES = requireDes$1();
  function EDEState(type2, key2) {
    assert.equal(key2.length, 24, "Invalid key length");
    var k1 = key2.slice(0, 8);
    var k2 = key2.slice(8, 16);
    var k3 = key2.slice(16, 24);
    if (type2 === "encrypt") {
      this.ciphers = [
        DES.create({ type: "encrypt", key: k1 }),
        DES.create({ type: "decrypt", key: k2 }),
        DES.create({ type: "encrypt", key: k3 })
      ];
    } else {
      this.ciphers = [
        DES.create({ type: "decrypt", key: k3 }),
        DES.create({ type: "encrypt", key: k2 }),
        DES.create({ type: "decrypt", key: k1 })
      ];
    }
  }
  function EDE(options) {
    Cipher.call(this, options);
    var state2 = new EDEState(this.type, this.options.key);
    this._edeState = state2;
  }
  inherits(EDE, Cipher);
  ede = EDE;
  EDE.create = function create(options) {
    return new EDE(options);
  };
  EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state2 = this._edeState;
    state2.ciphers[0]._update(inp, inOff, out, outOff);
    state2.ciphers[1]._update(out, outOff, out, outOff);
    state2.ciphers[2]._update(out, outOff, out, outOff);
  };
  EDE.prototype._pad = DES.prototype._pad;
  EDE.prototype._unpad = DES.prototype._unpad;
  return ede;
}
var hasRequiredDes;
function requireDes() {
  if (hasRequiredDes)
    return des$1;
  hasRequiredDes = 1;
  des$1.utils = requireUtils$3();
  des$1.Cipher = requireCipher();
  des$1.DES = requireDes$1();
  des$1.CBC = requireCbc$1();
  des$1.EDE = requireEde();
  return des$1;
}
var browserifyDes;
var hasRequiredBrowserifyDes;
function requireBrowserifyDes() {
  if (hasRequiredBrowserifyDes)
    return browserifyDes;
  hasRequiredBrowserifyDes = 1;
  var CipherBase = requireCipherBase();
  var des2 = requireDes();
  var inherits = requireInherits_browser();
  var Buffer = requireSafeBuffer$1().Buffer;
  var modes2 = {
    "des-ede3-cbc": des2.CBC.instantiate(des2.EDE),
    "des-ede3": des2.EDE,
    "des-ede-cbc": des2.CBC.instantiate(des2.EDE),
    "des-ede": des2.EDE,
    "des-cbc": des2.CBC.instantiate(des2.DES),
    "des-ecb": des2.DES
  };
  modes2.des = modes2["des-cbc"];
  modes2.des3 = modes2["des-ede3-cbc"];
  browserifyDes = DES;
  inherits(DES, CipherBase);
  function DES(opts) {
    CipherBase.call(this);
    var modeName = opts.mode.toLowerCase();
    var mode = modes2[modeName];
    var type2;
    if (opts.decrypt) {
      type2 = "decrypt";
    } else {
      type2 = "encrypt";
    }
    var key2 = opts.key;
    if (!Buffer.isBuffer(key2)) {
      key2 = Buffer.from(key2);
    }
    if (modeName === "des-ede" || modeName === "des-ede-cbc") {
      key2 = Buffer.concat([key2, key2.slice(0, 8)]);
    }
    var iv = opts.iv;
    if (!Buffer.isBuffer(iv)) {
      iv = Buffer.from(iv);
    }
    this._des = mode.create({
      key: key2,
      iv,
      type: type2
    });
  }
  DES.prototype._update = function(data2) {
    return Buffer.from(this._des.update(data2));
  };
  DES.prototype._final = function() {
    return Buffer.from(this._des.final());
  };
  return browserifyDes;
}
var browser$6 = {};
var encrypter = {};
var ecb = {};
var hasRequiredEcb;
function requireEcb() {
  if (hasRequiredEcb)
    return ecb;
  hasRequiredEcb = 1;
  ecb.encrypt = function(self2, block) {
    return self2._cipher.encryptBlock(block);
  };
  ecb.decrypt = function(self2, block) {
    return self2._cipher.decryptBlock(block);
  };
  return ecb;
}
var cbc = {};
var bufferXor;
var hasRequiredBufferXor;
function requireBufferXor() {
  if (hasRequiredBufferXor)
    return bufferXor;
  hasRequiredBufferXor = 1;
  bufferXor = function xor2(a2, b2) {
    var length = Math.min(a2.length, b2.length);
    var buffer2 = new buffer$1.Buffer(length);
    for (var i2 = 0; i2 < length; ++i2) {
      buffer2[i2] = a2[i2] ^ b2[i2];
    }
    return buffer2;
  };
  return bufferXor;
}
var hasRequiredCbc;
function requireCbc() {
  if (hasRequiredCbc)
    return cbc;
  hasRequiredCbc = 1;
  var xor2 = requireBufferXor();
  cbc.encrypt = function(self2, block) {
    var data2 = xor2(block, self2._prev);
    self2._prev = self2._cipher.encryptBlock(data2);
    return self2._prev;
  };
  cbc.decrypt = function(self2, block) {
    var pad = self2._prev;
    self2._prev = block;
    var out = self2._cipher.decryptBlock(block);
    return xor2(out, pad);
  };
  return cbc;
}
var cfb = {};
var hasRequiredCfb;
function requireCfb() {
  if (hasRequiredCfb)
    return cfb;
  hasRequiredCfb = 1;
  var Buffer = requireSafeBuffer$1().Buffer;
  var xor2 = requireBufferXor();
  function encryptStart(self2, data2, decrypt) {
    var len2 = data2.length;
    var out = xor2(data2, self2._cache);
    self2._cache = self2._cache.slice(len2);
    self2._prev = Buffer.concat([self2._prev, decrypt ? data2 : out]);
    return out;
  }
  cfb.encrypt = function(self2, data2, decrypt) {
    var out = Buffer.allocUnsafe(0);
    var len2;
    while (data2.length) {
      if (self2._cache.length === 0) {
        self2._cache = self2._cipher.encryptBlock(self2._prev);
        self2._prev = Buffer.allocUnsafe(0);
      }
      if (self2._cache.length <= data2.length) {
        len2 = self2._cache.length;
        out = Buffer.concat([out, encryptStart(self2, data2.slice(0, len2), decrypt)]);
        data2 = data2.slice(len2);
      } else {
        out = Buffer.concat([out, encryptStart(self2, data2, decrypt)]);
        break;
      }
    }
    return out;
  };
  return cfb;
}
var cfb8 = {};
var hasRequiredCfb8;
function requireCfb8() {
  if (hasRequiredCfb8)
    return cfb8;
  hasRequiredCfb8 = 1;
  var Buffer = requireSafeBuffer$1().Buffer;
  function encryptByte(self2, byteParam, decrypt) {
    var pad = self2._cipher.encryptBlock(self2._prev);
    var out = pad[0] ^ byteParam;
    self2._prev = Buffer.concat([
      self2._prev.slice(1),
      Buffer.from([decrypt ? byteParam : out])
    ]);
    return out;
  }
  cfb8.encrypt = function(self2, chunk, decrypt) {
    var len2 = chunk.length;
    var out = Buffer.allocUnsafe(len2);
    var i2 = -1;
    while (++i2 < len2) {
      out[i2] = encryptByte(self2, chunk[i2], decrypt);
    }
    return out;
  };
  return cfb8;
}
var cfb1 = {};
var hasRequiredCfb1;
function requireCfb1() {
  if (hasRequiredCfb1)
    return cfb1;
  hasRequiredCfb1 = 1;
  var Buffer = requireSafeBuffer$1().Buffer;
  function encryptByte(self2, byteParam, decrypt) {
    var pad;
    var i2 = -1;
    var len2 = 8;
    var out = 0;
    var bit, value;
    while (++i2 < len2) {
      pad = self2._cipher.encryptBlock(self2._prev);
      bit = byteParam & 1 << 7 - i2 ? 128 : 0;
      value = pad[0] ^ bit;
      out += (value & 128) >> i2 % 8;
      self2._prev = shiftIn(self2._prev, decrypt ? bit : value);
    }
    return out;
  }
  function shiftIn(buffer2, value) {
    var len2 = buffer2.length;
    var i2 = -1;
    var out = Buffer.allocUnsafe(buffer2.length);
    buffer2 = Buffer.concat([buffer2, Buffer.from([value])]);
    while (++i2 < len2) {
      out[i2] = buffer2[i2] << 1 | buffer2[i2 + 1] >> 7;
    }
    return out;
  }
  cfb1.encrypt = function(self2, chunk, decrypt) {
    var len2 = chunk.length;
    var out = Buffer.allocUnsafe(len2);
    var i2 = -1;
    while (++i2 < len2) {
      out[i2] = encryptByte(self2, chunk[i2], decrypt);
    }
    return out;
  };
  return cfb1;
}
var ofb = {};
var hasRequiredOfb;
function requireOfb() {
  if (hasRequiredOfb)
    return ofb;
  hasRequiredOfb = 1;
  var xor2 = requireBufferXor();
  function getBlock(self2) {
    self2._prev = self2._cipher.encryptBlock(self2._prev);
    return self2._prev;
  }
  ofb.encrypt = function(self2, chunk) {
    while (self2._cache.length < chunk.length) {
      self2._cache = buffer$1.Buffer.concat([self2._cache, getBlock(self2)]);
    }
    var pad = self2._cache.slice(0, chunk.length);
    self2._cache = self2._cache.slice(chunk.length);
    return xor2(chunk, pad);
  };
  return ofb;
}
var ctr = {};
var incr32_1;
var hasRequiredIncr32;
function requireIncr32() {
  if (hasRequiredIncr32)
    return incr32_1;
  hasRequiredIncr32 = 1;
  function incr32(iv) {
    var len2 = iv.length;
    var item;
    while (len2--) {
      item = iv.readUInt8(len2);
      if (item === 255) {
        iv.writeUInt8(0, len2);
      } else {
        item++;
        iv.writeUInt8(item, len2);
        break;
      }
    }
  }
  incr32_1 = incr32;
  return incr32_1;
}
var hasRequiredCtr;
function requireCtr() {
  if (hasRequiredCtr)
    return ctr;
  hasRequiredCtr = 1;
  var xor2 = requireBufferXor();
  var Buffer = requireSafeBuffer$1().Buffer;
  var incr32 = requireIncr32();
  function getBlock(self2) {
    var out = self2._cipher.encryptBlockRaw(self2._prev);
    incr32(self2._prev);
    return out;
  }
  var blockSize = 16;
  ctr.encrypt = function(self2, chunk) {
    var chunkNum = Math.ceil(chunk.length / blockSize);
    var start = self2._cache.length;
    self2._cache = Buffer.concat([
      self2._cache,
      Buffer.allocUnsafe(chunkNum * blockSize)
    ]);
    for (var i2 = 0; i2 < chunkNum; i2++) {
      var out = getBlock(self2);
      var offset = start + i2 * blockSize;
      self2._cache.writeUInt32BE(out[0], offset + 0);
      self2._cache.writeUInt32BE(out[1], offset + 4);
      self2._cache.writeUInt32BE(out[2], offset + 8);
      self2._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad = self2._cache.slice(0, chunk.length);
    self2._cache = self2._cache.slice(chunk.length);
    return xor2(chunk, pad);
  };
  return ctr;
}
const aes128 = {
  cipher: "AES",
  key: 128,
  iv: 16,
  mode: "CBC",
  type: "block"
};
const aes192 = {
  cipher: "AES",
  key: 192,
  iv: 16,
  mode: "CBC",
  type: "block"
};
const aes256 = {
  cipher: "AES",
  key: 256,
  iv: 16,
  mode: "CBC",
  type: "block"
};
const require$$2$1 = {
  "aes-128-ecb": {
    cipher: "AES",
    key: 128,
    iv: 0,
    mode: "ECB",
    type: "block"
  },
  "aes-192-ecb": {
    cipher: "AES",
    key: 192,
    iv: 0,
    mode: "ECB",
    type: "block"
  },
  "aes-256-ecb": {
    cipher: "AES",
    key: 256,
    iv: 0,
    mode: "ECB",
    type: "block"
  },
  "aes-128-cbc": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CBC",
    type: "block"
  },
  "aes-192-cbc": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CBC",
    type: "block"
  },
  "aes-256-cbc": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CBC",
    type: "block"
  },
  aes128,
  aes192,
  aes256,
  "aes-128-cfb": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CFB",
    type: "stream"
  },
  "aes-192-cfb": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CFB",
    type: "stream"
  },
  "aes-256-cfb": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CFB",
    type: "stream"
  },
  "aes-128-cfb8": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CFB8",
    type: "stream"
  },
  "aes-192-cfb8": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CFB8",
    type: "stream"
  },
  "aes-256-cfb8": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CFB8",
    type: "stream"
  },
  "aes-128-cfb1": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CFB1",
    type: "stream"
  },
  "aes-192-cfb1": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CFB1",
    type: "stream"
  },
  "aes-256-cfb1": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CFB1",
    type: "stream"
  },
  "aes-128-ofb": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "OFB",
    type: "stream"
  },
  "aes-192-ofb": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "OFB",
    type: "stream"
  },
  "aes-256-ofb": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "OFB",
    type: "stream"
  },
  "aes-128-ctr": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CTR",
    type: "stream"
  },
  "aes-192-ctr": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CTR",
    type: "stream"
  },
  "aes-256-ctr": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CTR",
    type: "stream"
  },
  "aes-128-gcm": {
    cipher: "AES",
    key: 128,
    iv: 12,
    mode: "GCM",
    type: "auth"
  },
  "aes-192-gcm": {
    cipher: "AES",
    key: 192,
    iv: 12,
    mode: "GCM",
    type: "auth"
  },
  "aes-256-gcm": {
    cipher: "AES",
    key: 256,
    iv: 12,
    mode: "GCM",
    type: "auth"
  }
};
var modes_1;
var hasRequiredModes$1;
function requireModes$1() {
  if (hasRequiredModes$1)
    return modes_1;
  hasRequiredModes$1 = 1;
  var modeModules = {
    ECB: requireEcb(),
    CBC: requireCbc(),
    CFB: requireCfb(),
    CFB8: requireCfb8(),
    CFB1: requireCfb1(),
    OFB: requireOfb(),
    CTR: requireCtr(),
    GCM: requireCtr()
  };
  var modes2 = require$$2$1;
  for (var key2 in modes2) {
    modes2[key2].module = modeModules[modes2[key2].mode];
  }
  modes_1 = modes2;
  return modes_1;
}
var aes = {};
var hasRequiredAes;
function requireAes() {
  if (hasRequiredAes)
    return aes;
  hasRequiredAes = 1;
  var Buffer = requireSafeBuffer$1().Buffer;
  function asUInt32Array(buf) {
    if (!Buffer.isBuffer(buf))
      buf = Buffer.from(buf);
    var len2 = buf.length / 4 | 0;
    var out = new Array(len2);
    for (var i2 = 0; i2 < len2; i2++) {
      out[i2] = buf.readUInt32BE(i2 * 4);
    }
    return out;
  }
  function scrubVec(v2) {
    for (var i2 = 0; i2 < v2.length; v2++) {
      v2[i2] = 0;
    }
  }
  function cryptBlock(M2, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];
    var s0 = M2[0] ^ keySchedule[0];
    var s1 = M2[1] ^ keySchedule[1];
    var s2 = M2[2] ^ keySchedule[2];
    var s3 = M2[3] ^ keySchedule[3];
    var t0, t1, t2, t3;
    var ksRow = 4;
    for (var round2 = 1; round2 < nRounds; round2++) {
      t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 255] ^ SUB_MIX2[s2 >>> 8 & 255] ^ SUB_MIX3[s3 & 255] ^ keySchedule[ksRow++];
      t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 255] ^ SUB_MIX2[s3 >>> 8 & 255] ^ SUB_MIX3[s0 & 255] ^ keySchedule[ksRow++];
      t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 255] ^ SUB_MIX2[s0 >>> 8 & 255] ^ SUB_MIX3[s1 & 255] ^ keySchedule[ksRow++];
      t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 255] ^ SUB_MIX2[s1 >>> 8 & 255] ^ SUB_MIX3[s2 & 255] ^ keySchedule[ksRow++];
      s0 = t0;
      s1 = t1;
      s2 = t2;
      s3 = t3;
    }
    t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s2 >>> 8 & 255] << 8 | SBOX[s3 & 255]) ^ keySchedule[ksRow++];
    t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];
    t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];
    t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s2 & 255]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t2 = t2 >>> 0;
    t3 = t3 >>> 0;
    return [t0, t1, t2, t3];
  }
  var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
  var G2 = function() {
    var d2 = new Array(256);
    for (var j2 = 0; j2 < 256; j2++) {
      if (j2 < 128) {
        d2[j2] = j2 << 1;
      } else {
        d2[j2] = j2 << 1 ^ 283;
      }
    }
    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [[], [], [], []];
    var INV_SUB_MIX = [[], [], [], []];
    var x2 = 0;
    var xi2 = 0;
    for (var i2 = 0; i2 < 256; ++i2) {
      var sx = xi2 ^ xi2 << 1 ^ xi2 << 2 ^ xi2 << 3 ^ xi2 << 4;
      sx = sx >>> 8 ^ sx & 255 ^ 99;
      SBOX[x2] = sx;
      INV_SBOX[sx] = x2;
      var x22 = d2[x2];
      var x4 = d2[x22];
      var x8 = d2[x4];
      var t2 = d2[sx] * 257 ^ sx * 16843008;
      SUB_MIX[0][x2] = t2 << 24 | t2 >>> 8;
      SUB_MIX[1][x2] = t2 << 16 | t2 >>> 16;
      SUB_MIX[2][x2] = t2 << 8 | t2 >>> 24;
      SUB_MIX[3][x2] = t2;
      t2 = x8 * 16843009 ^ x4 * 65537 ^ x22 * 257 ^ x2 * 16843008;
      INV_SUB_MIX[0][sx] = t2 << 24 | t2 >>> 8;
      INV_SUB_MIX[1][sx] = t2 << 16 | t2 >>> 16;
      INV_SUB_MIX[2][sx] = t2 << 8 | t2 >>> 24;
      INV_SUB_MIX[3][sx] = t2;
      if (x2 === 0) {
        x2 = xi2 = 1;
      } else {
        x2 = x22 ^ d2[d2[d2[x8 ^ x22]]];
        xi2 ^= d2[d2[xi2]];
      }
    }
    return {
      SBOX,
      INV_SBOX,
      SUB_MIX,
      INV_SUB_MIX
    };
  }();
  function AES(key2) {
    this._key = asUInt32Array(key2);
    this._reset();
  }
  AES.blockSize = 4 * 4;
  AES.keySize = 256 / 8;
  AES.prototype.blockSize = AES.blockSize;
  AES.prototype.keySize = AES.keySize;
  AES.prototype._reset = function() {
    var keyWords = this._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;
    var keySchedule = [];
    for (var k2 = 0; k2 < keySize; k2++) {
      keySchedule[k2] = keyWords[k2];
    }
    for (k2 = keySize; k2 < ksRows; k2++) {
      var t2 = keySchedule[k2 - 1];
      if (k2 % keySize === 0) {
        t2 = t2 << 8 | t2 >>> 24;
        t2 = G2.SBOX[t2 >>> 24] << 24 | G2.SBOX[t2 >>> 16 & 255] << 16 | G2.SBOX[t2 >>> 8 & 255] << 8 | G2.SBOX[t2 & 255];
        t2 ^= RCON[k2 / keySize | 0] << 24;
      } else if (keySize > 6 && k2 % keySize === 4) {
        t2 = G2.SBOX[t2 >>> 24] << 24 | G2.SBOX[t2 >>> 16 & 255] << 16 | G2.SBOX[t2 >>> 8 & 255] << 8 | G2.SBOX[t2 & 255];
      }
      keySchedule[k2] = keySchedule[k2 - keySize] ^ t2;
    }
    var invKeySchedule = [];
    for (var ik2 = 0; ik2 < ksRows; ik2++) {
      var ksR = ksRows - ik2;
      var tt = keySchedule[ksR - (ik2 % 4 ? 0 : 4)];
      if (ik2 < 4 || ksR <= 4) {
        invKeySchedule[ik2] = tt;
      } else {
        invKeySchedule[ik2] = G2.INV_SUB_MIX[0][G2.SBOX[tt >>> 24]] ^ G2.INV_SUB_MIX[1][G2.SBOX[tt >>> 16 & 255]] ^ G2.INV_SUB_MIX[2][G2.SBOX[tt >>> 8 & 255]] ^ G2.INV_SUB_MIX[3][G2.SBOX[tt & 255]];
      }
    }
    this._nRounds = nRounds;
    this._keySchedule = keySchedule;
    this._invKeySchedule = invKeySchedule;
  };
  AES.prototype.encryptBlockRaw = function(M2) {
    M2 = asUInt32Array(M2);
    return cryptBlock(M2, this._keySchedule, G2.SUB_MIX, G2.SBOX, this._nRounds);
  };
  AES.prototype.encryptBlock = function(M2) {
    var out = this.encryptBlockRaw(M2);
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf;
  };
  AES.prototype.decryptBlock = function(M2) {
    M2 = asUInt32Array(M2);
    var m1 = M2[1];
    M2[1] = M2[3];
    M2[3] = m1;
    var out = cryptBlock(M2, this._invKeySchedule, G2.INV_SUB_MIX, G2.INV_SBOX, this._nRounds);
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf;
  };
  AES.prototype.scrub = function() {
    scrubVec(this._keySchedule);
    scrubVec(this._invKeySchedule);
    scrubVec(this._key);
  };
  aes.AES = AES;
  return aes;
}
var ghash;
var hasRequiredGhash;
function requireGhash() {
  if (hasRequiredGhash)
    return ghash;
  hasRequiredGhash = 1;
  var Buffer = requireSafeBuffer$1().Buffer;
  var ZEROES = Buffer.alloc(16, 0);
  function toArray2(buf) {
    return [
      buf.readUInt32BE(0),
      buf.readUInt32BE(4),
      buf.readUInt32BE(8),
      buf.readUInt32BE(12)
    ];
  }
  function fromArray2(out) {
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf;
  }
  function GHASH(key2) {
    this.h = key2;
    this.state = Buffer.alloc(16, 0);
    this.cache = Buffer.allocUnsafe(0);
  }
  GHASH.prototype.ghash = function(block) {
    var i2 = -1;
    while (++i2 < block.length) {
      this.state[i2] ^= block[i2];
    }
    this._multiply();
  };
  GHASH.prototype._multiply = function() {
    var Vi2 = toArray2(this.h);
    var Zi2 = [0, 0, 0, 0];
    var j2, xi2, lsbVi;
    var i2 = -1;
    while (++i2 < 128) {
      xi2 = (this.state[~~(i2 / 8)] & 1 << 7 - i2 % 8) !== 0;
      if (xi2) {
        Zi2[0] ^= Vi2[0];
        Zi2[1] ^= Vi2[1];
        Zi2[2] ^= Vi2[2];
        Zi2[3] ^= Vi2[3];
      }
      lsbVi = (Vi2[3] & 1) !== 0;
      for (j2 = 3; j2 > 0; j2--) {
        Vi2[j2] = Vi2[j2] >>> 1 | (Vi2[j2 - 1] & 1) << 31;
      }
      Vi2[0] = Vi2[0] >>> 1;
      if (lsbVi) {
        Vi2[0] = Vi2[0] ^ 225 << 24;
      }
    }
    this.state = fromArray2(Zi2);
  };
  GHASH.prototype.update = function(buf) {
    this.cache = Buffer.concat([this.cache, buf]);
    var chunk;
    while (this.cache.length >= 16) {
      chunk = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      this.ghash(chunk);
    }
  };
  GHASH.prototype.final = function(abl, bl2) {
    if (this.cache.length) {
      this.ghash(Buffer.concat([this.cache, ZEROES], 16));
    }
    this.ghash(fromArray2([0, abl, 0, bl2]));
    return this.state;
  };
  ghash = GHASH;
  return ghash;
}
var authCipher;
var hasRequiredAuthCipher;
function requireAuthCipher() {
  if (hasRequiredAuthCipher)
    return authCipher;
  hasRequiredAuthCipher = 1;
  var aes2 = requireAes();
  var Buffer = requireSafeBuffer$1().Buffer;
  var Transform = requireCipherBase();
  var inherits = requireInherits_browser();
  var GHASH = requireGhash();
  var xor2 = requireBufferXor();
  var incr32 = requireIncr32();
  function xorTest(a2, b2) {
    var out = 0;
    if (a2.length !== b2.length)
      out++;
    var len2 = Math.min(a2.length, b2.length);
    for (var i2 = 0; i2 < len2; ++i2) {
      out += a2[i2] ^ b2[i2];
    }
    return out;
  }
  function calcIv(self2, iv, ck2) {
    if (iv.length === 12) {
      self2._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])]);
      return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])]);
    }
    var ghash2 = new GHASH(ck2);
    var len2 = iv.length;
    var toPad = len2 % 16;
    ghash2.update(iv);
    if (toPad) {
      toPad = 16 - toPad;
      ghash2.update(Buffer.alloc(toPad, 0));
    }
    ghash2.update(Buffer.alloc(8, 0));
    var ivBits = len2 * 8;
    var tail2 = Buffer.alloc(8);
    tail2.writeUIntBE(ivBits, 0, 8);
    ghash2.update(tail2);
    self2._finID = ghash2.state;
    var out = Buffer.from(self2._finID);
    incr32(out);
    return out;
  }
  function StreamCipher(mode, key2, iv, decrypt) {
    Transform.call(this);
    var h2 = Buffer.alloc(4, 0);
    this._cipher = new aes2.AES(key2);
    var ck2 = this._cipher.encryptBlock(h2);
    this._ghash = new GHASH(ck2);
    iv = calcIv(this, iv, ck2);
    this._prev = Buffer.from(iv);
    this._cache = Buffer.allocUnsafe(0);
    this._secCache = Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._alen = 0;
    this._len = 0;
    this._mode = mode;
    this._authTag = null;
    this._called = false;
  }
  inherits(StreamCipher, Transform);
  StreamCipher.prototype._update = function(chunk) {
    if (!this._called && this._alen) {
      var rump = 16 - this._alen % 16;
      if (rump < 16) {
        rump = Buffer.alloc(rump, 0);
        this._ghash.update(rump);
      }
    }
    this._called = true;
    var out = this._mode.encrypt(this, chunk);
    if (this._decrypt) {
      this._ghash.update(chunk);
    } else {
      this._ghash.update(out);
    }
    this._len += chunk.length;
    return out;
  };
  StreamCipher.prototype._final = function() {
    if (this._decrypt && !this._authTag)
      throw new Error("Unsupported state or unable to authenticate data");
    var tag = xor2(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
    if (this._decrypt && xorTest(tag, this._authTag))
      throw new Error("Unsupported state or unable to authenticate data");
    this._authTag = tag;
    this._cipher.scrub();
  };
  StreamCipher.prototype.getAuthTag = function getAuthTag() {
    if (this._decrypt || !Buffer.isBuffer(this._authTag))
      throw new Error("Attempting to get auth tag in unsupported state");
    return this._authTag;
  };
  StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
    if (!this._decrypt)
      throw new Error("Attempting to set auth tag in unsupported state");
    this._authTag = tag;
  };
  StreamCipher.prototype.setAAD = function setAAD(buf) {
    if (this._called)
      throw new Error("Attempting to set AAD in unsupported state");
    this._ghash.update(buf);
    this._alen += buf.length;
  };
  authCipher = StreamCipher;
  return authCipher;
}
var streamCipher;
var hasRequiredStreamCipher;
function requireStreamCipher() {
  if (hasRequiredStreamCipher)
    return streamCipher;
  hasRequiredStreamCipher = 1;
  var aes2 = requireAes();
  var Buffer = requireSafeBuffer$1().Buffer;
  var Transform = requireCipherBase();
  var inherits = requireInherits_browser();
  function StreamCipher(mode, key2, iv, decrypt) {
    Transform.call(this);
    this._cipher = new aes2.AES(key2);
    this._prev = Buffer.from(iv);
    this._cache = Buffer.allocUnsafe(0);
    this._secCache = Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._mode = mode;
  }
  inherits(StreamCipher, Transform);
  StreamCipher.prototype._update = function(chunk) {
    return this._mode.encrypt(this, chunk, this._decrypt);
  };
  StreamCipher.prototype._final = function() {
    this._cipher.scrub();
  };
  streamCipher = StreamCipher;
  return streamCipher;
}
var evp_bytestokey;
var hasRequiredEvp_bytestokey;
function requireEvp_bytestokey() {
  if (hasRequiredEvp_bytestokey)
    return evp_bytestokey;
  hasRequiredEvp_bytestokey = 1;
  var Buffer = requireSafeBuffer$1().Buffer;
  var MD5 = requireMd5_js();
  function EVP_BytesToKey(password, salt, keyBits, ivLen) {
    if (!Buffer.isBuffer(password))
      password = Buffer.from(password, "binary");
    if (salt) {
      if (!Buffer.isBuffer(salt))
        salt = Buffer.from(salt, "binary");
      if (salt.length !== 8)
        throw new RangeError("salt should be Buffer with 8 byte length");
    }
    var keyLen = keyBits / 8;
    var key2 = Buffer.alloc(keyLen);
    var iv = Buffer.alloc(ivLen || 0);
    var tmp = Buffer.alloc(0);
    while (keyLen > 0 || ivLen > 0) {
      var hash2 = new MD5();
      hash2.update(tmp);
      hash2.update(password);
      if (salt)
        hash2.update(salt);
      tmp = hash2.digest();
      var used = 0;
      if (keyLen > 0) {
        var keyStart = key2.length - keyLen;
        used = Math.min(keyLen, tmp.length);
        tmp.copy(key2, keyStart, 0, used);
        keyLen -= used;
      }
      if (used < tmp.length && ivLen > 0) {
        var ivStart = iv.length - ivLen;
        var length = Math.min(ivLen, tmp.length - used);
        tmp.copy(iv, ivStart, used, used + length);
        ivLen -= length;
      }
    }
    tmp.fill(0);
    return { key: key2, iv };
  }
  evp_bytestokey = EVP_BytesToKey;
  return evp_bytestokey;
}
var hasRequiredEncrypter;
function requireEncrypter() {
  if (hasRequiredEncrypter)
    return encrypter;
  hasRequiredEncrypter = 1;
  var MODES = requireModes$1();
  var AuthCipher = requireAuthCipher();
  var Buffer = requireSafeBuffer$1().Buffer;
  var StreamCipher = requireStreamCipher();
  var Transform = requireCipherBase();
  var aes2 = requireAes();
  var ebtk = requireEvp_bytestokey();
  var inherits = requireInherits_browser();
  function Cipher(mode, key2, iv) {
    Transform.call(this);
    this._cache = new Splitter();
    this._cipher = new aes2.AES(key2);
    this._prev = Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
  }
  inherits(Cipher, Transform);
  Cipher.prototype._update = function(data2) {
    this._cache.add(data2);
    var chunk;
    var thing;
    var out = [];
    while (chunk = this._cache.get()) {
      thing = this._mode.encrypt(this, chunk);
      out.push(thing);
    }
    return Buffer.concat(out);
  };
  var PADDING = Buffer.alloc(16, 16);
  Cipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) {
      chunk = this._mode.encrypt(this, chunk);
      this._cipher.scrub();
      return chunk;
    }
    if (!chunk.equals(PADDING)) {
      this._cipher.scrub();
      throw new Error("data not multiple of block length");
    }
  };
  Cipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
  };
  function Splitter() {
    this.cache = Buffer.allocUnsafe(0);
  }
  Splitter.prototype.add = function(data2) {
    this.cache = Buffer.concat([this.cache, data2]);
  };
  Splitter.prototype.get = function() {
    if (this.cache.length > 15) {
      var out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out;
    }
    return null;
  };
  Splitter.prototype.flush = function() {
    var len2 = 16 - this.cache.length;
    var padBuff = Buffer.allocUnsafe(len2);
    var i2 = -1;
    while (++i2 < len2) {
      padBuff.writeUInt8(len2, i2);
    }
    return Buffer.concat([this.cache, padBuff]);
  };
  function createCipheriv(suite, password, iv) {
    var config = MODES[suite.toLowerCase()];
    if (!config)
      throw new TypeError("invalid suite type");
    if (typeof password === "string")
      password = Buffer.from(password);
    if (password.length !== config.key / 8)
      throw new TypeError("invalid key length " + password.length);
    if (typeof iv === "string")
      iv = Buffer.from(iv);
    if (config.mode !== "GCM" && iv.length !== config.iv)
      throw new TypeError("invalid iv length " + iv.length);
    if (config.type === "stream") {
      return new StreamCipher(config.module, password, iv);
    } else if (config.type === "auth") {
      return new AuthCipher(config.module, password, iv);
    }
    return new Cipher(config.module, password, iv);
  }
  function createCipher(suite, password) {
    var config = MODES[suite.toLowerCase()];
    if (!config)
      throw new TypeError("invalid suite type");
    var keys2 = ebtk(password, false, config.key, config.iv);
    return createCipheriv(suite, keys2.key, keys2.iv);
  }
  encrypter.createCipheriv = createCipheriv;
  encrypter.createCipher = createCipher;
  return encrypter;
}
var decrypter = {};
var hasRequiredDecrypter;
function requireDecrypter() {
  if (hasRequiredDecrypter)
    return decrypter;
  hasRequiredDecrypter = 1;
  var AuthCipher = requireAuthCipher();
  var Buffer = requireSafeBuffer$1().Buffer;
  var MODES = requireModes$1();
  var StreamCipher = requireStreamCipher();
  var Transform = requireCipherBase();
  var aes2 = requireAes();
  var ebtk = requireEvp_bytestokey();
  var inherits = requireInherits_browser();
  function Decipher(mode, key2, iv) {
    Transform.call(this);
    this._cache = new Splitter();
    this._last = void 0;
    this._cipher = new aes2.AES(key2);
    this._prev = Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
  }
  inherits(Decipher, Transform);
  Decipher.prototype._update = function(data2) {
    this._cache.add(data2);
    var chunk;
    var thing;
    var out = [];
    while (chunk = this._cache.get(this._autopadding)) {
      thing = this._mode.decrypt(this, chunk);
      out.push(thing);
    }
    return Buffer.concat(out);
  };
  Decipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) {
      return unpad(this._mode.decrypt(this, chunk));
    } else if (chunk) {
      throw new Error("data not multiple of block length");
    }
  };
  Decipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
  };
  function Splitter() {
    this.cache = Buffer.allocUnsafe(0);
  }
  Splitter.prototype.add = function(data2) {
    this.cache = Buffer.concat([this.cache, data2]);
  };
  Splitter.prototype.get = function(autoPadding) {
    var out;
    if (autoPadding) {
      if (this.cache.length > 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
      }
    } else {
      if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
      }
    }
    return null;
  };
  Splitter.prototype.flush = function() {
    if (this.cache.length)
      return this.cache;
  };
  function unpad(last2) {
    var padded = last2[15];
    if (padded < 1 || padded > 16) {
      throw new Error("unable to decrypt data");
    }
    var i2 = -1;
    while (++i2 < padded) {
      if (last2[i2 + (16 - padded)] !== padded) {
        throw new Error("unable to decrypt data");
      }
    }
    if (padded === 16)
      return;
    return last2.slice(0, 16 - padded);
  }
  function createDecipheriv(suite, password, iv) {
    var config = MODES[suite.toLowerCase()];
    if (!config)
      throw new TypeError("invalid suite type");
    if (typeof iv === "string")
      iv = Buffer.from(iv);
    if (config.mode !== "GCM" && iv.length !== config.iv)
      throw new TypeError("invalid iv length " + iv.length);
    if (typeof password === "string")
      password = Buffer.from(password);
    if (password.length !== config.key / 8)
      throw new TypeError("invalid key length " + password.length);
    if (config.type === "stream") {
      return new StreamCipher(config.module, password, iv, true);
    } else if (config.type === "auth") {
      return new AuthCipher(config.module, password, iv, true);
    }
    return new Decipher(config.module, password, iv);
  }
  function createDecipher(suite, password) {
    var config = MODES[suite.toLowerCase()];
    if (!config)
      throw new TypeError("invalid suite type");
    var keys2 = ebtk(password, false, config.key, config.iv);
    return createDecipheriv(suite, keys2.key, keys2.iv);
  }
  decrypter.createDecipher = createDecipher;
  decrypter.createDecipheriv = createDecipheriv;
  return decrypter;
}
var hasRequiredBrowser$6;
function requireBrowser$6() {
  if (hasRequiredBrowser$6)
    return browser$6;
  hasRequiredBrowser$6 = 1;
  var ciphers = requireEncrypter();
  var deciphers = requireDecrypter();
  var modes2 = require$$2$1;
  function getCiphers() {
    return Object.keys(modes2);
  }
  browser$6.createCipher = browser$6.Cipher = ciphers.createCipher;
  browser$6.createCipheriv = browser$6.Cipheriv = ciphers.createCipheriv;
  browser$6.createDecipher = browser$6.Decipher = deciphers.createDecipher;
  browser$6.createDecipheriv = browser$6.Decipheriv = deciphers.createDecipheriv;
  browser$6.listCiphers = browser$6.getCiphers = getCiphers;
  return browser$6;
}
var modes = {};
var hasRequiredModes;
function requireModes() {
  if (hasRequiredModes)
    return modes;
  hasRequiredModes = 1;
  (function(exports2) {
    exports2["des-ecb"] = {
      key: 8,
      iv: 0
    };
    exports2["des-cbc"] = exports2.des = {
      key: 8,
      iv: 8
    };
    exports2["des-ede3-cbc"] = exports2.des3 = {
      key: 24,
      iv: 8
    };
    exports2["des-ede3"] = {
      key: 24,
      iv: 0
    };
    exports2["des-ede-cbc"] = {
      key: 16,
      iv: 8
    };
    exports2["des-ede"] = {
      key: 16,
      iv: 0
    };
  })(modes);
  return modes;
}
var hasRequiredBrowser$5;
function requireBrowser$5() {
  if (hasRequiredBrowser$5)
    return browser$7;
  hasRequiredBrowser$5 = 1;
  var DES = requireBrowserifyDes();
  var aes2 = requireBrowser$6();
  var aesModes = requireModes$1();
  var desModes = requireModes();
  var ebtk = requireEvp_bytestokey();
  function createCipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
      keyLen = aesModes[suite].key;
      ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
      keyLen = desModes[suite].key * 8;
      ivLen = desModes[suite].iv;
    } else {
      throw new TypeError("invalid suite type");
    }
    var keys2 = ebtk(password, false, keyLen, ivLen);
    return createCipheriv(suite, keys2.key, keys2.iv);
  }
  function createDecipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
      keyLen = aesModes[suite].key;
      ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
      keyLen = desModes[suite].key * 8;
      ivLen = desModes[suite].iv;
    } else {
      throw new TypeError("invalid suite type");
    }
    var keys2 = ebtk(password, false, keyLen, ivLen);
    return createDecipheriv(suite, keys2.key, keys2.iv);
  }
  function createCipheriv(suite, key2, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite])
      return aes2.createCipheriv(suite, key2, iv);
    if (desModes[suite])
      return new DES({ key: key2, iv, mode: suite });
    throw new TypeError("invalid suite type");
  }
  function createDecipheriv(suite, key2, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite])
      return aes2.createDecipheriv(suite, key2, iv);
    if (desModes[suite])
      return new DES({ key: key2, iv, mode: suite, decrypt: true });
    throw new TypeError("invalid suite type");
  }
  function getCiphers() {
    return Object.keys(desModes).concat(aes2.getCiphers());
  }
  browser$7.createCipher = browser$7.Cipher = createCipher;
  browser$7.createCipheriv = browser$7.Cipheriv = createCipheriv;
  browser$7.createDecipher = browser$7.Decipher = createDecipher;
  browser$7.createDecipheriv = browser$7.Decipheriv = createDecipheriv;
  browser$7.listCiphers = browser$7.getCiphers = getCiphers;
  return browser$7;
}
var browser$5 = {};
var bn$2 = { exports: {} };
bn$2.exports;
var hasRequiredBn$2;
function requireBn$2() {
  if (hasRequiredBn$2)
    return bn$2.exports;
  hasRequiredBn$2 = 1;
  (function(module) {
    (function(module2, exports2) {
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number2, base2, endian) {
        if (BN.isBN(number2)) {
          return number2;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number2 !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number2 || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer = window.Buffer;
        } else {
          Buffer = buffer$1.Buffer;
        }
      } catch (e2) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max2(left2, right2) {
        if (left2.cmp(right2) > 0)
          return left2;
        return right2;
      };
      BN.min = function min2(left2, right2) {
        if (left2.cmp(right2) < 0)
          return left2;
        return right2;
      };
      BN.prototype._init = function init2(number2, base2, endian) {
        if (typeof number2 === "number") {
          return this._initNumber(number2, base2, endian);
        }
        if (typeof number2 === "object") {
          return this._initArray(number2, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number2 = number2.toString().replace(/\s+/g, "");
        var start = 0;
        if (number2[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number2.length) {
          if (base2 === 16) {
            this._parseHex(number2, start, endian);
          } else {
            this._parseBase(number2, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN.prototype._initNumber = function _initNumber(number2, base2, endian) {
        if (number2 < 0) {
          this.negative = 1;
          number2 = -number2;
        }
        if (number2 < 67108864) {
          this.words = [number2 & 67108863];
          this.length = 1;
        } else if (number2 < 4503599627370496) {
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number2 < 9007199254740992);
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN.prototype._initArray = function _initArray(number2, base2, endian) {
        assert(typeof number2.length === "number");
        if (number2.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number2.length / 3);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var j2, w2;
        var off = 0;
        if (endian === "be") {
          for (i2 = number2.length - 1, j2 = 0; i2 >= 0; i2 -= 3) {
            w2 = number2[i2] | number2[i2 - 1] << 8 | number2[i2 - 2] << 16;
            this.words[j2] |= w2 << off & 67108863;
            this.words[j2 + 1] = w2 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j2++;
            }
          }
        } else if (endian === "le") {
          for (i2 = 0, j2 = 0; i2 < number2.length; i2 += 3) {
            w2 = number2[i2] | number2[i2 + 1] << 8 | number2[i2 + 2] << 16;
            this.words[j2] |= w2 << off & 67108863;
            this.words[j2 + 1] = w2 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j2++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string2, index2) {
        var c2 = string2.charCodeAt(index2);
        if (c2 >= 65 && c2 <= 70) {
          return c2 - 55;
        } else if (c2 >= 97 && c2 <= 102) {
          return c2 - 87;
        } else {
          return c2 - 48 & 15;
        }
      }
      function parseHexByte(string2, lowerBound, index2) {
        var r2 = parseHex4Bits(string2, index2);
        if (index2 - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string2, index2 - 1) << 4;
        }
        return r2;
      }
      BN.prototype._parseHex = function _parseHex(number2, start, endian) {
        this.length = Math.ceil((number2.length - start) / 6);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var off = 0;
        var j2 = 0;
        var w2;
        if (endian === "be") {
          for (i2 = number2.length - 1; i2 >= start; i2 -= 2) {
            w2 = parseHexByte(number2, start, i2) << off;
            this.words[j2] |= w2 & 67108863;
            if (off >= 18) {
              off -= 18;
              j2 += 1;
              this.words[j2] |= w2 >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number2.length - start;
          for (i2 = parseLength % 2 === 0 ? start + 1 : start; i2 < number2.length; i2 += 2) {
            w2 = parseHexByte(number2, start, i2) << off;
            this.words[j2] |= w2 & 67108863;
            if (off >= 18) {
              off -= 18;
              j2 += 1;
              this.words[j2] |= w2 >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r2 = 0;
        var len2 = Math.min(str.length, end);
        for (var i2 = start; i2 < len2; i2++) {
          var c2 = str.charCodeAt(i2) - 48;
          r2 *= mul;
          if (c2 >= 49) {
            r2 += c2 - 49 + 10;
          } else if (c2 >= 17) {
            r2 += c2 - 17 + 10;
          } else {
            r2 += c2;
          }
        }
        return r2;
      }
      BN.prototype._parseBase = function _parseBase(number2, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number2.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i2 = start; i2 < end; i2 += limbLen) {
          word = parseBase(number2, i2, i2 + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number2, i2, number2.length, base2);
          for (i2 = 0; i2 < mod; i2++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN.prototype.copy = function copy2(dest) {
        dest.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          dest.words[i2] = this.words[i2];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN.prototype.clone = function clone() {
        var r2 = new BN(null);
        this.copy(r2);
        return r2;
      };
      BN.prototype._expand = function _expand(size2) {
        while (this.length < size2) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString2(base2, padding) {
        base2 = base2 || 10;
        padding = padding | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w2 = this.words[i2];
            var word = ((w2 << off | carry) & 16777215).toString(16);
            carry = w2 >>> 24 - off & 16777215;
            if (carry !== 0 || i2 !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i2--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c2 = this.clone();
          c2.negative = 0;
          while (!c2.isZero()) {
            var r2 = c2.modn(groupBase).toString(base2);
            c2 = c2.idivn(groupBase);
            if (!c2.isZero()) {
              out = zeros[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN.prototype.toBuffer = function toBuffer2(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
      };
      BN.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType2, endian, length) {
        var byteLength2 = this.byteLength();
        var reqLength = length || Math.max(1, byteLength2);
        assert(byteLength2 <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType2(reqLength);
        var b2, i2;
        var q2 = this.clone();
        if (!littleEndian) {
          for (i2 = 0; i2 < reqLength - byteLength2; i2++) {
            res[i2] = 0;
          }
          for (i2 = 0; !q2.isZero(); i2++) {
            b2 = q2.andln(255);
            q2.iushrn(8);
            res[reqLength - i2 - 1] = b2;
          }
        } else {
          for (i2 = 0; !q2.isZero(); i2++) {
            b2 = q2.andln(255);
            q2.iushrn(8);
            res[i2] = b2;
          }
          for (; i2 < reqLength; i2++) {
            res[i2] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w2) {
          return 32 - Math.clz32(w2);
        };
      } else {
        BN.prototype._countBits = function _countBits(w2) {
          var t2 = w2;
          var r2 = 0;
          if (t2 >= 4096) {
            r2 += 13;
            t2 >>>= 13;
          }
          if (t2 >= 64) {
            r2 += 7;
            t2 >>>= 7;
          }
          if (t2 >= 8) {
            r2 += 4;
            t2 >>>= 4;
          }
          if (t2 >= 2) {
            r2 += 2;
            t2 >>>= 2;
          }
          return r2 + t2;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w2) {
        if (w2 === 0)
          return 26;
        var t2 = w2;
        var r2 = 0;
        if ((t2 & 8191) === 0) {
          r2 += 13;
          t2 >>>= 13;
        }
        if ((t2 & 127) === 0) {
          r2 += 7;
          t2 >>>= 7;
        }
        if ((t2 & 15) === 0) {
          r2 += 4;
          t2 >>>= 4;
        }
        if ((t2 & 3) === 0) {
          r2 += 2;
          t2 >>>= 2;
        }
        if ((t2 & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN.prototype.bitLength = function bitLength() {
        var w2 = this.words[this.length - 1];
        var hi2 = this._countBits(w2);
        return (this.length - 1) * 26 + hi2;
      };
      function toBitArray(num) {
        var w2 = new Array(num.bitLength());
        for (var bit = 0; bit < w2.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w2[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w2;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r2 = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var b2 = this._zeroBits(this.words[i2]);
          r2 += b2;
          if (b2 !== 26)
            break;
        }
        return r2;
      };
      BN.prototype.byteLength = function byteLength2() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i2 = 0; i2 < num.length; i2++) {
          this.words[i2] = this.words[i2] | num.words[i2];
        }
        return this.strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b2;
        if (this.length > num.length) {
          b2 = num;
        } else {
          b2 = this;
        }
        for (var i2 = 0; i2 < b2.length; i2++) {
          this.words[i2] = this.words[i2] & num.words[i2];
        }
        this.length = b2.length;
        return this.strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a2;
        var b2;
        if (this.length > num.length) {
          a2 = this;
          b2 = num;
        } else {
          a2 = num;
          b2 = this;
        }
        for (var i2 = 0; i2 < b2.length; i2++) {
          this.words[i2] = a2.words[i2] ^ b2.words[i2];
        }
        if (this !== a2) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        this.length = a2.length;
        return this.strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor2(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i2 = 0; i2 < bytesNeeded; i2++) {
          this.words[i2] = ~this.words[i2] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a2, b2;
        if (this.length > num.length) {
          a2 = this;
          b2 = num;
        } else {
          a2 = num;
          b2 = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b2.length; i2++) {
          r2 = (a2.words[i2] | 0) + (b2.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i2 < a2.length; i2++) {
          r2 = (a2.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a2.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a2 !== this) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a2, b2;
        if (cmp > 0) {
          a2 = this;
          b2 = num;
        } else {
          a2 = num;
          b2 = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b2.length; i2++) {
          r2 = (a2.words[i2] | 0) - (b2.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        for (; carry !== 0 && i2 < a2.length; i2++) {
          r2 = (a2.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        if (carry === 0 && i2 < a2.length && a2 !== this) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        this.length = Math.max(this.length, i2);
        if (a2 !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len2 = self2.length + num.length | 0;
        out.length = len2;
        len2 = len2 - 1 | 0;
        var a2 = self2.words[0] | 0;
        var b2 = num.words[0] | 0;
        var r2 = a2 * b2;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k2 = 1; k2 < len2; k2++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k2, num.length - 1);
          for (var j2 = Math.max(0, k2 - self2.length + 1); j2 <= maxJ; j2++) {
            var i2 = k2 - j2 | 0;
            a2 = self2.words[i2] | 0;
            b2 = num.words[j2] | 0;
            r2 = a2 * b2 + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k2] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k2] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a2 = self2.words;
        var b2 = num.words;
        var o2 = out.words;
        var c2 = 0;
        var lo;
        var mid;
        var hi2;
        var a0 = a2[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a2[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a22 = a2[2] | 0;
        var al2 = a22 & 8191;
        var ah2 = a22 >>> 13;
        var a3 = a2[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a2[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a2[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a2[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a2[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a2[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a2[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b2[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b2[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b22 = b2[2] | 0;
        var bl2 = b22 & 8191;
        var bh2 = b22 >>> 13;
        var b3 = b2[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b2[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b2[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b2[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b2[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b2[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b2[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi2 = Math.imul(ah0, bh0);
        var w0 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi2 = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi2 = hi2 + Math.imul(ah0, bh1) | 0;
        var w1 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi2 = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi2 = hi2 + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi2 = hi2 + Math.imul(ah0, bh2) | 0;
        var w2 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi2 = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi2 = hi2 + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi2 = hi2 + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi2 = hi2 + Math.imul(ah0, bh3) | 0;
        var w3 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi2 = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi2 = hi2 + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi2 = hi2 + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi2 = hi2 + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi2 = hi2 + Math.imul(ah0, bh4) | 0;
        var w4 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi2 = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi2 = hi2 + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi2 = hi2 + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi2 = hi2 + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi2 = hi2 + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi2 = hi2 + Math.imul(ah0, bh5) | 0;
        var w5 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi2 = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi2 = hi2 + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi2 = hi2 + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi2 = hi2 + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi2 = hi2 + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi2 = hi2 + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi2 = hi2 + Math.imul(ah0, bh6) | 0;
        var w6 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi2 = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi2 = hi2 + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi2 = hi2 + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi2 = hi2 + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi2 = hi2 + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi2 = hi2 + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi2 = hi2 + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi2 = hi2 + Math.imul(ah0, bh7) | 0;
        var w7 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi2 = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi2 = hi2 + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi2 = hi2 + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi2 = hi2 + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi2 = hi2 + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi2 = hi2 + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi2 = hi2 + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi2 = hi2 + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi2 = hi2 + Math.imul(ah0, bh8) | 0;
        var w8 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi2 = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi2 = hi2 + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi2 = hi2 + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi2 = hi2 + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi2 = hi2 + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi2 = hi2 + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi2 = hi2 + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi2 = hi2 + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi2 = hi2 + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi2 = hi2 + Math.imul(ah0, bh9) | 0;
        var w9 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi2 = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi2 = hi2 + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi2 = hi2 + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi2 = hi2 + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi2 = hi2 + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi2 = hi2 + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi2 = hi2 + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi2 = hi2 + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi2 = hi2 + Math.imul(ah1, bh9) | 0;
        var w10 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi2 = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi2 = hi2 + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi2 = hi2 + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi2 = hi2 + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi2 = hi2 + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi2 = hi2 + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi2 = hi2 + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi2 = hi2 + Math.imul(ah2, bh9) | 0;
        var w11 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi2 = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi2 = hi2 + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi2 = hi2 + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi2 = hi2 + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi2 = hi2 + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi2 = hi2 + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi2 = hi2 + Math.imul(ah3, bh9) | 0;
        var w12 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi2 = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi2 = hi2 + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi2 = hi2 + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi2 = hi2 + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi2 = hi2 + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi2 = hi2 + Math.imul(ah4, bh9) | 0;
        var w13 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi2 = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi2 = hi2 + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi2 = hi2 + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi2 = hi2 + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi2 = hi2 + Math.imul(ah5, bh9) | 0;
        var w14 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi2 = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi2 = hi2 + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi2 = hi2 + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi2 = hi2 + Math.imul(ah6, bh9) | 0;
        var w15 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi2 = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi2 = hi2 + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi2 = hi2 + Math.imul(ah7, bh9) | 0;
        var w16 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi2 = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi2 = hi2 + Math.imul(ah8, bh9) | 0;
        var w17 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi2 = Math.imul(ah9, bh9);
        var w18 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o2[0] = w0;
        o2[1] = w1;
        o2[2] = w2;
        o2[3] = w3;
        o2[4] = w4;
        o2[5] = w5;
        o2[6] = w6;
        o2[7] = w7;
        o2[8] = w8;
        o2[9] = w9;
        o2[10] = w10;
        o2[11] = w11;
        o2[12] = w12;
        o2[13] = w13;
        o2[14] = w14;
        o2[15] = w15;
        o2[16] = w16;
        o2[17] = w17;
        o2[18] = w18;
        if (c2 !== 0) {
          o2[19] = c2;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k2 = 0; k2 < out.length - 1; k2++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k2, num.length - 1);
          for (var j2 = Math.max(0, k2 - self2.length + 1); j2 <= maxJ; j2++) {
            var i2 = k2 - j2;
            var a2 = self2.words[i2] | 0;
            var b2 = num.words[j2] | 0;
            var r2 = a2 * b2;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k2] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k2] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len2 = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len2 < 63) {
          res = smallMulTo(this, num, out);
        } else if (len2 < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x2, y2) {
        this.x = x2;
        this.y = y2;
      }
      FFTM.prototype.makeRBT = function makeRBT(N2) {
        var t2 = new Array(N2);
        var l2 = BN.prototype._countBits(N2) - 1;
        for (var i2 = 0; i2 < N2; i2++) {
          t2[i2] = this.revBin(i2, l2, N2);
        }
        return t2;
      };
      FFTM.prototype.revBin = function revBin(x2, l2, N2) {
        if (x2 === 0 || x2 === N2 - 1)
          return x2;
        var rb2 = 0;
        for (var i2 = 0; i2 < l2; i2++) {
          rb2 |= (x2 & 1) << l2 - i2 - 1;
          x2 >>= 1;
        }
        return rb2;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N2) {
        for (var i2 = 0; i2 < N2; i2++) {
          rtws[i2] = rws[rbt[i2]];
          itws[i2] = iws[rbt[i2]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N2, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N2);
        for (var s2 = 1; s2 < N2; s2 <<= 1) {
          var l2 = s2 << 1;
          var rtwdf = Math.cos(2 * Math.PI / l2);
          var itwdf = Math.sin(2 * Math.PI / l2);
          for (var p2 = 0; p2 < N2; p2 += l2) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j2 = 0; j2 < s2; j2++) {
              var re2 = rtws[p2 + j2];
              var ie2 = itws[p2 + j2];
              var ro = rtws[p2 + j2 + s2];
              var io = itws[p2 + j2 + s2];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p2 + j2] = re2 + ro;
              itws[p2 + j2] = ie2 + io;
              rtws[p2 + j2 + s2] = re2 - ro;
              itws[p2 + j2 + s2] = ie2 - io;
              if (j2 !== l2) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n2, m2) {
        var N2 = Math.max(m2, n2) | 1;
        var odd = N2 & 1;
        var i2 = 0;
        for (N2 = N2 / 2 | 0; N2; N2 = N2 >>> 1) {
          i2++;
        }
        return 1 << i2 + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N2) {
        if (N2 <= 1)
          return;
        for (var i2 = 0; i2 < N2 / 2; i2++) {
          var t2 = rws[i2];
          rws[i2] = rws[N2 - i2 - 1];
          rws[N2 - i2 - 1] = t2;
          t2 = iws[i2];
          iws[i2] = -iws[N2 - i2 - 1];
          iws[N2 - i2 - 1] = -t2;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N2) {
        var carry = 0;
        for (var i2 = 0; i2 < N2 / 2; i2++) {
          var w2 = Math.round(ws[2 * i2 + 1] / N2) * 8192 + Math.round(ws[2 * i2] / N2) + carry;
          ws[i2] = w2 & 67108863;
          if (w2 < 67108864) {
            carry = 0;
          } else {
            carry = w2 / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len2, rws, N2) {
        var carry = 0;
        for (var i2 = 0; i2 < len2; i2++) {
          carry = carry + (ws[i2] | 0);
          rws[2 * i2] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i2 + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i2 = 2 * len2; i2 < N2; ++i2) {
          rws[i2] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N2) {
        var ph2 = new Array(N2);
        for (var i2 = 0; i2 < N2; i2++) {
          ph2[i2] = 0;
        }
        return ph2;
      };
      FFTM.prototype.mulp = function mulp(x2, y2, out) {
        var N2 = 2 * this.guessLen13b(x2.length, y2.length);
        var rbt = this.makeRBT(N2);
        var _2 = this.stub(N2);
        var rws = new Array(N2);
        var rwst = new Array(N2);
        var iwst = new Array(N2);
        var nrws = new Array(N2);
        var nrwst = new Array(N2);
        var niwst = new Array(N2);
        var rmws = out.words;
        rmws.length = N2;
        this.convert13b(x2.words, x2.length, rws, N2);
        this.convert13b(y2.words, y2.length, nrws, N2);
        this.transform(rws, _2, rwst, iwst, N2, rbt);
        this.transform(nrws, _2, nrwst, niwst, N2, rbt);
        for (var i2 = 0; i2 < N2; i2++) {
          var rx = rwst[i2] * nrwst[i2] - iwst[i2] * niwst[i2];
          iwst[i2] = rwst[i2] * niwst[i2] + iwst[i2] * nrwst[i2];
          rwst[i2] = rx;
        }
        this.conjugate(rwst, iwst, N2);
        this.transform(rwst, iwst, rmws, _2, N2, rbt);
        this.conjugate(rmws, _2, N2);
        this.normalize13b(rmws, N2);
        out.negative = x2.negative ^ y2.negative;
        out.length = x2.length + y2.length;
        return out.strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var w2 = (this.words[i2] | 0) * num;
          var lo = (w2 & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w2 / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i2] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w2 = toBitArray(num);
        if (w2.length === 0)
          return new BN(1);
        var res = this;
        for (var i2 = 0; i2 < w2.length; i2++, res = res.sqr()) {
          if (w2[i2] !== 0)
            break;
        }
        if (++i2 < w2.length) {
          for (var q2 = res.sqr(); i2 < w2.length; i2++, q2 = q2.sqr()) {
            if (w2[i2] === 0)
              continue;
            res = res.mul(q2);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i2;
        if (r2 !== 0) {
          var carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            var newCarry = this.words[i2] & carryMask;
            var c2 = (this.words[i2] | 0) - newCarry << r2;
            this.words[i2] = c2 | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i2] = carry;
            this.length++;
          }
        }
        if (s2 !== 0) {
          for (i2 = this.length - 1; i2 >= 0; i2--) {
            this.words[i2 + s2] = this.words[i2];
          }
          for (i2 = 0; i2 < s2; i2++) {
            this.words[i2] = 0;
          }
          this.length += s2;
        }
        return this.strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h2;
        if (hint) {
          h2 = (hint - hint % 26) / 26;
        } else {
          h2 = 0;
        }
        var r2 = bits % 26;
        var s2 = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h2 -= s2;
        h2 = Math.max(0, h2);
        if (maskedWords) {
          for (var i2 = 0; i2 < s2; i2++) {
            maskedWords.words[i2] = this.words[i2];
          }
          maskedWords.length = s2;
        }
        if (s2 === 0)
          ;
        else if (this.length > s2) {
          this.length -= s2;
          for (i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = this.words[i2 + s2];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h2); i2--) {
          var word = this.words[i2] | 0;
          this.words[i2] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q2 = 1 << r2;
        if (this.length <= s2)
          return false;
        var w2 = this.words[s2];
        return !!(w2 & q2);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s2) {
          return this;
        }
        if (r2 !== 0) {
          s2++;
        }
        this.length = Math.min(s2, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
          this.words[i2] -= 67108864;
          if (i2 === this.length - 1) {
            this.words[i2 + 1] = 1;
          } else {
            this.words[i2 + 1]++;
          }
        }
        this.length = Math.max(this.length, i2 + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
            this.words[i2] += 67108864;
            this.words[i2 + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len2 = num.length + shift;
        var i2;
        this._expand(len2);
        var w2;
        var carry = 0;
        for (i2 = 0; i2 < num.length; i2++) {
          w2 = (this.words[i2 + shift] | 0) + carry;
          var right2 = (num.words[i2] | 0) * mul;
          w2 -= right2 & 67108863;
          carry = (w2 >> 26) - (right2 / 67108864 | 0);
          this.words[i2 + shift] = w2 & 67108863;
        }
        for (; i2 < this.length - shift; i2++) {
          w2 = (this.words[i2 + shift] | 0) + carry;
          carry = w2 >> 26;
          this.words[i2 + shift] = w2 & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i2 = 0; i2 < this.length; i2++) {
          w2 = -(this.words[i2] | 0) + carry;
          carry = w2 >> 26;
          this.words[i2] = w2 & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a2 = this.clone();
        var b2 = num;
        var bhi = b2.words[b2.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b2 = b2.ushln(shift);
          a2.iushln(shift);
          bhi = b2.words[b2.length - 1] | 0;
        }
        var m2 = a2.length - b2.length;
        var q2;
        if (mode !== "mod") {
          q2 = new BN(null);
          q2.length = m2 + 1;
          q2.words = new Array(q2.length);
          for (var i2 = 0; i2 < q2.length; i2++) {
            q2.words[i2] = 0;
          }
        }
        var diff = a2.clone()._ishlnsubmul(b2, 1, m2);
        if (diff.negative === 0) {
          a2 = diff;
          if (q2) {
            q2.words[m2] = 1;
          }
        }
        for (var j2 = m2 - 1; j2 >= 0; j2--) {
          var qj2 = (a2.words[b2.length + j2] | 0) * 67108864 + (a2.words[b2.length + j2 - 1] | 0);
          qj2 = Math.min(qj2 / bhi | 0, 67108863);
          a2._ishlnsubmul(b2, qj2, j2);
          while (a2.negative !== 0) {
            qj2--;
            a2.negative = 0;
            a2._ishlnsubmul(b2, 1, j2);
            if (!a2.isZero()) {
              a2.negative ^= 1;
            }
          }
          if (q2) {
            q2.words[j2] = qj2;
          }
        }
        if (q2) {
          q2.strip();
        }
        a2.strip();
        if (mode !== "div" && shift !== 0) {
          a2.iushrn(shift);
        }
        return {
          div: q2 || null,
          mod: a2
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p2 = (1 << 26) % num;
        var acc = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          acc = (p2 * acc + (this.words[i2] | 0)) % num;
        }
        return acc;
      };
      BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var w2 = (this.words[i2] | 0) + carry * 67108864;
          this.words[i2] = w2 / num | 0;
          carry = w2 % num;
        }
        return this.strip();
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p2) {
        assert(p2.negative === 0);
        assert(!p2.isZero());
        var x2 = this;
        var y2 = p2.clone();
        if (x2.negative !== 0) {
          x2 = x2.umod(p2);
        } else {
          x2 = x2.clone();
        }
        var A2 = new BN(1);
        var B2 = new BN(0);
        var C2 = new BN(0);
        var D2 = new BN(1);
        var g2 = 0;
        while (x2.isEven() && y2.isEven()) {
          x2.iushrn(1);
          y2.iushrn(1);
          ++g2;
        }
        var yp = y2.clone();
        var xp = x2.clone();
        while (!x2.isZero()) {
          for (var i2 = 0, im = 1; (x2.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1)
            ;
          if (i2 > 0) {
            x2.iushrn(i2);
            while (i2-- > 0) {
              if (A2.isOdd() || B2.isOdd()) {
                A2.iadd(yp);
                B2.isub(xp);
              }
              A2.iushrn(1);
              B2.iushrn(1);
            }
          }
          for (var j2 = 0, jm = 1; (y2.words[0] & jm) === 0 && j2 < 26; ++j2, jm <<= 1)
            ;
          if (j2 > 0) {
            y2.iushrn(j2);
            while (j2-- > 0) {
              if (C2.isOdd() || D2.isOdd()) {
                C2.iadd(yp);
                D2.isub(xp);
              }
              C2.iushrn(1);
              D2.iushrn(1);
            }
          }
          if (x2.cmp(y2) >= 0) {
            x2.isub(y2);
            A2.isub(C2);
            B2.isub(D2);
          } else {
            y2.isub(x2);
            C2.isub(A2);
            D2.isub(B2);
          }
        }
        return {
          a: C2,
          b: D2,
          gcd: y2.iushln(g2)
        };
      };
      BN.prototype._invmp = function _invmp(p2) {
        assert(p2.negative === 0);
        assert(!p2.isZero());
        var a2 = this;
        var b2 = p2.clone();
        if (a2.negative !== 0) {
          a2 = a2.umod(p2);
        } else {
          a2 = a2.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b2.clone();
        while (a2.cmpn(1) > 0 && b2.cmpn(1) > 0) {
          for (var i2 = 0, im = 1; (a2.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1)
            ;
          if (i2 > 0) {
            a2.iushrn(i2);
            while (i2-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j2 = 0, jm = 1; (b2.words[0] & jm) === 0 && j2 < 26; ++j2, jm <<= 1)
            ;
          if (j2 > 0) {
            b2.iushrn(j2);
            while (j2-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a2.cmp(b2) >= 0) {
            a2.isub(b2);
            x1.isub(x2);
          } else {
            b2.isub(a2);
            x2.isub(x1);
          }
        }
        var res;
        if (a2.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p2);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a2 = this.clone();
        var b2 = num.clone();
        a2.negative = 0;
        b2.negative = 0;
        for (var shift = 0; a2.isEven() && b2.isEven(); shift++) {
          a2.iushrn(1);
          b2.iushrn(1);
        }
        do {
          while (a2.isEven()) {
            a2.iushrn(1);
          }
          while (b2.isEven()) {
            b2.iushrn(1);
          }
          var r2 = a2.cmp(b2);
          if (r2 < 0) {
            var t2 = a2;
            a2 = b2;
            b2 = t2;
          } else if (r2 === 0 || b2.cmpn(1) === 0) {
            break;
          }
          a2.isub(b2);
        } while (true);
        return b2.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q2 = 1 << r2;
        if (this.length <= s2) {
          this._expand(s2 + 1);
          this.words[s2] |= q2;
          return this;
        }
        var carry = q2;
        for (var i2 = s2; carry !== 0 && i2 < this.length; i2++) {
          var w2 = this.words[i2] | 0;
          w2 += carry;
          carry = w2 >>> 26;
          w2 &= 67108863;
          this.words[i2] = w2;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w2 = this.words[0] | 0;
          res = w2 === num ? 0 : w2 < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var a2 = this.words[i2] | 0;
          var b2 = num.words[i2] | 0;
          if (a2 === b2)
            continue;
          if (a2 < b2) {
            res = -1;
          } else if (a2 > b2) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p2) {
        this.name = name2;
        this.p = new BN(p2, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i2 = 0; i2 < outLen; i2++) {
          output.words[i2] = input.words[i2];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i2 = 10; i2 < input.length; i2++) {
          var next = input.words[i2] | 0;
          input.words[i2 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i2 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var w2 = num.words[i2] | 0;
          lo += w2 * 977;
          num.words[i2] = lo & 67108863;
          lo = w2 * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var hi2 = (num.words[i2] | 0) * 19 + carry;
          var lo = hi2 & 67108863;
          hi2 >>>= 26;
          num.words[i2] = lo;
          carry = hi2;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m2) {
        if (typeof m2 === "string") {
          var prime = BN._prime(m2);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m2.gtn(1), "modulus must be greater than 1");
          this.m = m2;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a2) {
        assert(a2.negative === 0, "red works only with positives");
        assert(a2.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a2, b2) {
        assert((a2.negative | b2.negative) === 0, "red works only with positives");
        assert(
          a2.red && a2.red === b2.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a2) {
        if (this.prime)
          return this.prime.ireduce(a2)._forceRed(this);
        return a2.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a2) {
        if (a2.isZero()) {
          return a2.clone();
        }
        return this.m.sub(a2)._forceRed(this);
      };
      Red.prototype.add = function add(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.add(b2);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.iadd(b2);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.sub(b2);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.isub(b2);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a2, num) {
        this._verify1(a2);
        return this.imod(a2.ushln(num));
      };
      Red.prototype.imul = function imul(a2, b2) {
        this._verify2(a2, b2);
        return this.imod(a2.imul(b2));
      };
      Red.prototype.mul = function mul(a2, b2) {
        this._verify2(a2, b2);
        return this.imod(a2.mul(b2));
      };
      Red.prototype.isqr = function isqr(a2) {
        return this.imul(a2, a2.clone());
      };
      Red.prototype.sqr = function sqr(a2) {
        return this.mul(a2, a2);
      };
      Red.prototype.sqrt = function sqrt(a2) {
        if (a2.isZero())
          return a2.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a2, pow);
        }
        var q2 = this.m.subn(1);
        var s2 = 0;
        while (!q2.isZero() && q2.andln(1) === 0) {
          s2++;
          q2.iushrn(1);
        }
        assert(!q2.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z2 = this.m.bitLength();
        z2 = new BN(2 * z2 * z2).toRed(this);
        while (this.pow(z2, lpow).cmp(nOne) !== 0) {
          z2.redIAdd(nOne);
        }
        var c2 = this.pow(z2, q2);
        var r2 = this.pow(a2, q2.addn(1).iushrn(1));
        var t2 = this.pow(a2, q2);
        var m2 = s2;
        while (t2.cmp(one) !== 0) {
          var tmp = t2;
          for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
            tmp = tmp.redSqr();
          }
          assert(i2 < m2);
          var b2 = this.pow(c2, new BN(1).iushln(m2 - i2 - 1));
          r2 = r2.redMul(b2);
          c2 = b2.redSqr();
          t2 = t2.redMul(c2);
          m2 = i2;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a2) {
        var inv = a2._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a2, num) {
        if (num.isZero())
          return new BN(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a2.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a2;
        for (var i2 = 2; i2 < wnd.length; i2++) {
          wnd[i2] = this.mul(wnd[i2 - 1], a2);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i2 = num.length - 1; i2 >= 0; i2--) {
          var word = num.words[i2];
          for (var j2 = start - 1; j2 >= 0; j2--) {
            var bit = word >> j2 & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i2 !== 0 || j2 !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont2(num) {
        return new Mont(num);
      };
      function Mont(m2) {
        Red.call(this, m2);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a2, b2) {
        if (a2.isZero() || b2.isZero()) {
          a2.words[0] = 0;
          a2.length = 1;
          return a2;
        }
        var t2 = a2.imul(b2);
        var c2 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t2.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a2, b2) {
        if (a2.isZero() || b2.isZero())
          return new BN(0)._forceRed(this);
        var t2 = a2.mul(b2);
        var c2 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t2.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a2) {
        var res = this.imod(a2._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal);
  })(bn$2);
  return bn$2.exports;
}
var brorand = { exports: {} };
var hasRequiredBrorand;
function requireBrorand() {
  if (hasRequiredBrorand)
    return brorand.exports;
  hasRequiredBrorand = 1;
  var r2;
  brorand.exports = function rand(len2) {
    if (!r2)
      r2 = new Rand(null);
    return r2.generate(len2);
  };
  function Rand(rand) {
    this.rand = rand;
  }
  brorand.exports.Rand = Rand;
  Rand.prototype.generate = function generate(len2) {
    return this._rand(len2);
  };
  Rand.prototype._rand = function _rand(n2) {
    if (this.rand.getBytes)
      return this.rand.getBytes(n2);
    var res = new Uint8Array(n2);
    for (var i2 = 0; i2 < res.length; i2++)
      res[i2] = this.rand.getByte();
    return res;
  };
  if (typeof self === "object") {
    if (self.crypto && self.crypto.getRandomValues) {
      Rand.prototype._rand = function _rand(n2) {
        var arr = new Uint8Array(n2);
        self.crypto.getRandomValues(arr);
        return arr;
      };
    } else if (self.msCrypto && self.msCrypto.getRandomValues) {
      Rand.prototype._rand = function _rand(n2) {
        var arr = new Uint8Array(n2);
        self.msCrypto.getRandomValues(arr);
        return arr;
      };
    } else if (typeof window === "object") {
      Rand.prototype._rand = function() {
        throw new Error("Not implemented yet");
      };
    }
  } else {
    try {
      var crypto2 = requireCryptoBrowserify();
      if (typeof crypto2.randomBytes !== "function")
        throw new Error("Not supported");
      Rand.prototype._rand = function _rand(n2) {
        return crypto2.randomBytes(n2);
      };
    } catch (e2) {
    }
  }
  return brorand.exports;
}
var mr;
var hasRequiredMr;
function requireMr() {
  if (hasRequiredMr)
    return mr;
  hasRequiredMr = 1;
  var bn2 = requireBn$2();
  var brorand2 = requireBrorand();
  function MillerRabin(rand) {
    this.rand = rand || new brorand2.Rand();
  }
  mr = MillerRabin;
  MillerRabin.create = function create(rand) {
    return new MillerRabin(rand);
  };
  MillerRabin.prototype._randbelow = function _randbelow(n2) {
    var len2 = n2.bitLength();
    var min_bytes = Math.ceil(len2 / 8);
    do
      var a2 = new bn2(this.rand.generate(min_bytes));
    while (a2.cmp(n2) >= 0);
    return a2;
  };
  MillerRabin.prototype._randrange = function _randrange(start, stop) {
    var size2 = stop.sub(start);
    return start.add(this._randbelow(size2));
  };
  MillerRabin.prototype.test = function test(n2, k2, cb2) {
    var len2 = n2.bitLength();
    var red = bn2.mont(n2);
    var rone = new bn2(1).toRed(red);
    if (!k2)
      k2 = Math.max(1, len2 / 48 | 0);
    var n1 = n2.subn(1);
    for (var s2 = 0; !n1.testn(s2); s2++) {
    }
    var d2 = n2.shrn(s2);
    var rn1 = n1.toRed(red);
    var prime = true;
    for (; k2 > 0; k2--) {
      var a2 = this._randrange(new bn2(2), n1);
      if (cb2)
        cb2(a2);
      var x2 = a2.toRed(red).redPow(d2);
      if (x2.cmp(rone) === 0 || x2.cmp(rn1) === 0)
        continue;
      for (var i2 = 1; i2 < s2; i2++) {
        x2 = x2.redSqr();
        if (x2.cmp(rone) === 0)
          return false;
        if (x2.cmp(rn1) === 0)
          break;
      }
      if (i2 === s2)
        return false;
    }
    return prime;
  };
  MillerRabin.prototype.getDivisor = function getDivisor(n2, k2) {
    var len2 = n2.bitLength();
    var red = bn2.mont(n2);
    var rone = new bn2(1).toRed(red);
    if (!k2)
      k2 = Math.max(1, len2 / 48 | 0);
    var n1 = n2.subn(1);
    for (var s2 = 0; !n1.testn(s2); s2++) {
    }
    var d2 = n2.shrn(s2);
    var rn1 = n1.toRed(red);
    for (; k2 > 0; k2--) {
      var a2 = this._randrange(new bn2(2), n1);
      var g2 = n2.gcd(a2);
      if (g2.cmpn(1) !== 0)
        return g2;
      var x2 = a2.toRed(red).redPow(d2);
      if (x2.cmp(rone) === 0 || x2.cmp(rn1) === 0)
        continue;
      for (var i2 = 1; i2 < s2; i2++) {
        x2 = x2.redSqr();
        if (x2.cmp(rone) === 0)
          return x2.fromRed().subn(1).gcd(n2);
        if (x2.cmp(rn1) === 0)
          break;
      }
      if (i2 === s2) {
        x2 = x2.redSqr();
        return x2.fromRed().subn(1).gcd(n2);
      }
    }
    return false;
  };
  return mr;
}
var generatePrime;
var hasRequiredGeneratePrime;
function requireGeneratePrime() {
  if (hasRequiredGeneratePrime)
    return generatePrime;
  hasRequiredGeneratePrime = 1;
  var randomBytes = requireBrowser$b();
  generatePrime = findPrime;
  findPrime.simpleSieve = simpleSieve;
  findPrime.fermatTest = fermatTest;
  var BN = requireBn$2();
  var TWENTYFOUR = new BN(24);
  var MillerRabin = requireMr();
  var millerRabin = new MillerRabin();
  var ONE = new BN(1);
  var TWO = new BN(2);
  var FIVE = new BN(5);
  new BN(16);
  new BN(8);
  var TEN = new BN(10);
  var THREE = new BN(3);
  new BN(7);
  var ELEVEN = new BN(11);
  var FOUR = new BN(4);
  new BN(12);
  var primes = null;
  function _getPrimes() {
    if (primes !== null)
      return primes;
    var limit = 1048576;
    var res = [];
    res[0] = 2;
    for (var i2 = 1, k2 = 3; k2 < limit; k2 += 2) {
      var sqrt = Math.ceil(Math.sqrt(k2));
      for (var j2 = 0; j2 < i2 && res[j2] <= sqrt; j2++)
        if (k2 % res[j2] === 0)
          break;
      if (i2 !== j2 && res[j2] <= sqrt)
        continue;
      res[i2++] = k2;
    }
    primes = res;
    return res;
  }
  function simpleSieve(p2) {
    var primes2 = _getPrimes();
    for (var i2 = 0; i2 < primes2.length; i2++)
      if (p2.modn(primes2[i2]) === 0) {
        if (p2.cmpn(primes2[i2]) === 0) {
          return true;
        } else {
          return false;
        }
      }
    return true;
  }
  function fermatTest(p2) {
    var red = BN.mont(p2);
    return TWO.toRed(red).redPow(p2.subn(1)).fromRed().cmpn(1) === 0;
  }
  function findPrime(bits, gen) {
    if (bits < 16) {
      if (gen === 2 || gen === 5) {
        return new BN([140, 123]);
      } else {
        return new BN([140, 39]);
      }
    }
    gen = new BN(gen);
    var num, n2;
    while (true) {
      num = new BN(randomBytes(Math.ceil(bits / 8)));
      while (num.bitLength() > bits) {
        num.ishrn(1);
      }
      if (num.isEven()) {
        num.iadd(ONE);
      }
      if (!num.testn(1)) {
        num.iadd(TWO);
      }
      if (!gen.cmp(TWO)) {
        while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
          num.iadd(FOUR);
        }
      } else if (!gen.cmp(FIVE)) {
        while (num.mod(TEN).cmp(THREE)) {
          num.iadd(FOUR);
        }
      }
      n2 = num.shrn(1);
      if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) {
        return num;
      }
    }
  }
  return generatePrime;
}
const modp1 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
};
const modp2 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
};
const modp5 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
};
const modp14 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
};
const modp15 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
};
const modp16 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
};
const modp17 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
};
const modp18 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
};
const require$$1$3 = {
  modp1,
  modp2,
  modp5,
  modp14,
  modp15,
  modp16,
  modp17,
  modp18
};
var dh;
var hasRequiredDh;
function requireDh() {
  if (hasRequiredDh)
    return dh;
  hasRequiredDh = 1;
  var BN = requireBn$2();
  var MillerRabin = requireMr();
  var millerRabin = new MillerRabin();
  var TWENTYFOUR = new BN(24);
  var ELEVEN = new BN(11);
  var TEN = new BN(10);
  var THREE = new BN(3);
  var SEVEN = new BN(7);
  var primes = requireGeneratePrime();
  var randomBytes = requireBrowser$b();
  dh = DH;
  function setPublicKey(pub, enc) {
    enc = enc || "utf8";
    if (!buffer$1.Buffer.isBuffer(pub)) {
      pub = new buffer$1.Buffer(pub, enc);
    }
    this._pub = new BN(pub);
    return this;
  }
  function setPrivateKey(priv, enc) {
    enc = enc || "utf8";
    if (!buffer$1.Buffer.isBuffer(priv)) {
      priv = new buffer$1.Buffer(priv, enc);
    }
    this._priv = new BN(priv);
    return this;
  }
  var primeCache = {};
  function checkPrime(prime, generator) {
    var gen = generator.toString("hex");
    var hex = [gen, prime.toString(16)].join("_");
    if (hex in primeCache) {
      return primeCache[hex];
    }
    var error = 0;
    if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
      error += 1;
      if (gen === "02" || gen === "05") {
        error += 8;
      } else {
        error += 4;
      }
      primeCache[hex] = error;
      return error;
    }
    if (!millerRabin.test(prime.shrn(1))) {
      error += 2;
    }
    var rem;
    switch (gen) {
      case "02":
        if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
          error += 8;
        }
        break;
      case "05":
        rem = prime.mod(TEN);
        if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
          error += 8;
        }
        break;
      default:
        error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  function DH(prime, generator, malleable) {
    this.setGenerator(generator);
    this.__prime = new BN(prime);
    this._prime = BN.mont(this.__prime);
    this._primeLen = prime.length;
    this._pub = void 0;
    this._priv = void 0;
    this._primeCode = void 0;
    if (malleable) {
      this.setPublicKey = setPublicKey;
      this.setPrivateKey = setPrivateKey;
    } else {
      this._primeCode = 8;
    }
  }
  Object.defineProperty(DH.prototype, "verifyError", {
    enumerable: true,
    get: function() {
      if (typeof this._primeCode !== "number") {
        this._primeCode = checkPrime(this.__prime, this.__gen);
      }
      return this._primeCode;
    }
  });
  DH.prototype.generateKeys = function() {
    if (!this._priv) {
      this._priv = new BN(randomBytes(this._primeLen));
    }
    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
    return this.getPublicKey();
  };
  DH.prototype.computeSecret = function(other) {
    other = new BN(other);
    other = other.toRed(this._prime);
    var secret = other.redPow(this._priv).fromRed();
    var out = new buffer$1.Buffer(secret.toArray());
    var prime = this.getPrime();
    if (out.length < prime.length) {
      var front = new buffer$1.Buffer(prime.length - out.length);
      front.fill(0);
      out = buffer$1.Buffer.concat([front, out]);
    }
    return out;
  };
  DH.prototype.getPublicKey = function getPublicKey(enc) {
    return formatReturnValue(this._pub, enc);
  };
  DH.prototype.getPrivateKey = function getPrivateKey(enc) {
    return formatReturnValue(this._priv, enc);
  };
  DH.prototype.getPrime = function(enc) {
    return formatReturnValue(this.__prime, enc);
  };
  DH.prototype.getGenerator = function(enc) {
    return formatReturnValue(this._gen, enc);
  };
  DH.prototype.setGenerator = function(gen, enc) {
    enc = enc || "utf8";
    if (!buffer$1.Buffer.isBuffer(gen)) {
      gen = new buffer$1.Buffer(gen, enc);
    }
    this.__gen = gen;
    this._gen = new BN(gen);
    return this;
  };
  function formatReturnValue(bn2, enc) {
    var buf = new buffer$1.Buffer(bn2.toArray());
    if (!enc) {
      return buf;
    } else {
      return buf.toString(enc);
    }
  }
  return dh;
}
var hasRequiredBrowser$4;
function requireBrowser$4() {
  if (hasRequiredBrowser$4)
    return browser$5;
  hasRequiredBrowser$4 = 1;
  var generatePrime2 = requireGeneratePrime();
  var primes = require$$1$3;
  var DH = requireDh();
  function getDiffieHellman(mod) {
    var prime = new buffer$1.Buffer(primes[mod].prime, "hex");
    var gen = new buffer$1.Buffer(primes[mod].gen, "hex");
    return new DH(prime, gen);
  }
  var ENCODINGS = {
    "binary": true,
    "hex": true,
    "base64": true
  };
  function createDiffieHellman(prime, enc, generator, genc) {
    if (buffer$1.Buffer.isBuffer(enc) || ENCODINGS[enc] === void 0) {
      return createDiffieHellman(prime, "binary", enc, generator);
    }
    enc = enc || "binary";
    genc = genc || "binary";
    generator = generator || new buffer$1.Buffer([2]);
    if (!buffer$1.Buffer.isBuffer(generator)) {
      generator = new buffer$1.Buffer(generator, genc);
    }
    if (typeof prime === "number") {
      return new DH(generatePrime2(prime, generator), generator, true);
    }
    if (!buffer$1.Buffer.isBuffer(prime)) {
      prime = new buffer$1.Buffer(prime, enc);
    }
    return new DH(prime, generator, true);
  }
  browser$5.DiffieHellmanGroup = browser$5.createDiffieHellmanGroup = browser$5.getDiffieHellman = getDiffieHellman;
  browser$5.createDiffieHellman = browser$5.DiffieHellman = createDiffieHellman;
  return browser$5;
}
var readableBrowser = { exports: {} };
var processNextickArgs = { exports: {} };
var hasRequiredProcessNextickArgs;
function requireProcessNextickArgs() {
  if (hasRequiredProcessNextickArgs)
    return processNextickArgs.exports;
  hasRequiredProcessNextickArgs = 1;
  if (typeof process$1 === "undefined" || !process$1.version || process$1.version.indexOf("v0.") === 0 || process$1.version.indexOf("v1.") === 0 && process$1.version.indexOf("v1.8.") !== 0) {
    processNextickArgs.exports = { nextTick };
  } else {
    processNextickArgs.exports = process$1;
  }
  function nextTick(fn, arg1, arg2, arg3) {
    if (typeof fn !== "function") {
      throw new TypeError('"callback" argument must be a function');
    }
    var len2 = arguments.length;
    var args, i2;
    switch (len2) {
      case 0:
      case 1:
        return process$1.nextTick(fn);
      case 2:
        return process$1.nextTick(function afterTickOne() {
          fn.call(null, arg1);
        });
      case 3:
        return process$1.nextTick(function afterTickTwo() {
          fn.call(null, arg1, arg2);
        });
      case 4:
        return process$1.nextTick(function afterTickThree() {
          fn.call(null, arg1, arg2, arg3);
        });
      default:
        args = new Array(len2 - 1);
        i2 = 0;
        while (i2 < args.length) {
          args[i2++] = arguments[i2];
        }
        return process$1.nextTick(function afterTick() {
          fn.apply(null, args);
        });
    }
  }
  return processNextickArgs.exports;
}
var isarray;
var hasRequiredIsarray;
function requireIsarray() {
  if (hasRequiredIsarray)
    return isarray;
  hasRequiredIsarray = 1;
  var toString2 = {}.toString;
  isarray = Array.isArray || function(arr) {
    return toString2.call(arr) == "[object Array]";
  };
  return isarray;
}
var streamBrowser;
var hasRequiredStreamBrowser;
function requireStreamBrowser() {
  if (hasRequiredStreamBrowser)
    return streamBrowser;
  hasRequiredStreamBrowser = 1;
  streamBrowser = requireEvents().EventEmitter;
  return streamBrowser;
}
var safeBuffer = { exports: {} };
var hasRequiredSafeBuffer;
function requireSafeBuffer() {
  if (hasRequiredSafeBuffer)
    return safeBuffer.exports;
  hasRequiredSafeBuffer = 1;
  (function(module, exports2) {
    var buffer2 = buffer$1;
    var Buffer = buffer2.Buffer;
    function copyProps(src2, dst) {
      for (var key2 in src2) {
        dst[key2] = src2[key2];
      }
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer2;
    } else {
      copyProps(buffer2, exports2);
      exports2.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length);
    }
    copyProps(Buffer, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size2, fill, encoding) {
      if (typeof size2 !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer(size2);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size2) {
      if (typeof size2 !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer(size2);
    };
    SafeBuffer.allocUnsafeSlow = function(size2) {
      if (typeof size2 !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer2.SlowBuffer(size2);
    };
  })(safeBuffer, safeBuffer.exports);
  return safeBuffer.exports;
}
var util = {};
var hasRequiredUtil;
function requireUtil() {
  if (hasRequiredUtil)
    return util;
  hasRequiredUtil = 1;
  function isArray2(arg) {
    if (Array.isArray) {
      return Array.isArray(arg);
    }
    return objectToString(arg) === "[object Array]";
  }
  util.isArray = isArray2;
  function isBoolean(arg) {
    return typeof arg === "boolean";
  }
  util.isBoolean = isBoolean;
  function isNull(arg) {
    return arg === null;
  }
  util.isNull = isNull;
  function isNullOrUndefined(arg) {
    return arg == null;
  }
  util.isNullOrUndefined = isNullOrUndefined;
  function isNumber2(arg) {
    return typeof arg === "number";
  }
  util.isNumber = isNumber2;
  function isString2(arg) {
    return typeof arg === "string";
  }
  util.isString = isString2;
  function isSymbol(arg) {
    return typeof arg === "symbol";
  }
  util.isSymbol = isSymbol;
  function isUndefined2(arg) {
    return arg === void 0;
  }
  util.isUndefined = isUndefined2;
  function isRegExp(re2) {
    return objectToString(re2) === "[object RegExp]";
  }
  util.isRegExp = isRegExp;
  function isObject2(arg) {
    return typeof arg === "object" && arg !== null;
  }
  util.isObject = isObject2;
  function isDate2(d2) {
    return objectToString(d2) === "[object Date]";
  }
  util.isDate = isDate2;
  function isError(e2) {
    return objectToString(e2) === "[object Error]" || e2 instanceof Error;
  }
  util.isError = isError;
  function isFunction2(arg) {
    return typeof arg === "function";
  }
  util.isFunction = isFunction2;
  function isPrimitive(arg) {
    return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
    typeof arg === "undefined";
  }
  util.isPrimitive = isPrimitive;
  util.isBuffer = buffer$1.Buffer.isBuffer;
  function objectToString(o2) {
    return Object.prototype.toString.call(o2);
  }
  return util;
}
var BufferList = { exports: {} };
var hasRequiredBufferList;
function requireBufferList() {
  if (hasRequiredBufferList)
    return BufferList.exports;
  hasRequiredBufferList = 1;
  (function(module) {
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var Buffer = requireSafeBuffer().Buffer;
    var util2 = requireUtil$1();
    function copyBuffer(src2, target, offset) {
      src2.copy(target, offset);
    }
    module.exports = function() {
      function BufferList2() {
        _classCallCheck(this, BufferList2);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      BufferList2.prototype.push = function push(v2) {
        var entry = { data: v2, next: null };
        if (this.length > 0)
          this.tail.next = entry;
        else
          this.head = entry;
        this.tail = entry;
        ++this.length;
      };
      BufferList2.prototype.unshift = function unshift(v2) {
        var entry = { data: v2, next: this.head };
        if (this.length === 0)
          this.tail = entry;
        this.head = entry;
        ++this.length;
      };
      BufferList2.prototype.shift = function shift() {
        if (this.length === 0)
          return;
        var ret = this.head.data;
        if (this.length === 1)
          this.head = this.tail = null;
        else
          this.head = this.head.next;
        --this.length;
        return ret;
      };
      BufferList2.prototype.clear = function clear() {
        this.head = this.tail = null;
        this.length = 0;
      };
      BufferList2.prototype.join = function join(s2) {
        if (this.length === 0)
          return "";
        var p2 = this.head;
        var ret = "" + p2.data;
        while (p2 = p2.next) {
          ret += s2 + p2.data;
        }
        return ret;
      };
      BufferList2.prototype.concat = function concat2(n2) {
        if (this.length === 0)
          return Buffer.alloc(0);
        var ret = Buffer.allocUnsafe(n2 >>> 0);
        var p2 = this.head;
        var i2 = 0;
        while (p2) {
          copyBuffer(p2.data, ret, i2);
          i2 += p2.data.length;
          p2 = p2.next;
        }
        return ret;
      };
      return BufferList2;
    }();
    if (util2 && util2.inspect && util2.inspect.custom) {
      module.exports.prototype[util2.inspect.custom] = function() {
        var obj = util2.inspect({ length: this.length });
        return this.constructor.name + " " + obj;
      };
    }
  })(BufferList);
  return BufferList.exports;
}
var destroy_1;
var hasRequiredDestroy;
function requireDestroy() {
  if (hasRequiredDestroy)
    return destroy_1;
  hasRequiredDestroy = 1;
  var pna = requireProcessNextickArgs();
  function destroy(err, cb2) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
      if (cb2) {
        cb2(err);
      } else if (err) {
        if (!this._writableState) {
          pna.nextTick(emitErrorNT, this, err);
        } else if (!this._writableState.errorEmitted) {
          this._writableState.errorEmitted = true;
          pna.nextTick(emitErrorNT, this, err);
        }
      }
      return this;
    }
    if (this._readableState) {
      this._readableState.destroyed = true;
    }
    if (this._writableState) {
      this._writableState.destroyed = true;
    }
    this._destroy(err || null, function(err2) {
      if (!cb2 && err2) {
        if (!_this._writableState) {
          pna.nextTick(emitErrorNT, _this, err2);
        } else if (!_this._writableState.errorEmitted) {
          _this._writableState.errorEmitted = true;
          pna.nextTick(emitErrorNT, _this, err2);
        }
      } else if (cb2) {
        cb2(err2);
      }
    });
    return this;
  }
  function undestroy() {
    if (this._readableState) {
      this._readableState.destroyed = false;
      this._readableState.reading = false;
      this._readableState.ended = false;
      this._readableState.endEmitted = false;
    }
    if (this._writableState) {
      this._writableState.destroyed = false;
      this._writableState.ended = false;
      this._writableState.ending = false;
      this._writableState.finalCalled = false;
      this._writableState.prefinished = false;
      this._writableState.finished = false;
      this._writableState.errorEmitted = false;
    }
  }
  function emitErrorNT(self2, err) {
    self2.emit("error", err);
  }
  destroy_1 = {
    destroy,
    undestroy
  };
  return destroy_1;
}
var _stream_writable;
var hasRequired_stream_writable;
function require_stream_writable() {
  if (hasRequired_stream_writable)
    return _stream_writable;
  hasRequired_stream_writable = 1;
  var pna = requireProcessNextickArgs();
  _stream_writable = Writable;
  function CorkedRequest(state2) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
      onCorkedFinish(_this, state2);
    };
  }
  var asyncWrite = !process$1.browser && ["v0.10", "v0.9."].indexOf(process$1.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
  var Duplex;
  Writable.WritableState = WritableState;
  var util2 = Object.create(requireUtil());
  util2.inherits = requireInherits_browser();
  var internalUtil = {
    deprecate: requireBrowser$a()
  };
  var Stream = requireStreamBrowser();
  var Buffer = requireSafeBuffer().Buffer;
  var OurUint8Array = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var destroyImpl = requireDestroy();
  util2.inherits(Writable, Stream);
  function nop() {
  }
  function WritableState(options, stream) {
    Duplex = Duplex || require_stream_duplex();
    options = options || {};
    var isDuplex = stream instanceof Duplex;
    this.objectMode = !!options.objectMode;
    if (isDuplex)
      this.objectMode = this.objectMode || !!options.writableObjectMode;
    var hwm = options.highWaterMark;
    var writableHwm = options.writableHighWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    if (hwm || hwm === 0)
      this.highWaterMark = hwm;
    else if (isDuplex && (writableHwm || writableHwm === 0))
      this.highWaterMark = writableHwm;
    else
      this.highWaterMark = defaultHwm;
    this.highWaterMark = Math.floor(this.highWaterMark);
    this.finalCalled = false;
    this.needDrain = false;
    this.ending = false;
    this.ended = false;
    this.finished = false;
    this.destroyed = false;
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.length = 0;
    this.writing = false;
    this.corked = 0;
    this.sync = true;
    this.bufferProcessing = false;
    this.onwrite = function(er) {
      onwrite(stream, er);
    };
    this.writecb = null;
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    this.pendingcb = 0;
    this.prefinished = false;
    this.errorEmitted = false;
    this.bufferedRequestCount = 0;
    this.corkedRequestsFree = new CorkedRequest(this);
  }
  WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  (function() {
    try {
      Object.defineProperty(WritableState.prototype, "buffer", {
        get: internalUtil.deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
      });
    } catch (_2) {
    }
  })();
  var realHasInstance;
  if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
      value: function(object2) {
        if (realHasInstance.call(this, object2))
          return true;
        if (this !== Writable)
          return false;
        return object2 && object2._writableState instanceof WritableState;
      }
    });
  } else {
    realHasInstance = function(object2) {
      return object2 instanceof this;
    };
  }
  function Writable(options) {
    Duplex = Duplex || require_stream_duplex();
    if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
      return new Writable(options);
    }
    this._writableState = new WritableState(options, this);
    this.writable = true;
    if (options) {
      if (typeof options.write === "function")
        this._write = options.write;
      if (typeof options.writev === "function")
        this._writev = options.writev;
      if (typeof options.destroy === "function")
        this._destroy = options.destroy;
      if (typeof options.final === "function")
        this._final = options.final;
    }
    Stream.call(this);
  }
  Writable.prototype.pipe = function() {
    this.emit("error", new Error("Cannot pipe, not readable"));
  };
  function writeAfterEnd(stream, cb2) {
    var er = new Error("write after end");
    stream.emit("error", er);
    pna.nextTick(cb2, er);
  }
  function validChunk(stream, state2, chunk, cb2) {
    var valid = true;
    var er = false;
    if (chunk === null) {
      er = new TypeError("May not write null values to stream");
    } else if (typeof chunk !== "string" && chunk !== void 0 && !state2.objectMode) {
      er = new TypeError("Invalid non-string/buffer chunk");
    }
    if (er) {
      stream.emit("error", er);
      pna.nextTick(cb2, er);
      valid = false;
    }
    return valid;
  }
  Writable.prototype.write = function(chunk, encoding, cb2) {
    var state2 = this._writableState;
    var ret = false;
    var isBuf = !state2.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) {
      chunk = _uint8ArrayToBuffer(chunk);
    }
    if (typeof encoding === "function") {
      cb2 = encoding;
      encoding = null;
    }
    if (isBuf)
      encoding = "buffer";
    else if (!encoding)
      encoding = state2.defaultEncoding;
    if (typeof cb2 !== "function")
      cb2 = nop;
    if (state2.ended)
      writeAfterEnd(this, cb2);
    else if (isBuf || validChunk(this, state2, chunk, cb2)) {
      state2.pendingcb++;
      ret = writeOrBuffer(this, state2, isBuf, chunk, encoding, cb2);
    }
    return ret;
  };
  Writable.prototype.cork = function() {
    var state2 = this._writableState;
    state2.corked++;
  };
  Writable.prototype.uncork = function() {
    var state2 = this._writableState;
    if (state2.corked) {
      state2.corked--;
      if (!state2.writing && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest)
        clearBuffer(this, state2);
    }
  };
  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    if (typeof encoding === "string")
      encoding = encoding.toLowerCase();
    if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
      throw new TypeError("Unknown encoding: " + encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };
  function decodeChunk(state2, chunk, encoding) {
    if (!state2.objectMode && state2.decodeStrings !== false && typeof chunk === "string") {
      chunk = Buffer.from(chunk, encoding);
    }
    return chunk;
  }
  Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function() {
      return this._writableState.highWaterMark;
    }
  });
  function writeOrBuffer(stream, state2, isBuf, chunk, encoding, cb2) {
    if (!isBuf) {
      var newChunk = decodeChunk(state2, chunk, encoding);
      if (chunk !== newChunk) {
        isBuf = true;
        encoding = "buffer";
        chunk = newChunk;
      }
    }
    var len2 = state2.objectMode ? 1 : chunk.length;
    state2.length += len2;
    var ret = state2.length < state2.highWaterMark;
    if (!ret)
      state2.needDrain = true;
    if (state2.writing || state2.corked) {
      var last2 = state2.lastBufferedRequest;
      state2.lastBufferedRequest = {
        chunk,
        encoding,
        isBuf,
        callback: cb2,
        next: null
      };
      if (last2) {
        last2.next = state2.lastBufferedRequest;
      } else {
        state2.bufferedRequest = state2.lastBufferedRequest;
      }
      state2.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state2, false, len2, chunk, encoding, cb2);
    }
    return ret;
  }
  function doWrite(stream, state2, writev, len2, chunk, encoding, cb2) {
    state2.writelen = len2;
    state2.writecb = cb2;
    state2.writing = true;
    state2.sync = true;
    if (writev)
      stream._writev(chunk, state2.onwrite);
    else
      stream._write(chunk, encoding, state2.onwrite);
    state2.sync = false;
  }
  function onwriteError(stream, state2, sync, er, cb2) {
    --state2.pendingcb;
    if (sync) {
      pna.nextTick(cb2, er);
      pna.nextTick(finishMaybe, stream, state2);
      stream._writableState.errorEmitted = true;
      stream.emit("error", er);
    } else {
      cb2(er);
      stream._writableState.errorEmitted = true;
      stream.emit("error", er);
      finishMaybe(stream, state2);
    }
  }
  function onwriteStateUpdate(state2) {
    state2.writing = false;
    state2.writecb = null;
    state2.length -= state2.writelen;
    state2.writelen = 0;
  }
  function onwrite(stream, er) {
    var state2 = stream._writableState;
    var sync = state2.sync;
    var cb2 = state2.writecb;
    onwriteStateUpdate(state2);
    if (er)
      onwriteError(stream, state2, sync, er, cb2);
    else {
      var finished = needFinish(state2);
      if (!finished && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) {
        clearBuffer(stream, state2);
      }
      if (sync) {
        asyncWrite(afterWrite, stream, state2, finished, cb2);
      } else {
        afterWrite(stream, state2, finished, cb2);
      }
    }
  }
  function afterWrite(stream, state2, finished, cb2) {
    if (!finished)
      onwriteDrain(stream, state2);
    state2.pendingcb--;
    cb2();
    finishMaybe(stream, state2);
  }
  function onwriteDrain(stream, state2) {
    if (state2.length === 0 && state2.needDrain) {
      state2.needDrain = false;
      stream.emit("drain");
    }
  }
  function clearBuffer(stream, state2) {
    state2.bufferProcessing = true;
    var entry = state2.bufferedRequest;
    if (stream._writev && entry && entry.next) {
      var l2 = state2.bufferedRequestCount;
      var buffer2 = new Array(l2);
      var holder = state2.corkedRequestsFree;
      holder.entry = entry;
      var count = 0;
      var allBuffers = true;
      while (entry) {
        buffer2[count] = entry;
        if (!entry.isBuf)
          allBuffers = false;
        entry = entry.next;
        count += 1;
      }
      buffer2.allBuffers = allBuffers;
      doWrite(stream, state2, true, state2.length, buffer2, "", holder.finish);
      state2.pendingcb++;
      state2.lastBufferedRequest = null;
      if (holder.next) {
        state2.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state2.corkedRequestsFree = new CorkedRequest(state2);
      }
      state2.bufferedRequestCount = 0;
    } else {
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb2 = entry.callback;
        var len2 = state2.objectMode ? 1 : chunk.length;
        doWrite(stream, state2, false, len2, chunk, encoding, cb2);
        entry = entry.next;
        state2.bufferedRequestCount--;
        if (state2.writing) {
          break;
        }
      }
      if (entry === null)
        state2.lastBufferedRequest = null;
    }
    state2.bufferedRequest = entry;
    state2.bufferProcessing = false;
  }
  Writable.prototype._write = function(chunk, encoding, cb2) {
    cb2(new Error("_write() is not implemented"));
  };
  Writable.prototype._writev = null;
  Writable.prototype.end = function(chunk, encoding, cb2) {
    var state2 = this._writableState;
    if (typeof chunk === "function") {
      cb2 = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === "function") {
      cb2 = encoding;
      encoding = null;
    }
    if (chunk !== null && chunk !== void 0)
      this.write(chunk, encoding);
    if (state2.corked) {
      state2.corked = 1;
      this.uncork();
    }
    if (!state2.ending)
      endWritable(this, state2, cb2);
  };
  function needFinish(state2) {
    return state2.ending && state2.length === 0 && state2.bufferedRequest === null && !state2.finished && !state2.writing;
  }
  function callFinal(stream, state2) {
    stream._final(function(err) {
      state2.pendingcb--;
      if (err) {
        stream.emit("error", err);
      }
      state2.prefinished = true;
      stream.emit("prefinish");
      finishMaybe(stream, state2);
    });
  }
  function prefinish(stream, state2) {
    if (!state2.prefinished && !state2.finalCalled) {
      if (typeof stream._final === "function") {
        state2.pendingcb++;
        state2.finalCalled = true;
        pna.nextTick(callFinal, stream, state2);
      } else {
        state2.prefinished = true;
        stream.emit("prefinish");
      }
    }
  }
  function finishMaybe(stream, state2) {
    var need = needFinish(state2);
    if (need) {
      prefinish(stream, state2);
      if (state2.pendingcb === 0) {
        state2.finished = true;
        stream.emit("finish");
      }
    }
    return need;
  }
  function endWritable(stream, state2, cb2) {
    state2.ending = true;
    finishMaybe(stream, state2);
    if (cb2) {
      if (state2.finished)
        pna.nextTick(cb2);
      else
        stream.once("finish", cb2);
    }
    state2.ended = true;
    stream.writable = false;
  }
  function onCorkedFinish(corkReq, state2, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while (entry) {
      var cb2 = entry.callback;
      state2.pendingcb--;
      cb2(err);
      entry = entry.next;
    }
    state2.corkedRequestsFree.next = corkReq;
  }
  Object.defineProperty(Writable.prototype, "destroyed", {
    get: function() {
      if (this._writableState === void 0) {
        return false;
      }
      return this._writableState.destroyed;
    },
    set: function(value) {
      if (!this._writableState) {
        return;
      }
      this._writableState.destroyed = value;
    }
  });
  Writable.prototype.destroy = destroyImpl.destroy;
  Writable.prototype._undestroy = destroyImpl.undestroy;
  Writable.prototype._destroy = function(err, cb2) {
    this.end();
    cb2(err);
  };
  return _stream_writable;
}
var _stream_duplex;
var hasRequired_stream_duplex;
function require_stream_duplex() {
  if (hasRequired_stream_duplex)
    return _stream_duplex;
  hasRequired_stream_duplex = 1;
  var pna = requireProcessNextickArgs();
  var objectKeys = Object.keys || function(obj) {
    var keys3 = [];
    for (var key2 in obj) {
      keys3.push(key2);
    }
    return keys3;
  };
  _stream_duplex = Duplex;
  var util2 = Object.create(requireUtil());
  util2.inherits = requireInherits_browser();
  var Readable = require_stream_readable();
  var Writable = require_stream_writable();
  util2.inherits(Duplex, Readable);
  {
    var keys2 = objectKeys(Writable.prototype);
    for (var v2 = 0; v2 < keys2.length; v2++) {
      var method = keys2[v2];
      if (!Duplex.prototype[method])
        Duplex.prototype[method] = Writable.prototype[method];
    }
  }
  function Duplex(options) {
    if (!(this instanceof Duplex))
      return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    if (options && options.readable === false)
      this.readable = false;
    if (options && options.writable === false)
      this.writable = false;
    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false)
      this.allowHalfOpen = false;
    this.once("end", onend);
  }
  Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function() {
      return this._writableState.highWaterMark;
    }
  });
  function onend() {
    if (this.allowHalfOpen || this._writableState.ended)
      return;
    pna.nextTick(onEndNT, this);
  }
  function onEndNT(self2) {
    self2.end();
  }
  Object.defineProperty(Duplex.prototype, "destroyed", {
    get: function() {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return false;
      }
      return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function(value) {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return;
      }
      this._readableState.destroyed = value;
      this._writableState.destroyed = value;
    }
  });
  Duplex.prototype._destroy = function(err, cb2) {
    this.push(null);
    this.end();
    pna.nextTick(cb2, err);
  };
  return _stream_duplex;
}
var _stream_readable;
var hasRequired_stream_readable;
function require_stream_readable() {
  if (hasRequired_stream_readable)
    return _stream_readable;
  hasRequired_stream_readable = 1;
  var pna = requireProcessNextickArgs();
  _stream_readable = Readable;
  var isArray2 = requireIsarray();
  var Duplex;
  Readable.ReadableState = ReadableState;
  requireEvents().EventEmitter;
  var EElistenerCount = function(emitter, type2) {
    return emitter.listeners(type2).length;
  };
  var Stream = requireStreamBrowser();
  var Buffer = requireSafeBuffer().Buffer;
  var OurUint8Array = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var util2 = Object.create(requireUtil());
  util2.inherits = requireInherits_browser();
  var debugUtil = requireUtil$1();
  var debug = void 0;
  if (debugUtil && debugUtil.debuglog) {
    debug = debugUtil.debuglog("stream");
  } else {
    debug = function() {
    };
  }
  var BufferList2 = requireBufferList();
  var destroyImpl = requireDestroy();
  var StringDecoder;
  util2.inherits(Readable, Stream);
  var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
  function prependListener(emitter, event, fn) {
    if (typeof emitter.prependListener === "function")
      return emitter.prependListener(event, fn);
    if (!emitter._events || !emitter._events[event])
      emitter.on(event, fn);
    else if (isArray2(emitter._events[event]))
      emitter._events[event].unshift(fn);
    else
      emitter._events[event] = [fn, emitter._events[event]];
  }
  function ReadableState(options, stream) {
    Duplex = Duplex || require_stream_duplex();
    options = options || {};
    var isDuplex = stream instanceof Duplex;
    this.objectMode = !!options.objectMode;
    if (isDuplex)
      this.objectMode = this.objectMode || !!options.readableObjectMode;
    var hwm = options.highWaterMark;
    var readableHwm = options.readableHighWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    if (hwm || hwm === 0)
      this.highWaterMark = hwm;
    else if (isDuplex && (readableHwm || readableHwm === 0))
      this.highWaterMark = readableHwm;
    else
      this.highWaterMark = defaultHwm;
    this.highWaterMark = Math.floor(this.highWaterMark);
    this.buffer = new BufferList2();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    this.sync = true;
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.destroyed = false;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.awaitDrain = 0;
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      if (!StringDecoder)
        StringDecoder = requireString_decoder().StringDecoder;
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable(options) {
    Duplex = Duplex || require_stream_duplex();
    if (!(this instanceof Readable))
      return new Readable(options);
    this._readableState = new ReadableState(options, this);
    this.readable = true;
    if (options) {
      if (typeof options.read === "function")
        this._read = options.read;
      if (typeof options.destroy === "function")
        this._destroy = options.destroy;
    }
    Stream.call(this);
  }
  Object.defineProperty(Readable.prototype, "destroyed", {
    get: function() {
      if (this._readableState === void 0) {
        return false;
      }
      return this._readableState.destroyed;
    },
    set: function(value) {
      if (!this._readableState) {
        return;
      }
      this._readableState.destroyed = value;
    }
  });
  Readable.prototype.destroy = destroyImpl.destroy;
  Readable.prototype._undestroy = destroyImpl.undestroy;
  Readable.prototype._destroy = function(err, cb2) {
    this.push(null);
    cb2(err);
  };
  Readable.prototype.push = function(chunk, encoding) {
    var state2 = this._readableState;
    var skipChunkCheck;
    if (!state2.objectMode) {
      if (typeof chunk === "string") {
        encoding = encoding || state2.defaultEncoding;
        if (encoding !== state2.encoding) {
          chunk = Buffer.from(chunk, encoding);
          encoding = "";
        }
        skipChunkCheck = true;
      }
    } else {
      skipChunkCheck = true;
    }
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
  };
  Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
  };
  function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    var state2 = stream._readableState;
    if (chunk === null) {
      state2.reading = false;
      onEofChunk(stream, state2);
    } else {
      var er;
      if (!skipChunkCheck)
        er = chunkInvalid(state2, chunk);
      if (er) {
        stream.emit("error", er);
      } else if (state2.objectMode || chunk && chunk.length > 0) {
        if (typeof chunk !== "string" && !state2.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (addToFront) {
          if (state2.endEmitted)
            stream.emit("error", new Error("stream.unshift() after end event"));
          else
            addChunk(stream, state2, chunk, true);
        } else if (state2.ended) {
          stream.emit("error", new Error("stream.push() after EOF"));
        } else {
          state2.reading = false;
          if (state2.decoder && !encoding) {
            chunk = state2.decoder.write(chunk);
            if (state2.objectMode || chunk.length !== 0)
              addChunk(stream, state2, chunk, false);
            else
              maybeReadMore(stream, state2);
          } else {
            addChunk(stream, state2, chunk, false);
          }
        }
      } else if (!addToFront) {
        state2.reading = false;
      }
    }
    return needMoreData(state2);
  }
  function addChunk(stream, state2, chunk, addToFront) {
    if (state2.flowing && state2.length === 0 && !state2.sync) {
      stream.emit("data", chunk);
      stream.read(0);
    } else {
      state2.length += state2.objectMode ? 1 : chunk.length;
      if (addToFront)
        state2.buffer.unshift(chunk);
      else
        state2.buffer.push(chunk);
      if (state2.needReadable)
        emitReadable(stream);
    }
    maybeReadMore(stream, state2);
  }
  function chunkInvalid(state2, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state2.objectMode) {
      er = new TypeError("Invalid non-string/buffer chunk");
    }
    return er;
  }
  function needMoreData(state2) {
    return !state2.ended && (state2.needReadable || state2.length < state2.highWaterMark || state2.length === 0);
  }
  Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
  };
  Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder)
      StringDecoder = requireString_decoder().StringDecoder;
    this._readableState.decoder = new StringDecoder(enc);
    this._readableState.encoding = enc;
    return this;
  };
  var MAX_HWM = 8388608;
  function computeNewHighWaterMark(n2) {
    if (n2 >= MAX_HWM) {
      n2 = MAX_HWM;
    } else {
      n2--;
      n2 |= n2 >>> 1;
      n2 |= n2 >>> 2;
      n2 |= n2 >>> 4;
      n2 |= n2 >>> 8;
      n2 |= n2 >>> 16;
      n2++;
    }
    return n2;
  }
  function howMuchToRead(n2, state2) {
    if (n2 <= 0 || state2.length === 0 && state2.ended)
      return 0;
    if (state2.objectMode)
      return 1;
    if (n2 !== n2) {
      if (state2.flowing && state2.length)
        return state2.buffer.head.data.length;
      else
        return state2.length;
    }
    if (n2 > state2.highWaterMark)
      state2.highWaterMark = computeNewHighWaterMark(n2);
    if (n2 <= state2.length)
      return n2;
    if (!state2.ended) {
      state2.needReadable = true;
      return 0;
    }
    return state2.length;
  }
  Readable.prototype.read = function(n2) {
    debug("read", n2);
    n2 = parseInt(n2, 10);
    var state2 = this._readableState;
    var nOrig = n2;
    if (n2 !== 0)
      state2.emittedReadable = false;
    if (n2 === 0 && state2.needReadable && (state2.length >= state2.highWaterMark || state2.ended)) {
      debug("read: emitReadable", state2.length, state2.ended);
      if (state2.length === 0 && state2.ended)
        endReadable(this);
      else
        emitReadable(this);
      return null;
    }
    n2 = howMuchToRead(n2, state2);
    if (n2 === 0 && state2.ended) {
      if (state2.length === 0)
        endReadable(this);
      return null;
    }
    var doRead = state2.needReadable;
    debug("need readable", doRead);
    if (state2.length === 0 || state2.length - n2 < state2.highWaterMark) {
      doRead = true;
      debug("length less than watermark", doRead);
    }
    if (state2.ended || state2.reading) {
      doRead = false;
      debug("reading or ended", doRead);
    } else if (doRead) {
      debug("do read");
      state2.reading = true;
      state2.sync = true;
      if (state2.length === 0)
        state2.needReadable = true;
      this._read(state2.highWaterMark);
      state2.sync = false;
      if (!state2.reading)
        n2 = howMuchToRead(nOrig, state2);
    }
    var ret;
    if (n2 > 0)
      ret = fromList(n2, state2);
    else
      ret = null;
    if (ret === null) {
      state2.needReadable = true;
      n2 = 0;
    } else {
      state2.length -= n2;
    }
    if (state2.length === 0) {
      if (!state2.ended)
        state2.needReadable = true;
      if (nOrig !== n2 && state2.ended)
        endReadable(this);
    }
    if (ret !== null)
      this.emit("data", ret);
    return ret;
  };
  function onEofChunk(stream, state2) {
    if (state2.ended)
      return;
    if (state2.decoder) {
      var chunk = state2.decoder.end();
      if (chunk && chunk.length) {
        state2.buffer.push(chunk);
        state2.length += state2.objectMode ? 1 : chunk.length;
      }
    }
    state2.ended = true;
    emitReadable(stream);
  }
  function emitReadable(stream) {
    var state2 = stream._readableState;
    state2.needReadable = false;
    if (!state2.emittedReadable) {
      debug("emitReadable", state2.flowing);
      state2.emittedReadable = true;
      if (state2.sync)
        pna.nextTick(emitReadable_, stream);
      else
        emitReadable_(stream);
    }
  }
  function emitReadable_(stream) {
    debug("emit readable");
    stream.emit("readable");
    flow2(stream);
  }
  function maybeReadMore(stream, state2) {
    if (!state2.readingMore) {
      state2.readingMore = true;
      pna.nextTick(maybeReadMore_, stream, state2);
    }
  }
  function maybeReadMore_(stream, state2) {
    var len2 = state2.length;
    while (!state2.reading && !state2.flowing && !state2.ended && state2.length < state2.highWaterMark) {
      debug("maybeReadMore read 0");
      stream.read(0);
      if (len2 === state2.length)
        break;
      else
        len2 = state2.length;
    }
    state2.readingMore = false;
  }
  Readable.prototype._read = function(n2) {
    this.emit("error", new Error("_read() is not implemented"));
  };
  Readable.prototype.pipe = function(dest, pipeOpts) {
    var src2 = this;
    var state2 = this._readableState;
    switch (state2.pipesCount) {
      case 0:
        state2.pipes = dest;
        break;
      case 1:
        state2.pipes = [state2.pipes, dest];
        break;
      default:
        state2.pipes.push(dest);
        break;
    }
    state2.pipesCount += 1;
    debug("pipe count=%d opts=%j", state2.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process$1.stdout && dest !== process$1.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state2.endEmitted)
      pna.nextTick(endFn);
    else
      src2.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
      debug("onunpipe");
      if (readable === src2) {
        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
          unpipeInfo.hasUnpiped = true;
          cleanup();
        }
      }
    }
    function onend() {
      debug("onend");
      dest.end();
    }
    var ondrain = pipeOnDrain(src2);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
      debug("cleanup");
      dest.removeListener("close", onclose);
      dest.removeListener("finish", onfinish);
      dest.removeListener("drain", ondrain);
      dest.removeListener("error", onerror);
      dest.removeListener("unpipe", onunpipe);
      src2.removeListener("end", onend);
      src2.removeListener("end", unpipe);
      src2.removeListener("data", ondata);
      cleanedUp = true;
      if (state2.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
        ondrain();
    }
    var increasedAwaitDrain = false;
    src2.on("data", ondata);
    function ondata(chunk) {
      debug("ondata");
      increasedAwaitDrain = false;
      var ret = dest.write(chunk);
      if (false === ret && !increasedAwaitDrain) {
        if ((state2.pipesCount === 1 && state2.pipes === dest || state2.pipesCount > 1 && indexOf2(state2.pipes, dest) !== -1) && !cleanedUp) {
          debug("false write response, pause", state2.awaitDrain);
          state2.awaitDrain++;
          increasedAwaitDrain = true;
        }
        src2.pause();
      }
    }
    function onerror(er) {
      debug("onerror", er);
      unpipe();
      dest.removeListener("error", onerror);
      if (EElistenerCount(dest, "error") === 0)
        dest.emit("error", er);
    }
    prependListener(dest, "error", onerror);
    function onclose() {
      dest.removeListener("finish", onfinish);
      unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
      debug("onfinish");
      dest.removeListener("close", onclose);
      unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
      debug("unpipe");
      src2.unpipe(dest);
    }
    dest.emit("pipe", src2);
    if (!state2.flowing) {
      debug("pipe resume");
      src2.resume();
    }
    return dest;
  };
  function pipeOnDrain(src2) {
    return function() {
      var state2 = src2._readableState;
      debug("pipeOnDrain", state2.awaitDrain);
      if (state2.awaitDrain)
        state2.awaitDrain--;
      if (state2.awaitDrain === 0 && EElistenerCount(src2, "data")) {
        state2.flowing = true;
        flow2(src2);
      }
    };
  }
  Readable.prototype.unpipe = function(dest) {
    var state2 = this._readableState;
    var unpipeInfo = { hasUnpiped: false };
    if (state2.pipesCount === 0)
      return this;
    if (state2.pipesCount === 1) {
      if (dest && dest !== state2.pipes)
        return this;
      if (!dest)
        dest = state2.pipes;
      state2.pipes = null;
      state2.pipesCount = 0;
      state2.flowing = false;
      if (dest)
        dest.emit("unpipe", this, unpipeInfo);
      return this;
    }
    if (!dest) {
      var dests = state2.pipes;
      var len2 = state2.pipesCount;
      state2.pipes = null;
      state2.pipesCount = 0;
      state2.flowing = false;
      for (var i2 = 0; i2 < len2; i2++) {
        dests[i2].emit("unpipe", this, { hasUnpiped: false });
      }
      return this;
    }
    var index2 = indexOf2(state2.pipes, dest);
    if (index2 === -1)
      return this;
    state2.pipes.splice(index2, 1);
    state2.pipesCount -= 1;
    if (state2.pipesCount === 1)
      state2.pipes = state2.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
  };
  Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    if (ev === "data") {
      if (this._readableState.flowing !== false)
        this.resume();
    } else if (ev === "readable") {
      var state2 = this._readableState;
      if (!state2.endEmitted && !state2.readableListening) {
        state2.readableListening = state2.needReadable = true;
        state2.emittedReadable = false;
        if (!state2.reading) {
          pna.nextTick(nReadingNextTick, this);
        } else if (state2.length) {
          emitReadable(this);
        }
      }
    }
    return res;
  };
  Readable.prototype.addListener = Readable.prototype.on;
  function nReadingNextTick(self2) {
    debug("readable nexttick read 0");
    self2.read(0);
  }
  Readable.prototype.resume = function() {
    var state2 = this._readableState;
    if (!state2.flowing) {
      debug("resume");
      state2.flowing = true;
      resume(this, state2);
    }
    return this;
  };
  function resume(stream, state2) {
    if (!state2.resumeScheduled) {
      state2.resumeScheduled = true;
      pna.nextTick(resume_, stream, state2);
    }
  }
  function resume_(stream, state2) {
    if (!state2.reading) {
      debug("resume read 0");
      stream.read(0);
    }
    state2.resumeScheduled = false;
    state2.awaitDrain = 0;
    stream.emit("resume");
    flow2(stream);
    if (state2.flowing && !state2.reading)
      stream.read(0);
  }
  Readable.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (false !== this._readableState.flowing) {
      debug("pause");
      this._readableState.flowing = false;
      this.emit("pause");
    }
    return this;
  };
  function flow2(stream) {
    var state2 = stream._readableState;
    debug("flow", state2.flowing);
    while (state2.flowing && stream.read() !== null) {
    }
  }
  Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state2 = this._readableState;
    var paused = false;
    stream.on("end", function() {
      debug("wrapped end");
      if (state2.decoder && !state2.ended) {
        var chunk = state2.decoder.end();
        if (chunk && chunk.length)
          _this.push(chunk);
      }
      _this.push(null);
    });
    stream.on("data", function(chunk) {
      debug("wrapped data");
      if (state2.decoder)
        chunk = state2.decoder.write(chunk);
      if (state2.objectMode && (chunk === null || chunk === void 0))
        return;
      else if (!state2.objectMode && (!chunk || !chunk.length))
        return;
      var ret = _this.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });
    for (var i2 in stream) {
      if (this[i2] === void 0 && typeof stream[i2] === "function") {
        this[i2] = function(method) {
          return function() {
            return stream[method].apply(stream, arguments);
          };
        }(i2);
      }
    }
    for (var n2 = 0; n2 < kProxyEvents.length; n2++) {
      stream.on(kProxyEvents[n2], this.emit.bind(this, kProxyEvents[n2]));
    }
    this._read = function(n3) {
      debug("wrapped _read", n3);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };
    return this;
  };
  Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function() {
      return this._readableState.highWaterMark;
    }
  });
  Readable._fromList = fromList;
  function fromList(n2, state2) {
    if (state2.length === 0)
      return null;
    var ret;
    if (state2.objectMode)
      ret = state2.buffer.shift();
    else if (!n2 || n2 >= state2.length) {
      if (state2.decoder)
        ret = state2.buffer.join("");
      else if (state2.buffer.length === 1)
        ret = state2.buffer.head.data;
      else
        ret = state2.buffer.concat(state2.length);
      state2.buffer.clear();
    } else {
      ret = fromListPartial(n2, state2.buffer, state2.decoder);
    }
    return ret;
  }
  function fromListPartial(n2, list, hasStrings) {
    var ret;
    if (n2 < list.head.data.length) {
      ret = list.head.data.slice(0, n2);
      list.head.data = list.head.data.slice(n2);
    } else if (n2 === list.head.data.length) {
      ret = list.shift();
    } else {
      ret = hasStrings ? copyFromBufferString(n2, list) : copyFromBuffer(n2, list);
    }
    return ret;
  }
  function copyFromBufferString(n2, list) {
    var p2 = list.head;
    var c2 = 1;
    var ret = p2.data;
    n2 -= ret.length;
    while (p2 = p2.next) {
      var str = p2.data;
      var nb2 = n2 > str.length ? str.length : n2;
      if (nb2 === str.length)
        ret += str;
      else
        ret += str.slice(0, n2);
      n2 -= nb2;
      if (n2 === 0) {
        if (nb2 === str.length) {
          ++c2;
          if (p2.next)
            list.head = p2.next;
          else
            list.head = list.tail = null;
        } else {
          list.head = p2;
          p2.data = str.slice(nb2);
        }
        break;
      }
      ++c2;
    }
    list.length -= c2;
    return ret;
  }
  function copyFromBuffer(n2, list) {
    var ret = Buffer.allocUnsafe(n2);
    var p2 = list.head;
    var c2 = 1;
    p2.data.copy(ret);
    n2 -= p2.data.length;
    while (p2 = p2.next) {
      var buf = p2.data;
      var nb2 = n2 > buf.length ? buf.length : n2;
      buf.copy(ret, ret.length - n2, 0, nb2);
      n2 -= nb2;
      if (n2 === 0) {
        if (nb2 === buf.length) {
          ++c2;
          if (p2.next)
            list.head = p2.next;
          else
            list.head = list.tail = null;
        } else {
          list.head = p2;
          p2.data = buf.slice(nb2);
        }
        break;
      }
      ++c2;
    }
    list.length -= c2;
    return ret;
  }
  function endReadable(stream) {
    var state2 = stream._readableState;
    if (state2.length > 0)
      throw new Error('"endReadable()" called on non-empty stream');
    if (!state2.endEmitted) {
      state2.ended = true;
      pna.nextTick(endReadableNT, state2, stream);
    }
  }
  function endReadableNT(state2, stream) {
    if (!state2.endEmitted && state2.length === 0) {
      state2.endEmitted = true;
      stream.readable = false;
      stream.emit("end");
    }
  }
  function indexOf2(xs, x2) {
    for (var i2 = 0, l2 = xs.length; i2 < l2; i2++) {
      if (xs[i2] === x2)
        return i2;
    }
    return -1;
  }
  return _stream_readable;
}
var _stream_transform;
var hasRequired_stream_transform;
function require_stream_transform() {
  if (hasRequired_stream_transform)
    return _stream_transform;
  hasRequired_stream_transform = 1;
  _stream_transform = Transform;
  var Duplex = require_stream_duplex();
  var util2 = Object.create(requireUtil());
  util2.inherits = requireInherits_browser();
  util2.inherits(Transform, Duplex);
  function afterTransform(er, data2) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb2 = ts.writecb;
    if (!cb2) {
      return this.emit("error", new Error("write callback called multiple times"));
    }
    ts.writechunk = null;
    ts.writecb = null;
    if (data2 != null)
      this.push(data2);
    cb2(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      this._read(rs.highWaterMark);
    }
  }
  function Transform(options) {
    if (!(this instanceof Transform))
      return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
      afterTransform: afterTransform.bind(this),
      needTransform: false,
      transforming: false,
      writecb: null,
      writechunk: null,
      writeencoding: null
    };
    this._readableState.needReadable = true;
    this._readableState.sync = false;
    if (options) {
      if (typeof options.transform === "function")
        this._transform = options.transform;
      if (typeof options.flush === "function")
        this._flush = options.flush;
    }
    this.on("prefinish", prefinish);
  }
  function prefinish() {
    var _this = this;
    if (typeof this._flush === "function") {
      this._flush(function(er, data2) {
        done(_this, er, data2);
      });
    } else {
      done(this, null, null);
    }
  }
  Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  };
  Transform.prototype._transform = function(chunk, encoding, cb2) {
    throw new Error("_transform() is not implemented");
  };
  Transform.prototype._write = function(chunk, encoding, cb2) {
    var ts = this._transformState;
    ts.writecb = cb2;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
        this._read(rs.highWaterMark);
    }
  };
  Transform.prototype._read = function(n2) {
    var ts = this._transformState;
    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      ts.needTransform = true;
    }
  };
  Transform.prototype._destroy = function(err, cb2) {
    var _this2 = this;
    Duplex.prototype._destroy.call(this, err, function(err2) {
      cb2(err2);
      _this2.emit("close");
    });
  };
  function done(stream, er, data2) {
    if (er)
      return stream.emit("error", er);
    if (data2 != null)
      stream.push(data2);
    if (stream._writableState.length)
      throw new Error("Calling transform done when ws.length != 0");
    if (stream._transformState.transforming)
      throw new Error("Calling transform done when still transforming");
    return stream.push(null);
  }
  return _stream_transform;
}
var _stream_passthrough;
var hasRequired_stream_passthrough;
function require_stream_passthrough() {
  if (hasRequired_stream_passthrough)
    return _stream_passthrough;
  hasRequired_stream_passthrough = 1;
  _stream_passthrough = PassThrough;
  var Transform = require_stream_transform();
  var util2 = Object.create(requireUtil());
  util2.inherits = requireInherits_browser();
  util2.inherits(PassThrough, Transform);
  function PassThrough(options) {
    if (!(this instanceof PassThrough))
      return new PassThrough(options);
    Transform.call(this, options);
  }
  PassThrough.prototype._transform = function(chunk, encoding, cb2) {
    cb2(null, chunk);
  };
  return _stream_passthrough;
}
var hasRequiredReadableBrowser;
function requireReadableBrowser() {
  if (hasRequiredReadableBrowser)
    return readableBrowser.exports;
  hasRequiredReadableBrowser = 1;
  (function(module, exports2) {
    exports2 = module.exports = require_stream_readable();
    exports2.Stream = exports2;
    exports2.Readable = exports2;
    exports2.Writable = require_stream_writable();
    exports2.Duplex = require_stream_duplex();
    exports2.Transform = require_stream_transform();
    exports2.PassThrough = require_stream_passthrough();
  })(readableBrowser, readableBrowser.exports);
  return readableBrowser.exports;
}
var sign$1 = { exports: {} };
var bn$1 = { exports: {} };
bn$1.exports;
var hasRequiredBn$1;
function requireBn$1() {
  if (hasRequiredBn$1)
    return bn$1.exports;
  hasRequiredBn$1 = 1;
  (function(module) {
    (function(module2, exports2) {
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number2, base2, endian) {
        if (BN.isBN(number2)) {
          return number2;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number2 !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number2 || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer = window.Buffer;
        } else {
          Buffer = buffer$1.Buffer;
        }
      } catch (e2) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max2(left2, right2) {
        if (left2.cmp(right2) > 0)
          return left2;
        return right2;
      };
      BN.min = function min2(left2, right2) {
        if (left2.cmp(right2) < 0)
          return left2;
        return right2;
      };
      BN.prototype._init = function init2(number2, base2, endian) {
        if (typeof number2 === "number") {
          return this._initNumber(number2, base2, endian);
        }
        if (typeof number2 === "object") {
          return this._initArray(number2, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number2 = number2.toString().replace(/\s+/g, "");
        var start = 0;
        if (number2[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number2.length) {
          if (base2 === 16) {
            this._parseHex(number2, start, endian);
          } else {
            this._parseBase(number2, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN.prototype._initNumber = function _initNumber(number2, base2, endian) {
        if (number2 < 0) {
          this.negative = 1;
          number2 = -number2;
        }
        if (number2 < 67108864) {
          this.words = [number2 & 67108863];
          this.length = 1;
        } else if (number2 < 4503599627370496) {
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number2 < 9007199254740992);
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN.prototype._initArray = function _initArray(number2, base2, endian) {
        assert(typeof number2.length === "number");
        if (number2.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number2.length / 3);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var j2, w2;
        var off = 0;
        if (endian === "be") {
          for (i2 = number2.length - 1, j2 = 0; i2 >= 0; i2 -= 3) {
            w2 = number2[i2] | number2[i2 - 1] << 8 | number2[i2 - 2] << 16;
            this.words[j2] |= w2 << off & 67108863;
            this.words[j2 + 1] = w2 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j2++;
            }
          }
        } else if (endian === "le") {
          for (i2 = 0, j2 = 0; i2 < number2.length; i2 += 3) {
            w2 = number2[i2] | number2[i2 + 1] << 8 | number2[i2 + 2] << 16;
            this.words[j2] |= w2 << off & 67108863;
            this.words[j2 + 1] = w2 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j2++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string2, index2) {
        var c2 = string2.charCodeAt(index2);
        if (c2 >= 48 && c2 <= 57) {
          return c2 - 48;
        } else if (c2 >= 65 && c2 <= 70) {
          return c2 - 55;
        } else if (c2 >= 97 && c2 <= 102) {
          return c2 - 87;
        } else {
          assert(false, "Invalid character in " + string2);
        }
      }
      function parseHexByte(string2, lowerBound, index2) {
        var r2 = parseHex4Bits(string2, index2);
        if (index2 - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string2, index2 - 1) << 4;
        }
        return r2;
      }
      BN.prototype._parseHex = function _parseHex(number2, start, endian) {
        this.length = Math.ceil((number2.length - start) / 6);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var off = 0;
        var j2 = 0;
        var w2;
        if (endian === "be") {
          for (i2 = number2.length - 1; i2 >= start; i2 -= 2) {
            w2 = parseHexByte(number2, start, i2) << off;
            this.words[j2] |= w2 & 67108863;
            if (off >= 18) {
              off -= 18;
              j2 += 1;
              this.words[j2] |= w2 >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number2.length - start;
          for (i2 = parseLength % 2 === 0 ? start + 1 : start; i2 < number2.length; i2 += 2) {
            w2 = parseHexByte(number2, start, i2) << off;
            this.words[j2] |= w2 & 67108863;
            if (off >= 18) {
              off -= 18;
              j2 += 1;
              this.words[j2] |= w2 >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r2 = 0;
        var b2 = 0;
        var len2 = Math.min(str.length, end);
        for (var i2 = start; i2 < len2; i2++) {
          var c2 = str.charCodeAt(i2) - 48;
          r2 *= mul;
          if (c2 >= 49) {
            b2 = c2 - 49 + 10;
          } else if (c2 >= 17) {
            b2 = c2 - 17 + 10;
          } else {
            b2 = c2;
          }
          assert(c2 >= 0 && b2 < mul, "Invalid character");
          r2 += b2;
        }
        return r2;
      }
      BN.prototype._parseBase = function _parseBase(number2, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number2.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i2 = start; i2 < end; i2 += limbLen) {
          word = parseBase(number2, i2, i2 + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number2, i2, number2.length, base2);
          for (i2 = 0; i2 < mod; i2++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN.prototype.copy = function copy2(dest) {
        dest.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          dest.words[i2] = this.words[i2];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src2) {
        dest.words = src2.words;
        dest.length = src2.length;
        dest.negative = src2.negative;
        dest.red = src2.red;
      }
      BN.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN.prototype.clone = function clone() {
        var r2 = new BN(null);
        this.copy(r2);
        return r2;
      };
      BN.prototype._expand = function _expand(size2) {
        while (this.length < size2) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e2) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString2(base2, padding) {
        base2 = base2 || 10;
        padding = padding | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w2 = this.words[i2];
            var word = ((w2 << off | carry) & 16777215).toString(16);
            carry = w2 >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i2--;
            }
            if (carry !== 0 || i2 !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c2 = this.clone();
          c2.negative = 0;
          while (!c2.isZero()) {
            var r2 = c2.modrn(groupBase).toString(base2);
            c2 = c2.idivn(groupBase);
            if (!c2.isZero()) {
              out = zeros[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };
      if (Buffer) {
        BN.prototype.toBuffer = function toBuffer2(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }
      BN.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType2, size2) {
        if (ArrayType2.allocUnsafe) {
          return ArrayType2.allocUnsafe(size2);
        }
        return new ArrayType2(size2);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType2, endian, length) {
        this._strip();
        var byteLength2 = this.byteLength();
        var reqLength = length || Math.max(1, byteLength2);
        assert(byteLength2 <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType2, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength2);
        return res;
      };
      BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength2) {
        var position = 0;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength2) {
        var position = res.length - 1;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w2) {
          return 32 - Math.clz32(w2);
        };
      } else {
        BN.prototype._countBits = function _countBits(w2) {
          var t2 = w2;
          var r2 = 0;
          if (t2 >= 4096) {
            r2 += 13;
            t2 >>>= 13;
          }
          if (t2 >= 64) {
            r2 += 7;
            t2 >>>= 7;
          }
          if (t2 >= 8) {
            r2 += 4;
            t2 >>>= 4;
          }
          if (t2 >= 2) {
            r2 += 2;
            t2 >>>= 2;
          }
          return r2 + t2;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w2) {
        if (w2 === 0)
          return 26;
        var t2 = w2;
        var r2 = 0;
        if ((t2 & 8191) === 0) {
          r2 += 13;
          t2 >>>= 13;
        }
        if ((t2 & 127) === 0) {
          r2 += 7;
          t2 >>>= 7;
        }
        if ((t2 & 15) === 0) {
          r2 += 4;
          t2 >>>= 4;
        }
        if ((t2 & 3) === 0) {
          r2 += 2;
          t2 >>>= 2;
        }
        if ((t2 & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN.prototype.bitLength = function bitLength() {
        var w2 = this.words[this.length - 1];
        var hi2 = this._countBits(w2);
        return (this.length - 1) * 26 + hi2;
      };
      function toBitArray(num) {
        var w2 = new Array(num.bitLength());
        for (var bit = 0; bit < w2.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w2[bit] = num.words[off] >>> wbit & 1;
        }
        return w2;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r2 = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var b2 = this._zeroBits(this.words[i2]);
          r2 += b2;
          if (b2 !== 26)
            break;
        }
        return r2;
      };
      BN.prototype.byteLength = function byteLength2() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i2 = 0; i2 < num.length; i2++) {
          this.words[i2] = this.words[i2] | num.words[i2];
        }
        return this._strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b2;
        if (this.length > num.length) {
          b2 = num;
        } else {
          b2 = this;
        }
        for (var i2 = 0; i2 < b2.length; i2++) {
          this.words[i2] = this.words[i2] & num.words[i2];
        }
        this.length = b2.length;
        return this._strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a2;
        var b2;
        if (this.length > num.length) {
          a2 = this;
          b2 = num;
        } else {
          a2 = num;
          b2 = this;
        }
        for (var i2 = 0; i2 < b2.length; i2++) {
          this.words[i2] = a2.words[i2] ^ b2.words[i2];
        }
        if (this !== a2) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        this.length = a2.length;
        return this._strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor2(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i2 = 0; i2 < bytesNeeded; i2++) {
          this.words[i2] = ~this.words[i2] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a2, b2;
        if (this.length > num.length) {
          a2 = this;
          b2 = num;
        } else {
          a2 = num;
          b2 = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b2.length; i2++) {
          r2 = (a2.words[i2] | 0) + (b2.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i2 < a2.length; i2++) {
          r2 = (a2.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a2.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a2 !== this) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a2, b2;
        if (cmp > 0) {
          a2 = this;
          b2 = num;
        } else {
          a2 = num;
          b2 = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b2.length; i2++) {
          r2 = (a2.words[i2] | 0) - (b2.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        for (; carry !== 0 && i2 < a2.length; i2++) {
          r2 = (a2.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        if (carry === 0 && i2 < a2.length && a2 !== this) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        this.length = Math.max(this.length, i2);
        if (a2 !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len2 = self2.length + num.length | 0;
        out.length = len2;
        len2 = len2 - 1 | 0;
        var a2 = self2.words[0] | 0;
        var b2 = num.words[0] | 0;
        var r2 = a2 * b2;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k2 = 1; k2 < len2; k2++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k2, num.length - 1);
          for (var j2 = Math.max(0, k2 - self2.length + 1); j2 <= maxJ; j2++) {
            var i2 = k2 - j2 | 0;
            a2 = self2.words[i2] | 0;
            b2 = num.words[j2] | 0;
            r2 = a2 * b2 + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k2] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k2] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a2 = self2.words;
        var b2 = num.words;
        var o2 = out.words;
        var c2 = 0;
        var lo;
        var mid;
        var hi2;
        var a0 = a2[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a2[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a22 = a2[2] | 0;
        var al2 = a22 & 8191;
        var ah2 = a22 >>> 13;
        var a3 = a2[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a2[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a2[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a2[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a2[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a2[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a2[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b2[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b2[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b22 = b2[2] | 0;
        var bl2 = b22 & 8191;
        var bh2 = b22 >>> 13;
        var b3 = b2[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b2[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b2[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b2[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b2[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b2[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b2[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi2 = Math.imul(ah0, bh0);
        var w0 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi2 = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi2 = hi2 + Math.imul(ah0, bh1) | 0;
        var w1 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi2 = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi2 = hi2 + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi2 = hi2 + Math.imul(ah0, bh2) | 0;
        var w2 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi2 = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi2 = hi2 + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi2 = hi2 + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi2 = hi2 + Math.imul(ah0, bh3) | 0;
        var w3 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi2 = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi2 = hi2 + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi2 = hi2 + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi2 = hi2 + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi2 = hi2 + Math.imul(ah0, bh4) | 0;
        var w4 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi2 = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi2 = hi2 + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi2 = hi2 + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi2 = hi2 + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi2 = hi2 + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi2 = hi2 + Math.imul(ah0, bh5) | 0;
        var w5 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi2 = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi2 = hi2 + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi2 = hi2 + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi2 = hi2 + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi2 = hi2 + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi2 = hi2 + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi2 = hi2 + Math.imul(ah0, bh6) | 0;
        var w6 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi2 = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi2 = hi2 + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi2 = hi2 + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi2 = hi2 + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi2 = hi2 + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi2 = hi2 + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi2 = hi2 + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi2 = hi2 + Math.imul(ah0, bh7) | 0;
        var w7 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi2 = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi2 = hi2 + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi2 = hi2 + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi2 = hi2 + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi2 = hi2 + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi2 = hi2 + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi2 = hi2 + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi2 = hi2 + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi2 = hi2 + Math.imul(ah0, bh8) | 0;
        var w8 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi2 = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi2 = hi2 + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi2 = hi2 + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi2 = hi2 + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi2 = hi2 + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi2 = hi2 + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi2 = hi2 + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi2 = hi2 + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi2 = hi2 + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi2 = hi2 + Math.imul(ah0, bh9) | 0;
        var w9 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi2 = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi2 = hi2 + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi2 = hi2 + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi2 = hi2 + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi2 = hi2 + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi2 = hi2 + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi2 = hi2 + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi2 = hi2 + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi2 = hi2 + Math.imul(ah1, bh9) | 0;
        var w10 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi2 = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi2 = hi2 + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi2 = hi2 + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi2 = hi2 + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi2 = hi2 + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi2 = hi2 + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi2 = hi2 + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi2 = hi2 + Math.imul(ah2, bh9) | 0;
        var w11 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi2 = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi2 = hi2 + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi2 = hi2 + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi2 = hi2 + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi2 = hi2 + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi2 = hi2 + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi2 = hi2 + Math.imul(ah3, bh9) | 0;
        var w12 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi2 = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi2 = hi2 + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi2 = hi2 + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi2 = hi2 + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi2 = hi2 + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi2 = hi2 + Math.imul(ah4, bh9) | 0;
        var w13 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi2 = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi2 = hi2 + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi2 = hi2 + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi2 = hi2 + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi2 = hi2 + Math.imul(ah5, bh9) | 0;
        var w14 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi2 = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi2 = hi2 + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi2 = hi2 + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi2 = hi2 + Math.imul(ah6, bh9) | 0;
        var w15 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi2 = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi2 = hi2 + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi2 = hi2 + Math.imul(ah7, bh9) | 0;
        var w16 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi2 = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi2 = hi2 + Math.imul(ah8, bh9) | 0;
        var w17 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi2 = Math.imul(ah9, bh9);
        var w18 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o2[0] = w0;
        o2[1] = w1;
        o2[2] = w2;
        o2[3] = w3;
        o2[4] = w4;
        o2[5] = w5;
        o2[6] = w6;
        o2[7] = w7;
        o2[8] = w8;
        o2[9] = w9;
        o2[10] = w10;
        o2[11] = w11;
        o2[12] = w12;
        o2[13] = w13;
        o2[14] = w14;
        o2[15] = w15;
        o2[16] = w16;
        o2[17] = w17;
        o2[18] = w18;
        if (c2 !== 0) {
          o2[19] = c2;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k2 = 0; k2 < out.length - 1; k2++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k2, num.length - 1);
          for (var j2 = Math.max(0, k2 - self2.length + 1); j2 <= maxJ; j2++) {
            var i2 = k2 - j2;
            var a2 = self2.words[i2] | 0;
            var b2 = num.words[j2] | 0;
            var r2 = a2 * b2;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k2] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k2] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len2 = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len2 < 63) {
          res = smallMulTo(this, num, out);
        } else if (len2 < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var w2 = (this.words[i2] | 0) * num;
          var lo = (w2 & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w2 / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i2] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w2 = toBitArray(num);
        if (w2.length === 0)
          return new BN(1);
        var res = this;
        for (var i2 = 0; i2 < w2.length; i2++, res = res.sqr()) {
          if (w2[i2] !== 0)
            break;
        }
        if (++i2 < w2.length) {
          for (var q2 = res.sqr(); i2 < w2.length; i2++, q2 = q2.sqr()) {
            if (w2[i2] === 0)
              continue;
            res = res.mul(q2);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i2;
        if (r2 !== 0) {
          var carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            var newCarry = this.words[i2] & carryMask;
            var c2 = (this.words[i2] | 0) - newCarry << r2;
            this.words[i2] = c2 | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i2] = carry;
            this.length++;
          }
        }
        if (s2 !== 0) {
          for (i2 = this.length - 1; i2 >= 0; i2--) {
            this.words[i2 + s2] = this.words[i2];
          }
          for (i2 = 0; i2 < s2; i2++) {
            this.words[i2] = 0;
          }
          this.length += s2;
        }
        return this._strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h2;
        if (hint) {
          h2 = (hint - hint % 26) / 26;
        } else {
          h2 = 0;
        }
        var r2 = bits % 26;
        var s2 = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h2 -= s2;
        h2 = Math.max(0, h2);
        if (maskedWords) {
          for (var i2 = 0; i2 < s2; i2++) {
            maskedWords.words[i2] = this.words[i2];
          }
          maskedWords.length = s2;
        }
        if (s2 === 0)
          ;
        else if (this.length > s2) {
          this.length -= s2;
          for (i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = this.words[i2 + s2];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h2); i2--) {
          var word = this.words[i2] | 0;
          this.words[i2] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q2 = 1 << r2;
        if (this.length <= s2)
          return false;
        var w2 = this.words[s2];
        return !!(w2 & q2);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s2) {
          return this;
        }
        if (r2 !== 0) {
          s2++;
        }
        this.length = Math.min(s2, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
          this.words[i2] -= 67108864;
          if (i2 === this.length - 1) {
            this.words[i2 + 1] = 1;
          } else {
            this.words[i2 + 1]++;
          }
        }
        this.length = Math.max(this.length, i2 + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
            this.words[i2] += 67108864;
            this.words[i2 + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len2 = num.length + shift;
        var i2;
        this._expand(len2);
        var w2;
        var carry = 0;
        for (i2 = 0; i2 < num.length; i2++) {
          w2 = (this.words[i2 + shift] | 0) + carry;
          var right2 = (num.words[i2] | 0) * mul;
          w2 -= right2 & 67108863;
          carry = (w2 >> 26) - (right2 / 67108864 | 0);
          this.words[i2 + shift] = w2 & 67108863;
        }
        for (; i2 < this.length - shift; i2++) {
          w2 = (this.words[i2 + shift] | 0) + carry;
          carry = w2 >> 26;
          this.words[i2 + shift] = w2 & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert(carry === -1);
        carry = 0;
        for (i2 = 0; i2 < this.length; i2++) {
          w2 = -(this.words[i2] | 0) + carry;
          carry = w2 >> 26;
          this.words[i2] = w2 & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a2 = this.clone();
        var b2 = num;
        var bhi = b2.words[b2.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b2 = b2.ushln(shift);
          a2.iushln(shift);
          bhi = b2.words[b2.length - 1] | 0;
        }
        var m2 = a2.length - b2.length;
        var q2;
        if (mode !== "mod") {
          q2 = new BN(null);
          q2.length = m2 + 1;
          q2.words = new Array(q2.length);
          for (var i2 = 0; i2 < q2.length; i2++) {
            q2.words[i2] = 0;
          }
        }
        var diff = a2.clone()._ishlnsubmul(b2, 1, m2);
        if (diff.negative === 0) {
          a2 = diff;
          if (q2) {
            q2.words[m2] = 1;
          }
        }
        for (var j2 = m2 - 1; j2 >= 0; j2--) {
          var qj2 = (a2.words[b2.length + j2] | 0) * 67108864 + (a2.words[b2.length + j2 - 1] | 0);
          qj2 = Math.min(qj2 / bhi | 0, 67108863);
          a2._ishlnsubmul(b2, qj2, j2);
          while (a2.negative !== 0) {
            qj2--;
            a2.negative = 0;
            a2._ishlnsubmul(b2, 1, j2);
            if (!a2.isZero()) {
              a2.negative ^= 1;
            }
          }
          if (q2) {
            q2.words[j2] = qj2;
          }
        }
        if (q2) {
          q2._strip();
        }
        a2._strip();
        if (mode !== "div" && shift !== 0) {
          a2.iushrn(shift);
        }
        return {
          div: q2 || null,
          mod: a2
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert(num <= 67108863);
        var p2 = (1 << 26) % num;
        var acc = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          acc = (p2 * acc + (this.words[i2] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert(num <= 67108863);
        var carry = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var w2 = (this.words[i2] | 0) + carry * 67108864;
          this.words[i2] = w2 / num | 0;
          carry = w2 % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p2) {
        assert(p2.negative === 0);
        assert(!p2.isZero());
        var x2 = this;
        var y2 = p2.clone();
        if (x2.negative !== 0) {
          x2 = x2.umod(p2);
        } else {
          x2 = x2.clone();
        }
        var A2 = new BN(1);
        var B2 = new BN(0);
        var C2 = new BN(0);
        var D2 = new BN(1);
        var g2 = 0;
        while (x2.isEven() && y2.isEven()) {
          x2.iushrn(1);
          y2.iushrn(1);
          ++g2;
        }
        var yp = y2.clone();
        var xp = x2.clone();
        while (!x2.isZero()) {
          for (var i2 = 0, im = 1; (x2.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1)
            ;
          if (i2 > 0) {
            x2.iushrn(i2);
            while (i2-- > 0) {
              if (A2.isOdd() || B2.isOdd()) {
                A2.iadd(yp);
                B2.isub(xp);
              }
              A2.iushrn(1);
              B2.iushrn(1);
            }
          }
          for (var j2 = 0, jm = 1; (y2.words[0] & jm) === 0 && j2 < 26; ++j2, jm <<= 1)
            ;
          if (j2 > 0) {
            y2.iushrn(j2);
            while (j2-- > 0) {
              if (C2.isOdd() || D2.isOdd()) {
                C2.iadd(yp);
                D2.isub(xp);
              }
              C2.iushrn(1);
              D2.iushrn(1);
            }
          }
          if (x2.cmp(y2) >= 0) {
            x2.isub(y2);
            A2.isub(C2);
            B2.isub(D2);
          } else {
            y2.isub(x2);
            C2.isub(A2);
            D2.isub(B2);
          }
        }
        return {
          a: C2,
          b: D2,
          gcd: y2.iushln(g2)
        };
      };
      BN.prototype._invmp = function _invmp(p2) {
        assert(p2.negative === 0);
        assert(!p2.isZero());
        var a2 = this;
        var b2 = p2.clone();
        if (a2.negative !== 0) {
          a2 = a2.umod(p2);
        } else {
          a2 = a2.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b2.clone();
        while (a2.cmpn(1) > 0 && b2.cmpn(1) > 0) {
          for (var i2 = 0, im = 1; (a2.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1)
            ;
          if (i2 > 0) {
            a2.iushrn(i2);
            while (i2-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j2 = 0, jm = 1; (b2.words[0] & jm) === 0 && j2 < 26; ++j2, jm <<= 1)
            ;
          if (j2 > 0) {
            b2.iushrn(j2);
            while (j2-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a2.cmp(b2) >= 0) {
            a2.isub(b2);
            x1.isub(x2);
          } else {
            b2.isub(a2);
            x2.isub(x1);
          }
        }
        var res;
        if (a2.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p2);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a2 = this.clone();
        var b2 = num.clone();
        a2.negative = 0;
        b2.negative = 0;
        for (var shift = 0; a2.isEven() && b2.isEven(); shift++) {
          a2.iushrn(1);
          b2.iushrn(1);
        }
        do {
          while (a2.isEven()) {
            a2.iushrn(1);
          }
          while (b2.isEven()) {
            b2.iushrn(1);
          }
          var r2 = a2.cmp(b2);
          if (r2 < 0) {
            var t2 = a2;
            a2 = b2;
            b2 = t2;
          } else if (r2 === 0 || b2.cmpn(1) === 0) {
            break;
          }
          a2.isub(b2);
        } while (true);
        return b2.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q2 = 1 << r2;
        if (this.length <= s2) {
          this._expand(s2 + 1);
          this.words[s2] |= q2;
          return this;
        }
        var carry = q2;
        for (var i2 = s2; carry !== 0 && i2 < this.length; i2++) {
          var w2 = this.words[i2] | 0;
          w2 += carry;
          carry = w2 >>> 26;
          w2 &= 67108863;
          this.words[i2] = w2;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w2 = this.words[0] | 0;
          res = w2 === num ? 0 : w2 < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var a2 = this.words[i2] | 0;
          var b2 = num.words[i2] | 0;
          if (a2 === b2)
            continue;
          if (a2 < b2) {
            res = -1;
          } else if (a2 > b2) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p2) {
        this.name = name2;
        this.p = new BN(p2, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i2 = 0; i2 < outLen; i2++) {
          output.words[i2] = input.words[i2];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i2 = 10; i2 < input.length; i2++) {
          var next = input.words[i2] | 0;
          input.words[i2 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i2 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var w2 = num.words[i2] | 0;
          lo += w2 * 977;
          num.words[i2] = lo & 67108863;
          lo = w2 * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var hi2 = (num.words[i2] | 0) * 19 + carry;
          var lo = hi2 & 67108863;
          hi2 >>>= 26;
          num.words[i2] = lo;
          carry = hi2;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m2) {
        if (typeof m2 === "string") {
          var prime = BN._prime(m2);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m2.gtn(1), "modulus must be greater than 1");
          this.m = m2;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a2) {
        assert(a2.negative === 0, "red works only with positives");
        assert(a2.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a2, b2) {
        assert((a2.negative | b2.negative) === 0, "red works only with positives");
        assert(
          a2.red && a2.red === b2.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a2) {
        if (this.prime)
          return this.prime.ireduce(a2)._forceRed(this);
        move(a2, a2.umod(this.m)._forceRed(this));
        return a2;
      };
      Red.prototype.neg = function neg(a2) {
        if (a2.isZero()) {
          return a2.clone();
        }
        return this.m.sub(a2)._forceRed(this);
      };
      Red.prototype.add = function add(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.add(b2);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.iadd(b2);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.sub(b2);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.isub(b2);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a2, num) {
        this._verify1(a2);
        return this.imod(a2.ushln(num));
      };
      Red.prototype.imul = function imul(a2, b2) {
        this._verify2(a2, b2);
        return this.imod(a2.imul(b2));
      };
      Red.prototype.mul = function mul(a2, b2) {
        this._verify2(a2, b2);
        return this.imod(a2.mul(b2));
      };
      Red.prototype.isqr = function isqr(a2) {
        return this.imul(a2, a2.clone());
      };
      Red.prototype.sqr = function sqr(a2) {
        return this.mul(a2, a2);
      };
      Red.prototype.sqrt = function sqrt(a2) {
        if (a2.isZero())
          return a2.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a2, pow);
        }
        var q2 = this.m.subn(1);
        var s2 = 0;
        while (!q2.isZero() && q2.andln(1) === 0) {
          s2++;
          q2.iushrn(1);
        }
        assert(!q2.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z2 = this.m.bitLength();
        z2 = new BN(2 * z2 * z2).toRed(this);
        while (this.pow(z2, lpow).cmp(nOne) !== 0) {
          z2.redIAdd(nOne);
        }
        var c2 = this.pow(z2, q2);
        var r2 = this.pow(a2, q2.addn(1).iushrn(1));
        var t2 = this.pow(a2, q2);
        var m2 = s2;
        while (t2.cmp(one) !== 0) {
          var tmp = t2;
          for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
            tmp = tmp.redSqr();
          }
          assert(i2 < m2);
          var b2 = this.pow(c2, new BN(1).iushln(m2 - i2 - 1));
          r2 = r2.redMul(b2);
          c2 = b2.redSqr();
          t2 = t2.redMul(c2);
          m2 = i2;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a2) {
        var inv = a2._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a2, num) {
        if (num.isZero())
          return new BN(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a2.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a2;
        for (var i2 = 2; i2 < wnd.length; i2++) {
          wnd[i2] = this.mul(wnd[i2 - 1], a2);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i2 = num.length - 1; i2 >= 0; i2--) {
          var word = num.words[i2];
          for (var j2 = start - 1; j2 >= 0; j2--) {
            var bit = word >> j2 & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i2 !== 0 || j2 !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont2(num) {
        return new Mont(num);
      };
      function Mont(m2) {
        Red.call(this, m2);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a2, b2) {
        if (a2.isZero() || b2.isZero()) {
          a2.words[0] = 0;
          a2.length = 1;
          return a2;
        }
        var t2 = a2.imul(b2);
        var c2 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t2.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a2, b2) {
        if (a2.isZero() || b2.isZero())
          return new BN(0)._forceRed(this);
        var t2 = a2.mul(b2);
        var c2 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t2.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a2) {
        var res = this.imod(a2._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal);
  })(bn$1);
  return bn$1.exports;
}
var browserifyRsa;
var hasRequiredBrowserifyRsa;
function requireBrowserifyRsa() {
  if (hasRequiredBrowserifyRsa)
    return browserifyRsa;
  hasRequiredBrowserifyRsa = 1;
  var BN = requireBn$1();
  var randomBytes = requireBrowser$b();
  function blind(priv) {
    var r2 = getr(priv);
    var blinder = r2.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed();
    return { blinder, unblinder: r2.invm(priv.modulus) };
  }
  function getr(priv) {
    var len2 = priv.modulus.byteLength();
    var r2;
    do {
      r2 = new BN(randomBytes(len2));
    } while (r2.cmp(priv.modulus) >= 0 || !r2.umod(priv.prime1) || !r2.umod(priv.prime2));
    return r2;
  }
  function crt(msg, priv) {
    var blinds = blind(priv);
    var len2 = priv.modulus.byteLength();
    var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed(BN.mont(priv.prime1));
    var c2 = blinded.toRed(BN.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p2 = priv.prime1;
    var q2 = priv.prime2;
    var m1 = c1.redPow(priv.exponent1).fromRed();
    var m2 = c2.redPow(priv.exponent2).fromRed();
    var h2 = m1.isub(m2).imul(qinv).umod(p2).imul(q2);
    return m2.iadd(h2).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(buffer$1.Buffer, "be", len2);
  }
  crt.getr = getr;
  browserifyRsa = crt;
  return browserifyRsa;
}
var elliptic = {};
const name$1 = "elliptic";
const version$2 = "6.5.7";
const description = "EC cryptography";
const main$1 = "lib/elliptic.js";
const files$1 = [
  "lib"
];
const scripts$1 = {
  lint: "eslint lib test",
  "lint:fix": "npm run lint -- --fix",
  unit: "istanbul test _mocha --reporter=spec test/index.js",
  test: "npm run lint && npm run unit",
  version: "grunt dist && git add dist/"
};
const repository$1 = {
  type: "git",
  url: "git@github.com:indutny/elliptic"
};
const keywords = [
  "EC",
  "Elliptic",
  "curve",
  "Cryptography"
];
const author$1 = "Fedor Indutny <fedor@indutny.com>";
const license$1 = "MIT";
const bugs = {
  url: "https://github.com/indutny/elliptic/issues"
};
const homepage = "https://github.com/indutny/elliptic";
const devDependencies$1 = {
  brfs: "^2.0.2",
  coveralls: "^3.1.0",
  eslint: "^7.6.0",
  grunt: "^1.2.1",
  "grunt-browserify": "^5.3.0",
  "grunt-cli": "^1.3.2",
  "grunt-contrib-connect": "^3.0.0",
  "grunt-contrib-copy": "^1.0.0",
  "grunt-contrib-uglify": "^5.0.0",
  "grunt-mocha-istanbul": "^5.0.2",
  "grunt-saucelabs": "^9.0.1",
  istanbul: "^0.4.5",
  mocha: "^8.0.1"
};
const dependencies$1 = {
  "bn.js": "^4.11.9",
  brorand: "^1.1.0",
  "hash.js": "^1.0.0",
  "hmac-drbg": "^1.0.1",
  inherits: "^2.0.4",
  "minimalistic-assert": "^1.0.1",
  "minimalistic-crypto-utils": "^1.0.1"
};
const require$$0$1 = {
  name: name$1,
  version: version$2,
  description,
  main: main$1,
  files: files$1,
  scripts: scripts$1,
  repository: repository$1,
  keywords,
  author: author$1,
  license: license$1,
  bugs,
  homepage,
  devDependencies: devDependencies$1,
  dependencies: dependencies$1
};
var utils$c = {};
var utils$b = {};
var hasRequiredUtils$2;
function requireUtils$2() {
  if (hasRequiredUtils$2)
    return utils$b;
  hasRequiredUtils$2 = 1;
  (function(exports2) {
    var utils2 = exports2;
    function toArray2(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== "string") {
        for (var i2 = 0; i2 < msg.length; i2++)
          res[i2] = msg[i2] | 0;
        return res;
      }
      if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (var i2 = 0; i2 < msg.length; i2 += 2)
          res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
      } else {
        for (var i2 = 0; i2 < msg.length; i2++) {
          var c2 = msg.charCodeAt(i2);
          var hi2 = c2 >> 8;
          var lo = c2 & 255;
          if (hi2)
            res.push(hi2, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils2.toArray = toArray2;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    utils2.zero2 = zero2;
    function toHex(msg) {
      var res = "";
      for (var i2 = 0; i2 < msg.length; i2++)
        res += zero2(msg[i2].toString(16));
      return res;
    }
    utils2.toHex = toHex;
    utils2.encode = function encode2(arr, enc) {
      if (enc === "hex")
        return toHex(arr);
      else
        return arr;
    };
  })(utils$b);
  return utils$b;
}
var hasRequiredUtils$1;
function requireUtils$1() {
  if (hasRequiredUtils$1)
    return utils$c;
  hasRequiredUtils$1 = 1;
  (function(exports2) {
    var utils2 = exports2;
    var BN = requireBn$2();
    var minAssert = requireMinimalisticAssert();
    var minUtils = requireUtils$2();
    utils2.assert = minAssert;
    utils2.toArray = minUtils.toArray;
    utils2.zero2 = minUtils.zero2;
    utils2.toHex = minUtils.toHex;
    utils2.encode = minUtils.encode;
    function getNAF(num, w2, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      var i2;
      for (i2 = 0; i2 < naf.length; i2 += 1) {
        naf[i2] = 0;
      }
      var ws = 1 << w2 + 1;
      var k2 = num.clone();
      for (i2 = 0; i2 < naf.length; i2++) {
        var z2;
        var mod = k2.andln(ws - 1);
        if (k2.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z2 = (ws >> 1) - mod;
          else
            z2 = mod;
          k2.isubn(z2);
        } else {
          z2 = 0;
        }
        naf[i2] = z2;
        k2.iushrn(1);
      }
      return naf;
    }
    utils2.getNAF = getNAF;
    function getJSF(k1, k2) {
      var jsf = [
        [],
        []
      ];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = k2.andln(7) + d2 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
      return jsf;
    }
    utils2.getJSF = getJSF;
    function cachedProperty(obj, name2, computer) {
      var key2 = "_" + name2;
      obj.prototype[name2] = function cachedProperty2() {
        return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
      };
    }
    utils2.cachedProperty = cachedProperty;
    function parseBytes(bytes) {
      return typeof bytes === "string" ? utils2.toArray(bytes, "hex") : bytes;
    }
    utils2.parseBytes = parseBytes;
    function intFromLE(bytes) {
      return new BN(bytes, "hex", "le");
    }
    utils2.intFromLE = intFromLE;
  })(utils$c);
  return utils$c;
}
var curve = {};
var base$1;
var hasRequiredBase$1;
function requireBase$1() {
  if (hasRequiredBase$1)
    return base$1;
  hasRequiredBase$1 = 1;
  var BN = requireBn$2();
  var utils2 = requireUtils$1();
  var getNAF = utils2.getNAF;
  var getJSF = utils2.getJSF;
  var assert = utils2.assert;
  function BaseCurve(type2, conf) {
    this.type = type2;
    this.p = new BN(conf.p, 16);
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  base$1 = BaseCurve;
  BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype.validate = function validate() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p2, k2) {
    assert(p2.precomputed);
    var doubles = p2._getDoubles();
    var naf = getNAF(k2, 1, this._bitLength);
    var I2 = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I2 /= 3;
    var repr = [];
    var j2;
    var nafW;
    for (j2 = 0; j2 < naf.length; j2 += doubles.step) {
      nafW = 0;
      for (var l2 = j2 + doubles.step - 1; l2 >= j2; l2--)
        nafW = (nafW << 1) + naf[l2];
      repr.push(nafW);
    }
    var a2 = this.jpoint(null, null, null);
    var b2 = this.jpoint(null, null, null);
    for (var i2 = I2; i2 > 0; i2--) {
      for (j2 = 0; j2 < repr.length; j2++) {
        nafW = repr[j2];
        if (nafW === i2)
          b2 = b2.mixedAdd(doubles.points[j2]);
        else if (nafW === -i2)
          b2 = b2.mixedAdd(doubles.points[j2].neg());
      }
      a2 = a2.add(b2);
    }
    return a2.toP();
  };
  BaseCurve.prototype._wnafMul = function _wnafMul(p2, k2) {
    var w2 = 4;
    var nafPoints = p2._getNAFPoints(w2);
    w2 = nafPoints.wnd;
    var wnd = nafPoints.points;
    var naf = getNAF(k2, w2, this._bitLength);
    var acc = this.jpoint(null, null, null);
    for (var i2 = naf.length - 1; i2 >= 0; i2--) {
      for (var l2 = 0; i2 >= 0 && naf[i2] === 0; i2--)
        l2++;
      if (i2 >= 0)
        l2++;
      acc = acc.dblp(l2);
      if (i2 < 0)
        break;
      var z2 = naf[i2];
      assert(z2 !== 0);
      if (p2.type === "affine") {
        if (z2 > 0)
          acc = acc.mixedAdd(wnd[z2 - 1 >> 1]);
        else
          acc = acc.mixedAdd(wnd[-z2 - 1 >> 1].neg());
      } else {
        if (z2 > 0)
          acc = acc.add(wnd[z2 - 1 >> 1]);
        else
          acc = acc.add(wnd[-z2 - 1 >> 1].neg());
      }
    }
    return p2.type === "affine" ? acc.toP() : acc;
  };
  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len2, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    var max2 = 0;
    var i2;
    var j2;
    var p2;
    for (i2 = 0; i2 < len2; i2++) {
      p2 = points[i2];
      var nafPoints = p2._getNAFPoints(defW);
      wndWidth[i2] = nafPoints.wnd;
      wnd[i2] = nafPoints.points;
    }
    for (i2 = len2 - 1; i2 >= 1; i2 -= 2) {
      var a2 = i2 - 1;
      var b2 = i2;
      if (wndWidth[a2] !== 1 || wndWidth[b2] !== 1) {
        naf[a2] = getNAF(coeffs[a2], wndWidth[a2], this._bitLength);
        naf[b2] = getNAF(coeffs[b2], wndWidth[b2], this._bitLength);
        max2 = Math.max(naf[a2].length, max2);
        max2 = Math.max(naf[b2].length, max2);
        continue;
      }
      var comb = [
        points[a2],
        /* 1 */
        null,
        /* 3 */
        null,
        /* 5 */
        points[b2]
        /* 7 */
      ];
      if (points[a2].y.cmp(points[b2].y) === 0) {
        comb[1] = points[a2].add(points[b2]);
        comb[2] = points[a2].toJ().mixedAdd(points[b2].neg());
      } else if (points[a2].y.cmp(points[b2].y.redNeg()) === 0) {
        comb[1] = points[a2].toJ().mixedAdd(points[b2]);
        comb[2] = points[a2].add(points[b2].neg());
      } else {
        comb[1] = points[a2].toJ().mixedAdd(points[b2]);
        comb[2] = points[a2].toJ().mixedAdd(points[b2].neg());
      }
      var index2 = [
        -3,
        /* -1 -1 */
        -1,
        /* -1 0 */
        -5,
        /* -1 1 */
        -7,
        /* 0 -1 */
        0,
        /* 0 0 */
        7,
        /* 0 1 */
        5,
        /* 1 -1 */
        1,
        /* 1 0 */
        3
        /* 1 1 */
      ];
      var jsf = getJSF(coeffs[a2], coeffs[b2]);
      max2 = Math.max(jsf[0].length, max2);
      naf[a2] = new Array(max2);
      naf[b2] = new Array(max2);
      for (j2 = 0; j2 < max2; j2++) {
        var ja2 = jsf[0][j2] | 0;
        var jb2 = jsf[1][j2] | 0;
        naf[a2][j2] = index2[(ja2 + 1) * 3 + (jb2 + 1)];
        naf[b2][j2] = 0;
        wnd[a2] = comb;
      }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (i2 = max2; i2 >= 0; i2--) {
      var k2 = 0;
      while (i2 >= 0) {
        var zero2 = true;
        for (j2 = 0; j2 < len2; j2++) {
          tmp[j2] = naf[j2][i2] | 0;
          if (tmp[j2] !== 0)
            zero2 = false;
        }
        if (!zero2)
          break;
        k2++;
        i2--;
      }
      if (i2 >= 0)
        k2++;
      acc = acc.dblp(k2);
      if (i2 < 0)
        break;
      for (j2 = 0; j2 < len2; j2++) {
        var z2 = tmp[j2];
        if (z2 === 0)
          continue;
        else if (z2 > 0)
          p2 = wnd[j2][z2 - 1 >> 1];
        else if (z2 < 0)
          p2 = wnd[j2][-z2 - 1 >> 1].neg();
        if (p2.type === "affine")
          acc = acc.mixedAdd(p2);
        else
          acc = acc.add(p2);
      }
    }
    for (i2 = 0; i2 < len2; i2++)
      wnd[i2] = null;
    if (jacobianResult)
      return acc;
    else
      return acc.toP();
  };
  function BasePoint(curve2, type2) {
    this.curve = curve2;
    this.type = type2;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;
  BasePoint.prototype.eq = function eq() {
    throw new Error("Not implemented");
  };
  BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
  };
  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils2.toArray(bytes, enc);
    var len2 = this.p.byteLength();
    if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len2) {
      if (bytes[0] === 6)
        assert(bytes[bytes.length - 1] % 2 === 0);
      else if (bytes[0] === 7)
        assert(bytes[bytes.length - 1] % 2 === 1);
      var res = this.point(
        bytes.slice(1, 1 + len2),
        bytes.slice(1 + len2, 1 + 2 * len2)
      );
      return res;
    } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len2) {
      return this.pointFromX(bytes.slice(1, 1 + len2), bytes[0] === 3);
    }
    throw new Error("Unknown point format");
  };
  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };
  BasePoint.prototype._encode = function _encode(compact2) {
    var len2 = this.curve.p.byteLength();
    var x2 = this.getX().toArray("be", len2);
    if (compact2)
      return [this.getY().isEven() ? 2 : 3].concat(x2);
    return [4].concat(x2, this.getY().toArray("be", len2));
  };
  BasePoint.prototype.encode = function encode2(enc, compact2) {
    return utils2.encode(this._encode(compact2), enc);
  };
  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;
    var precomputed = {
      doubles: null,
      naf: null,
      beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
  };
  BasePoint.prototype._hasDoubles = function _hasDoubles(k2) {
    if (!this.precomputed)
      return false;
    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;
    return doubles.points.length >= Math.ceil((k2.bitLength() + 1) / doubles.step);
  };
  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;
    var doubles = [this];
    var acc = this;
    for (var i2 = 0; i2 < power; i2 += step) {
      for (var j2 = 0; j2 < step; j2++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return {
      step,
      points: doubles
    };
  };
  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;
    var res = [this];
    var max2 = (1 << wnd) - 1;
    var dbl = max2 === 1 ? null : this.dbl();
    for (var i2 = 1; i2 < max2; i2++)
      res[i2] = res[i2 - 1].add(dbl);
    return {
      wnd,
      points: res
    };
  };
  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };
  BasePoint.prototype.dblp = function dblp(k2) {
    var r2 = this;
    for (var i2 = 0; i2 < k2; i2++)
      r2 = r2.dbl();
    return r2;
  };
  return base$1;
}
var short;
var hasRequiredShort;
function requireShort() {
  if (hasRequiredShort)
    return short;
  hasRequiredShort = 1;
  var utils2 = requireUtils$1();
  var BN = requireBn$2();
  var inherits = requireInherits_browser();
  var Base = requireBase$1();
  var assert = utils2.assert;
  function ShortCurve(conf) {
    Base.call(this, "short", conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits(ShortCurve, Base);
  short = ShortCurve;
  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new BN(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new BN(conf.lambda, 16);
    } else {
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return {
          a: new BN(vec.a, 16),
          b: new BN(vec.b, 16)
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }
    return {
      beta,
      lambda,
      basis
    };
  };
  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s2 = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s2).fromRed();
    var l2 = ntinv.redSub(s2).fromRed();
    return [l1, l2];
  };
  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    var u2 = lambda;
    var v2 = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x2 = new BN(0);
    var y2 = new BN(1);
    var a0;
    var b0;
    var a1;
    var b1;
    var a2;
    var b2;
    var prevR;
    var i2 = 0;
    var r2;
    var x3;
    while (u2.cmpn(0) !== 0) {
      var q2 = v2.div(u2);
      r2 = v2.sub(q2.mul(u2));
      x3 = x2.sub(q2.mul(x1));
      var y3 = y2.sub(q2.mul(y1));
      if (!a1 && r2.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r2.neg();
        b1 = x3;
      } else if (a1 && ++i2 === 2) {
        break;
      }
      prevR = r2;
      v2 = u2;
      u2 = r2;
      x2 = x1;
      x1 = x3;
      y2 = y1;
      y1 = y3;
    }
    a2 = r2.neg();
    b2 = x3;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    }
    if (a1.negative) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a2.negative) {
      a2 = a2.neg();
      b2 = b2.neg();
    }
    return [
      { a: a1, b: b1 },
      { a: a2, b: b2 }
    ];
  };
  ShortCurve.prototype._endoSplit = function _endoSplit(k2) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k2).divRound(this.n);
    var c2 = v1.b.neg().mul(k2).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    var k1 = k2.sub(p1).sub(p2);
    var k22 = q1.add(q2).neg();
    return { k1, k2: k22 };
  };
  ShortCurve.prototype.pointFromX = function pointFromX(x2, odd) {
    x2 = new BN(x2, 16);
    if (!x2.red)
      x2 = x2.toRed(this.red);
    var y2 = x2.redSqr().redMul(x2).redIAdd(x2.redMul(this.a)).redIAdd(this.b);
    var y3 = y2.redSqrt();
    if (y3.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    var isOdd = y3.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y3 = y3.redNeg();
    return this.point(x2, y3);
  };
  ShortCurve.prototype.validate = function validate(point) {
    if (point.inf)
      return true;
    var x2 = point.x;
    var y2 = point.y;
    var ax = this.a.redMul(x2);
    var rhs = x2.redSqr().redMul(x2).redIAdd(ax).redIAdd(this.b);
    return y2.redSqr().redISub(rhs).cmpn(0) === 0;
  };
  ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for (var i2 = 0; i2 < points.length; i2++) {
      var split = this._endoSplit(coeffs[i2]);
      var p2 = points[i2];
      var beta = p2._getBeta();
      if (split.k1.negative) {
        split.k1.ineg();
        p2 = p2.neg(true);
      }
      if (split.k2.negative) {
        split.k2.ineg();
        beta = beta.neg(true);
      }
      npoints[i2 * 2] = p2;
      npoints[i2 * 2 + 1] = beta;
      ncoeffs[i2 * 2] = split.k1;
      ncoeffs[i2 * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i2 * 2, jacobianResult);
    for (var j2 = 0; j2 < i2 * 2; j2++) {
      npoints[j2] = null;
      ncoeffs[j2] = null;
    }
    return res;
  };
  function Point(curve2, x2, y2, isRed) {
    Base.BasePoint.call(this, curve2, "affine");
    if (x2 === null && y2 === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new BN(x2, 16);
      this.y = new BN(y2, 16);
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits(Point, Base.BasePoint);
  ShortCurve.prototype.point = function point(x2, y2, isRed) {
    return new Point(this, x2, y2, isRed);
  };
  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
  };
  Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
      return;
    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve2 = this.curve;
      var endoMul = function(p2) {
        return curve2.point(p2.x.redMul(curve2.endo.beta), p2.y);
      };
      pre.beta = beta;
      beta.precomputed = {
        beta: null,
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul)
        }
      };
    }
    return beta;
  };
  Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
      return [this.x, this.y];
    return [this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1)
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1)
      }
    }];
  };
  Point.fromJSON = function fromJSON(curve2, obj, red) {
    if (typeof obj === "string")
      obj = JSON.parse(obj);
    var res = curve2.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;
    function obj2point(obj2) {
      return curve2.point(obj2[0], obj2[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
      beta: null,
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: [res].concat(pre.doubles.points.map(obj2point))
      },
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: [res].concat(pre.naf.points.map(obj2point))
      }
    };
    return res;
  };
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };
  Point.prototype.add = function add(p2) {
    if (this.inf)
      return p2;
    if (p2.inf)
      return this;
    if (this.eq(p2))
      return this.dbl();
    if (this.neg().eq(p2))
      return this.curve.point(null, null);
    if (this.x.cmp(p2.x) === 0)
      return this.curve.point(null, null);
    var c2 = this.y.redSub(p2.y);
    if (c2.cmpn(0) !== 0)
      c2 = c2.redMul(this.x.redSub(p2.x).redInvm());
    var nx = c2.redSqr().redISub(this.x).redISub(p2.x);
    var ny = c2.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.dbl = function dbl() {
    if (this.inf)
      return this;
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);
    var a2 = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c2 = x2.redAdd(x2).redIAdd(x2).redIAdd(a2).redMul(dyinv);
    var nx = c2.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c2.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.getX = function getX() {
    return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
    return this.y.fromRed();
  };
  Point.prototype.mul = function mul(k2) {
    k2 = new BN(k2, 16);
    if (this.isInfinity())
      return this;
    else if (this._hasDoubles(k2))
      return this.curve._fixedNafMul(this, k2);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([this], [k2]);
    else
      return this.curve._wnafMul(this, k2);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };
  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };
  Point.prototype.eq = function eq(p2) {
    return this === p2 || this.inf === p2.inf && (this.inf || this.x.cmp(p2.x) === 0 && this.y.cmp(p2.y) === 0);
  };
  Point.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p2) {
        return p2.neg();
      };
      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate)
        }
      };
    }
    return res;
  };
  Point.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };
  function JPoint(curve2, x2, y2, z2) {
    Base.BasePoint.call(this, curve2, "jacobian");
    if (x2 === null && y2 === null && z2 === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new BN(0);
    } else {
      this.x = new BN(x2, 16);
      this.y = new BN(y2, 16);
      this.z = new BN(z2, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
  }
  inherits(JPoint, Base.BasePoint);
  ShortCurve.prototype.jpoint = function jpoint(x2, y2, z2) {
    return new JPoint(this, x2, y2, z2);
  };
  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
  };
  JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };
  JPoint.prototype.add = function add(p2) {
    if (this.isInfinity())
      return p2;
    if (p2.isInfinity())
      return this;
    var pz2 = p2.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p2.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p2.z));
    var s2 = p2.y.redMul(z2.redMul(this.z));
    var h2 = u1.redSub(u2);
    var r2 = s1.redSub(s2);
    if (h2.cmpn(0) === 0) {
      if (r2.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h22 = h2.redSqr();
    var h3 = h22.redMul(h2);
    var v2 = u1.redMul(h22);
    var nx = r2.redSqr().redIAdd(h3).redISub(v2).redISub(v2);
    var ny = r2.redMul(v2.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p2.z).redMul(h2);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mixedAdd = function mixedAdd(p2) {
    if (this.isInfinity())
      return p2.toJ();
    if (p2.isInfinity())
      return this;
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p2.x.redMul(z2);
    var s1 = this.y;
    var s2 = p2.y.redMul(z2).redMul(this.z);
    var h2 = u1.redSub(u2);
    var r2 = s1.redSub(s2);
    if (h2.cmpn(0) === 0) {
      if (r2.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h22 = h2.redSqr();
    var h3 = h22.redMul(h2);
    var v2 = u1.redMul(h22);
    var nx = r2.redSqr().redIAdd(h3).redISub(v2).redISub(v2);
    var ny = r2.redMul(v2.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h2);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow)
      return this.dbl();
    var i2;
    if (this.curve.zeroA || this.curve.threeA) {
      var r2 = this;
      for (i2 = 0; i2 < pow; i2++)
        r2 = r2.dbl();
      return r2;
    }
    var a2 = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jyd = jy.redAdd(jy);
    for (i2 = 0; i2 < pow; i2++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c2 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a2.redMul(jz4));
      var t1 = jx.redMul(jyd2);
      var nx = c2.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c2.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i2 + 1 < pow)
        jz4 = jz4.redMul(jyd4);
      jx = nx;
      jz = nz;
      jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };
  JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };
  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s2 = s2.redIAdd(s2);
      var m2 = xx.redAdd(xx).redIAdd(xx);
      var t2 = m2.redSqr().redISub(s2).redISub(s2);
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      nx = t2;
      ny = m2.redMul(s2.redISub(t2)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var a2 = this.x.redSqr();
      var b2 = this.y.redSqr();
      var c2 = b2.redSqr();
      var d2 = this.x.redAdd(b2).redSqr().redISub(a2).redISub(c2);
      d2 = d2.redIAdd(d2);
      var e2 = a2.redAdd(a2).redIAdd(a2);
      var f2 = e2.redSqr();
      var c8 = c2.redIAdd(c2);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8);
      nx = f2.redISub(d2).redISub(d2);
      ny = e2.redMul(d2.redISub(nx)).redISub(c8);
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s2 = s2.redIAdd(s2);
      var m2 = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      var t2 = m2.redSqr().redISub(s2).redISub(s2);
      nx = t2;
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m2.redMul(s2.redISub(t2)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var delta = this.z.redSqr();
      var gamma = this.y.redSqr();
      var beta = this.x.redMul(gamma);
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._dbl = function _dbl() {
    var a2 = this.curve.a;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c2 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a2.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c2.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c2.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var zz = this.z.redSqr();
    var yyyy = yy.redSqr();
    var m2 = xx.redAdd(xx).redIAdd(xx);
    var mm = m2.redSqr();
    var e2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e2 = e2.redIAdd(e2);
    e2 = e2.redAdd(e2).redIAdd(e2);
    e2 = e2.redISub(mm);
    var ee2 = e2.redSqr();
    var t2 = yyyy.redIAdd(yyyy);
    t2 = t2.redIAdd(t2);
    t2 = t2.redIAdd(t2);
    t2 = t2.redIAdd(t2);
    var u2 = m2.redIAdd(e2).redSqr().redISub(mm).redISub(ee2).redISub(t2);
    var yyu4 = yy.redMul(u2);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee2).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    var ny = this.y.redMul(u2.redMul(t2.redISub(u2)).redISub(e2.redMul(ee2)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    var nz = this.z.redAdd(e2).redSqr().redISub(zz).redISub(ee2);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mul = function mul(k2, kbase) {
    k2 = new BN(k2, kbase);
    return this.curve._wnafMul(this, k2);
  };
  JPoint.prototype.eq = function eq(p2) {
    if (p2.type === "affine")
      return this.eq(p2.toJ());
    if (this === p2)
      return true;
    var z2 = this.z.redSqr();
    var pz2 = p2.z.redSqr();
    if (this.x.redMul(pz2).redISub(p2.x.redMul(z2)).cmpn(0) !== 0)
      return false;
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p2.z);
    return this.y.redMul(pz3).redISub(p2.y.redMul(z3)).cmpn(0) === 0;
  };
  JPoint.prototype.eqXToP = function eqXToP(x2) {
    var zs = this.z.redSqr();
    var rx = x2.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
      return true;
    var xc2 = x2.clone();
    var t2 = this.curve.redN.redMul(zs);
    for (; ; ) {
      xc2.iadd(this.curve.n);
      if (xc2.cmp(this.curve.p) >= 0)
        return false;
      rx.redIAdd(t2);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };
  JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
  };
  JPoint.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };
  return short;
}
var mont;
var hasRequiredMont;
function requireMont() {
  if (hasRequiredMont)
    return mont;
  hasRequiredMont = 1;
  var BN = requireBn$2();
  var inherits = requireInherits_browser();
  var Base = requireBase$1();
  var utils2 = requireUtils$1();
  function MontCurve(conf) {
    Base.call(this, "mont", conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.i4 = new BN(4).toRed(this.red).redInvm();
    this.two = new BN(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
  }
  inherits(MontCurve, Base);
  mont = MontCurve;
  MontCurve.prototype.validate = function validate(point) {
    var x2 = point.normalize().x;
    var x22 = x2.redSqr();
    var rhs = x22.redMul(x2).redAdd(x22.redMul(this.a)).redAdd(x2);
    var y2 = rhs.redSqrt();
    return y2.redSqr().cmp(rhs) === 0;
  };
  function Point(curve2, x2, z2) {
    Base.BasePoint.call(this, curve2, "projective");
    if (x2 === null && z2 === null) {
      this.x = this.curve.one;
      this.z = this.curve.zero;
    } else {
      this.x = new BN(x2, 16);
      this.z = new BN(z2, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
    }
  }
  inherits(Point, Base.BasePoint);
  MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils2.toArray(bytes, enc), 1);
  };
  MontCurve.prototype.point = function point(x2, z2) {
    return new Point(this, x2, z2);
  };
  MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };
  Point.prototype.precompute = function precompute() {
  };
  Point.prototype._encode = function _encode() {
    return this.getX().toArray("be", this.curve.p.byteLength());
  };
  Point.fromJSON = function fromJSON(curve2, obj) {
    return new Point(curve2, obj[0], obj[1] || curve2.one);
  };
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };
  Point.prototype.dbl = function dbl() {
    var a2 = this.x.redAdd(this.z);
    var aa2 = a2.redSqr();
    var b2 = this.x.redSub(this.z);
    var bb2 = b2.redSqr();
    var c2 = aa2.redSub(bb2);
    var nx = aa2.redMul(bb2);
    var nz = c2.redMul(bb2.redAdd(this.curve.a24.redMul(c2)));
    return this.curve.point(nx, nz);
  };
  Point.prototype.add = function add() {
    throw new Error("Not supported on Montgomery curve");
  };
  Point.prototype.diffAdd = function diffAdd(p2, diff) {
    var a2 = this.x.redAdd(this.z);
    var b2 = this.x.redSub(this.z);
    var c2 = p2.x.redAdd(p2.z);
    var d2 = p2.x.redSub(p2.z);
    var da2 = d2.redMul(a2);
    var cb2 = c2.redMul(b2);
    var nx = diff.z.redMul(da2.redAdd(cb2).redSqr());
    var nz = diff.x.redMul(da2.redISub(cb2).redSqr());
    return this.curve.point(nx, nz);
  };
  Point.prototype.mul = function mul(k2) {
    var t2 = k2.clone();
    var a2 = this;
    var b2 = this.curve.point(null, null);
    var c2 = this;
    for (var bits = []; t2.cmpn(0) !== 0; t2.iushrn(1))
      bits.push(t2.andln(1));
    for (var i2 = bits.length - 1; i2 >= 0; i2--) {
      if (bits[i2] === 0) {
        a2 = a2.diffAdd(b2, c2);
        b2 = b2.dbl();
      } else {
        b2 = a2.diffAdd(b2, c2);
        a2 = a2.dbl();
      }
    }
    return b2;
  };
  Point.prototype.mulAdd = function mulAdd() {
    throw new Error("Not supported on Montgomery curve");
  };
  Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error("Not supported on Montgomery curve");
  };
  Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
  };
  Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
  };
  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };
  return mont;
}
var edwards;
var hasRequiredEdwards;
function requireEdwards() {
  if (hasRequiredEdwards)
    return edwards;
  hasRequiredEdwards = 1;
  var utils2 = requireUtils$1();
  var BN = requireBn$2();
  var inherits = requireInherits_browser();
  var Base = requireBase$1();
  var assert = utils2.assert;
  function EdwardsCurve(conf) {
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, "edwards", conf);
    this.a = new BN(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
  }
  inherits(EdwardsCurve, Base);
  edwards = EdwardsCurve;
  EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA)
      return num.redNeg();
    else
      return this.a.redMul(num);
  };
  EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC)
      return num;
    else
      return this.c.redMul(num);
  };
  EdwardsCurve.prototype.jpoint = function jpoint(x2, y2, z2, t2) {
    return this.point(x2, y2, z2, t2);
  };
  EdwardsCurve.prototype.pointFromX = function pointFromX(x2, odd) {
    x2 = new BN(x2, 16);
    if (!x2.red)
      x2 = x2.toRed(this.red);
    var x22 = x2.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x22));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x22));
    var y2 = rhs.redMul(lhs.redInvm());
    var y3 = y2.redSqrt();
    if (y3.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    var isOdd = y3.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y3 = y3.redNeg();
    return this.point(x2, y3);
  };
  EdwardsCurve.prototype.pointFromY = function pointFromY(y2, odd) {
    y2 = new BN(y2, 16);
    if (!y2.red)
      y2 = y2.toRed(this.red);
    var y22 = y2.redSqr();
    var lhs = y22.redSub(this.c2);
    var rhs = y22.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
      if (odd)
        throw new Error("invalid point");
      else
        return this.point(this.zero, y2);
    }
    var x3 = x2.redSqrt();
    if (x3.redSqr().redSub(x2).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    if (x3.fromRed().isOdd() !== odd)
      x3 = x3.redNeg();
    return this.point(x3, y2);
  };
  EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity())
      return true;
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
  };
  function Point(curve2, x2, y2, z2, t2) {
    Base.BasePoint.call(this, curve2, "projective");
    if (x2 === null && y2 === null && z2 === null) {
      this.x = this.curve.zero;
      this.y = this.curve.one;
      this.z = this.curve.one;
      this.t = this.curve.zero;
      this.zOne = true;
    } else {
      this.x = new BN(x2, 16);
      this.y = new BN(y2, 16);
      this.z = z2 ? new BN(z2, 16) : this.curve.one;
      this.t = t2 && new BN(t2, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      if (this.t && !this.t.red)
        this.t = this.t.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
      if (this.curve.extended && !this.t) {
        this.t = this.x.redMul(this.y);
        if (!this.zOne)
          this.t = this.t.redMul(this.z.redInvm());
      }
    }
  }
  inherits(Point, Base.BasePoint);
  EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };
  EdwardsCurve.prototype.point = function point(x2, y2, z2, t2) {
    return new Point(this, x2, y2, z2, t2);
  };
  Point.fromJSON = function fromJSON(curve2, obj) {
    return new Point(curve2, obj[0], obj[1], obj[2]);
  };
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
  };
  Point.prototype._extDbl = function _extDbl() {
    var a2 = this.x.redSqr();
    var b2 = this.y.redSqr();
    var c2 = this.z.redSqr();
    c2 = c2.redIAdd(c2);
    var d2 = this.curve._mulA(a2);
    var e2 = this.x.redAdd(this.y).redSqr().redISub(a2).redISub(b2);
    var g2 = d2.redAdd(b2);
    var f2 = g2.redSub(c2);
    var h2 = d2.redSub(b2);
    var nx = e2.redMul(f2);
    var ny = g2.redMul(h2);
    var nt = e2.redMul(h2);
    var nz = f2.redMul(g2);
    return this.curve.point(nx, ny, nz, nt);
  };
  Point.prototype._projDbl = function _projDbl() {
    var b2 = this.x.redAdd(this.y).redSqr();
    var c2 = this.x.redSqr();
    var d2 = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e2;
    var h2;
    var j2;
    if (this.curve.twisted) {
      e2 = this.curve._mulA(c2);
      var f2 = e2.redAdd(d2);
      if (this.zOne) {
        nx = b2.redSub(c2).redSub(d2).redMul(f2.redSub(this.curve.two));
        ny = f2.redMul(e2.redSub(d2));
        nz = f2.redSqr().redSub(f2).redSub(f2);
      } else {
        h2 = this.z.redSqr();
        j2 = f2.redSub(h2).redISub(h2);
        nx = b2.redSub(c2).redISub(d2).redMul(j2);
        ny = f2.redMul(e2.redSub(d2));
        nz = f2.redMul(j2);
      }
    } else {
      e2 = c2.redAdd(d2);
      h2 = this.curve._mulC(this.z).redSqr();
      j2 = e2.redSub(h2).redSub(h2);
      nx = this.curve._mulC(b2.redISub(e2)).redMul(j2);
      ny = this.curve._mulC(e2).redMul(c2.redISub(d2));
      nz = e2.redMul(j2);
    }
    return this.curve.point(nx, ny, nz);
  };
  Point.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
    if (this.curve.extended)
      return this._extDbl();
    else
      return this._projDbl();
  };
  Point.prototype._extAdd = function _extAdd(p2) {
    var a2 = this.y.redSub(this.x).redMul(p2.y.redSub(p2.x));
    var b2 = this.y.redAdd(this.x).redMul(p2.y.redAdd(p2.x));
    var c2 = this.t.redMul(this.curve.dd).redMul(p2.t);
    var d2 = this.z.redMul(p2.z.redAdd(p2.z));
    var e2 = b2.redSub(a2);
    var f2 = d2.redSub(c2);
    var g2 = d2.redAdd(c2);
    var h2 = b2.redAdd(a2);
    var nx = e2.redMul(f2);
    var ny = g2.redMul(h2);
    var nt = e2.redMul(h2);
    var nz = f2.redMul(g2);
    return this.curve.point(nx, ny, nz, nt);
  };
  Point.prototype._projAdd = function _projAdd(p2) {
    var a2 = this.z.redMul(p2.z);
    var b2 = a2.redSqr();
    var c2 = this.x.redMul(p2.x);
    var d2 = this.y.redMul(p2.y);
    var e2 = this.curve.d.redMul(c2).redMul(d2);
    var f2 = b2.redSub(e2);
    var g2 = b2.redAdd(e2);
    var tmp = this.x.redAdd(this.y).redMul(p2.x.redAdd(p2.y)).redISub(c2).redISub(d2);
    var nx = a2.redMul(f2).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
      ny = a2.redMul(g2).redMul(d2.redSub(this.curve._mulA(c2)));
      nz = f2.redMul(g2);
    } else {
      ny = a2.redMul(g2).redMul(d2.redSub(c2));
      nz = this.curve._mulC(f2).redMul(g2);
    }
    return this.curve.point(nx, ny, nz);
  };
  Point.prototype.add = function add(p2) {
    if (this.isInfinity())
      return p2;
    if (p2.isInfinity())
      return this;
    if (this.curve.extended)
      return this._extAdd(p2);
    else
      return this._projAdd(p2);
  };
  Point.prototype.mul = function mul(k2) {
    if (this._hasDoubles(k2))
      return this.curve._fixedNafMul(this, k2);
    else
      return this.curve._wnafMul(this, k2);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    return this.curve._wnafMulAdd(1, [this, p2], [k1, k2], 2, false);
  };
  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    return this.curve._wnafMulAdd(1, [this, p2], [k1, k2], 2, true);
  };
  Point.prototype.normalize = function normalize() {
    if (this.zOne)
      return this;
    var zi2 = this.z.redInvm();
    this.x = this.x.redMul(zi2);
    this.y = this.y.redMul(zi2);
    if (this.t)
      this.t = this.t.redMul(zi2);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
  };
  Point.prototype.neg = function neg() {
    return this.curve.point(
      this.x.redNeg(),
      this.y,
      this.z,
      this.t && this.t.redNeg()
    );
  };
  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
  };
  Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
  };
  Point.prototype.eqXToP = function eqXToP(x2) {
    var rx = x2.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0)
      return true;
    var xc2 = x2.clone();
    var t2 = this.curve.redN.redMul(this.z);
    for (; ; ) {
      xc2.iadd(this.curve.n);
      if (xc2.cmp(this.curve.p) >= 0)
        return false;
      rx.redIAdd(t2);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };
  Point.prototype.toP = Point.prototype.normalize;
  Point.prototype.mixedAdd = Point.prototype.add;
  return edwards;
}
var hasRequiredCurve;
function requireCurve() {
  if (hasRequiredCurve)
    return curve;
  hasRequiredCurve = 1;
  (function(exports2) {
    var curve2 = exports2;
    curve2.base = requireBase$1();
    curve2.short = requireShort();
    curve2.mont = requireMont();
    curve2.edwards = requireEdwards();
  })(curve);
  return curve;
}
var curves = {};
var hash = {};
var utils$a = {};
var hasRequiredUtils;
function requireUtils() {
  if (hasRequiredUtils)
    return utils$a;
  hasRequiredUtils = 1;
  var assert = requireMinimalisticAssert();
  var inherits = requireInherits_browser();
  utils$a.inherits = inherits;
  function isSurrogatePair(msg, i2) {
    if ((msg.charCodeAt(i2) & 64512) !== 55296) {
      return false;
    }
    if (i2 < 0 || i2 + 1 >= msg.length) {
      return false;
    }
    return (msg.charCodeAt(i2 + 1) & 64512) === 56320;
  }
  function toArray2(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === "string") {
      if (!enc) {
        var p2 = 0;
        for (var i2 = 0; i2 < msg.length; i2++) {
          var c2 = msg.charCodeAt(i2);
          if (c2 < 128) {
            res[p2++] = c2;
          } else if (c2 < 2048) {
            res[p2++] = c2 >> 6 | 192;
            res[p2++] = c2 & 63 | 128;
          } else if (isSurrogatePair(msg, i2)) {
            c2 = 65536 + ((c2 & 1023) << 10) + (msg.charCodeAt(++i2) & 1023);
            res[p2++] = c2 >> 18 | 240;
            res[p2++] = c2 >> 12 & 63 | 128;
            res[p2++] = c2 >> 6 & 63 | 128;
            res[p2++] = c2 & 63 | 128;
          } else {
            res[p2++] = c2 >> 12 | 224;
            res[p2++] = c2 >> 6 & 63 | 128;
            res[p2++] = c2 & 63 | 128;
          }
        }
      } else if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (i2 = 0; i2 < msg.length; i2 += 2)
          res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
      }
    } else {
      for (i2 = 0; i2 < msg.length; i2++)
        res[i2] = msg[i2] | 0;
    }
    return res;
  }
  utils$a.toArray = toArray2;
  function toHex(msg) {
    var res = "";
    for (var i2 = 0; i2 < msg.length; i2++)
      res += zero2(msg[i2].toString(16));
    return res;
  }
  utils$a.toHex = toHex;
  function htonl(w2) {
    var res = w2 >>> 24 | w2 >>> 8 & 65280 | w2 << 8 & 16711680 | (w2 & 255) << 24;
    return res >>> 0;
  }
  utils$a.htonl = htonl;
  function toHex32(msg, endian) {
    var res = "";
    for (var i2 = 0; i2 < msg.length; i2++) {
      var w2 = msg[i2];
      if (endian === "little")
        w2 = htonl(w2);
      res += zero8(w2.toString(16));
    }
    return res;
  }
  utils$a.toHex32 = toHex32;
  function zero2(word) {
    if (word.length === 1)
      return "0" + word;
    else
      return word;
  }
  utils$a.zero2 = zero2;
  function zero8(word) {
    if (word.length === 7)
      return "0" + word;
    else if (word.length === 6)
      return "00" + word;
    else if (word.length === 5)
      return "000" + word;
    else if (word.length === 4)
      return "0000" + word;
    else if (word.length === 3)
      return "00000" + word;
    else if (word.length === 2)
      return "000000" + word;
    else if (word.length === 1)
      return "0000000" + word;
    else
      return word;
  }
  utils$a.zero8 = zero8;
  function join32(msg, start, end, endian) {
    var len2 = end - start;
    assert(len2 % 4 === 0);
    var res = new Array(len2 / 4);
    for (var i2 = 0, k2 = start; i2 < res.length; i2++, k2 += 4) {
      var w2;
      if (endian === "big")
        w2 = msg[k2] << 24 | msg[k2 + 1] << 16 | msg[k2 + 2] << 8 | msg[k2 + 3];
      else
        w2 = msg[k2 + 3] << 24 | msg[k2 + 2] << 16 | msg[k2 + 1] << 8 | msg[k2];
      res[i2] = w2 >>> 0;
    }
    return res;
  }
  utils$a.join32 = join32;
  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i2 = 0, k2 = 0; i2 < msg.length; i2++, k2 += 4) {
      var m2 = msg[i2];
      if (endian === "big") {
        res[k2] = m2 >>> 24;
        res[k2 + 1] = m2 >>> 16 & 255;
        res[k2 + 2] = m2 >>> 8 & 255;
        res[k2 + 3] = m2 & 255;
      } else {
        res[k2 + 3] = m2 >>> 24;
        res[k2 + 2] = m2 >>> 16 & 255;
        res[k2 + 1] = m2 >>> 8 & 255;
        res[k2] = m2 & 255;
      }
    }
    return res;
  }
  utils$a.split32 = split32;
  function rotr32(w2, b2) {
    return w2 >>> b2 | w2 << 32 - b2;
  }
  utils$a.rotr32 = rotr32;
  function rotl32(w2, b2) {
    return w2 << b2 | w2 >>> 32 - b2;
  }
  utils$a.rotl32 = rotl32;
  function sum32(a2, b2) {
    return a2 + b2 >>> 0;
  }
  utils$a.sum32 = sum32;
  function sum32_3(a2, b2, c2) {
    return a2 + b2 + c2 >>> 0;
  }
  utils$a.sum32_3 = sum32_3;
  function sum32_4(a2, b2, c2, d2) {
    return a2 + b2 + c2 + d2 >>> 0;
  }
  utils$a.sum32_4 = sum32_4;
  function sum32_5(a2, b2, c2, d2, e2) {
    return a2 + b2 + c2 + d2 + e2 >>> 0;
  }
  utils$a.sum32_5 = sum32_5;
  function sum64(buf, pos, ah2, al2) {
    var bh2 = buf[pos];
    var bl2 = buf[pos + 1];
    var lo = al2 + bl2 >>> 0;
    var hi2 = (lo < al2 ? 1 : 0) + ah2 + bh2;
    buf[pos] = hi2 >>> 0;
    buf[pos + 1] = lo;
  }
  utils$a.sum64 = sum64;
  function sum64_hi(ah2, al2, bh2, bl2) {
    var lo = al2 + bl2 >>> 0;
    var hi2 = (lo < al2 ? 1 : 0) + ah2 + bh2;
    return hi2 >>> 0;
  }
  utils$a.sum64_hi = sum64_hi;
  function sum64_lo(ah2, al2, bh2, bl2) {
    var lo = al2 + bl2;
    return lo >>> 0;
  }
  utils$a.sum64_lo = sum64_lo;
  function sum64_4_hi(ah2, al2, bh2, bl2, ch2, cl2, dh2, dl2) {
    var carry = 0;
    var lo = al2;
    lo = lo + bl2 >>> 0;
    carry += lo < al2 ? 1 : 0;
    lo = lo + cl2 >>> 0;
    carry += lo < cl2 ? 1 : 0;
    lo = lo + dl2 >>> 0;
    carry += lo < dl2 ? 1 : 0;
    var hi2 = ah2 + bh2 + ch2 + dh2 + carry;
    return hi2 >>> 0;
  }
  utils$a.sum64_4_hi = sum64_4_hi;
  function sum64_4_lo(ah2, al2, bh2, bl2, ch2, cl2, dh2, dl2) {
    var lo = al2 + bl2 + cl2 + dl2;
    return lo >>> 0;
  }
  utils$a.sum64_4_lo = sum64_4_lo;
  function sum64_5_hi(ah2, al2, bh2, bl2, ch2, cl2, dh2, dl2, eh2, el2) {
    var carry = 0;
    var lo = al2;
    lo = lo + bl2 >>> 0;
    carry += lo < al2 ? 1 : 0;
    lo = lo + cl2 >>> 0;
    carry += lo < cl2 ? 1 : 0;
    lo = lo + dl2 >>> 0;
    carry += lo < dl2 ? 1 : 0;
    lo = lo + el2 >>> 0;
    carry += lo < el2 ? 1 : 0;
    var hi2 = ah2 + bh2 + ch2 + dh2 + eh2 + carry;
    return hi2 >>> 0;
  }
  utils$a.sum64_5_hi = sum64_5_hi;
  function sum64_5_lo(ah2, al2, bh2, bl2, ch2, cl2, dh2, dl2, eh2, el2) {
    var lo = al2 + bl2 + cl2 + dl2 + el2;
    return lo >>> 0;
  }
  utils$a.sum64_5_lo = sum64_5_lo;
  function rotr64_hi(ah2, al2, num) {
    var r2 = al2 << 32 - num | ah2 >>> num;
    return r2 >>> 0;
  }
  utils$a.rotr64_hi = rotr64_hi;
  function rotr64_lo(ah2, al2, num) {
    var r2 = ah2 << 32 - num | al2 >>> num;
    return r2 >>> 0;
  }
  utils$a.rotr64_lo = rotr64_lo;
  function shr64_hi(ah2, al2, num) {
    return ah2 >>> num;
  }
  utils$a.shr64_hi = shr64_hi;
  function shr64_lo(ah2, al2, num) {
    var r2 = ah2 << 32 - num | al2 >>> num;
    return r2 >>> 0;
  }
  utils$a.shr64_lo = shr64_lo;
  return utils$a;
}
var common$3 = {};
var hasRequiredCommon$1;
function requireCommon$1() {
  if (hasRequiredCommon$1)
    return common$3;
  hasRequiredCommon$1 = 1;
  var utils2 = requireUtils();
  var assert = requireMinimalisticAssert();
  function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  common$3.BlockHash = BlockHash;
  BlockHash.prototype.update = function update(msg, enc) {
    msg = utils2.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    if (this.pending.length >= this._delta8) {
      msg = this.pending;
      var r2 = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r2, msg.length);
      if (this.pending.length === 0)
        this.pending = null;
      msg = utils2.join32(msg, 0, msg.length - r2, this.endian);
      for (var i2 = 0; i2 < msg.length; i2 += this._delta32)
        this._update(msg, i2, i2 + this._delta32);
    }
    return this;
  };
  BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert(this.pending === null);
    return this._digest(enc);
  };
  BlockHash.prototype._pad = function pad() {
    var len2 = this.pendingTotal;
    var bytes = this._delta8;
    var k2 = bytes - (len2 + this.padLength) % bytes;
    var res = new Array(k2 + this.padLength);
    res[0] = 128;
    for (var i2 = 1; i2 < k2; i2++)
      res[i2] = 0;
    len2 <<= 3;
    if (this.endian === "big") {
      for (var t2 = 8; t2 < this.padLength; t2++)
        res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = len2 >>> 24 & 255;
      res[i2++] = len2 >>> 16 & 255;
      res[i2++] = len2 >>> 8 & 255;
      res[i2++] = len2 & 255;
    } else {
      res[i2++] = len2 & 255;
      res[i2++] = len2 >>> 8 & 255;
      res[i2++] = len2 >>> 16 & 255;
      res[i2++] = len2 >>> 24 & 255;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      for (t2 = 8; t2 < this.padLength; t2++)
        res[i2++] = 0;
    }
    return res;
  };
  return common$3;
}
var sha$1 = {};
var common$2 = {};
var hasRequiredCommon;
function requireCommon() {
  if (hasRequiredCommon)
    return common$2;
  hasRequiredCommon = 1;
  var utils2 = requireUtils();
  var rotr32 = utils2.rotr32;
  function ft_1(s2, x2, y2, z2) {
    if (s2 === 0)
      return ch32(x2, y2, z2);
    if (s2 === 1 || s2 === 3)
      return p32(x2, y2, z2);
    if (s2 === 2)
      return maj32(x2, y2, z2);
  }
  common$2.ft_1 = ft_1;
  function ch32(x2, y2, z2) {
    return x2 & y2 ^ ~x2 & z2;
  }
  common$2.ch32 = ch32;
  function maj32(x2, y2, z2) {
    return x2 & y2 ^ x2 & z2 ^ y2 & z2;
  }
  common$2.maj32 = maj32;
  function p32(x2, y2, z2) {
    return x2 ^ y2 ^ z2;
  }
  common$2.p32 = p32;
  function s0_256(x2) {
    return rotr32(x2, 2) ^ rotr32(x2, 13) ^ rotr32(x2, 22);
  }
  common$2.s0_256 = s0_256;
  function s1_256(x2) {
    return rotr32(x2, 6) ^ rotr32(x2, 11) ^ rotr32(x2, 25);
  }
  common$2.s1_256 = s1_256;
  function g0_256(x2) {
    return rotr32(x2, 7) ^ rotr32(x2, 18) ^ x2 >>> 3;
  }
  common$2.g0_256 = g0_256;
  function g1_256(x2) {
    return rotr32(x2, 17) ^ rotr32(x2, 19) ^ x2 >>> 10;
  }
  common$2.g1_256 = g1_256;
  return common$2;
}
var _1;
var hasRequired_1;
function require_1() {
  if (hasRequired_1)
    return _1;
  hasRequired_1 = 1;
  var utils2 = requireUtils();
  var common2 = requireCommon$1();
  var shaCommon = requireCommon();
  var rotl32 = utils2.rotl32;
  var sum32 = utils2.sum32;
  var sum32_5 = utils2.sum32_5;
  var ft_1 = shaCommon.ft_1;
  var BlockHash = common2.BlockHash;
  var sha1_K = [
    1518500249,
    1859775393,
    2400959708,
    3395469782
  ];
  function SHA1() {
    if (!(this instanceof SHA1))
      return new SHA1();
    BlockHash.call(this);
    this.h = [
      1732584193,
      4023233417,
      2562383102,
      271733878,
      3285377520
    ];
    this.W = new Array(80);
  }
  utils2.inherits(SHA1, BlockHash);
  _1 = SHA1;
  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;
  SHA1.prototype._update = function _update(msg, start) {
    var W2 = this.W;
    for (var i2 = 0; i2 < 16; i2++)
      W2[i2] = msg[start + i2];
    for (; i2 < W2.length; i2++)
      W2[i2] = rotl32(W2[i2 - 3] ^ W2[i2 - 8] ^ W2[i2 - 14] ^ W2[i2 - 16], 1);
    var a2 = this.h[0];
    var b2 = this.h[1];
    var c2 = this.h[2];
    var d2 = this.h[3];
    var e2 = this.h[4];
    for (i2 = 0; i2 < W2.length; i2++) {
      var s2 = ~~(i2 / 20);
      var t2 = sum32_5(rotl32(a2, 5), ft_1(s2, b2, c2, d2), e2, W2[i2], sha1_K[s2]);
      e2 = d2;
      d2 = c2;
      c2 = rotl32(b2, 30);
      b2 = a2;
      a2 = t2;
    }
    this.h[0] = sum32(this.h[0], a2);
    this.h[1] = sum32(this.h[1], b2);
    this.h[2] = sum32(this.h[2], c2);
    this.h[3] = sum32(this.h[3], d2);
    this.h[4] = sum32(this.h[4], e2);
  };
  SHA1.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils2.toHex32(this.h, "big");
    else
      return utils2.split32(this.h, "big");
  };
  return _1;
}
var _256;
var hasRequired_256;
function require_256() {
  if (hasRequired_256)
    return _256;
  hasRequired_256 = 1;
  var utils2 = requireUtils();
  var common2 = requireCommon$1();
  var shaCommon = requireCommon();
  var assert = requireMinimalisticAssert();
  var sum32 = utils2.sum32;
  var sum32_4 = utils2.sum32_4;
  var sum32_5 = utils2.sum32_5;
  var ch32 = shaCommon.ch32;
  var maj32 = shaCommon.maj32;
  var s0_256 = shaCommon.s0_256;
  var s1_256 = shaCommon.s1_256;
  var g0_256 = shaCommon.g0_256;
  var g1_256 = shaCommon.g1_256;
  var BlockHash = common2.BlockHash;
  var sha256_K = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ];
  function SHA256() {
    if (!(this instanceof SHA256))
      return new SHA256();
    BlockHash.call(this);
    this.h = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils2.inherits(SHA256, BlockHash);
  _256 = SHA256;
  SHA256.blockSize = 512;
  SHA256.outSize = 256;
  SHA256.hmacStrength = 192;
  SHA256.padLength = 64;
  SHA256.prototype._update = function _update(msg, start) {
    var W2 = this.W;
    for (var i2 = 0; i2 < 16; i2++)
      W2[i2] = msg[start + i2];
    for (; i2 < W2.length; i2++)
      W2[i2] = sum32_4(g1_256(W2[i2 - 2]), W2[i2 - 7], g0_256(W2[i2 - 15]), W2[i2 - 16]);
    var a2 = this.h[0];
    var b2 = this.h[1];
    var c2 = this.h[2];
    var d2 = this.h[3];
    var e2 = this.h[4];
    var f2 = this.h[5];
    var g2 = this.h[6];
    var h2 = this.h[7];
    assert(this.k.length === W2.length);
    for (i2 = 0; i2 < W2.length; i2++) {
      var T1 = sum32_5(h2, s1_256(e2), ch32(e2, f2, g2), this.k[i2], W2[i2]);
      var T2 = sum32(s0_256(a2), maj32(a2, b2, c2));
      h2 = g2;
      g2 = f2;
      f2 = e2;
      e2 = sum32(d2, T1);
      d2 = c2;
      c2 = b2;
      b2 = a2;
      a2 = sum32(T1, T2);
    }
    this.h[0] = sum32(this.h[0], a2);
    this.h[1] = sum32(this.h[1], b2);
    this.h[2] = sum32(this.h[2], c2);
    this.h[3] = sum32(this.h[3], d2);
    this.h[4] = sum32(this.h[4], e2);
    this.h[5] = sum32(this.h[5], f2);
    this.h[6] = sum32(this.h[6], g2);
    this.h[7] = sum32(this.h[7], h2);
  };
  SHA256.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils2.toHex32(this.h, "big");
    else
      return utils2.split32(this.h, "big");
  };
  return _256;
}
var _224;
var hasRequired_224;
function require_224() {
  if (hasRequired_224)
    return _224;
  hasRequired_224 = 1;
  var utils2 = requireUtils();
  var SHA256 = require_256();
  function SHA224() {
    if (!(this instanceof SHA224))
      return new SHA224();
    SHA256.call(this);
    this.h = [
      3238371032,
      914150663,
      812702999,
      4144912697,
      4290775857,
      1750603025,
      1694076839,
      3204075428
    ];
  }
  utils2.inherits(SHA224, SHA256);
  _224 = SHA224;
  SHA224.blockSize = 512;
  SHA224.outSize = 224;
  SHA224.hmacStrength = 192;
  SHA224.padLength = 64;
  SHA224.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils2.toHex32(this.h.slice(0, 7), "big");
    else
      return utils2.split32(this.h.slice(0, 7), "big");
  };
  return _224;
}
var _512;
var hasRequired_512;
function require_512() {
  if (hasRequired_512)
    return _512;
  hasRequired_512 = 1;
  var utils2 = requireUtils();
  var common2 = requireCommon$1();
  var assert = requireMinimalisticAssert();
  var rotr64_hi = utils2.rotr64_hi;
  var rotr64_lo = utils2.rotr64_lo;
  var shr64_hi = utils2.shr64_hi;
  var shr64_lo = utils2.shr64_lo;
  var sum64 = utils2.sum64;
  var sum64_hi = utils2.sum64_hi;
  var sum64_lo = utils2.sum64_lo;
  var sum64_4_hi = utils2.sum64_4_hi;
  var sum64_4_lo = utils2.sum64_4_lo;
  var sum64_5_hi = utils2.sum64_5_hi;
  var sum64_5_lo = utils2.sum64_5_lo;
  var BlockHash = common2.BlockHash;
  var sha512_K = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
  ];
  function SHA512() {
    if (!(this instanceof SHA512))
      return new SHA512();
    BlockHash.call(this);
    this.h = [
      1779033703,
      4089235720,
      3144134277,
      2227873595,
      1013904242,
      4271175723,
      2773480762,
      1595750129,
      1359893119,
      2917565137,
      2600822924,
      725511199,
      528734635,
      4215389547,
      1541459225,
      327033209
    ];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils2.inherits(SHA512, BlockHash);
  _512 = SHA512;
  SHA512.blockSize = 1024;
  SHA512.outSize = 512;
  SHA512.hmacStrength = 192;
  SHA512.padLength = 128;
  SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W2 = this.W;
    for (var i2 = 0; i2 < 32; i2++)
      W2[i2] = msg[start + i2];
    for (; i2 < W2.length; i2 += 2) {
      var c0_hi = g1_512_hi(W2[i2 - 4], W2[i2 - 3]);
      var c0_lo = g1_512_lo(W2[i2 - 4], W2[i2 - 3]);
      var c1_hi = W2[i2 - 14];
      var c1_lo = W2[i2 - 13];
      var c2_hi = g0_512_hi(W2[i2 - 30], W2[i2 - 29]);
      var c2_lo = g0_512_lo(W2[i2 - 30], W2[i2 - 29]);
      var c3_hi = W2[i2 - 32];
      var c3_lo = W2[i2 - 31];
      W2[i2] = sum64_4_hi(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo
      );
      W2[i2 + 1] = sum64_4_lo(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo
      );
    }
  };
  SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W2 = this.W;
    var ah2 = this.h[0];
    var al2 = this.h[1];
    var bh2 = this.h[2];
    var bl2 = this.h[3];
    var ch2 = this.h[4];
    var cl2 = this.h[5];
    var dh2 = this.h[6];
    var dl2 = this.h[7];
    var eh2 = this.h[8];
    var el2 = this.h[9];
    var fh2 = this.h[10];
    var fl2 = this.h[11];
    var gh2 = this.h[12];
    var gl2 = this.h[13];
    var hh2 = this.h[14];
    var hl2 = this.h[15];
    assert(this.k.length === W2.length);
    for (var i2 = 0; i2 < W2.length; i2 += 2) {
      var c0_hi = hh2;
      var c0_lo = hl2;
      var c1_hi = s1_512_hi(eh2, el2);
      var c1_lo = s1_512_lo(eh2, el2);
      var c2_hi = ch64_hi(eh2, el2, fh2, fl2, gh2);
      var c2_lo = ch64_lo(eh2, el2, fh2, fl2, gh2, gl2);
      var c3_hi = this.k[i2];
      var c3_lo = this.k[i2 + 1];
      var c4_hi = W2[i2];
      var c4_lo = W2[i2 + 1];
      var T1_hi = sum64_5_hi(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo,
        c4_hi,
        c4_lo
      );
      var T1_lo = sum64_5_lo(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo,
        c4_hi,
        c4_lo
      );
      c0_hi = s0_512_hi(ah2, al2);
      c0_lo = s0_512_lo(ah2, al2);
      c1_hi = maj64_hi(ah2, al2, bh2, bl2, ch2);
      c1_lo = maj64_lo(ah2, al2, bh2, bl2, ch2, cl2);
      var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
      hh2 = gh2;
      hl2 = gl2;
      gh2 = fh2;
      gl2 = fl2;
      fh2 = eh2;
      fl2 = el2;
      eh2 = sum64_hi(dh2, dl2, T1_hi, T1_lo);
      el2 = sum64_lo(dl2, dl2, T1_hi, T1_lo);
      dh2 = ch2;
      dl2 = cl2;
      ch2 = bh2;
      cl2 = bl2;
      bh2 = ah2;
      bl2 = al2;
      ah2 = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
      al2 = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64(this.h, 0, ah2, al2);
    sum64(this.h, 2, bh2, bl2);
    sum64(this.h, 4, ch2, cl2);
    sum64(this.h, 6, dh2, dl2);
    sum64(this.h, 8, eh2, el2);
    sum64(this.h, 10, fh2, fl2);
    sum64(this.h, 12, gh2, gl2);
    sum64(this.h, 14, hh2, hl2);
  };
  SHA512.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils2.toHex32(this.h, "big");
    else
      return utils2.split32(this.h, "big");
  };
  function ch64_hi(xh2, xl, yh2, yl, zh2) {
    var r2 = xh2 & yh2 ^ ~xh2 & zh2;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function ch64_lo(xh2, xl, yh2, yl, zh2, zl) {
    var r2 = xl & yl ^ ~xl & zl;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function maj64_hi(xh2, xl, yh2, yl, zh2) {
    var r2 = xh2 & yh2 ^ xh2 & zh2 ^ yh2 & zh2;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function maj64_lo(xh2, xl, yh2, yl, zh2, zl) {
    var r2 = xl & yl ^ xl & zl ^ yl & zl;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s0_512_hi(xh2, xl) {
    var c0_hi = rotr64_hi(xh2, xl, 28);
    var c1_hi = rotr64_hi(xl, xh2, 2);
    var c2_hi = rotr64_hi(xl, xh2, 7);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s0_512_lo(xh2, xl) {
    var c0_lo = rotr64_lo(xh2, xl, 28);
    var c1_lo = rotr64_lo(xl, xh2, 2);
    var c2_lo = rotr64_lo(xl, xh2, 7);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s1_512_hi(xh2, xl) {
    var c0_hi = rotr64_hi(xh2, xl, 14);
    var c1_hi = rotr64_hi(xh2, xl, 18);
    var c2_hi = rotr64_hi(xl, xh2, 9);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s1_512_lo(xh2, xl) {
    var c0_lo = rotr64_lo(xh2, xl, 14);
    var c1_lo = rotr64_lo(xh2, xl, 18);
    var c2_lo = rotr64_lo(xl, xh2, 9);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g0_512_hi(xh2, xl) {
    var c0_hi = rotr64_hi(xh2, xl, 1);
    var c1_hi = rotr64_hi(xh2, xl, 8);
    var c2_hi = shr64_hi(xh2, xl, 7);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g0_512_lo(xh2, xl) {
    var c0_lo = rotr64_lo(xh2, xl, 1);
    var c1_lo = rotr64_lo(xh2, xl, 8);
    var c2_lo = shr64_lo(xh2, xl, 7);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g1_512_hi(xh2, xl) {
    var c0_hi = rotr64_hi(xh2, xl, 19);
    var c1_hi = rotr64_hi(xl, xh2, 29);
    var c2_hi = shr64_hi(xh2, xl, 6);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g1_512_lo(xh2, xl) {
    var c0_lo = rotr64_lo(xh2, xl, 19);
    var c1_lo = rotr64_lo(xl, xh2, 29);
    var c2_lo = shr64_lo(xh2, xl, 6);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  return _512;
}
var _384;
var hasRequired_384;
function require_384() {
  if (hasRequired_384)
    return _384;
  hasRequired_384 = 1;
  var utils2 = requireUtils();
  var SHA512 = require_512();
  function SHA384() {
    if (!(this instanceof SHA384))
      return new SHA384();
    SHA512.call(this);
    this.h = [
      3418070365,
      3238371032,
      1654270250,
      914150663,
      2438529370,
      812702999,
      355462360,
      4144912697,
      1731405415,
      4290775857,
      2394180231,
      1750603025,
      3675008525,
      1694076839,
      1203062813,
      3204075428
    ];
  }
  utils2.inherits(SHA384, SHA512);
  _384 = SHA384;
  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;
  SHA384.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils2.toHex32(this.h.slice(0, 12), "big");
    else
      return utils2.split32(this.h.slice(0, 12), "big");
  };
  return _384;
}
var hasRequiredSha;
function requireSha() {
  if (hasRequiredSha)
    return sha$1;
  hasRequiredSha = 1;
  sha$1.sha1 = require_1();
  sha$1.sha224 = require_224();
  sha$1.sha256 = require_256();
  sha$1.sha384 = require_384();
  sha$1.sha512 = require_512();
  return sha$1;
}
var ripemd = {};
var hasRequiredRipemd;
function requireRipemd() {
  if (hasRequiredRipemd)
    return ripemd;
  hasRequiredRipemd = 1;
  var utils2 = requireUtils();
  var common2 = requireCommon$1();
  var rotl32 = utils2.rotl32;
  var sum32 = utils2.sum32;
  var sum32_3 = utils2.sum32_3;
  var sum32_4 = utils2.sum32_4;
  var BlockHash = common2.BlockHash;
  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();
    BlockHash.call(this);
    this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
    this.endian = "little";
  }
  utils2.inherits(RIPEMD160, BlockHash);
  ripemd.ripemd160 = RIPEMD160;
  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;
  RIPEMD160.prototype._update = function update(msg, start) {
    var A2 = this.h[0];
    var B2 = this.h[1];
    var C2 = this.h[2];
    var D2 = this.h[3];
    var E2 = this.h[4];
    var Ah2 = A2;
    var Bh2 = B2;
    var Ch2 = C2;
    var Dh2 = D2;
    var Eh2 = E2;
    for (var j2 = 0; j2 < 80; j2++) {
      var T2 = sum32(
        rotl32(
          sum32_4(A2, f2(j2, B2, C2, D2), msg[r2[j2] + start], K2(j2)),
          s2[j2]
        ),
        E2
      );
      A2 = E2;
      E2 = D2;
      D2 = rotl32(C2, 10);
      C2 = B2;
      B2 = T2;
      T2 = sum32(
        rotl32(
          sum32_4(Ah2, f2(79 - j2, Bh2, Ch2, Dh2), msg[rh2[j2] + start], Kh2(j2)),
          sh2[j2]
        ),
        Eh2
      );
      Ah2 = Eh2;
      Eh2 = Dh2;
      Dh2 = rotl32(Ch2, 10);
      Ch2 = Bh2;
      Bh2 = T2;
    }
    T2 = sum32_3(this.h[1], C2, Dh2);
    this.h[1] = sum32_3(this.h[2], D2, Eh2);
    this.h[2] = sum32_3(this.h[3], E2, Ah2);
    this.h[3] = sum32_3(this.h[4], A2, Bh2);
    this.h[4] = sum32_3(this.h[0], B2, Ch2);
    this.h[0] = T2;
  };
  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils2.toHex32(this.h, "little");
    else
      return utils2.split32(this.h, "little");
  };
  function f2(j2, x2, y2, z2) {
    if (j2 <= 15)
      return x2 ^ y2 ^ z2;
    else if (j2 <= 31)
      return x2 & y2 | ~x2 & z2;
    else if (j2 <= 47)
      return (x2 | ~y2) ^ z2;
    else if (j2 <= 63)
      return x2 & z2 | y2 & ~z2;
    else
      return x2 ^ (y2 | ~z2);
  }
  function K2(j2) {
    if (j2 <= 15)
      return 0;
    else if (j2 <= 31)
      return 1518500249;
    else if (j2 <= 47)
      return 1859775393;
    else if (j2 <= 63)
      return 2400959708;
    else
      return 2840853838;
  }
  function Kh2(j2) {
    if (j2 <= 15)
      return 1352829926;
    else if (j2 <= 31)
      return 1548603684;
    else if (j2 <= 47)
      return 1836072691;
    else if (j2 <= 63)
      return 2053994217;
    else
      return 0;
  }
  var r2 = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
  ];
  var rh2 = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
  ];
  var s2 = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
  ];
  var sh2 = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
  ];
  return ripemd;
}
var hmac;
var hasRequiredHmac;
function requireHmac() {
  if (hasRequiredHmac)
    return hmac;
  hasRequiredHmac = 1;
  var utils2 = requireUtils();
  var assert = requireMinimalisticAssert();
  function Hmac(hash2, key2, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash2, key2, enc);
    this.Hash = hash2;
    this.blockSize = hash2.blockSize / 8;
    this.outSize = hash2.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils2.toArray(key2, enc));
  }
  hmac = Hmac;
  Hmac.prototype._init = function init2(key2) {
    if (key2.length > this.blockSize)
      key2 = new this.Hash().update(key2).digest();
    assert(key2.length <= this.blockSize);
    for (var i2 = key2.length; i2 < this.blockSize; i2++)
      key2.push(0);
    for (i2 = 0; i2 < key2.length; i2++)
      key2[i2] ^= 54;
    this.inner = new this.Hash().update(key2);
    for (i2 = 0; i2 < key2.length; i2++)
      key2[i2] ^= 106;
    this.outer = new this.Hash().update(key2);
  };
  Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };
  Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };
  return hmac;
}
var hasRequiredHash;
function requireHash() {
  if (hasRequiredHash)
    return hash;
  hasRequiredHash = 1;
  (function(exports2) {
    var hash2 = exports2;
    hash2.utils = requireUtils();
    hash2.common = requireCommon$1();
    hash2.sha = requireSha();
    hash2.ripemd = requireRipemd();
    hash2.hmac = requireHmac();
    hash2.sha1 = hash2.sha.sha1;
    hash2.sha256 = hash2.sha.sha256;
    hash2.sha224 = hash2.sha.sha224;
    hash2.sha384 = hash2.sha.sha384;
    hash2.sha512 = hash2.sha.sha512;
    hash2.ripemd160 = hash2.ripemd.ripemd160;
  })(hash);
  return hash;
}
var secp256k1;
var hasRequiredSecp256k1;
function requireSecp256k1() {
  if (hasRequiredSecp256k1)
    return secp256k1;
  hasRequiredSecp256k1 = 1;
  secp256k1 = {
    doubles: {
      step: 4,
      points: [
        [
          "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
          "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
        ],
        [
          "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
          "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
        ],
        [
          "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
          "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
        ],
        [
          "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
          "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
        ],
        [
          "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
          "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
        ],
        [
          "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
          "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
        ],
        [
          "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
          "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
        ],
        [
          "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
          "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
        ],
        [
          "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
          "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
        ],
        [
          "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
          "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
        ],
        [
          "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
          "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
        ],
        [
          "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
          "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
        ],
        [
          "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
          "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
        ],
        [
          "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
          "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
        ],
        [
          "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
          "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
        ],
        [
          "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
          "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
        ],
        [
          "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
          "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
        ],
        [
          "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
          "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
        ],
        [
          "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
          "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
        ],
        [
          "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
          "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
        ],
        [
          "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
          "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
        ],
        [
          "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
          "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
        ],
        [
          "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
          "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
        ],
        [
          "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
          "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
        ],
        [
          "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
          "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
        ],
        [
          "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
          "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
        ],
        [
          "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
          "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
        ],
        [
          "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
          "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
        ],
        [
          "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
          "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
        ],
        [
          "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
          "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
        ],
        [
          "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
          "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
        ],
        [
          "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
          "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
        ],
        [
          "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
          "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
        ],
        [
          "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
          "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
        ],
        [
          "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
          "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
        ],
        [
          "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
          "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
        ],
        [
          "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
          "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
        ],
        [
          "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
          "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
        ],
        [
          "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
          "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
        ],
        [
          "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
          "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
        ],
        [
          "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
          "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
        ],
        [
          "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
          "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
        ],
        [
          "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
          "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
        ],
        [
          "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
          "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
        ],
        [
          "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
          "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
        ],
        [
          "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
          "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
        ],
        [
          "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
          "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
        ],
        [
          "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
          "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
        ],
        [
          "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
          "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
        ],
        [
          "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
          "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
        ],
        [
          "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
          "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
        ],
        [
          "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
          "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
        ],
        [
          "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
          "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
        ],
        [
          "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
          "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
        ],
        [
          "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
          "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
        ],
        [
          "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
          "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
        ],
        [
          "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
          "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
        ],
        [
          "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
          "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
        ],
        [
          "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
          "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
        ],
        [
          "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
          "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
        ],
        [
          "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
          "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
        ],
        [
          "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
          "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
        ],
        [
          "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
          "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
        ],
        [
          "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
          "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
        ],
        [
          "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
          "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
        ]
      ]
    },
    naf: {
      wnd: 7,
      points: [
        [
          "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
          "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
        ],
        [
          "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
          "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
        ],
        [
          "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
          "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
        ],
        [
          "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
          "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
        ],
        [
          "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
          "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
        ],
        [
          "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
          "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
        ],
        [
          "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
          "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
        ],
        [
          "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
          "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
        ],
        [
          "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
          "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
        ],
        [
          "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
          "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
        ],
        [
          "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
          "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
        ],
        [
          "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
          "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
        ],
        [
          "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
          "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
        ],
        [
          "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
          "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
        ],
        [
          "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
          "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
        ],
        [
          "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
          "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
        ],
        [
          "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
          "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
        ],
        [
          "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
          "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
        ],
        [
          "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
          "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
        ],
        [
          "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
          "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
        ],
        [
          "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
          "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
        ],
        [
          "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
          "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
        ],
        [
          "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
          "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
        ],
        [
          "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
          "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
        ],
        [
          "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
          "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
        ],
        [
          "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
          "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
        ],
        [
          "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
          "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
        ],
        [
          "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
          "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
        ],
        [
          "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
          "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
        ],
        [
          "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
          "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
        ],
        [
          "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
          "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
        ],
        [
          "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
          "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
        ],
        [
          "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
          "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
        ],
        [
          "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
          "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
        ],
        [
          "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
          "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
        ],
        [
          "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
          "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
        ],
        [
          "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
          "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
        ],
        [
          "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
          "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
        ],
        [
          "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
          "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
        ],
        [
          "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
          "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
        ],
        [
          "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
          "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
        ],
        [
          "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
          "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
        ],
        [
          "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
          "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
        ],
        [
          "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
          "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
        ],
        [
          "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
          "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
        ],
        [
          "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
          "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
        ],
        [
          "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
          "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
        ],
        [
          "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
          "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
        ],
        [
          "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
          "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
        ],
        [
          "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
          "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
        ],
        [
          "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
          "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
        ],
        [
          "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
          "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
        ],
        [
          "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
          "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
        ],
        [
          "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
          "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
        ],
        [
          "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
          "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
        ],
        [
          "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
          "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
        ],
        [
          "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
          "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
        ],
        [
          "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
          "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
        ],
        [
          "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
          "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
        ],
        [
          "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
          "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
        ],
        [
          "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
          "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
        ],
        [
          "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
          "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
        ],
        [
          "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
          "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
        ],
        [
          "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
          "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
        ],
        [
          "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
          "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
        ],
        [
          "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
          "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
        ],
        [
          "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
          "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
        ],
        [
          "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
          "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
        ],
        [
          "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
          "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
        ],
        [
          "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
          "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
        ],
        [
          "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
          "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
        ],
        [
          "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
          "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
        ],
        [
          "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
          "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
        ],
        [
          "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
          "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
        ],
        [
          "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
          "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
        ],
        [
          "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
          "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
        ],
        [
          "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
          "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
        ],
        [
          "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
          "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
        ],
        [
          "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
          "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
        ],
        [
          "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
          "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
        ],
        [
          "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
          "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
        ],
        [
          "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
          "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
        ],
        [
          "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
          "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
        ],
        [
          "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
          "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
        ],
        [
          "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
          "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
        ],
        [
          "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
          "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
        ],
        [
          "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
          "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
        ],
        [
          "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
          "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
        ],
        [
          "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
          "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
        ],
        [
          "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
          "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
        ],
        [
          "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
          "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
        ],
        [
          "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
          "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
        ],
        [
          "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
          "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
        ],
        [
          "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
          "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
        ],
        [
          "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
          "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
        ],
        [
          "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
          "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
        ],
        [
          "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
          "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
        ],
        [
          "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
          "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
        ],
        [
          "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
          "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
        ],
        [
          "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
          "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
        ],
        [
          "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
          "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
        ],
        [
          "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
          "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
        ],
        [
          "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
          "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
        ],
        [
          "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
          "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
        ],
        [
          "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
          "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
        ],
        [
          "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
          "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
        ],
        [
          "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
          "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
        ],
        [
          "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
          "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
        ],
        [
          "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
          "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
        ],
        [
          "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
          "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
        ],
        [
          "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
          "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
        ],
        [
          "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
          "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
        ],
        [
          "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
          "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
        ],
        [
          "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
          "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
        ],
        [
          "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
          "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
        ],
        [
          "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
          "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
        ],
        [
          "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
          "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
        ],
        [
          "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
          "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
        ],
        [
          "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
          "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
        ],
        [
          "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
          "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
        ],
        [
          "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
          "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
        ],
        [
          "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
          "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
        ],
        [
          "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
          "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
        ],
        [
          "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
          "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
        ],
        [
          "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
          "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
        ],
        [
          "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
          "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
        ],
        [
          "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
          "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
        ]
      ]
    }
  };
  return secp256k1;
}
var hasRequiredCurves;
function requireCurves() {
  if (hasRequiredCurves)
    return curves;
  hasRequiredCurves = 1;
  (function(exports2) {
    var curves2 = exports2;
    var hash2 = requireHash();
    var curve2 = requireCurve();
    var utils2 = requireUtils$1();
    var assert = utils2.assert;
    function PresetCurve(options) {
      if (options.type === "short")
        this.curve = new curve2.short(options);
      else if (options.type === "edwards")
        this.curve = new curve2.edwards(options);
      else
        this.curve = new curve2.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert(this.g.validate(), "Invalid curve");
      assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves2.PresetCurve = PresetCurve;
    function defineCurve(name2, options) {
      Object.defineProperty(curves2, name2, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve3 = new PresetCurve(options);
          Object.defineProperty(curves2, name2, {
            configurable: true,
            enumerable: true,
            value: curve3
          });
          return curve3;
        }
      });
    }
    defineCurve("p192", {
      type: "short",
      prime: "p192",
      p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
      b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
      n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
      ]
    });
    defineCurve("p224", {
      type: "short",
      prime: "p224",
      p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
      b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
      n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
      ]
    });
    defineCurve("p256", {
      type: "short",
      prime: null,
      p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
      a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
      b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
      n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
      ]
    });
    defineCurve("p384", {
      type: "short",
      prime: null,
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
      a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
      b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
      n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
      hash: hash2.sha384,
      gRed: false,
      g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
      ]
    });
    defineCurve("p521", {
      type: "short",
      prime: null,
      p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
      a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
      b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
      n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
      hash: hash2.sha512,
      gRed: false,
      g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
      ]
    });
    defineCurve("curve25519", {
      type: "mont",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "76d06",
      b: "1",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "9"
      ]
    });
    defineCurve("ed25519", {
      type: "edwards",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "-1",
      c: "1",
      // -121665 * (121666^(-1)) (mod P)
      d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658"
      ]
    });
    var pre;
    try {
      pre = requireSecp256k1();
    } catch (e2) {
      pre = void 0;
    }
    defineCurve("secp256k1", {
      type: "short",
      prime: "k256",
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
      a: "0",
      b: "7",
      n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
      h: "1",
      hash: hash2.sha256,
      // Precomputed endomorphism
      beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
      lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
      basis: [
        {
          a: "3086d221a7d46bcde86c90e49284eb15",
          b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
          a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
          b: "3086d221a7d46bcde86c90e49284eb15"
        }
      ],
      gRed: false,
      g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre
      ]
    });
  })(curves);
  return curves;
}
var hmacDrbg;
var hasRequiredHmacDrbg;
function requireHmacDrbg() {
  if (hasRequiredHmacDrbg)
    return hmacDrbg;
  hasRequiredHmacDrbg = 1;
  var hash2 = requireHash();
  var utils2 = requireUtils$2();
  var assert = requireMinimalisticAssert();
  function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG))
      return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils2.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = utils2.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = utils2.toArray(options.pers, options.persEnc || "hex");
    assert(
      entropy.length >= this.minEntropy / 8,
      "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
    );
    this._init(entropy, nonce, pers);
  }
  hmacDrbg = HmacDRBG;
  HmacDRBG.prototype._init = function init2(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i2 = 0; i2 < this.V.length; i2++) {
      this.K[i2] = 0;
      this.V[i2] = 1;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 281474976710656;
  };
  HmacDRBG.prototype._hmac = function hmac2() {
    return new hash2.hmac(this.hash, this.K);
  };
  HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([0]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;
    this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
  };
  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    if (typeof entropyEnc !== "string") {
      addEnc = add;
      add = entropyEnc;
      entropyEnc = null;
    }
    entropy = utils2.toArray(entropy, entropyEnc);
    add = utils2.toArray(add, addEnc);
    assert(
      entropy.length >= this.minEntropy / 8,
      "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
    );
    this._update(entropy.concat(add || []));
    this._reseed = 1;
  };
  HmacDRBG.prototype.generate = function generate(len2, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval)
      throw new Error("Reseed is required");
    if (typeof enc !== "string") {
      addEnc = add;
      add = enc;
      enc = null;
    }
    if (add) {
      add = utils2.toArray(add, addEnc || "hex");
      this._update(add);
    }
    var temp = [];
    while (temp.length < len2) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len2);
    this._update(add);
    this._reseed++;
    return utils2.encode(res, enc);
  };
  return hmacDrbg;
}
var key$1;
var hasRequiredKey$1;
function requireKey$1() {
  if (hasRequiredKey$1)
    return key$1;
  hasRequiredKey$1 = 1;
  var BN = requireBn$2();
  var utils2 = requireUtils$1();
  var assert = utils2.assert;
  function KeyPair(ec2, options) {
    this.ec = ec2;
    this.priv = null;
    this.pub = null;
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  key$1 = KeyPair;
  KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
    if (pub instanceof KeyPair)
      return pub;
    return new KeyPair(ec2, {
      pub,
      pubEnc: enc
    });
  };
  KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
    if (priv instanceof KeyPair)
      return priv;
    return new KeyPair(ec2, {
      priv,
      privEnc: enc
    });
  };
  KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity())
      return { result: false, reason: "Invalid public key" };
    if (!pub.validate())
      return { result: false, reason: "Public key is not a point" };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return { result: false, reason: "Public key * N != O" };
    return { result: true, reason: null };
  };
  KeyPair.prototype.getPublic = function getPublic(compact2, enc) {
    if (typeof compact2 === "string") {
      enc = compact2;
      compact2 = null;
    }
    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);
    if (!enc)
      return this.pub;
    return this.pub.encode(enc, compact2);
  };
  KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex")
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };
  KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
    this.priv = new BN(key2, enc || 16);
    this.priv = this.priv.umod(this.ec.curve.n);
  };
  KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
    if (key2.x || key2.y) {
      if (this.ec.curve.type === "mont") {
        assert(key2.x, "Need x coordinate");
      } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
        assert(key2.x && key2.y, "Need both x and y coordinate");
      }
      this.pub = this.ec.curve.point(key2.x, key2.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(key2, enc);
  };
  KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) {
      assert(pub.validate(), "public point not validated");
    }
    return pub.mul(this.priv).getX();
  };
  KeyPair.prototype.sign = function sign2(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };
  KeyPair.prototype.verify = function verify(msg, signature2) {
    return this.ec.verify(msg, signature2, this);
  };
  KeyPair.prototype.inspect = function inspect() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
  };
  return key$1;
}
var signature$1;
var hasRequiredSignature$1;
function requireSignature$1() {
  if (hasRequiredSignature$1)
    return signature$1;
  hasRequiredSignature$1 = 1;
  var BN = requireBn$2();
  var utils2 = requireUtils$1();
  var assert = utils2.assert;
  function Signature(options, enc) {
    if (options instanceof Signature)
      return options;
    if (this._importDER(options, enc))
      return;
    assert(options.r && options.s, "Signature without r or s");
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === void 0)
      this.recoveryParam = null;
    else
      this.recoveryParam = options.recoveryParam;
  }
  signature$1 = Signature;
  function Position() {
    this.place = 0;
  }
  function getLength(buf, p2) {
    var initial = buf[p2.place++];
    if (!(initial & 128)) {
      return initial;
    }
    var octetLen = initial & 15;
    if (octetLen === 0 || octetLen > 4) {
      return false;
    }
    if (buf[p2.place] === 0) {
      return false;
    }
    var val = 0;
    for (var i2 = 0, off = p2.place; i2 < octetLen; i2++, off++) {
      val <<= 8;
      val |= buf[off];
      val >>>= 0;
    }
    if (val <= 127) {
      return false;
    }
    p2.place = off;
    return val;
  }
  function rmPadding(buf) {
    var i2 = 0;
    var len2 = buf.length - 1;
    while (!buf[i2] && !(buf[i2 + 1] & 128) && i2 < len2) {
      i2++;
    }
    if (i2 === 0) {
      return buf;
    }
    return buf.slice(i2);
  }
  Signature.prototype._importDER = function _importDER(data2, enc) {
    data2 = utils2.toArray(data2, enc);
    var p2 = new Position();
    if (data2[p2.place++] !== 48) {
      return false;
    }
    var len2 = getLength(data2, p2);
    if (len2 === false) {
      return false;
    }
    if (len2 + p2.place !== data2.length) {
      return false;
    }
    if (data2[p2.place++] !== 2) {
      return false;
    }
    var rlen = getLength(data2, p2);
    if (rlen === false) {
      return false;
    }
    if ((data2[p2.place] & 128) !== 0) {
      return false;
    }
    var r2 = data2.slice(p2.place, rlen + p2.place);
    p2.place += rlen;
    if (data2[p2.place++] !== 2) {
      return false;
    }
    var slen = getLength(data2, p2);
    if (slen === false) {
      return false;
    }
    if (data2.length !== slen + p2.place) {
      return false;
    }
    if ((data2[p2.place] & 128) !== 0) {
      return false;
    }
    var s2 = data2.slice(p2.place, slen + p2.place);
    if (r2[0] === 0) {
      if (r2[1] & 128) {
        r2 = r2.slice(1);
      } else {
        return false;
      }
    }
    if (s2[0] === 0) {
      if (s2[1] & 128) {
        s2 = s2.slice(1);
      } else {
        return false;
      }
    }
    this.r = new BN(r2);
    this.s = new BN(s2);
    this.recoveryParam = null;
    return true;
  };
  function constructLength(arr, len2) {
    if (len2 < 128) {
      arr.push(len2);
      return;
    }
    var octets = 1 + (Math.log(len2) / Math.LN2 >>> 3);
    arr.push(octets | 128);
    while (--octets) {
      arr.push(len2 >>> (octets << 3) & 255);
    }
    arr.push(len2);
  }
  Signature.prototype.toDER = function toDER(enc) {
    var r2 = this.r.toArray();
    var s2 = this.s.toArray();
    if (r2[0] & 128)
      r2 = [0].concat(r2);
    if (s2[0] & 128)
      s2 = [0].concat(s2);
    r2 = rmPadding(r2);
    s2 = rmPadding(s2);
    while (!s2[0] && !(s2[1] & 128)) {
      s2 = s2.slice(1);
    }
    var arr = [2];
    constructLength(arr, r2.length);
    arr = arr.concat(r2);
    arr.push(2);
    constructLength(arr, s2.length);
    var backHalf = arr.concat(s2);
    var res = [48];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils2.encode(res, enc);
  };
  return signature$1;
}
var ec;
var hasRequiredEc;
function requireEc() {
  if (hasRequiredEc)
    return ec;
  hasRequiredEc = 1;
  var BN = requireBn$2();
  var HmacDRBG = requireHmacDrbg();
  var utils2 = requireUtils$1();
  var curves2 = requireCurves();
  var rand = requireBrorand();
  var assert = utils2.assert;
  var KeyPair = requireKey$1();
  var Signature = requireSignature$1();
  function EC(options) {
    if (!(this instanceof EC))
      return new EC(options);
    if (typeof options === "string") {
      assert(
        Object.prototype.hasOwnProperty.call(curves2, options),
        "Unknown curve " + options
      );
      options = curves2[options];
    }
    if (options instanceof curves2.PresetCurve)
      options = { curve: options };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    this.hash = options.hash || options.curve.hash;
  }
  ec = EC;
  EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
  };
  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
  };
  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
  };
  EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};
    var drbg = new HmacDRBG({
      hash: this.hash,
      pers: options.pers,
      persEnc: options.persEnc || "utf8",
      entropy: options.entropy || rand(this.hash.hmacStrength),
      entropyEnc: options.entropy && options.entropyEnc || "utf8",
      nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));
    for (; ; ) {
      var priv = new BN(drbg.generate(bytes));
      if (priv.cmp(ns2) > 0)
        continue;
      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    }
  };
  EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
      msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };
  EC.prototype.sign = function sign2(msg, key2, enc, options) {
    if (typeof enc === "object") {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};
    key2 = this.keyFromPrivate(key2, enc);
    msg = this._truncateToN(new BN(msg, 16));
    var bytes = this.n.byteLength();
    var bkey = key2.getPrivate().toArray("be", bytes);
    var nonce = msg.toArray("be", bytes);
    var drbg = new HmacDRBG({
      hash: this.hash,
      entropy: bkey,
      nonce,
      pers: options.pers,
      persEnc: options.persEnc || "utf8"
    });
    var ns1 = this.n.sub(new BN(1));
    for (var iter = 0; ; iter++) {
      var k2 = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
      k2 = this._truncateToN(k2, true);
      if (k2.cmpn(1) <= 0 || k2.cmp(ns1) >= 0)
        continue;
      var kp = this.g.mul(k2);
      if (kp.isInfinity())
        continue;
      var kpX = kp.getX();
      var r2 = kpX.umod(this.n);
      if (r2.cmpn(0) === 0)
        continue;
      var s2 = k2.invm(this.n).mul(r2.mul(key2.getPrivate()).iadd(msg));
      s2 = s2.umod(this.n);
      if (s2.cmpn(0) === 0)
        continue;
      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r2) !== 0 ? 2 : 0);
      if (options.canonical && s2.cmp(this.nh) > 0) {
        s2 = this.n.sub(s2);
        recoveryParam ^= 1;
      }
      return new Signature({ r: r2, s: s2, recoveryParam });
    }
  };
  EC.prototype.verify = function verify(msg, signature2, key2, enc) {
    msg = this._truncateToN(new BN(msg, 16));
    key2 = this.keyFromPublic(key2, enc);
    signature2 = new Signature(signature2, "hex");
    var r2 = signature2.r;
    var s2 = signature2.s;
    if (r2.cmpn(1) < 0 || r2.cmp(this.n) >= 0)
      return false;
    if (s2.cmpn(1) < 0 || s2.cmp(this.n) >= 0)
      return false;
    var sinv = s2.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r2).umod(this.n);
    var p2;
    if (!this.curve._maxwellTrick) {
      p2 = this.g.mulAdd(u1, key2.getPublic(), u2);
      if (p2.isInfinity())
        return false;
      return p2.getX().umod(this.n).cmp(r2) === 0;
    }
    p2 = this.g.jmulAdd(u1, key2.getPublic(), u2);
    if (p2.isInfinity())
      return false;
    return p2.eqXToP(r2);
  };
  EC.prototype.recoverPubKey = function(msg, signature2, j2, enc) {
    assert((3 & j2) === j2, "The recovery param is more than two bits");
    signature2 = new Signature(signature2, enc);
    var n2 = this.n;
    var e2 = new BN(msg);
    var r2 = signature2.r;
    var s2 = signature2.s;
    var isYOdd = j2 & 1;
    var isSecondKey = j2 >> 1;
    if (r2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error("Unable to find sencond key candinate");
    if (isSecondKey)
      r2 = this.curve.pointFromX(r2.add(this.curve.n), isYOdd);
    else
      r2 = this.curve.pointFromX(r2, isYOdd);
    var rInv = signature2.r.invm(n2);
    var s1 = n2.sub(e2).mul(rInv).umod(n2);
    var s22 = s2.mul(rInv).umod(n2);
    return this.g.mulAdd(s1, r2, s22);
  };
  EC.prototype.getKeyRecoveryParam = function(e2, signature2, Q2, enc) {
    signature2 = new Signature(signature2, enc);
    if (signature2.recoveryParam !== null)
      return signature2.recoveryParam;
    for (var i2 = 0; i2 < 4; i2++) {
      var Qprime;
      try {
        Qprime = this.recoverPubKey(e2, signature2, i2);
      } catch (e3) {
        continue;
      }
      if (Qprime.eq(Q2))
        return i2;
    }
    throw new Error("Unable to find valid recovery factor");
  };
  return ec;
}
var key;
var hasRequiredKey;
function requireKey() {
  if (hasRequiredKey)
    return key;
  hasRequiredKey = 1;
  var utils2 = requireUtils$1();
  var assert = utils2.assert;
  var parseBytes = utils2.parseBytes;
  var cachedProperty = utils2.cachedProperty;
  function KeyPair(eddsa2, params) {
    this.eddsa = eddsa2;
    this._secret = parseBytes(params.secret);
    if (eddsa2.isPoint(params.pub))
      this._pub = params.pub;
    else
      this._pubBytes = parseBytes(params.pub);
  }
  KeyPair.fromPublic = function fromPublic(eddsa2, pub) {
    if (pub instanceof KeyPair)
      return pub;
    return new KeyPair(eddsa2, { pub });
  };
  KeyPair.fromSecret = function fromSecret(eddsa2, secret) {
    if (secret instanceof KeyPair)
      return secret;
    return new KeyPair(eddsa2, { secret });
  };
  KeyPair.prototype.secret = function secret() {
    return this._secret;
  };
  cachedProperty(KeyPair, "pubBytes", function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
  });
  cachedProperty(KeyPair, "pub", function pub() {
    if (this._pubBytes)
      return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
  });
  cachedProperty(KeyPair, "privBytes", function privBytes() {
    var eddsa2 = this.eddsa;
    var hash2 = this.hash();
    var lastIx = eddsa2.encodingLength - 1;
    var a2 = hash2.slice(0, eddsa2.encodingLength);
    a2[0] &= 248;
    a2[lastIx] &= 127;
    a2[lastIx] |= 64;
    return a2;
  });
  cachedProperty(KeyPair, "priv", function priv() {
    return this.eddsa.decodeInt(this.privBytes());
  });
  cachedProperty(KeyPair, "hash", function hash2() {
    return this.eddsa.hash().update(this.secret()).digest();
  });
  cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
  });
  KeyPair.prototype.sign = function sign2(message2) {
    assert(this._secret, "KeyPair can only verify");
    return this.eddsa.sign(message2, this);
  };
  KeyPair.prototype.verify = function verify(message2, sig) {
    return this.eddsa.verify(message2, sig, this);
  };
  KeyPair.prototype.getSecret = function getSecret(enc) {
    assert(this._secret, "KeyPair is public only");
    return utils2.encode(this.secret(), enc);
  };
  KeyPair.prototype.getPublic = function getPublic(enc) {
    return utils2.encode(this.pubBytes(), enc);
  };
  key = KeyPair;
  return key;
}
var signature;
var hasRequiredSignature;
function requireSignature() {
  if (hasRequiredSignature)
    return signature;
  hasRequiredSignature = 1;
  var BN = requireBn$2();
  var utils2 = requireUtils$1();
  var assert = utils2.assert;
  var cachedProperty = utils2.cachedProperty;
  var parseBytes = utils2.parseBytes;
  function Signature(eddsa2, sig) {
    this.eddsa = eddsa2;
    if (typeof sig !== "object")
      sig = parseBytes(sig);
    if (Array.isArray(sig)) {
      assert(sig.length === eddsa2.encodingLength * 2, "Signature has invalid size");
      sig = {
        R: sig.slice(0, eddsa2.encodingLength),
        S: sig.slice(eddsa2.encodingLength)
      };
    }
    assert(sig.R && sig.S, "Signature without R or S");
    if (eddsa2.isPoint(sig.R))
      this._R = sig.R;
    if (sig.S instanceof BN)
      this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
  }
  cachedProperty(Signature, "S", function S2() {
    return this.eddsa.decodeInt(this.Sencoded());
  });
  cachedProperty(Signature, "R", function R2() {
    return this.eddsa.decodePoint(this.Rencoded());
  });
  cachedProperty(Signature, "Rencoded", function Rencoded() {
    return this.eddsa.encodePoint(this.R());
  });
  cachedProperty(Signature, "Sencoded", function Sencoded() {
    return this.eddsa.encodeInt(this.S());
  });
  Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
  };
  Signature.prototype.toHex = function toHex() {
    return utils2.encode(this.toBytes(), "hex").toUpperCase();
  };
  signature = Signature;
  return signature;
}
var eddsa;
var hasRequiredEddsa;
function requireEddsa() {
  if (hasRequiredEddsa)
    return eddsa;
  hasRequiredEddsa = 1;
  var hash2 = requireHash();
  var curves2 = requireCurves();
  var utils2 = requireUtils$1();
  var assert = utils2.assert;
  var parseBytes = utils2.parseBytes;
  var KeyPair = requireKey();
  var Signature = requireSignature();
  function EDDSA(curve2) {
    assert(curve2 === "ed25519", "only tested with ed25519 so far");
    if (!(this instanceof EDDSA))
      return new EDDSA(curve2);
    curve2 = curves2[curve2].curve;
    this.curve = curve2;
    this.g = curve2.g;
    this.g.precompute(curve2.n.bitLength() + 1);
    this.pointClass = curve2.point().constructor;
    this.encodingLength = Math.ceil(curve2.n.bitLength() / 8);
    this.hash = hash2.sha512;
  }
  eddsa = EDDSA;
  EDDSA.prototype.sign = function sign2(message2, secret) {
    message2 = parseBytes(message2);
    var key2 = this.keyFromSecret(secret);
    var r2 = this.hashInt(key2.messagePrefix(), message2);
    var R2 = this.g.mul(r2);
    var Rencoded = this.encodePoint(R2);
    var s_ = this.hashInt(Rencoded, key2.pubBytes(), message2).mul(key2.priv());
    var S2 = r2.add(s_).umod(this.curve.n);
    return this.makeSignature({ R: R2, S: S2, Rencoded });
  };
  EDDSA.prototype.verify = function verify(message2, sig, pub) {
    message2 = parseBytes(message2);
    sig = this.makeSignature(sig);
    if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) {
      return false;
    }
    var key2 = this.keyFromPublic(pub);
    var h2 = this.hashInt(sig.Rencoded(), key2.pubBytes(), message2);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key2.pub().mul(h2));
    return RplusAh.eq(SG);
  };
  EDDSA.prototype.hashInt = function hashInt() {
    var hash3 = this.hash();
    for (var i2 = 0; i2 < arguments.length; i2++)
      hash3.update(arguments[i2]);
    return utils2.intFromLE(hash3.digest()).umod(this.curve.n);
  };
  EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
  };
  EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
  };
  EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature)
      return sig;
    return new Signature(this, sig);
  };
  EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray("le", this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
    return enc;
  };
  EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils2.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);
    var xIsOdd = (bytes[lastIx] & 128) !== 0;
    var y2 = utils2.intFromLE(normed);
    return this.curve.pointFromY(y2, xIsOdd);
  };
  EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray("le", this.encodingLength);
  };
  EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils2.intFromLE(bytes);
  };
  EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
  };
  return eddsa;
}
var hasRequiredElliptic;
function requireElliptic() {
  if (hasRequiredElliptic)
    return elliptic;
  hasRequiredElliptic = 1;
  (function(exports2) {
    var elliptic2 = exports2;
    elliptic2.version = require$$0$1.version;
    elliptic2.utils = requireUtils$1();
    elliptic2.rand = requireBrorand();
    elliptic2.curve = requireCurve();
    elliptic2.curves = requireCurves();
    elliptic2.ec = requireEc();
    elliptic2.eddsa = requireEddsa();
  })(elliptic);
  return elliptic;
}
var bn = { exports: {} };
bn.exports;
var hasRequiredBn;
function requireBn() {
  if (hasRequiredBn)
    return bn.exports;
  hasRequiredBn = 1;
  (function(module) {
    (function(module2, exports2) {
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number2, base2, endian) {
        if (BN.isBN(number2)) {
          return number2;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number2 !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number2 || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer = window.Buffer;
        } else {
          Buffer = buffer$1.Buffer;
        }
      } catch (e2) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max2(left2, right2) {
        if (left2.cmp(right2) > 0)
          return left2;
        return right2;
      };
      BN.min = function min2(left2, right2) {
        if (left2.cmp(right2) < 0)
          return left2;
        return right2;
      };
      BN.prototype._init = function init2(number2, base2, endian) {
        if (typeof number2 === "number") {
          return this._initNumber(number2, base2, endian);
        }
        if (typeof number2 === "object") {
          return this._initArray(number2, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number2 = number2.toString().replace(/\s+/g, "");
        var start = 0;
        if (number2[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number2.length) {
          if (base2 === 16) {
            this._parseHex(number2, start, endian);
          } else {
            this._parseBase(number2, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN.prototype._initNumber = function _initNumber(number2, base2, endian) {
        if (number2 < 0) {
          this.negative = 1;
          number2 = -number2;
        }
        if (number2 < 67108864) {
          this.words = [number2 & 67108863];
          this.length = 1;
        } else if (number2 < 4503599627370496) {
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number2 < 9007199254740992);
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN.prototype._initArray = function _initArray(number2, base2, endian) {
        assert(typeof number2.length === "number");
        if (number2.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number2.length / 3);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var j2, w2;
        var off = 0;
        if (endian === "be") {
          for (i2 = number2.length - 1, j2 = 0; i2 >= 0; i2 -= 3) {
            w2 = number2[i2] | number2[i2 - 1] << 8 | number2[i2 - 2] << 16;
            this.words[j2] |= w2 << off & 67108863;
            this.words[j2 + 1] = w2 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j2++;
            }
          }
        } else if (endian === "le") {
          for (i2 = 0, j2 = 0; i2 < number2.length; i2 += 3) {
            w2 = number2[i2] | number2[i2 + 1] << 8 | number2[i2 + 2] << 16;
            this.words[j2] |= w2 << off & 67108863;
            this.words[j2 + 1] = w2 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j2++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string2, index2) {
        var c2 = string2.charCodeAt(index2);
        if (c2 >= 48 && c2 <= 57) {
          return c2 - 48;
        } else if (c2 >= 65 && c2 <= 70) {
          return c2 - 55;
        } else if (c2 >= 97 && c2 <= 102) {
          return c2 - 87;
        } else {
          assert(false, "Invalid character in " + string2);
        }
      }
      function parseHexByte(string2, lowerBound, index2) {
        var r2 = parseHex4Bits(string2, index2);
        if (index2 - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string2, index2 - 1) << 4;
        }
        return r2;
      }
      BN.prototype._parseHex = function _parseHex(number2, start, endian) {
        this.length = Math.ceil((number2.length - start) / 6);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var off = 0;
        var j2 = 0;
        var w2;
        if (endian === "be") {
          for (i2 = number2.length - 1; i2 >= start; i2 -= 2) {
            w2 = parseHexByte(number2, start, i2) << off;
            this.words[j2] |= w2 & 67108863;
            if (off >= 18) {
              off -= 18;
              j2 += 1;
              this.words[j2] |= w2 >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number2.length - start;
          for (i2 = parseLength % 2 === 0 ? start + 1 : start; i2 < number2.length; i2 += 2) {
            w2 = parseHexByte(number2, start, i2) << off;
            this.words[j2] |= w2 & 67108863;
            if (off >= 18) {
              off -= 18;
              j2 += 1;
              this.words[j2] |= w2 >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r2 = 0;
        var b2 = 0;
        var len2 = Math.min(str.length, end);
        for (var i2 = start; i2 < len2; i2++) {
          var c2 = str.charCodeAt(i2) - 48;
          r2 *= mul;
          if (c2 >= 49) {
            b2 = c2 - 49 + 10;
          } else if (c2 >= 17) {
            b2 = c2 - 17 + 10;
          } else {
            b2 = c2;
          }
          assert(c2 >= 0 && b2 < mul, "Invalid character");
          r2 += b2;
        }
        return r2;
      }
      BN.prototype._parseBase = function _parseBase(number2, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number2.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i2 = start; i2 < end; i2 += limbLen) {
          word = parseBase(number2, i2, i2 + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number2, i2, number2.length, base2);
          for (i2 = 0; i2 < mod; i2++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN.prototype.copy = function copy2(dest) {
        dest.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          dest.words[i2] = this.words[i2];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src2) {
        dest.words = src2.words;
        dest.length = src2.length;
        dest.negative = src2.negative;
        dest.red = src2.red;
      }
      BN.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN.prototype.clone = function clone() {
        var r2 = new BN(null);
        this.copy(r2);
        return r2;
      };
      BN.prototype._expand = function _expand(size2) {
        while (this.length < size2) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e2) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString2(base2, padding) {
        base2 = base2 || 10;
        padding = padding | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w2 = this.words[i2];
            var word = ((w2 << off | carry) & 16777215).toString(16);
            carry = w2 >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i2--;
            }
            if (carry !== 0 || i2 !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c2 = this.clone();
          c2.negative = 0;
          while (!c2.isZero()) {
            var r2 = c2.modrn(groupBase).toString(base2);
            c2 = c2.idivn(groupBase);
            if (!c2.isZero()) {
              out = zeros[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };
      if (Buffer) {
        BN.prototype.toBuffer = function toBuffer2(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }
      BN.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType2, size2) {
        if (ArrayType2.allocUnsafe) {
          return ArrayType2.allocUnsafe(size2);
        }
        return new ArrayType2(size2);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType2, endian, length) {
        this._strip();
        var byteLength2 = this.byteLength();
        var reqLength = length || Math.max(1, byteLength2);
        assert(byteLength2 <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType2, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength2);
        return res;
      };
      BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength2) {
        var position = 0;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength2) {
        var position = res.length - 1;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w2) {
          return 32 - Math.clz32(w2);
        };
      } else {
        BN.prototype._countBits = function _countBits(w2) {
          var t2 = w2;
          var r2 = 0;
          if (t2 >= 4096) {
            r2 += 13;
            t2 >>>= 13;
          }
          if (t2 >= 64) {
            r2 += 7;
            t2 >>>= 7;
          }
          if (t2 >= 8) {
            r2 += 4;
            t2 >>>= 4;
          }
          if (t2 >= 2) {
            r2 += 2;
            t2 >>>= 2;
          }
          return r2 + t2;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w2) {
        if (w2 === 0)
          return 26;
        var t2 = w2;
        var r2 = 0;
        if ((t2 & 8191) === 0) {
          r2 += 13;
          t2 >>>= 13;
        }
        if ((t2 & 127) === 0) {
          r2 += 7;
          t2 >>>= 7;
        }
        if ((t2 & 15) === 0) {
          r2 += 4;
          t2 >>>= 4;
        }
        if ((t2 & 3) === 0) {
          r2 += 2;
          t2 >>>= 2;
        }
        if ((t2 & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN.prototype.bitLength = function bitLength() {
        var w2 = this.words[this.length - 1];
        var hi2 = this._countBits(w2);
        return (this.length - 1) * 26 + hi2;
      };
      function toBitArray(num) {
        var w2 = new Array(num.bitLength());
        for (var bit = 0; bit < w2.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w2[bit] = num.words[off] >>> wbit & 1;
        }
        return w2;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r2 = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var b2 = this._zeroBits(this.words[i2]);
          r2 += b2;
          if (b2 !== 26)
            break;
        }
        return r2;
      };
      BN.prototype.byteLength = function byteLength2() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i2 = 0; i2 < num.length; i2++) {
          this.words[i2] = this.words[i2] | num.words[i2];
        }
        return this._strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b2;
        if (this.length > num.length) {
          b2 = num;
        } else {
          b2 = this;
        }
        for (var i2 = 0; i2 < b2.length; i2++) {
          this.words[i2] = this.words[i2] & num.words[i2];
        }
        this.length = b2.length;
        return this._strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a2;
        var b2;
        if (this.length > num.length) {
          a2 = this;
          b2 = num;
        } else {
          a2 = num;
          b2 = this;
        }
        for (var i2 = 0; i2 < b2.length; i2++) {
          this.words[i2] = a2.words[i2] ^ b2.words[i2];
        }
        if (this !== a2) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        this.length = a2.length;
        return this._strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor2(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i2 = 0; i2 < bytesNeeded; i2++) {
          this.words[i2] = ~this.words[i2] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a2, b2;
        if (this.length > num.length) {
          a2 = this;
          b2 = num;
        } else {
          a2 = num;
          b2 = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b2.length; i2++) {
          r2 = (a2.words[i2] | 0) + (b2.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i2 < a2.length; i2++) {
          r2 = (a2.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a2.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a2 !== this) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a2, b2;
        if (cmp > 0) {
          a2 = this;
          b2 = num;
        } else {
          a2 = num;
          b2 = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b2.length; i2++) {
          r2 = (a2.words[i2] | 0) - (b2.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        for (; carry !== 0 && i2 < a2.length; i2++) {
          r2 = (a2.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        if (carry === 0 && i2 < a2.length && a2 !== this) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        this.length = Math.max(this.length, i2);
        if (a2 !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len2 = self2.length + num.length | 0;
        out.length = len2;
        len2 = len2 - 1 | 0;
        var a2 = self2.words[0] | 0;
        var b2 = num.words[0] | 0;
        var r2 = a2 * b2;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k2 = 1; k2 < len2; k2++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k2, num.length - 1);
          for (var j2 = Math.max(0, k2 - self2.length + 1); j2 <= maxJ; j2++) {
            var i2 = k2 - j2 | 0;
            a2 = self2.words[i2] | 0;
            b2 = num.words[j2] | 0;
            r2 = a2 * b2 + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k2] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k2] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a2 = self2.words;
        var b2 = num.words;
        var o2 = out.words;
        var c2 = 0;
        var lo;
        var mid;
        var hi2;
        var a0 = a2[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a2[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a22 = a2[2] | 0;
        var al2 = a22 & 8191;
        var ah2 = a22 >>> 13;
        var a3 = a2[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a2[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a2[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a2[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a2[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a2[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a2[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b2[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b2[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b22 = b2[2] | 0;
        var bl2 = b22 & 8191;
        var bh2 = b22 >>> 13;
        var b3 = b2[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b2[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b2[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b2[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b2[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b2[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b2[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi2 = Math.imul(ah0, bh0);
        var w0 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi2 = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi2 = hi2 + Math.imul(ah0, bh1) | 0;
        var w1 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi2 = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi2 = hi2 + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi2 = hi2 + Math.imul(ah0, bh2) | 0;
        var w2 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi2 = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi2 = hi2 + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi2 = hi2 + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi2 = hi2 + Math.imul(ah0, bh3) | 0;
        var w3 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi2 = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi2 = hi2 + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi2 = hi2 + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi2 = hi2 + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi2 = hi2 + Math.imul(ah0, bh4) | 0;
        var w4 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi2 = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi2 = hi2 + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi2 = hi2 + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi2 = hi2 + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi2 = hi2 + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi2 = hi2 + Math.imul(ah0, bh5) | 0;
        var w5 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi2 = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi2 = hi2 + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi2 = hi2 + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi2 = hi2 + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi2 = hi2 + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi2 = hi2 + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi2 = hi2 + Math.imul(ah0, bh6) | 0;
        var w6 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi2 = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi2 = hi2 + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi2 = hi2 + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi2 = hi2 + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi2 = hi2 + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi2 = hi2 + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi2 = hi2 + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi2 = hi2 + Math.imul(ah0, bh7) | 0;
        var w7 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi2 = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi2 = hi2 + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi2 = hi2 + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi2 = hi2 + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi2 = hi2 + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi2 = hi2 + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi2 = hi2 + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi2 = hi2 + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi2 = hi2 + Math.imul(ah0, bh8) | 0;
        var w8 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi2 = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi2 = hi2 + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi2 = hi2 + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi2 = hi2 + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi2 = hi2 + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi2 = hi2 + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi2 = hi2 + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi2 = hi2 + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi2 = hi2 + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi2 = hi2 + Math.imul(ah0, bh9) | 0;
        var w9 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi2 = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi2 = hi2 + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi2 = hi2 + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi2 = hi2 + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi2 = hi2 + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi2 = hi2 + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi2 = hi2 + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi2 = hi2 + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi2 = hi2 + Math.imul(ah1, bh9) | 0;
        var w10 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi2 = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi2 = hi2 + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi2 = hi2 + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi2 = hi2 + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi2 = hi2 + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi2 = hi2 + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi2 = hi2 + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi2 = hi2 + Math.imul(ah2, bh9) | 0;
        var w11 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi2 = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi2 = hi2 + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi2 = hi2 + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi2 = hi2 + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi2 = hi2 + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi2 = hi2 + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi2 = hi2 + Math.imul(ah3, bh9) | 0;
        var w12 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi2 = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi2 = hi2 + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi2 = hi2 + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi2 = hi2 + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi2 = hi2 + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi2 = hi2 + Math.imul(ah4, bh9) | 0;
        var w13 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi2 = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi2 = hi2 + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi2 = hi2 + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi2 = hi2 + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi2 = hi2 + Math.imul(ah5, bh9) | 0;
        var w14 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi2 = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi2 = hi2 + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi2 = hi2 + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi2 = hi2 + Math.imul(ah6, bh9) | 0;
        var w15 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi2 = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi2 = hi2 + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi2 = hi2 + Math.imul(ah7, bh9) | 0;
        var w16 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi2 = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi2 = hi2 + Math.imul(ah8, bh9) | 0;
        var w17 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi2 = Math.imul(ah9, bh9);
        var w18 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi2 + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o2[0] = w0;
        o2[1] = w1;
        o2[2] = w2;
        o2[3] = w3;
        o2[4] = w4;
        o2[5] = w5;
        o2[6] = w6;
        o2[7] = w7;
        o2[8] = w8;
        o2[9] = w9;
        o2[10] = w10;
        o2[11] = w11;
        o2[12] = w12;
        o2[13] = w13;
        o2[14] = w14;
        o2[15] = w15;
        o2[16] = w16;
        o2[17] = w17;
        o2[18] = w18;
        if (c2 !== 0) {
          o2[19] = c2;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k2 = 0; k2 < out.length - 1; k2++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k2, num.length - 1);
          for (var j2 = Math.max(0, k2 - self2.length + 1); j2 <= maxJ; j2++) {
            var i2 = k2 - j2;
            var a2 = self2.words[i2] | 0;
            var b2 = num.words[j2] | 0;
            var r2 = a2 * b2;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k2] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k2] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len2 = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len2 < 63) {
          res = smallMulTo(this, num, out);
        } else if (len2 < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var w2 = (this.words[i2] | 0) * num;
          var lo = (w2 & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w2 / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i2] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w2 = toBitArray(num);
        if (w2.length === 0)
          return new BN(1);
        var res = this;
        for (var i2 = 0; i2 < w2.length; i2++, res = res.sqr()) {
          if (w2[i2] !== 0)
            break;
        }
        if (++i2 < w2.length) {
          for (var q2 = res.sqr(); i2 < w2.length; i2++, q2 = q2.sqr()) {
            if (w2[i2] === 0)
              continue;
            res = res.mul(q2);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i2;
        if (r2 !== 0) {
          var carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            var newCarry = this.words[i2] & carryMask;
            var c2 = (this.words[i2] | 0) - newCarry << r2;
            this.words[i2] = c2 | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i2] = carry;
            this.length++;
          }
        }
        if (s2 !== 0) {
          for (i2 = this.length - 1; i2 >= 0; i2--) {
            this.words[i2 + s2] = this.words[i2];
          }
          for (i2 = 0; i2 < s2; i2++) {
            this.words[i2] = 0;
          }
          this.length += s2;
        }
        return this._strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h2;
        if (hint) {
          h2 = (hint - hint % 26) / 26;
        } else {
          h2 = 0;
        }
        var r2 = bits % 26;
        var s2 = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h2 -= s2;
        h2 = Math.max(0, h2);
        if (maskedWords) {
          for (var i2 = 0; i2 < s2; i2++) {
            maskedWords.words[i2] = this.words[i2];
          }
          maskedWords.length = s2;
        }
        if (s2 === 0)
          ;
        else if (this.length > s2) {
          this.length -= s2;
          for (i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = this.words[i2 + s2];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h2); i2--) {
          var word = this.words[i2] | 0;
          this.words[i2] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q2 = 1 << r2;
        if (this.length <= s2)
          return false;
        var w2 = this.words[s2];
        return !!(w2 & q2);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s2) {
          return this;
        }
        if (r2 !== 0) {
          s2++;
        }
        this.length = Math.min(s2, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
          this.words[i2] -= 67108864;
          if (i2 === this.length - 1) {
            this.words[i2 + 1] = 1;
          } else {
            this.words[i2 + 1]++;
          }
        }
        this.length = Math.max(this.length, i2 + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
            this.words[i2] += 67108864;
            this.words[i2 + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len2 = num.length + shift;
        var i2;
        this._expand(len2);
        var w2;
        var carry = 0;
        for (i2 = 0; i2 < num.length; i2++) {
          w2 = (this.words[i2 + shift] | 0) + carry;
          var right2 = (num.words[i2] | 0) * mul;
          w2 -= right2 & 67108863;
          carry = (w2 >> 26) - (right2 / 67108864 | 0);
          this.words[i2 + shift] = w2 & 67108863;
        }
        for (; i2 < this.length - shift; i2++) {
          w2 = (this.words[i2 + shift] | 0) + carry;
          carry = w2 >> 26;
          this.words[i2 + shift] = w2 & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert(carry === -1);
        carry = 0;
        for (i2 = 0; i2 < this.length; i2++) {
          w2 = -(this.words[i2] | 0) + carry;
          carry = w2 >> 26;
          this.words[i2] = w2 & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a2 = this.clone();
        var b2 = num;
        var bhi = b2.words[b2.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b2 = b2.ushln(shift);
          a2.iushln(shift);
          bhi = b2.words[b2.length - 1] | 0;
        }
        var m2 = a2.length - b2.length;
        var q2;
        if (mode !== "mod") {
          q2 = new BN(null);
          q2.length = m2 + 1;
          q2.words = new Array(q2.length);
          for (var i2 = 0; i2 < q2.length; i2++) {
            q2.words[i2] = 0;
          }
        }
        var diff = a2.clone()._ishlnsubmul(b2, 1, m2);
        if (diff.negative === 0) {
          a2 = diff;
          if (q2) {
            q2.words[m2] = 1;
          }
        }
        for (var j2 = m2 - 1; j2 >= 0; j2--) {
          var qj2 = (a2.words[b2.length + j2] | 0) * 67108864 + (a2.words[b2.length + j2 - 1] | 0);
          qj2 = Math.min(qj2 / bhi | 0, 67108863);
          a2._ishlnsubmul(b2, qj2, j2);
          while (a2.negative !== 0) {
            qj2--;
            a2.negative = 0;
            a2._ishlnsubmul(b2, 1, j2);
            if (!a2.isZero()) {
              a2.negative ^= 1;
            }
          }
          if (q2) {
            q2.words[j2] = qj2;
          }
        }
        if (q2) {
          q2._strip();
        }
        a2._strip();
        if (mode !== "div" && shift !== 0) {
          a2.iushrn(shift);
        }
        return {
          div: q2 || null,
          mod: a2
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert(num <= 67108863);
        var p2 = (1 << 26) % num;
        var acc = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          acc = (p2 * acc + (this.words[i2] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert(num <= 67108863);
        var carry = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var w2 = (this.words[i2] | 0) + carry * 67108864;
          this.words[i2] = w2 / num | 0;
          carry = w2 % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p2) {
        assert(p2.negative === 0);
        assert(!p2.isZero());
        var x2 = this;
        var y2 = p2.clone();
        if (x2.negative !== 0) {
          x2 = x2.umod(p2);
        } else {
          x2 = x2.clone();
        }
        var A2 = new BN(1);
        var B2 = new BN(0);
        var C2 = new BN(0);
        var D2 = new BN(1);
        var g2 = 0;
        while (x2.isEven() && y2.isEven()) {
          x2.iushrn(1);
          y2.iushrn(1);
          ++g2;
        }
        var yp = y2.clone();
        var xp = x2.clone();
        while (!x2.isZero()) {
          for (var i2 = 0, im = 1; (x2.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1)
            ;
          if (i2 > 0) {
            x2.iushrn(i2);
            while (i2-- > 0) {
              if (A2.isOdd() || B2.isOdd()) {
                A2.iadd(yp);
                B2.isub(xp);
              }
              A2.iushrn(1);
              B2.iushrn(1);
            }
          }
          for (var j2 = 0, jm = 1; (y2.words[0] & jm) === 0 && j2 < 26; ++j2, jm <<= 1)
            ;
          if (j2 > 0) {
            y2.iushrn(j2);
            while (j2-- > 0) {
              if (C2.isOdd() || D2.isOdd()) {
                C2.iadd(yp);
                D2.isub(xp);
              }
              C2.iushrn(1);
              D2.iushrn(1);
            }
          }
          if (x2.cmp(y2) >= 0) {
            x2.isub(y2);
            A2.isub(C2);
            B2.isub(D2);
          } else {
            y2.isub(x2);
            C2.isub(A2);
            D2.isub(B2);
          }
        }
        return {
          a: C2,
          b: D2,
          gcd: y2.iushln(g2)
        };
      };
      BN.prototype._invmp = function _invmp(p2) {
        assert(p2.negative === 0);
        assert(!p2.isZero());
        var a2 = this;
        var b2 = p2.clone();
        if (a2.negative !== 0) {
          a2 = a2.umod(p2);
        } else {
          a2 = a2.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b2.clone();
        while (a2.cmpn(1) > 0 && b2.cmpn(1) > 0) {
          for (var i2 = 0, im = 1; (a2.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1)
            ;
          if (i2 > 0) {
            a2.iushrn(i2);
            while (i2-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j2 = 0, jm = 1; (b2.words[0] & jm) === 0 && j2 < 26; ++j2, jm <<= 1)
            ;
          if (j2 > 0) {
            b2.iushrn(j2);
            while (j2-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a2.cmp(b2) >= 0) {
            a2.isub(b2);
            x1.isub(x2);
          } else {
            b2.isub(a2);
            x2.isub(x1);
          }
        }
        var res;
        if (a2.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p2);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a2 = this.clone();
        var b2 = num.clone();
        a2.negative = 0;
        b2.negative = 0;
        for (var shift = 0; a2.isEven() && b2.isEven(); shift++) {
          a2.iushrn(1);
          b2.iushrn(1);
        }
        do {
          while (a2.isEven()) {
            a2.iushrn(1);
          }
          while (b2.isEven()) {
            b2.iushrn(1);
          }
          var r2 = a2.cmp(b2);
          if (r2 < 0) {
            var t2 = a2;
            a2 = b2;
            b2 = t2;
          } else if (r2 === 0 || b2.cmpn(1) === 0) {
            break;
          }
          a2.isub(b2);
        } while (true);
        return b2.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q2 = 1 << r2;
        if (this.length <= s2) {
          this._expand(s2 + 1);
          this.words[s2] |= q2;
          return this;
        }
        var carry = q2;
        for (var i2 = s2; carry !== 0 && i2 < this.length; i2++) {
          var w2 = this.words[i2] | 0;
          w2 += carry;
          carry = w2 >>> 26;
          w2 &= 67108863;
          this.words[i2] = w2;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w2 = this.words[0] | 0;
          res = w2 === num ? 0 : w2 < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var a2 = this.words[i2] | 0;
          var b2 = num.words[i2] | 0;
          if (a2 === b2)
            continue;
          if (a2 < b2) {
            res = -1;
          } else if (a2 > b2) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p2) {
        this.name = name2;
        this.p = new BN(p2, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i2 = 0; i2 < outLen; i2++) {
          output.words[i2] = input.words[i2];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i2 = 10; i2 < input.length; i2++) {
          var next = input.words[i2] | 0;
          input.words[i2 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i2 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var w2 = num.words[i2] | 0;
          lo += w2 * 977;
          num.words[i2] = lo & 67108863;
          lo = w2 * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var hi2 = (num.words[i2] | 0) * 19 + carry;
          var lo = hi2 & 67108863;
          hi2 >>>= 26;
          num.words[i2] = lo;
          carry = hi2;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m2) {
        if (typeof m2 === "string") {
          var prime = BN._prime(m2);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m2.gtn(1), "modulus must be greater than 1");
          this.m = m2;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a2) {
        assert(a2.negative === 0, "red works only with positives");
        assert(a2.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a2, b2) {
        assert((a2.negative | b2.negative) === 0, "red works only with positives");
        assert(
          a2.red && a2.red === b2.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a2) {
        if (this.prime)
          return this.prime.ireduce(a2)._forceRed(this);
        move(a2, a2.umod(this.m)._forceRed(this));
        return a2;
      };
      Red.prototype.neg = function neg(a2) {
        if (a2.isZero()) {
          return a2.clone();
        }
        return this.m.sub(a2)._forceRed(this);
      };
      Red.prototype.add = function add(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.add(b2);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.iadd(b2);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.sub(b2);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.isub(b2);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a2, num) {
        this._verify1(a2);
        return this.imod(a2.ushln(num));
      };
      Red.prototype.imul = function imul(a2, b2) {
        this._verify2(a2, b2);
        return this.imod(a2.imul(b2));
      };
      Red.prototype.mul = function mul(a2, b2) {
        this._verify2(a2, b2);
        return this.imod(a2.mul(b2));
      };
      Red.prototype.isqr = function isqr(a2) {
        return this.imul(a2, a2.clone());
      };
      Red.prototype.sqr = function sqr(a2) {
        return this.mul(a2, a2);
      };
      Red.prototype.sqrt = function sqrt(a2) {
        if (a2.isZero())
          return a2.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a2, pow);
        }
        var q2 = this.m.subn(1);
        var s2 = 0;
        while (!q2.isZero() && q2.andln(1) === 0) {
          s2++;
          q2.iushrn(1);
        }
        assert(!q2.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z2 = this.m.bitLength();
        z2 = new BN(2 * z2 * z2).toRed(this);
        while (this.pow(z2, lpow).cmp(nOne) !== 0) {
          z2.redIAdd(nOne);
        }
        var c2 = this.pow(z2, q2);
        var r2 = this.pow(a2, q2.addn(1).iushrn(1));
        var t2 = this.pow(a2, q2);
        var m2 = s2;
        while (t2.cmp(one) !== 0) {
          var tmp = t2;
          for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
            tmp = tmp.redSqr();
          }
          assert(i2 < m2);
          var b2 = this.pow(c2, new BN(1).iushln(m2 - i2 - 1));
          r2 = r2.redMul(b2);
          c2 = b2.redSqr();
          t2 = t2.redMul(c2);
          m2 = i2;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a2) {
        var inv = a2._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a2, num) {
        if (num.isZero())
          return new BN(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a2.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a2;
        for (var i2 = 2; i2 < wnd.length; i2++) {
          wnd[i2] = this.mul(wnd[i2 - 1], a2);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i2 = num.length - 1; i2 >= 0; i2--) {
          var word = num.words[i2];
          for (var j2 = start - 1; j2 >= 0; j2--) {
            var bit = word >> j2 & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i2 !== 0 || j2 !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont2(num) {
        return new Mont(num);
      };
      function Mont(m2) {
        Red.call(this, m2);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a2, b2) {
        if (a2.isZero() || b2.isZero()) {
          a2.words[0] = 0;
          a2.length = 1;
          return a2;
        }
        var t2 = a2.imul(b2);
        var c2 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t2.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a2, b2) {
        if (a2.isZero() || b2.isZero())
          return new BN(0)._forceRed(this);
        var t2 = a2.mul(b2);
        var c2 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t2.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a2) {
        var res = this.imod(a2._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal);
  })(bn);
  return bn.exports;
}
var asn1$1 = {};
var asn1 = {};
var api = {};
var vmBrowserify = {};
var hasRequiredVmBrowserify;
function requireVmBrowserify() {
  if (hasRequiredVmBrowserify)
    return vmBrowserify;
  hasRequiredVmBrowserify = 1;
  (function(exports) {
    var indexOf = function(xs, item) {
      if (xs.indexOf)
        return xs.indexOf(item);
      else
        for (var i2 = 0; i2 < xs.length; i2++) {
          if (xs[i2] === item)
            return i2;
        }
      return -1;
    };
    var Object_keys = function(obj) {
      if (Object.keys)
        return Object.keys(obj);
      else {
        var res = [];
        for (var key2 in obj)
          res.push(key2);
        return res;
      }
    };
    var forEach = function(xs, fn) {
      if (xs.forEach)
        return xs.forEach(fn);
      else
        for (var i2 = 0; i2 < xs.length; i2++) {
          fn(xs[i2], i2, xs);
        }
    };
    var defineProp = function() {
      try {
        Object.defineProperty({}, "_", {});
        return function(obj, name2, value) {
          Object.defineProperty(obj, name2, {
            writable: true,
            enumerable: false,
            configurable: true,
            value
          });
        };
      } catch (e2) {
        return function(obj, name2, value) {
          obj[name2] = value;
        };
      }
    }();
    var globals = [
      "Array",
      "Boolean",
      "Date",
      "Error",
      "EvalError",
      "Function",
      "Infinity",
      "JSON",
      "Math",
      "NaN",
      "Number",
      "Object",
      "RangeError",
      "ReferenceError",
      "RegExp",
      "String",
      "SyntaxError",
      "TypeError",
      "URIError",
      "decodeURI",
      "decodeURIComponent",
      "encodeURI",
      "encodeURIComponent",
      "escape",
      "eval",
      "isFinite",
      "isNaN",
      "parseFloat",
      "parseInt",
      "undefined",
      "unescape"
    ];
    function Context() {
    }
    Context.prototype = {};
    var Script = exports.Script = function NodeScript(code2) {
      if (!(this instanceof Script))
        return new Script(code2);
      this.code = code2;
    };
    Script.prototype.runInContext = function(context) {
      if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
      }
      var iframe = document.createElement("iframe");
      if (!iframe.style)
        iframe.style = {};
      iframe.style.display = "none";
      document.body.appendChild(iframe);
      var win = iframe.contentWindow;
      var wEval = win.eval, wExecScript = win.execScript;
      if (!wEval && wExecScript) {
        wExecScript.call(win, "null");
        wEval = win.eval;
      }
      forEach(Object_keys(context), function(key2) {
        win[key2] = context[key2];
      });
      forEach(globals, function(key2) {
        if (context[key2]) {
          win[key2] = context[key2];
        }
      });
      var winKeys = Object_keys(win);
      var res = wEval.call(win, this.code);
      forEach(Object_keys(win), function(key2) {
        if (key2 in context || indexOf(winKeys, key2) === -1) {
          context[key2] = win[key2];
        }
      });
      forEach(globals, function(key2) {
        if (!(key2 in context)) {
          defineProp(context, key2, win[key2]);
        }
      });
      document.body.removeChild(iframe);
      return res;
    };
    Script.prototype.runInThisContext = function() {
      return eval(this.code);
    };
    Script.prototype.runInNewContext = function(context) {
      var ctx = Script.createContext(context);
      var res = this.runInContext(ctx);
      if (context) {
        forEach(Object_keys(ctx), function(key2) {
          context[key2] = ctx[key2];
        });
      }
      return res;
    };
    forEach(Object_keys(Script.prototype), function(name2) {
      exports[name2] = Script[name2] = function(code2) {
        var s2 = Script(code2);
        return s2[name2].apply(s2, [].slice.call(arguments, 1));
      };
    });
    exports.isContext = function(context) {
      return context instanceof Context;
    };
    exports.createScript = function(code2) {
      return exports.Script(code2);
    };
    exports.createContext = Script.createContext = function(context) {
      var copy2 = new Context();
      if (typeof context === "object") {
        forEach(Object_keys(context), function(key2) {
          copy2[key2] = context[key2];
        });
      }
      return copy2;
    };
  })(vmBrowserify);
  return vmBrowserify;
}
var hasRequiredApi;
function requireApi() {
  if (hasRequiredApi)
    return api;
  hasRequiredApi = 1;
  (function(exports2) {
    var asn12 = requireAsn1$1();
    var inherits = requireInherits_browser();
    var api2 = exports2;
    api2.define = function define(name2, body) {
      return new Entity(name2, body);
    };
    function Entity(name2, body) {
      this.name = name2;
      this.body = body;
      this.decoders = {};
      this.encoders = {};
    }
    Entity.prototype._createNamed = function createNamed(base2) {
      var named;
      try {
        named = requireVmBrowserify().runInThisContext(
          "(function " + this.name + "(entity) {\n  this._initNamed(entity);\n})"
        );
      } catch (e2) {
        named = function(entity) {
          this._initNamed(entity);
        };
      }
      inherits(named, base2);
      named.prototype._initNamed = function initnamed(entity) {
        base2.call(this, entity);
      };
      return new named(this);
    };
    Entity.prototype._getDecoder = function _getDecoder(enc) {
      enc = enc || "der";
      if (!this.decoders.hasOwnProperty(enc))
        this.decoders[enc] = this._createNamed(asn12.decoders[enc]);
      return this.decoders[enc];
    };
    Entity.prototype.decode = function decode2(data2, enc, options) {
      return this._getDecoder(enc).decode(data2, options);
    };
    Entity.prototype._getEncoder = function _getEncoder(enc) {
      enc = enc || "der";
      if (!this.encoders.hasOwnProperty(enc))
        this.encoders[enc] = this._createNamed(asn12.encoders[enc]);
      return this.encoders[enc];
    };
    Entity.prototype.encode = function encode2(data2, enc, reporter2) {
      return this._getEncoder(enc).encode(data2, reporter2);
    };
  })(api);
  return api;
}
var base = {};
var reporter = {};
var hasRequiredReporter;
function requireReporter() {
  if (hasRequiredReporter)
    return reporter;
  hasRequiredReporter = 1;
  var inherits = requireInherits_browser();
  function Reporter(options) {
    this._reporterState = {
      obj: null,
      path: [],
      options: options || {},
      errors: []
    };
  }
  reporter.Reporter = Reporter;
  Reporter.prototype.isError = function isError(obj) {
    return obj instanceof ReporterError;
  };
  Reporter.prototype.save = function save() {
    var state2 = this._reporterState;
    return { obj: state2.obj, pathLen: state2.path.length };
  };
  Reporter.prototype.restore = function restore(data2) {
    var state2 = this._reporterState;
    state2.obj = data2.obj;
    state2.path = state2.path.slice(0, data2.pathLen);
  };
  Reporter.prototype.enterKey = function enterKey(key2) {
    return this._reporterState.path.push(key2);
  };
  Reporter.prototype.exitKey = function exitKey(index2) {
    var state2 = this._reporterState;
    state2.path = state2.path.slice(0, index2 - 1);
  };
  Reporter.prototype.leaveKey = function leaveKey(index2, key2, value) {
    var state2 = this._reporterState;
    this.exitKey(index2);
    if (state2.obj !== null)
      state2.obj[key2] = value;
  };
  Reporter.prototype.path = function path() {
    return this._reporterState.path.join("/");
  };
  Reporter.prototype.enterObject = function enterObject() {
    var state2 = this._reporterState;
    var prev = state2.obj;
    state2.obj = {};
    return prev;
  };
  Reporter.prototype.leaveObject = function leaveObject(prev) {
    var state2 = this._reporterState;
    var now = state2.obj;
    state2.obj = prev;
    return now;
  };
  Reporter.prototype.error = function error(msg) {
    var err;
    var state2 = this._reporterState;
    var inherited = msg instanceof ReporterError;
    if (inherited) {
      err = msg;
    } else {
      err = new ReporterError(state2.path.map(function(elem2) {
        return "[" + JSON.stringify(elem2) + "]";
      }).join(""), msg.message || msg, msg.stack);
    }
    if (!state2.options.partial)
      throw err;
    if (!inherited)
      state2.errors.push(err);
    return err;
  };
  Reporter.prototype.wrapResult = function wrapResult(result) {
    var state2 = this._reporterState;
    if (!state2.options.partial)
      return result;
    return {
      result: this.isError(result) ? null : result,
      errors: state2.errors
    };
  };
  function ReporterError(path, msg) {
    this.path = path;
    this.rethrow(msg);
  }
  inherits(ReporterError, Error);
  ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + " at: " + (this.path || "(shallow)");
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, ReporterError);
    if (!this.stack) {
      try {
        throw new Error(this.message);
      } catch (e2) {
        this.stack = e2.stack;
      }
    }
    return this;
  };
  return reporter;
}
var buffer = {};
var hasRequiredBuffer;
function requireBuffer() {
  if (hasRequiredBuffer)
    return buffer;
  hasRequiredBuffer = 1;
  var inherits = requireInherits_browser();
  var Reporter = requireBase().Reporter;
  var Buffer = buffer$1.Buffer;
  function DecoderBuffer(base2, options) {
    Reporter.call(this, options);
    if (!Buffer.isBuffer(base2)) {
      this.error("Input not Buffer");
      return;
    }
    this.base = base2;
    this.offset = 0;
    this.length = base2.length;
  }
  inherits(DecoderBuffer, Reporter);
  buffer.DecoderBuffer = DecoderBuffer;
  DecoderBuffer.prototype.save = function save() {
    return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
  };
  DecoderBuffer.prototype.restore = function restore(save) {
    var res = new DecoderBuffer(this.base);
    res.offset = save.offset;
    res.length = this.offset;
    this.offset = save.offset;
    Reporter.prototype.restore.call(this, save.reporter);
    return res;
  };
  DecoderBuffer.prototype.isEmpty = function isEmpty2() {
    return this.offset === this.length;
  };
  DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length)
      return this.base.readUInt8(this.offset++, true);
    else
      return this.error(fail || "DecoderBuffer overrun");
  };
  DecoderBuffer.prototype.skip = function skip(bytes, fail) {
    if (!(this.offset + bytes <= this.length))
      return this.error(fail || "DecoderBuffer overrun");
    var res = new DecoderBuffer(this.base);
    res._reporterState = this._reporterState;
    res.offset = this.offset;
    res.length = this.offset + bytes;
    this.offset += bytes;
    return res;
  };
  DecoderBuffer.prototype.raw = function raw(save) {
    return this.base.slice(save ? save.offset : this.offset, this.length);
  };
  function EncoderBuffer(value, reporter2) {
    if (Array.isArray(value)) {
      this.length = 0;
      this.value = value.map(function(item) {
        if (!(item instanceof EncoderBuffer))
          item = new EncoderBuffer(item, reporter2);
        this.length += item.length;
        return item;
      }, this);
    } else if (typeof value === "number") {
      if (!(0 <= value && value <= 255))
        return reporter2.error("non-byte EncoderBuffer value");
      this.value = value;
      this.length = 1;
    } else if (typeof value === "string") {
      this.value = value;
      this.length = Buffer.byteLength(value);
    } else if (Buffer.isBuffer(value)) {
      this.value = value;
      this.length = value.length;
    } else {
      return reporter2.error("Unsupported type: " + typeof value);
    }
  }
  buffer.EncoderBuffer = EncoderBuffer;
  EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out)
      out = new Buffer(this.length);
    if (!offset)
      offset = 0;
    if (this.length === 0)
      return out;
    if (Array.isArray(this.value)) {
      this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
      });
    } else {
      if (typeof this.value === "number")
        out[offset] = this.value;
      else if (typeof this.value === "string")
        out.write(this.value, offset);
      else if (Buffer.isBuffer(this.value))
        this.value.copy(out, offset);
      offset += this.length;
    }
    return out;
  };
  return buffer;
}
var node;
var hasRequiredNode;
function requireNode() {
  if (hasRequiredNode)
    return node;
  hasRequiredNode = 1;
  var Reporter = requireBase().Reporter;
  var EncoderBuffer = requireBase().EncoderBuffer;
  var DecoderBuffer = requireBase().DecoderBuffer;
  var assert = requireMinimalisticAssert();
  var tags = [
    "seq",
    "seqof",
    "set",
    "setof",
    "objid",
    "bool",
    "gentime",
    "utctime",
    "null_",
    "enum",
    "int",
    "objDesc",
    "bitstr",
    "bmpstr",
    "charstr",
    "genstr",
    "graphstr",
    "ia5str",
    "iso646str",
    "numstr",
    "octstr",
    "printstr",
    "t61str",
    "unistr",
    "utf8str",
    "videostr"
  ];
  var methods = [
    "key",
    "obj",
    "use",
    "optional",
    "explicit",
    "implicit",
    "def",
    "choice",
    "any",
    "contains"
  ].concat(tags);
  var overrided = [
    "_peekTag",
    "_decodeTag",
    "_use",
    "_decodeStr",
    "_decodeObjid",
    "_decodeTime",
    "_decodeNull",
    "_decodeInt",
    "_decodeBool",
    "_decodeList",
    "_encodeComposite",
    "_encodeStr",
    "_encodeObjid",
    "_encodeTime",
    "_encodeNull",
    "_encodeInt",
    "_encodeBool"
  ];
  function Node2(enc, parent) {
    var state2 = {};
    this._baseState = state2;
    state2.enc = enc;
    state2.parent = parent || null;
    state2.children = null;
    state2.tag = null;
    state2.args = null;
    state2.reverseArgs = null;
    state2.choice = null;
    state2.optional = false;
    state2.any = false;
    state2.obj = false;
    state2.use = null;
    state2.useDecoder = null;
    state2.key = null;
    state2["default"] = null;
    state2.explicit = null;
    state2.implicit = null;
    state2.contains = null;
    if (!state2.parent) {
      state2.children = [];
      this._wrap();
    }
  }
  node = Node2;
  var stateProps = [
    "enc",
    "parent",
    "children",
    "tag",
    "args",
    "reverseArgs",
    "choice",
    "optional",
    "any",
    "obj",
    "use",
    "alteredUse",
    "key",
    "default",
    "explicit",
    "implicit",
    "contains"
  ];
  Node2.prototype.clone = function clone() {
    var state2 = this._baseState;
    var cstate = {};
    stateProps.forEach(function(prop) {
      cstate[prop] = state2[prop];
    });
    var res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
  };
  Node2.prototype._wrap = function wrap() {
    var state2 = this._baseState;
    methods.forEach(function(method) {
      this[method] = function _wrappedMethod() {
        var clone = new this.constructor(this);
        state2.children.push(clone);
        return clone[method].apply(clone, arguments);
      };
    }, this);
  };
  Node2.prototype._init = function init2(body) {
    var state2 = this._baseState;
    assert(state2.parent === null);
    body.call(this);
    state2.children = state2.children.filter(function(child) {
      return child._baseState.parent === this;
    }, this);
    assert.equal(state2.children.length, 1, "Root node can have only one child");
  };
  Node2.prototype._useArgs = function useArgs(args) {
    var state2 = this._baseState;
    var children2 = args.filter(function(arg) {
      return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
      return !(arg instanceof this.constructor);
    }, this);
    if (children2.length !== 0) {
      assert(state2.children === null);
      state2.children = children2;
      children2.forEach(function(child) {
        child._baseState.parent = this;
      }, this);
    }
    if (args.length !== 0) {
      assert(state2.args === null);
      state2.args = args;
      state2.reverseArgs = args.map(function(arg) {
        if (typeof arg !== "object" || arg.constructor !== Object)
          return arg;
        var res = {};
        Object.keys(arg).forEach(function(key2) {
          if (key2 == (key2 | 0))
            key2 |= 0;
          var value = arg[key2];
          res[value] = key2;
        });
        return res;
      });
    }
  };
  overrided.forEach(function(method) {
    Node2.prototype[method] = function _overrided() {
      var state2 = this._baseState;
      throw new Error(method + " not implemented for encoding: " + state2.enc);
    };
  });
  tags.forEach(function(tag) {
    Node2.prototype[tag] = function _tagMethod() {
      var state2 = this._baseState;
      var args = Array.prototype.slice.call(arguments);
      assert(state2.tag === null);
      state2.tag = tag;
      this._useArgs(args);
      return this;
    };
  });
  Node2.prototype.use = function use3(item) {
    assert(item);
    var state2 = this._baseState;
    assert(state2.use === null);
    state2.use = item;
    return this;
  };
  Node2.prototype.optional = function optional() {
    var state2 = this._baseState;
    state2.optional = true;
    return this;
  };
  Node2.prototype.def = function def(val) {
    var state2 = this._baseState;
    assert(state2["default"] === null);
    state2["default"] = val;
    state2.optional = true;
    return this;
  };
  Node2.prototype.explicit = function explicit(num) {
    var state2 = this._baseState;
    assert(state2.explicit === null && state2.implicit === null);
    state2.explicit = num;
    return this;
  };
  Node2.prototype.implicit = function implicit(num) {
    var state2 = this._baseState;
    assert(state2.explicit === null && state2.implicit === null);
    state2.implicit = num;
    return this;
  };
  Node2.prototype.obj = function obj() {
    var state2 = this._baseState;
    var args = Array.prototype.slice.call(arguments);
    state2.obj = true;
    if (args.length !== 0)
      this._useArgs(args);
    return this;
  };
  Node2.prototype.key = function key2(newKey) {
    var state2 = this._baseState;
    assert(state2.key === null);
    state2.key = newKey;
    return this;
  };
  Node2.prototype.any = function any2() {
    var state2 = this._baseState;
    state2.any = true;
    return this;
  };
  Node2.prototype.choice = function choice(obj) {
    var state2 = this._baseState;
    assert(state2.choice === null);
    state2.choice = obj;
    this._useArgs(Object.keys(obj).map(function(key2) {
      return obj[key2];
    }));
    return this;
  };
  Node2.prototype.contains = function contains(item) {
    var state2 = this._baseState;
    assert(state2.use === null);
    state2.contains = item;
    return this;
  };
  Node2.prototype._decode = function decode2(input, options) {
    var state2 = this._baseState;
    if (state2.parent === null)
      return input.wrapResult(state2.children[0]._decode(input, options));
    var result = state2["default"];
    var present = true;
    var prevKey = null;
    if (state2.key !== null)
      prevKey = input.enterKey(state2.key);
    if (state2.optional) {
      var tag = null;
      if (state2.explicit !== null)
        tag = state2.explicit;
      else if (state2.implicit !== null)
        tag = state2.implicit;
      else if (state2.tag !== null)
        tag = state2.tag;
      if (tag === null && !state2.any) {
        var save = input.save();
        try {
          if (state2.choice === null)
            this._decodeGeneric(state2.tag, input, options);
          else
            this._decodeChoice(input, options);
          present = true;
        } catch (e2) {
          present = false;
        }
        input.restore(save);
      } else {
        present = this._peekTag(input, tag, state2.any);
        if (input.isError(present))
          return present;
      }
    }
    var prevObj;
    if (state2.obj && present)
      prevObj = input.enterObject();
    if (present) {
      if (state2.explicit !== null) {
        var explicit = this._decodeTag(input, state2.explicit);
        if (input.isError(explicit))
          return explicit;
        input = explicit;
      }
      var start = input.offset;
      if (state2.use === null && state2.choice === null) {
        if (state2.any)
          var save = input.save();
        var body = this._decodeTag(
          input,
          state2.implicit !== null ? state2.implicit : state2.tag,
          state2.any
        );
        if (input.isError(body))
          return body;
        if (state2.any)
          result = input.raw(save);
        else
          input = body;
      }
      if (options && options.track && state2.tag !== null)
        options.track(input.path(), start, input.length, "tagged");
      if (options && options.track && state2.tag !== null)
        options.track(input.path(), input.offset, input.length, "content");
      if (state2.any)
        result = result;
      else if (state2.choice === null)
        result = this._decodeGeneric(state2.tag, input, options);
      else
        result = this._decodeChoice(input, options);
      if (input.isError(result))
        return result;
      if (!state2.any && state2.choice === null && state2.children !== null) {
        state2.children.forEach(function decodeChildren(child) {
          child._decode(input, options);
        });
      }
      if (state2.contains && (state2.tag === "octstr" || state2.tag === "bitstr")) {
        var data2 = new DecoderBuffer(result);
        result = this._getUse(state2.contains, input._reporterState.obj)._decode(data2, options);
      }
    }
    if (state2.obj && present)
      result = input.leaveObject(prevObj);
    if (state2.key !== null && (result !== null || present === true))
      input.leaveKey(prevKey, state2.key, result);
    else if (prevKey !== null)
      input.exitKey(prevKey);
    return result;
  };
  Node2.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    var state2 = this._baseState;
    if (tag === "seq" || tag === "set")
      return null;
    if (tag === "seqof" || tag === "setof")
      return this._decodeList(input, tag, state2.args[0], options);
    else if (/str$/.test(tag))
      return this._decodeStr(input, tag, options);
    else if (tag === "objid" && state2.args)
      return this._decodeObjid(input, state2.args[0], state2.args[1], options);
    else if (tag === "objid")
      return this._decodeObjid(input, null, null, options);
    else if (tag === "gentime" || tag === "utctime")
      return this._decodeTime(input, tag, options);
    else if (tag === "null_")
      return this._decodeNull(input, options);
    else if (tag === "bool")
      return this._decodeBool(input, options);
    else if (tag === "objDesc")
      return this._decodeStr(input, tag, options);
    else if (tag === "int" || tag === "enum")
      return this._decodeInt(input, state2.args && state2.args[0], options);
    if (state2.use !== null) {
      return this._getUse(state2.use, input._reporterState.obj)._decode(input, options);
    } else {
      return input.error("unknown tag: " + tag);
    }
  };
  Node2.prototype._getUse = function _getUse(entity, obj) {
    var state2 = this._baseState;
    state2.useDecoder = this._use(entity, obj);
    assert(state2.useDecoder._baseState.parent === null);
    state2.useDecoder = state2.useDecoder._baseState.children[0];
    if (state2.implicit !== state2.useDecoder._baseState.implicit) {
      state2.useDecoder = state2.useDecoder.clone();
      state2.useDecoder._baseState.implicit = state2.implicit;
    }
    return state2.useDecoder;
  };
  Node2.prototype._decodeChoice = function decodeChoice(input, options) {
    var state2 = this._baseState;
    var result = null;
    var match2 = false;
    Object.keys(state2.choice).some(function(key2) {
      var save = input.save();
      var node2 = state2.choice[key2];
      try {
        var value = node2._decode(input, options);
        if (input.isError(value))
          return false;
        result = { type: key2, value };
        match2 = true;
      } catch (e2) {
        input.restore(save);
        return false;
      }
      return true;
    }, this);
    if (!match2)
      return input.error("Choice not matched");
    return result;
  };
  Node2.prototype._createEncoderBuffer = function createEncoderBuffer(data2) {
    return new EncoderBuffer(data2, this.reporter);
  };
  Node2.prototype._encode = function encode2(data2, reporter2, parent) {
    var state2 = this._baseState;
    if (state2["default"] !== null && state2["default"] === data2)
      return;
    var result = this._encodeValue(data2, reporter2, parent);
    if (result === void 0)
      return;
    if (this._skipDefault(result, reporter2, parent))
      return;
    return result;
  };
  Node2.prototype._encodeValue = function encode2(data2, reporter2, parent) {
    var state2 = this._baseState;
    if (state2.parent === null)
      return state2.children[0]._encode(data2, reporter2 || new Reporter());
    var result = null;
    this.reporter = reporter2;
    if (state2.optional && data2 === void 0) {
      if (state2["default"] !== null)
        data2 = state2["default"];
      else
        return;
    }
    var content = null;
    var primitive = false;
    if (state2.any) {
      result = this._createEncoderBuffer(data2);
    } else if (state2.choice) {
      result = this._encodeChoice(data2, reporter2);
    } else if (state2.contains) {
      content = this._getUse(state2.contains, parent)._encode(data2, reporter2);
      primitive = true;
    } else if (state2.children) {
      content = state2.children.map(function(child2) {
        if (child2._baseState.tag === "null_")
          return child2._encode(null, reporter2, data2);
        if (child2._baseState.key === null)
          return reporter2.error("Child should have a key");
        var prevKey = reporter2.enterKey(child2._baseState.key);
        if (typeof data2 !== "object")
          return reporter2.error("Child expected, but input is not object");
        var res = child2._encode(data2[child2._baseState.key], reporter2, data2);
        reporter2.leaveKey(prevKey);
        return res;
      }, this).filter(function(child2) {
        return child2;
      });
      content = this._createEncoderBuffer(content);
    } else {
      if (state2.tag === "seqof" || state2.tag === "setof") {
        if (!(state2.args && state2.args.length === 1))
          return reporter2.error("Too many args for : " + state2.tag);
        if (!Array.isArray(data2))
          return reporter2.error("seqof/setof, but data is not Array");
        var child = this.clone();
        child._baseState.implicit = null;
        content = this._createEncoderBuffer(data2.map(function(item) {
          var state3 = this._baseState;
          return this._getUse(state3.args[0], data2)._encode(item, reporter2);
        }, child));
      } else if (state2.use !== null) {
        result = this._getUse(state2.use, parent)._encode(data2, reporter2);
      } else {
        content = this._encodePrimitive(state2.tag, data2);
        primitive = true;
      }
    }
    var result;
    if (!state2.any && state2.choice === null) {
      var tag = state2.implicit !== null ? state2.implicit : state2.tag;
      var cls = state2.implicit === null ? "universal" : "context";
      if (tag === null) {
        if (state2.use === null)
          reporter2.error("Tag could be omitted only for .use()");
      } else {
        if (state2.use === null)
          result = this._encodeComposite(tag, primitive, cls, content);
      }
    }
    if (state2.explicit !== null)
      result = this._encodeComposite(state2.explicit, false, "context", result);
    return result;
  };
  Node2.prototype._encodeChoice = function encodeChoice(data2, reporter2) {
    var state2 = this._baseState;
    var node2 = state2.choice[data2.type];
    if (!node2) {
      assert(
        false,
        data2.type + " not found in " + JSON.stringify(Object.keys(state2.choice))
      );
    }
    return node2._encode(data2.value, reporter2);
  };
  Node2.prototype._encodePrimitive = function encodePrimitive(tag, data2) {
    var state2 = this._baseState;
    if (/str$/.test(tag))
      return this._encodeStr(data2, tag);
    else if (tag === "objid" && state2.args)
      return this._encodeObjid(data2, state2.reverseArgs[0], state2.args[1]);
    else if (tag === "objid")
      return this._encodeObjid(data2, null, null);
    else if (tag === "gentime" || tag === "utctime")
      return this._encodeTime(data2, tag);
    else if (tag === "null_")
      return this._encodeNull();
    else if (tag === "int" || tag === "enum")
      return this._encodeInt(data2, state2.args && state2.reverseArgs[0]);
    else if (tag === "bool")
      return this._encodeBool(data2);
    else if (tag === "objDesc")
      return this._encodeStr(data2, tag);
    else
      throw new Error("Unsupported tag: " + tag);
  };
  Node2.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
  };
  Node2.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
  };
  return node;
}
var hasRequiredBase;
function requireBase() {
  if (hasRequiredBase)
    return base;
  hasRequiredBase = 1;
  (function(exports2) {
    var base2 = exports2;
    base2.Reporter = requireReporter().Reporter;
    base2.DecoderBuffer = requireBuffer().DecoderBuffer;
    base2.EncoderBuffer = requireBuffer().EncoderBuffer;
    base2.Node = requireNode();
  })(base);
  return base;
}
var constants = {};
var der = {};
var hasRequiredDer$2;
function requireDer$2() {
  if (hasRequiredDer$2)
    return der;
  hasRequiredDer$2 = 1;
  (function(exports2) {
    var constants2 = requireConstants();
    exports2.tagClass = {
      0: "universal",
      1: "application",
      2: "context",
      3: "private"
    };
    exports2.tagClassByName = constants2._reverse(exports2.tagClass);
    exports2.tag = {
      0: "end",
      1: "bool",
      2: "int",
      3: "bitstr",
      4: "octstr",
      5: "null_",
      6: "objid",
      7: "objDesc",
      8: "external",
      9: "real",
      10: "enum",
      11: "embed",
      12: "utf8str",
      13: "relativeOid",
      16: "seq",
      17: "set",
      18: "numstr",
      19: "printstr",
      20: "t61str",
      21: "videostr",
      22: "ia5str",
      23: "utctime",
      24: "gentime",
      25: "graphstr",
      26: "iso646str",
      27: "genstr",
      28: "unistr",
      29: "charstr",
      30: "bmpstr"
    };
    exports2.tagByName = constants2._reverse(exports2.tag);
  })(der);
  return der;
}
var hasRequiredConstants;
function requireConstants() {
  if (hasRequiredConstants)
    return constants;
  hasRequiredConstants = 1;
  (function(exports2) {
    var constants2 = exports2;
    constants2._reverse = function reverse2(map2) {
      var res = {};
      Object.keys(map2).forEach(function(key2) {
        if ((key2 | 0) == key2)
          key2 = key2 | 0;
        var value = map2[key2];
        res[value] = key2;
      });
      return res;
    };
    constants2.der = requireDer$2();
  })(constants);
  return constants;
}
var decoders = {};
var der_1$1;
var hasRequiredDer$1;
function requireDer$1() {
  if (hasRequiredDer$1)
    return der_1$1;
  hasRequiredDer$1 = 1;
  var inherits = requireInherits_browser();
  var asn12 = requireAsn1$1();
  var base2 = asn12.base;
  var bignum = asn12.bignum;
  var der2 = asn12.constants.der;
  function DERDecoder(entity) {
    this.enc = "der";
    this.name = entity.name;
    this.entity = entity;
    this.tree = new DERNode();
    this.tree._init(entity.body);
  }
  der_1$1 = DERDecoder;
  DERDecoder.prototype.decode = function decode2(data2, options) {
    if (!(data2 instanceof base2.DecoderBuffer))
      data2 = new base2.DecoderBuffer(data2, options);
    return this.tree._decode(data2, options);
  };
  function DERNode(parent) {
    base2.Node.call(this, "der", parent);
  }
  inherits(DERNode, base2.Node);
  DERNode.prototype._peekTag = function peekTag(buffer2, tag, any2) {
    if (buffer2.isEmpty())
      return false;
    var state2 = buffer2.save();
    var decodedTag = derDecodeTag(buffer2, 'Failed to peek tag: "' + tag + '"');
    if (buffer2.isError(decodedTag))
      return decodedTag;
    buffer2.restore(state2);
    return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + "of" === tag || any2;
  };
  DERNode.prototype._decodeTag = function decodeTag(buffer2, tag, any2) {
    var decodedTag = derDecodeTag(
      buffer2,
      'Failed to decode tag of "' + tag + '"'
    );
    if (buffer2.isError(decodedTag))
      return decodedTag;
    var len2 = derDecodeLen(
      buffer2,
      decodedTag.primitive,
      'Failed to get length of "' + tag + '"'
    );
    if (buffer2.isError(len2))
      return len2;
    if (!any2 && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + "of" !== tag) {
      return buffer2.error('Failed to match tag: "' + tag + '"');
    }
    if (decodedTag.primitive || len2 !== null)
      return buffer2.skip(len2, 'Failed to match body of: "' + tag + '"');
    var state2 = buffer2.save();
    var res = this._skipUntilEnd(
      buffer2,
      'Failed to skip indefinite length body: "' + this.tag + '"'
    );
    if (buffer2.isError(res))
      return res;
    len2 = buffer2.offset - state2.offset;
    buffer2.restore(state2);
    return buffer2.skip(len2, 'Failed to match body of: "' + tag + '"');
  };
  DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer2, fail) {
    while (true) {
      var tag = derDecodeTag(buffer2, fail);
      if (buffer2.isError(tag))
        return tag;
      var len2 = derDecodeLen(buffer2, tag.primitive, fail);
      if (buffer2.isError(len2))
        return len2;
      var res;
      if (tag.primitive || len2 !== null)
        res = buffer2.skip(len2);
      else
        res = this._skipUntilEnd(buffer2, fail);
      if (buffer2.isError(res))
        return res;
      if (tag.tagStr === "end")
        break;
    }
  };
  DERNode.prototype._decodeList = function decodeList(buffer2, tag, decoder, options) {
    var result = [];
    while (!buffer2.isEmpty()) {
      var possibleEnd = this._peekTag(buffer2, "end");
      if (buffer2.isError(possibleEnd))
        return possibleEnd;
      var res = decoder.decode(buffer2, "der", options);
      if (buffer2.isError(res) && possibleEnd)
        break;
      result.push(res);
    }
    return result;
  };
  DERNode.prototype._decodeStr = function decodeStr(buffer2, tag) {
    if (tag === "bitstr") {
      var unused = buffer2.readUInt8();
      if (buffer2.isError(unused))
        return unused;
      return { unused, data: buffer2.raw() };
    } else if (tag === "bmpstr") {
      var raw = buffer2.raw();
      if (raw.length % 2 === 1)
        return buffer2.error("Decoding of string type: bmpstr length mismatch");
      var str = "";
      for (var i2 = 0; i2 < raw.length / 2; i2++) {
        str += String.fromCharCode(raw.readUInt16BE(i2 * 2));
      }
      return str;
    } else if (tag === "numstr") {
      var numstr = buffer2.raw().toString("ascii");
      if (!this._isNumstr(numstr)) {
        return buffer2.error("Decoding of string type: numstr unsupported characters");
      }
      return numstr;
    } else if (tag === "octstr") {
      return buffer2.raw();
    } else if (tag === "objDesc") {
      return buffer2.raw();
    } else if (tag === "printstr") {
      var printstr = buffer2.raw().toString("ascii");
      if (!this._isPrintstr(printstr)) {
        return buffer2.error("Decoding of string type: printstr unsupported characters");
      }
      return printstr;
    } else if (/str$/.test(tag)) {
      return buffer2.raw().toString();
    } else {
      return buffer2.error("Decoding of string type: " + tag + " unsupported");
    }
  };
  DERNode.prototype._decodeObjid = function decodeObjid(buffer2, values, relative) {
    var result;
    var identifiers = [];
    var ident = 0;
    while (!buffer2.isEmpty()) {
      var subident = buffer2.readUInt8();
      ident <<= 7;
      ident |= subident & 127;
      if ((subident & 128) === 0) {
        identifiers.push(ident);
        ident = 0;
      }
    }
    if (subident & 128)
      identifiers.push(ident);
    var first2 = identifiers[0] / 40 | 0;
    var second = identifiers[0] % 40;
    if (relative)
      result = identifiers;
    else
      result = [first2, second].concat(identifiers.slice(1));
    if (values) {
      var tmp = values[result.join(" ")];
      if (tmp === void 0)
        tmp = values[result.join(".")];
      if (tmp !== void 0)
        result = tmp;
    }
    return result;
  };
  DERNode.prototype._decodeTime = function decodeTime(buffer2, tag) {
    var str = buffer2.raw().toString();
    if (tag === "gentime") {
      var year = str.slice(0, 4) | 0;
      var mon = str.slice(4, 6) | 0;
      var day = str.slice(6, 8) | 0;
      var hour = str.slice(8, 10) | 0;
      var min2 = str.slice(10, 12) | 0;
      var sec = str.slice(12, 14) | 0;
    } else if (tag === "utctime") {
      var year = str.slice(0, 2) | 0;
      var mon = str.slice(2, 4) | 0;
      var day = str.slice(4, 6) | 0;
      var hour = str.slice(6, 8) | 0;
      var min2 = str.slice(8, 10) | 0;
      var sec = str.slice(10, 12) | 0;
      if (year < 70)
        year = 2e3 + year;
      else
        year = 1900 + year;
    } else {
      return buffer2.error("Decoding " + tag + " time is not supported yet");
    }
    return Date.UTC(year, mon - 1, day, hour, min2, sec, 0);
  };
  DERNode.prototype._decodeNull = function decodeNull(buffer2) {
    return null;
  };
  DERNode.prototype._decodeBool = function decodeBool(buffer2) {
    var res = buffer2.readUInt8();
    if (buffer2.isError(res))
      return res;
    else
      return res !== 0;
  };
  DERNode.prototype._decodeInt = function decodeInt(buffer2, values) {
    var raw = buffer2.raw();
    var res = new bignum(raw);
    if (values)
      res = values[res.toString(10)] || res;
    return res;
  };
  DERNode.prototype._use = function use3(entity, obj) {
    if (typeof entity === "function")
      entity = entity(obj);
    return entity._getDecoder("der").tree;
  };
  function derDecodeTag(buf, fail) {
    var tag = buf.readUInt8(fail);
    if (buf.isError(tag))
      return tag;
    var cls = der2.tagClass[tag >> 6];
    var primitive = (tag & 32) === 0;
    if ((tag & 31) === 31) {
      var oct = tag;
      tag = 0;
      while ((oct & 128) === 128) {
        oct = buf.readUInt8(fail);
        if (buf.isError(oct))
          return oct;
        tag <<= 7;
        tag |= oct & 127;
      }
    } else {
      tag &= 31;
    }
    var tagStr = der2.tag[tag];
    return {
      cls,
      primitive,
      tag,
      tagStr
    };
  }
  function derDecodeLen(buf, primitive, fail) {
    var len2 = buf.readUInt8(fail);
    if (buf.isError(len2))
      return len2;
    if (!primitive && len2 === 128)
      return null;
    if ((len2 & 128) === 0) {
      return len2;
    }
    var num = len2 & 127;
    if (num > 4)
      return buf.error("length octect is too long");
    len2 = 0;
    for (var i2 = 0; i2 < num; i2++) {
      len2 <<= 8;
      var j2 = buf.readUInt8(fail);
      if (buf.isError(j2))
        return j2;
      len2 |= j2;
    }
    return len2;
  }
  return der_1$1;
}
var pem$1;
var hasRequiredPem$1;
function requirePem$1() {
  if (hasRequiredPem$1)
    return pem$1;
  hasRequiredPem$1 = 1;
  var inherits = requireInherits_browser();
  var Buffer = buffer$1.Buffer;
  var DERDecoder = requireDer$1();
  function PEMDecoder(entity) {
    DERDecoder.call(this, entity);
    this.enc = "pem";
  }
  inherits(PEMDecoder, DERDecoder);
  pem$1 = PEMDecoder;
  PEMDecoder.prototype.decode = function decode2(data2, options) {
    var lines = data2.toString().split(/[\r\n]+/g);
    var label = options.label.toUpperCase();
    var re2 = /^-----(BEGIN|END) ([^-]+)-----$/;
    var start = -1;
    var end = -1;
    for (var i2 = 0; i2 < lines.length; i2++) {
      var match2 = lines[i2].match(re2);
      if (match2 === null)
        continue;
      if (match2[2] !== label)
        continue;
      if (start === -1) {
        if (match2[1] !== "BEGIN")
          break;
        start = i2;
      } else {
        if (match2[1] !== "END")
          break;
        end = i2;
        break;
      }
    }
    if (start === -1 || end === -1)
      throw new Error("PEM section not found for: " + label);
    var base64 = lines.slice(start + 1, end).join("");
    base64.replace(/[^a-z0-9\+\/=]+/gi, "");
    var input = new Buffer(base64, "base64");
    return DERDecoder.prototype.decode.call(this, input, options);
  };
  return pem$1;
}
var hasRequiredDecoders;
function requireDecoders() {
  if (hasRequiredDecoders)
    return decoders;
  hasRequiredDecoders = 1;
  (function(exports2) {
    var decoders2 = exports2;
    decoders2.der = requireDer$1();
    decoders2.pem = requirePem$1();
  })(decoders);
  return decoders;
}
var encoders = {};
var der_1;
var hasRequiredDer;
function requireDer() {
  if (hasRequiredDer)
    return der_1;
  hasRequiredDer = 1;
  var inherits = requireInherits_browser();
  var Buffer = buffer$1.Buffer;
  var asn12 = requireAsn1$1();
  var base2 = asn12.base;
  var der2 = asn12.constants.der;
  function DEREncoder(entity) {
    this.enc = "der";
    this.name = entity.name;
    this.entity = entity;
    this.tree = new DERNode();
    this.tree._init(entity.body);
  }
  der_1 = DEREncoder;
  DEREncoder.prototype.encode = function encode2(data2, reporter2) {
    return this.tree._encode(data2, reporter2).join();
  };
  function DERNode(parent) {
    base2.Node.call(this, "der", parent);
  }
  inherits(DERNode, base2.Node);
  DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
    var encodedTag = encodeTag(tag, primitive, cls, this.reporter);
    if (content.length < 128) {
      var header = new Buffer(2);
      header[0] = encodedTag;
      header[1] = content.length;
      return this._createEncoderBuffer([header, content]);
    }
    var lenOctets = 1;
    for (var i2 = content.length; i2 >= 256; i2 >>= 8)
      lenOctets++;
    var header = new Buffer(1 + 1 + lenOctets);
    header[0] = encodedTag;
    header[1] = 128 | lenOctets;
    for (var i2 = 1 + lenOctets, j2 = content.length; j2 > 0; i2--, j2 >>= 8)
      header[i2] = j2 & 255;
    return this._createEncoderBuffer([header, content]);
  };
  DERNode.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === "bitstr") {
      return this._createEncoderBuffer([str.unused | 0, str.data]);
    } else if (tag === "bmpstr") {
      var buf = new Buffer(str.length * 2);
      for (var i2 = 0; i2 < str.length; i2++) {
        buf.writeUInt16BE(str.charCodeAt(i2), i2 * 2);
      }
      return this._createEncoderBuffer(buf);
    } else if (tag === "numstr") {
      if (!this._isNumstr(str)) {
        return this.reporter.error("Encoding of string type: numstr supports only digits and space");
      }
      return this._createEncoderBuffer(str);
    } else if (tag === "printstr") {
      if (!this._isPrintstr(str)) {
        return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
      }
      return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) {
      return this._createEncoderBuffer(str);
    } else if (tag === "objDesc") {
      return this._createEncoderBuffer(str);
    } else {
      return this.reporter.error("Encoding of string type: " + tag + " unsupported");
    }
  };
  DERNode.prototype._encodeObjid = function encodeObjid(id2, values, relative) {
    if (typeof id2 === "string") {
      if (!values)
        return this.reporter.error("string objid given, but no values map found");
      if (!values.hasOwnProperty(id2))
        return this.reporter.error("objid not found in values map");
      id2 = values[id2].split(/[\s\.]+/g);
      for (var i2 = 0; i2 < id2.length; i2++)
        id2[i2] |= 0;
    } else if (Array.isArray(id2)) {
      id2 = id2.slice();
      for (var i2 = 0; i2 < id2.length; i2++)
        id2[i2] |= 0;
    }
    if (!Array.isArray(id2)) {
      return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id2));
    }
    if (!relative) {
      if (id2[1] >= 40)
        return this.reporter.error("Second objid identifier OOB");
      id2.splice(0, 2, id2[0] * 40 + id2[1]);
    }
    var size2 = 0;
    for (var i2 = 0; i2 < id2.length; i2++) {
      var ident = id2[i2];
      for (size2++; ident >= 128; ident >>= 7)
        size2++;
    }
    var objid = new Buffer(size2);
    var offset = objid.length - 1;
    for (var i2 = id2.length - 1; i2 >= 0; i2--) {
      var ident = id2[i2];
      objid[offset--] = ident & 127;
      while ((ident >>= 7) > 0)
        objid[offset--] = 128 | ident & 127;
    }
    return this._createEncoderBuffer(objid);
  };
  function two(num) {
    if (num < 10)
      return "0" + num;
    else
      return num;
  }
  DERNode.prototype._encodeTime = function encodeTime(time, tag) {
    var str;
    var date = new Date(time);
    if (tag === "gentime") {
      str = [
        two(date.getFullYear()),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        "Z"
      ].join("");
    } else if (tag === "utctime") {
      str = [
        two(date.getFullYear() % 100),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        "Z"
      ].join("");
    } else {
      this.reporter.error("Encoding " + tag + " time is not supported yet");
    }
    return this._encodeStr(str, "octstr");
  };
  DERNode.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer("");
  };
  DERNode.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === "string") {
      if (!values)
        return this.reporter.error("String int or enum given, but no values map");
      if (!values.hasOwnProperty(num)) {
        return this.reporter.error("Values map doesn't contain: " + JSON.stringify(num));
      }
      num = values[num];
    }
    if (typeof num !== "number" && !Buffer.isBuffer(num)) {
      var numArray = num.toArray();
      if (!num.sign && numArray[0] & 128) {
        numArray.unshift(0);
      }
      num = new Buffer(numArray);
    }
    if (Buffer.isBuffer(num)) {
      var size2 = num.length;
      if (num.length === 0)
        size2++;
      var out = new Buffer(size2);
      num.copy(out);
      if (num.length === 0)
        out[0] = 0;
      return this._createEncoderBuffer(out);
    }
    if (num < 128)
      return this._createEncoderBuffer(num);
    if (num < 256)
      return this._createEncoderBuffer([0, num]);
    var size2 = 1;
    for (var i2 = num; i2 >= 256; i2 >>= 8)
      size2++;
    var out = new Array(size2);
    for (var i2 = out.length - 1; i2 >= 0; i2--) {
      out[i2] = num & 255;
      num >>= 8;
    }
    if (out[0] & 128) {
      out.unshift(0);
    }
    return this._createEncoderBuffer(new Buffer(out));
  };
  DERNode.prototype._encodeBool = function encodeBool(value) {
    return this._createEncoderBuffer(value ? 255 : 0);
  };
  DERNode.prototype._use = function use3(entity, obj) {
    if (typeof entity === "function")
      entity = entity(obj);
    return entity._getEncoder("der").tree;
  };
  DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter2, parent) {
    var state2 = this._baseState;
    var i2;
    if (state2["default"] === null)
      return false;
    var data2 = dataBuffer.join();
    if (state2.defaultBuffer === void 0)
      state2.defaultBuffer = this._encodeValue(state2["default"], reporter2, parent).join();
    if (data2.length !== state2.defaultBuffer.length)
      return false;
    for (i2 = 0; i2 < data2.length; i2++)
      if (data2[i2] !== state2.defaultBuffer[i2])
        return false;
    return true;
  };
  function encodeTag(tag, primitive, cls, reporter2) {
    var res;
    if (tag === "seqof")
      tag = "seq";
    else if (tag === "setof")
      tag = "set";
    if (der2.tagByName.hasOwnProperty(tag))
      res = der2.tagByName[tag];
    else if (typeof tag === "number" && (tag | 0) === tag)
      res = tag;
    else
      return reporter2.error("Unknown tag: " + tag);
    if (res >= 31)
      return reporter2.error("Multi-octet tag encoding unsupported");
    if (!primitive)
      res |= 32;
    res |= der2.tagClassByName[cls || "universal"] << 6;
    return res;
  }
  return der_1;
}
var pem;
var hasRequiredPem;
function requirePem() {
  if (hasRequiredPem)
    return pem;
  hasRequiredPem = 1;
  var inherits = requireInherits_browser();
  var DEREncoder = requireDer();
  function PEMEncoder(entity) {
    DEREncoder.call(this, entity);
    this.enc = "pem";
  }
  inherits(PEMEncoder, DEREncoder);
  pem = PEMEncoder;
  PEMEncoder.prototype.encode = function encode2(data2, options) {
    var buf = DEREncoder.prototype.encode.call(this, data2);
    var p2 = buf.toString("base64");
    var out = ["-----BEGIN " + options.label + "-----"];
    for (var i2 = 0; i2 < p2.length; i2 += 64)
      out.push(p2.slice(i2, i2 + 64));
    out.push("-----END " + options.label + "-----");
    return out.join("\n");
  };
  return pem;
}
var hasRequiredEncoders;
function requireEncoders() {
  if (hasRequiredEncoders)
    return encoders;
  hasRequiredEncoders = 1;
  (function(exports2) {
    var encoders2 = exports2;
    encoders2.der = requireDer();
    encoders2.pem = requirePem();
  })(encoders);
  return encoders;
}
var hasRequiredAsn1$1;
function requireAsn1$1() {
  if (hasRequiredAsn1$1)
    return asn1;
  hasRequiredAsn1$1 = 1;
  (function(exports2) {
    var asn12 = exports2;
    asn12.bignum = requireBn$2();
    asn12.define = requireApi().define;
    asn12.base = requireBase();
    asn12.constants = requireConstants();
    asn12.decoders = requireDecoders();
    asn12.encoders = requireEncoders();
  })(asn1);
  return asn1;
}
var certificate;
var hasRequiredCertificate;
function requireCertificate() {
  if (hasRequiredCertificate)
    return certificate;
  hasRequiredCertificate = 1;
  var asn = requireAsn1$1();
  var Time = asn.define("Time", function() {
    this.choice({
      utcTime: this.utctime(),
      generalTime: this.gentime()
    });
  });
  var AttributeTypeValue = asn.define("AttributeTypeValue", function() {
    this.seq().obj(
      this.key("type").objid(),
      this.key("value").any()
    );
  });
  var AlgorithmIdentifier = asn.define("AlgorithmIdentifier", function() {
    this.seq().obj(
      this.key("algorithm").objid(),
      this.key("parameters").optional(),
      this.key("curve").objid().optional()
    );
  });
  var SubjectPublicKeyInfo = asn.define("SubjectPublicKeyInfo", function() {
    this.seq().obj(
      this.key("algorithm").use(AlgorithmIdentifier),
      this.key("subjectPublicKey").bitstr()
    );
  });
  var RelativeDistinguishedName = asn.define("RelativeDistinguishedName", function() {
    this.setof(AttributeTypeValue);
  });
  var RDNSequence = asn.define("RDNSequence", function() {
    this.seqof(RelativeDistinguishedName);
  });
  var Name = asn.define("Name", function() {
    this.choice({
      rdnSequence: this.use(RDNSequence)
    });
  });
  var Validity = asn.define("Validity", function() {
    this.seq().obj(
      this.key("notBefore").use(Time),
      this.key("notAfter").use(Time)
    );
  });
  var Extension = asn.define("Extension", function() {
    this.seq().obj(
      this.key("extnID").objid(),
      this.key("critical").bool().def(false),
      this.key("extnValue").octstr()
    );
  });
  var TBSCertificate = asn.define("TBSCertificate", function() {
    this.seq().obj(
      this.key("version").explicit(0)["int"]().optional(),
      this.key("serialNumber")["int"](),
      this.key("signature").use(AlgorithmIdentifier),
      this.key("issuer").use(Name),
      this.key("validity").use(Validity),
      this.key("subject").use(Name),
      this.key("subjectPublicKeyInfo").use(SubjectPublicKeyInfo),
      this.key("issuerUniqueID").implicit(1).bitstr().optional(),
      this.key("subjectUniqueID").implicit(2).bitstr().optional(),
      this.key("extensions").explicit(3).seqof(Extension).optional()
    );
  });
  var X509Certificate = asn.define("X509Certificate", function() {
    this.seq().obj(
      this.key("tbsCertificate").use(TBSCertificate),
      this.key("signatureAlgorithm").use(AlgorithmIdentifier),
      this.key("signatureValue").bitstr()
    );
  });
  certificate = X509Certificate;
  return certificate;
}
var hasRequiredAsn1;
function requireAsn1() {
  if (hasRequiredAsn1)
    return asn1$1;
  hasRequiredAsn1 = 1;
  var asn12 = requireAsn1$1();
  asn1$1.certificate = requireCertificate();
  var RSAPrivateKey = asn12.define("RSAPrivateKey", function() {
    this.seq().obj(
      this.key("version")["int"](),
      this.key("modulus")["int"](),
      this.key("publicExponent")["int"](),
      this.key("privateExponent")["int"](),
      this.key("prime1")["int"](),
      this.key("prime2")["int"](),
      this.key("exponent1")["int"](),
      this.key("exponent2")["int"](),
      this.key("coefficient")["int"]()
    );
  });
  asn1$1.RSAPrivateKey = RSAPrivateKey;
  var RSAPublicKey = asn12.define("RSAPublicKey", function() {
    this.seq().obj(
      this.key("modulus")["int"](),
      this.key("publicExponent")["int"]()
    );
  });
  asn1$1.RSAPublicKey = RSAPublicKey;
  var AlgorithmIdentifier = asn12.define("AlgorithmIdentifier", function() {
    this.seq().obj(
      this.key("algorithm").objid(),
      this.key("none").null_().optional(),
      this.key("curve").objid().optional(),
      this.key("params").seq().obj(
        this.key("p")["int"](),
        this.key("q")["int"](),
        this.key("g")["int"]()
      ).optional()
    );
  });
  var PublicKey = asn12.define("SubjectPublicKeyInfo", function() {
    this.seq().obj(
      this.key("algorithm").use(AlgorithmIdentifier),
      this.key("subjectPublicKey").bitstr()
    );
  });
  asn1$1.PublicKey = PublicKey;
  var PrivateKeyInfo = asn12.define("PrivateKeyInfo", function() {
    this.seq().obj(
      this.key("version")["int"](),
      this.key("algorithm").use(AlgorithmIdentifier),
      this.key("subjectPrivateKey").octstr()
    );
  });
  asn1$1.PrivateKey = PrivateKeyInfo;
  var EncryptedPrivateKeyInfo = asn12.define("EncryptedPrivateKeyInfo", function() {
    this.seq().obj(
      this.key("algorithm").seq().obj(
        this.key("id").objid(),
        this.key("decrypt").seq().obj(
          this.key("kde").seq().obj(
            this.key("id").objid(),
            this.key("kdeparams").seq().obj(
              this.key("salt").octstr(),
              this.key("iters")["int"]()
            )
          ),
          this.key("cipher").seq().obj(
            this.key("algo").objid(),
            this.key("iv").octstr()
          )
        )
      ),
      this.key("subjectPrivateKey").octstr()
    );
  });
  asn1$1.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
  var DSAPrivateKey = asn12.define("DSAPrivateKey", function() {
    this.seq().obj(
      this.key("version")["int"](),
      this.key("p")["int"](),
      this.key("q")["int"](),
      this.key("g")["int"](),
      this.key("pub_key")["int"](),
      this.key("priv_key")["int"]()
    );
  });
  asn1$1.DSAPrivateKey = DSAPrivateKey;
  asn1$1.DSAparam = asn12.define("DSAparam", function() {
    this["int"]();
  });
  var ECParameters = asn12.define("ECParameters", function() {
    this.choice({
      namedCurve: this.objid()
    });
  });
  var ECPrivateKey = asn12.define("ECPrivateKey", function() {
    this.seq().obj(
      this.key("version")["int"](),
      this.key("privateKey").octstr(),
      this.key("parameters").optional().explicit(0).use(ECParameters),
      this.key("publicKey").optional().explicit(1).bitstr()
    );
  });
  asn1$1.ECPrivateKey = ECPrivateKey;
  asn1$1.signature = asn12.define("signature", function() {
    this.seq().obj(
      this.key("r")["int"](),
      this.key("s")["int"]()
    );
  });
  return asn1$1;
}
const require$$1$2 = {
  "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
  "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
  "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
  "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
  "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
  "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
  "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
  "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
  "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
  "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
  "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
  "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
};
var fixProc;
var hasRequiredFixProc;
function requireFixProc() {
  if (hasRequiredFixProc)
    return fixProc;
  hasRequiredFixProc = 1;
  var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
  var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
  var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
  var evp = requireEvp_bytestokey();
  var ciphers = requireBrowser$6();
  var Buffer = requireSafeBuffer$1().Buffer;
  fixProc = function(okey, password) {
    var key2 = okey.toString();
    var match2 = key2.match(findProc);
    var decrypted;
    if (!match2) {
      var match22 = key2.match(fullRegex);
      decrypted = Buffer.from(match22[2].replace(/[\r\n]/g, ""), "base64");
    } else {
      var suite = "aes" + match2[1];
      var iv = Buffer.from(match2[2], "hex");
      var cipherText = Buffer.from(match2[3].replace(/[\r\n]/g, ""), "base64");
      var cipherKey = evp(password, iv.slice(0, 8), parseInt(match2[1], 10)).key;
      var out = [];
      var cipher2 = ciphers.createDecipheriv(suite, cipherKey, iv);
      out.push(cipher2.update(cipherText));
      out.push(cipher2["final"]());
      decrypted = Buffer.concat(out);
    }
    var tag = key2.match(startRegex)[1];
    return {
      tag,
      data: decrypted
    };
  };
  return fixProc;
}
var parseAsn1;
var hasRequiredParseAsn1;
function requireParseAsn1() {
  if (hasRequiredParseAsn1)
    return parseAsn1;
  hasRequiredParseAsn1 = 1;
  var asn12 = requireAsn1();
  var aesid = require$$1$2;
  var fixProc2 = requireFixProc();
  var ciphers = requireBrowser$6();
  var compat = requireBrowser$7();
  var Buffer = requireSafeBuffer$1().Buffer;
  function decrypt(data2, password) {
    var salt = data2.algorithm.decrypt.kde.kdeparams.salt;
    var iters = parseInt(data2.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
    var algo = aesid[data2.algorithm.decrypt.cipher.algo.join(".")];
    var iv = data2.algorithm.decrypt.cipher.iv;
    var cipherText = data2.subjectPrivateKey;
    var keylen = parseInt(algo.split("-")[1], 10) / 8;
    var key2 = compat.pbkdf2Sync(password, salt, iters, keylen, "sha1");
    var cipher2 = ciphers.createDecipheriv(algo, key2, iv);
    var out = [];
    out.push(cipher2.update(cipherText));
    out.push(cipher2["final"]());
    return Buffer.concat(out);
  }
  function parseKeys(buffer2) {
    var password;
    if (typeof buffer2 === "object" && !Buffer.isBuffer(buffer2)) {
      password = buffer2.passphrase;
      buffer2 = buffer2.key;
    }
    if (typeof buffer2 === "string") {
      buffer2 = Buffer.from(buffer2);
    }
    var stripped = fixProc2(buffer2, password);
    var type2 = stripped.tag;
    var data2 = stripped.data;
    var subtype, ndata;
    switch (type2) {
      case "CERTIFICATE":
        ndata = asn12.certificate.decode(data2, "der").tbsCertificate.subjectPublicKeyInfo;
      case "PUBLIC KEY":
        if (!ndata) {
          ndata = asn12.PublicKey.decode(data2, "der");
        }
        subtype = ndata.algorithm.algorithm.join(".");
        switch (subtype) {
          case "1.2.840.113549.1.1.1":
            return asn12.RSAPublicKey.decode(ndata.subjectPublicKey.data, "der");
          case "1.2.840.10045.2.1":
            ndata.subjectPrivateKey = ndata.subjectPublicKey;
            return {
              type: "ec",
              data: ndata
            };
          case "1.2.840.10040.4.1":
            ndata.algorithm.params.pub_key = asn12.DSAparam.decode(ndata.subjectPublicKey.data, "der");
            return {
              type: "dsa",
              data: ndata.algorithm.params
            };
          default:
            throw new Error("unknown key id " + subtype);
        }
      case "ENCRYPTED PRIVATE KEY":
        data2 = asn12.EncryptedPrivateKey.decode(data2, "der");
        data2 = decrypt(data2, password);
      case "PRIVATE KEY":
        ndata = asn12.PrivateKey.decode(data2, "der");
        subtype = ndata.algorithm.algorithm.join(".");
        switch (subtype) {
          case "1.2.840.113549.1.1.1":
            return asn12.RSAPrivateKey.decode(ndata.subjectPrivateKey, "der");
          case "1.2.840.10045.2.1":
            return {
              curve: ndata.algorithm.curve,
              privateKey: asn12.ECPrivateKey.decode(ndata.subjectPrivateKey, "der").privateKey
            };
          case "1.2.840.10040.4.1":
            ndata.algorithm.params.priv_key = asn12.DSAparam.decode(ndata.subjectPrivateKey, "der");
            return {
              type: "dsa",
              params: ndata.algorithm.params
            };
          default:
            throw new Error("unknown key id " + subtype);
        }
      case "RSA PUBLIC KEY":
        return asn12.RSAPublicKey.decode(data2, "der");
      case "RSA PRIVATE KEY":
        return asn12.RSAPrivateKey.decode(data2, "der");
      case "DSA PRIVATE KEY":
        return {
          type: "dsa",
          params: asn12.DSAPrivateKey.decode(data2, "der")
        };
      case "EC PRIVATE KEY":
        data2 = asn12.ECPrivateKey.decode(data2, "der");
        return {
          curve: data2.parameters.value,
          privateKey: data2.privateKey
        };
      default:
        throw new Error("unknown key type " + type2);
    }
  }
  parseKeys.signature = asn12.signature;
  parseAsn1 = parseKeys;
  return parseAsn1;
}
const require$$4$1 = {
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
};
var hasRequiredSign;
function requireSign() {
  if (hasRequiredSign)
    return sign$1.exports;
  hasRequiredSign = 1;
  var Buffer = requireSafeBuffer$1().Buffer;
  var createHmac = requireBrowser$8();
  var crt = requireBrowserifyRsa();
  var EC = requireElliptic().ec;
  var BN = requireBn();
  var parseKeys = requireParseAsn1();
  var curves2 = require$$4$1;
  var RSA_PKCS1_PADDING = 1;
  function sign2(hash2, key2, hashType, signType, tag) {
    var priv = parseKeys(key2);
    if (priv.curve) {
      if (signType !== "ecdsa" && signType !== "ecdsa/rsa") {
        throw new Error("wrong private key type");
      }
      return ecSign(hash2, priv);
    } else if (priv.type === "dsa") {
      if (signType !== "dsa") {
        throw new Error("wrong private key type");
      }
      return dsaSign(hash2, priv, hashType);
    }
    if (signType !== "rsa" && signType !== "ecdsa/rsa") {
      throw new Error("wrong private key type");
    }
    if (key2.padding !== void 0 && key2.padding !== RSA_PKCS1_PADDING) {
      throw new Error("illegal or unsupported padding mode");
    }
    hash2 = Buffer.concat([tag, hash2]);
    var len2 = priv.modulus.byteLength();
    var pad = [0, 1];
    while (hash2.length + pad.length + 1 < len2) {
      pad.push(255);
    }
    pad.push(0);
    var i2 = -1;
    while (++i2 < hash2.length) {
      pad.push(hash2[i2]);
    }
    var out = crt(pad, priv);
    return out;
  }
  function ecSign(hash2, priv) {
    var curveId = curves2[priv.curve.join(".")];
    if (!curveId) {
      throw new Error("unknown curve " + priv.curve.join("."));
    }
    var curve2 = new EC(curveId);
    var key2 = curve2.keyFromPrivate(priv.privateKey);
    var out = key2.sign(hash2);
    return Buffer.from(out.toDER());
  }
  function dsaSign(hash2, priv, algo) {
    var x2 = priv.params.priv_key;
    var p2 = priv.params.p;
    var q2 = priv.params.q;
    var g2 = priv.params.g;
    var r2 = new BN(0);
    var k2;
    var H4 = bits2int(hash2, q2).mod(q2);
    var s2 = false;
    var kv = getKey(x2, q2, hash2, algo);
    while (s2 === false) {
      k2 = makeKey(q2, kv, algo);
      r2 = makeR(g2, k2, p2, q2);
      s2 = k2.invm(q2).imul(H4.add(x2.mul(r2))).mod(q2);
      if (s2.cmpn(0) === 0) {
        s2 = false;
        r2 = new BN(0);
      }
    }
    return toDER(r2, s2);
  }
  function toDER(r2, s2) {
    r2 = r2.toArray();
    s2 = s2.toArray();
    if (r2[0] & 128) {
      r2 = [0].concat(r2);
    }
    if (s2[0] & 128) {
      s2 = [0].concat(s2);
    }
    var total = r2.length + s2.length + 4;
    var res = [
      48,
      total,
      2,
      r2.length
    ];
    res = res.concat(r2, [2, s2.length], s2);
    return Buffer.from(res);
  }
  function getKey(x2, q2, hash2, algo) {
    x2 = Buffer.from(x2.toArray());
    if (x2.length < q2.byteLength()) {
      var zeros = Buffer.alloc(q2.byteLength() - x2.length);
      x2 = Buffer.concat([zeros, x2]);
    }
    var hlen = hash2.length;
    var hbits = bits2octets(hash2, q2);
    var v2 = Buffer.alloc(hlen);
    v2.fill(1);
    var k2 = Buffer.alloc(hlen);
    k2 = createHmac(algo, k2).update(v2).update(Buffer.from([0])).update(x2).update(hbits).digest();
    v2 = createHmac(algo, k2).update(v2).digest();
    k2 = createHmac(algo, k2).update(v2).update(Buffer.from([1])).update(x2).update(hbits).digest();
    v2 = createHmac(algo, k2).update(v2).digest();
    return { k: k2, v: v2 };
  }
  function bits2int(obits, q2) {
    var bits = new BN(obits);
    var shift = (obits.length << 3) - q2.bitLength();
    if (shift > 0) {
      bits.ishrn(shift);
    }
    return bits;
  }
  function bits2octets(bits, q2) {
    bits = bits2int(bits, q2);
    bits = bits.mod(q2);
    var out = Buffer.from(bits.toArray());
    if (out.length < q2.byteLength()) {
      var zeros = Buffer.alloc(q2.byteLength() - out.length);
      out = Buffer.concat([zeros, out]);
    }
    return out;
  }
  function makeKey(q2, kv, algo) {
    var t2;
    var k2;
    do {
      t2 = Buffer.alloc(0);
      while (t2.length * 8 < q2.bitLength()) {
        kv.v = createHmac(algo, kv.k).update(kv.v).digest();
        t2 = Buffer.concat([t2, kv.v]);
      }
      k2 = bits2int(t2, q2);
      kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([0])).digest();
      kv.v = createHmac(algo, kv.k).update(kv.v).digest();
    } while (k2.cmp(q2) !== -1);
    return k2;
  }
  function makeR(g2, k2, p2, q2) {
    return g2.toRed(BN.mont(p2)).redPow(k2).fromRed().mod(q2);
  }
  sign$1.exports = sign2;
  sign$1.exports.getKey = getKey;
  sign$1.exports.makeKey = makeKey;
  return sign$1.exports;
}
var verify_1;
var hasRequiredVerify;
function requireVerify() {
  if (hasRequiredVerify)
    return verify_1;
  hasRequiredVerify = 1;
  var Buffer = requireSafeBuffer$1().Buffer;
  var BN = requireBn();
  var EC = requireElliptic().ec;
  var parseKeys = requireParseAsn1();
  var curves2 = require$$4$1;
  function verify(sig, hash2, key2, signType, tag) {
    var pub = parseKeys(key2);
    if (pub.type === "ec") {
      if (signType !== "ecdsa" && signType !== "ecdsa/rsa") {
        throw new Error("wrong public key type");
      }
      return ecVerify(sig, hash2, pub);
    } else if (pub.type === "dsa") {
      if (signType !== "dsa") {
        throw new Error("wrong public key type");
      }
      return dsaVerify(sig, hash2, pub);
    }
    if (signType !== "rsa" && signType !== "ecdsa/rsa") {
      throw new Error("wrong public key type");
    }
    hash2 = Buffer.concat([tag, hash2]);
    var len2 = pub.modulus.byteLength();
    var pad = [1];
    var padNum = 0;
    while (hash2.length + pad.length + 2 < len2) {
      pad.push(255);
      padNum += 1;
    }
    pad.push(0);
    var i2 = -1;
    while (++i2 < hash2.length) {
      pad.push(hash2[i2]);
    }
    pad = Buffer.from(pad);
    var red = BN.mont(pub.modulus);
    sig = new BN(sig).toRed(red);
    sig = sig.redPow(new BN(pub.publicExponent));
    sig = Buffer.from(sig.fromRed().toArray());
    var out = padNum < 8 ? 1 : 0;
    len2 = Math.min(sig.length, pad.length);
    if (sig.length !== pad.length) {
      out = 1;
    }
    i2 = -1;
    while (++i2 < len2) {
      out |= sig[i2] ^ pad[i2];
    }
    return out === 0;
  }
  function ecVerify(sig, hash2, pub) {
    var curveId = curves2[pub.data.algorithm.curve.join(".")];
    if (!curveId) {
      throw new Error("unknown curve " + pub.data.algorithm.curve.join("."));
    }
    var curve2 = new EC(curveId);
    var pubkey = pub.data.subjectPrivateKey.data;
    return curve2.verify(hash2, sig, pubkey);
  }
  function dsaVerify(sig, hash2, pub) {
    var p2 = pub.data.p;
    var q2 = pub.data.q;
    var g2 = pub.data.g;
    var y2 = pub.data.pub_key;
    var unpacked = parseKeys.signature.decode(sig, "der");
    var s2 = unpacked.s;
    var r2 = unpacked.r;
    checkValue(s2, q2);
    checkValue(r2, q2);
    var montp = BN.mont(p2);
    var w2 = s2.invm(q2);
    var v2 = g2.toRed(montp).redPow(new BN(hash2).mul(w2).mod(q2)).fromRed().mul(y2.toRed(montp).redPow(r2.mul(w2).mod(q2)).fromRed()).mod(p2).mod(q2);
    return v2.cmp(r2) === 0;
  }
  function checkValue(b2, q2) {
    if (b2.cmpn(0) <= 0) {
      throw new Error("invalid sig");
    }
    if (b2.cmp(q2) >= 0) {
      throw new Error("invalid sig");
    }
  }
  verify_1 = verify;
  return verify_1;
}
var browser$4;
var hasRequiredBrowser$3;
function requireBrowser$3() {
  if (hasRequiredBrowser$3)
    return browser$4;
  hasRequiredBrowser$3 = 1;
  var Buffer = requireSafeBuffer$1().Buffer;
  var createHash = requireBrowser$9();
  var stream = requireReadableBrowser();
  var inherits = requireInherits_browser();
  var sign2 = requireSign();
  var verify = requireVerify();
  var algorithms = require$$6$1;
  Object.keys(algorithms).forEach(function(key2) {
    algorithms[key2].id = Buffer.from(algorithms[key2].id, "hex");
    algorithms[key2.toLowerCase()] = algorithms[key2];
  });
  function Sign(algorithm) {
    stream.Writable.call(this);
    var data2 = algorithms[algorithm];
    if (!data2) {
      throw new Error("Unknown message digest");
    }
    this._hashType = data2.hash;
    this._hash = createHash(data2.hash);
    this._tag = data2.id;
    this._signType = data2.sign;
  }
  inherits(Sign, stream.Writable);
  Sign.prototype._write = function _write(data2, _2, done) {
    this._hash.update(data2);
    done();
  };
  Sign.prototype.update = function update(data2, enc) {
    this._hash.update(typeof data2 === "string" ? Buffer.from(data2, enc) : data2);
    return this;
  };
  Sign.prototype.sign = function signMethod(key2, enc) {
    this.end();
    var hash2 = this._hash.digest();
    var sig = sign2(hash2, key2, this._hashType, this._signType, this._tag);
    return enc ? sig.toString(enc) : sig;
  };
  function Verify(algorithm) {
    stream.Writable.call(this);
    var data2 = algorithms[algorithm];
    if (!data2) {
      throw new Error("Unknown message digest");
    }
    this._hash = createHash(data2.hash);
    this._tag = data2.id;
    this._signType = data2.sign;
  }
  inherits(Verify, stream.Writable);
  Verify.prototype._write = function _write(data2, _2, done) {
    this._hash.update(data2);
    done();
  };
  Verify.prototype.update = function update(data2, enc) {
    this._hash.update(typeof data2 === "string" ? Buffer.from(data2, enc) : data2);
    return this;
  };
  Verify.prototype.verify = function verifyMethod(key2, sig, enc) {
    var sigBuffer = typeof sig === "string" ? Buffer.from(sig, enc) : sig;
    this.end();
    var hash2 = this._hash.digest();
    return verify(sigBuffer, hash2, key2, this._signType, this._tag);
  };
  function createSign(algorithm) {
    return new Sign(algorithm);
  }
  function createVerify(algorithm) {
    return new Verify(algorithm);
  }
  browser$4 = {
    Sign: createSign,
    Verify: createVerify,
    createSign,
    createVerify
  };
  return browser$4;
}
var browser$3;
var hasRequiredBrowser$2;
function requireBrowser$2() {
  if (hasRequiredBrowser$2)
    return browser$3;
  hasRequiredBrowser$2 = 1;
  var elliptic2 = requireElliptic();
  var BN = requireBn$2();
  browser$3 = function createECDH(curve2) {
    return new ECDH(curve2);
  };
  var aliases = {
    secp256k1: {
      name: "secp256k1",
      byteLength: 32
    },
    secp224r1: {
      name: "p224",
      byteLength: 28
    },
    prime256v1: {
      name: "p256",
      byteLength: 32
    },
    prime192v1: {
      name: "p192",
      byteLength: 24
    },
    ed25519: {
      name: "ed25519",
      byteLength: 32
    },
    secp384r1: {
      name: "p384",
      byteLength: 48
    },
    secp521r1: {
      name: "p521",
      byteLength: 66
    }
  };
  aliases.p224 = aliases.secp224r1;
  aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
  aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
  aliases.p384 = aliases.secp384r1;
  aliases.p521 = aliases.secp521r1;
  function ECDH(curve2) {
    this.curveType = aliases[curve2];
    if (!this.curveType) {
      this.curveType = {
        name: curve2
      };
    }
    this.curve = new elliptic2.ec(this.curveType.name);
    this.keys = void 0;
  }
  ECDH.prototype.generateKeys = function(enc, format) {
    this.keys = this.curve.genKeyPair();
    return this.getPublicKey(enc, format);
  };
  ECDH.prototype.computeSecret = function(other, inenc, enc) {
    inenc = inenc || "utf8";
    if (!buffer$1.Buffer.isBuffer(other)) {
      other = new buffer$1.Buffer(other, inenc);
    }
    var otherPub = this.curve.keyFromPublic(other).getPublic();
    var out = otherPub.mul(this.keys.getPrivate()).getX();
    return formatReturnValue(out, enc, this.curveType.byteLength);
  };
  ECDH.prototype.getPublicKey = function(enc, format) {
    var key2 = this.keys.getPublic(format === "compressed", true);
    if (format === "hybrid") {
      if (key2[key2.length - 1] % 2) {
        key2[0] = 7;
      } else {
        key2[0] = 6;
      }
    }
    return formatReturnValue(key2, enc);
  };
  ECDH.prototype.getPrivateKey = function(enc) {
    return formatReturnValue(this.keys.getPrivate(), enc);
  };
  ECDH.prototype.setPublicKey = function(pub, enc) {
    enc = enc || "utf8";
    if (!buffer$1.Buffer.isBuffer(pub)) {
      pub = new buffer$1.Buffer(pub, enc);
    }
    this.keys._importPublic(pub);
    return this;
  };
  ECDH.prototype.setPrivateKey = function(priv, enc) {
    enc = enc || "utf8";
    if (!buffer$1.Buffer.isBuffer(priv)) {
      priv = new buffer$1.Buffer(priv, enc);
    }
    var _priv = new BN(priv);
    _priv = _priv.toString(16);
    this.keys = this.curve.genKeyPair();
    this.keys._importPrivate(_priv);
    return this;
  };
  function formatReturnValue(bn2, enc, len2) {
    if (!Array.isArray(bn2)) {
      bn2 = bn2.toArray();
    }
    var buf = new buffer$1.Buffer(bn2);
    if (len2 && buf.length < len2) {
      var zeros = new buffer$1.Buffer(len2 - buf.length);
      zeros.fill(0);
      buf = buffer$1.Buffer.concat([zeros, buf]);
    }
    if (!enc) {
      return buf;
    } else {
      return buf.toString(enc);
    }
  }
  return browser$3;
}
var browser$2 = {};
var mgf;
var hasRequiredMgf;
function requireMgf() {
  if (hasRequiredMgf)
    return mgf;
  hasRequiredMgf = 1;
  var createHash = requireBrowser$9();
  var Buffer = requireSafeBuffer$1().Buffer;
  mgf = function(seed, len2) {
    var t2 = Buffer.alloc(0);
    var i2 = 0;
    var c2;
    while (t2.length < len2) {
      c2 = i2ops(i2++);
      t2 = Buffer.concat([t2, createHash("sha1").update(seed).update(c2).digest()]);
    }
    return t2.slice(0, len2);
  };
  function i2ops(c2) {
    var out = Buffer.allocUnsafe(4);
    out.writeUInt32BE(c2, 0);
    return out;
  }
  return mgf;
}
var xor;
var hasRequiredXor;
function requireXor() {
  if (hasRequiredXor)
    return xor;
  hasRequiredXor = 1;
  xor = function xor2(a2, b2) {
    var len2 = a2.length;
    var i2 = -1;
    while (++i2 < len2) {
      a2[i2] ^= b2[i2];
    }
    return a2;
  };
  return xor;
}
var withPublic_1;
var hasRequiredWithPublic;
function requireWithPublic() {
  if (hasRequiredWithPublic)
    return withPublic_1;
  hasRequiredWithPublic = 1;
  var BN = requireBn$2();
  var Buffer = requireSafeBuffer$1().Buffer;
  function withPublic(paddedMsg, key2) {
    return Buffer.from(paddedMsg.toRed(BN.mont(key2.modulus)).redPow(new BN(key2.publicExponent)).fromRed().toArray());
  }
  withPublic_1 = withPublic;
  return withPublic_1;
}
var publicEncrypt;
var hasRequiredPublicEncrypt;
function requirePublicEncrypt() {
  if (hasRequiredPublicEncrypt)
    return publicEncrypt;
  hasRequiredPublicEncrypt = 1;
  var parseKeys = requireParseAsn1();
  var randomBytes = requireBrowser$b();
  var createHash = requireBrowser$9();
  var mgf2 = requireMgf();
  var xor2 = requireXor();
  var BN = requireBn$2();
  var withPublic = requireWithPublic();
  var crt = requireBrowserifyRsa();
  var Buffer = requireSafeBuffer$1().Buffer;
  publicEncrypt = function publicEncrypt2(publicKey, msg, reverse2) {
    var padding;
    if (publicKey.padding) {
      padding = publicKey.padding;
    } else if (reverse2) {
      padding = 1;
    } else {
      padding = 4;
    }
    var key2 = parseKeys(publicKey);
    var paddedMsg;
    if (padding === 4) {
      paddedMsg = oaep(key2, msg);
    } else if (padding === 1) {
      paddedMsg = pkcs1(key2, msg, reverse2);
    } else if (padding === 3) {
      paddedMsg = new BN(msg);
      if (paddedMsg.cmp(key2.modulus) >= 0) {
        throw new Error("data too long for modulus");
      }
    } else {
      throw new Error("unknown padding");
    }
    if (reverse2) {
      return crt(paddedMsg, key2);
    } else {
      return withPublic(paddedMsg, key2);
    }
  };
  function oaep(key2, msg) {
    var k2 = key2.modulus.byteLength();
    var mLen = msg.length;
    var iHash = createHash("sha1").update(Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k2 - hLen2 - 2) {
      throw new Error("message too long");
    }
    var ps = Buffer.alloc(k2 - mLen - hLen2 - 2);
    var dblen = k2 - hLen - 1;
    var seed = randomBytes(hLen);
    var maskedDb = xor2(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf2(seed, dblen));
    var maskedSeed = xor2(seed, mgf2(maskedDb, hLen));
    return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k2));
  }
  function pkcs1(key2, msg, reverse2) {
    var mLen = msg.length;
    var k2 = key2.modulus.byteLength();
    if (mLen > k2 - 11) {
      throw new Error("message too long");
    }
    var ps;
    if (reverse2) {
      ps = Buffer.alloc(k2 - mLen - 3, 255);
    } else {
      ps = nonZero(k2 - mLen - 3);
    }
    return new BN(Buffer.concat([Buffer.from([0, reverse2 ? 1 : 2]), ps, Buffer.alloc(1), msg], k2));
  }
  function nonZero(len2) {
    var out = Buffer.allocUnsafe(len2);
    var i2 = 0;
    var cache = randomBytes(len2 * 2);
    var cur = 0;
    var num;
    while (i2 < len2) {
      if (cur === cache.length) {
        cache = randomBytes(len2 * 2);
        cur = 0;
      }
      num = cache[cur++];
      if (num) {
        out[i2++] = num;
      }
    }
    return out;
  }
  return publicEncrypt;
}
var privateDecrypt;
var hasRequiredPrivateDecrypt;
function requirePrivateDecrypt() {
  if (hasRequiredPrivateDecrypt)
    return privateDecrypt;
  hasRequiredPrivateDecrypt = 1;
  var parseKeys = requireParseAsn1();
  var mgf2 = requireMgf();
  var xor2 = requireXor();
  var BN = requireBn$2();
  var crt = requireBrowserifyRsa();
  var createHash = requireBrowser$9();
  var withPublic = requireWithPublic();
  var Buffer = requireSafeBuffer$1().Buffer;
  privateDecrypt = function privateDecrypt2(privateKey, enc, reverse2) {
    var padding;
    if (privateKey.padding) {
      padding = privateKey.padding;
    } else if (reverse2) {
      padding = 1;
    } else {
      padding = 4;
    }
    var key2 = parseKeys(privateKey);
    var k2 = key2.modulus.byteLength();
    if (enc.length > k2 || new BN(enc).cmp(key2.modulus) >= 0) {
      throw new Error("decryption error");
    }
    var msg;
    if (reverse2) {
      msg = withPublic(new BN(enc), key2);
    } else {
      msg = crt(enc, key2);
    }
    var zBuffer = Buffer.alloc(k2 - msg.length);
    msg = Buffer.concat([zBuffer, msg], k2);
    if (padding === 4) {
      return oaep(key2, msg);
    } else if (padding === 1) {
      return pkcs1(key2, msg, reverse2);
    } else if (padding === 3) {
      return msg;
    } else {
      throw new Error("unknown padding");
    }
  };
  function oaep(key2, msg) {
    var k2 = key2.modulus.byteLength();
    var iHash = createHash("sha1").update(Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    if (msg[0] !== 0) {
      throw new Error("decryption error");
    }
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb = msg.slice(hLen + 1);
    var seed = xor2(maskedSeed, mgf2(maskedDb, hLen));
    var db2 = xor2(maskedDb, mgf2(seed, k2 - hLen - 1));
    if (compare(iHash, db2.slice(0, hLen))) {
      throw new Error("decryption error");
    }
    var i2 = hLen;
    while (db2[i2] === 0) {
      i2++;
    }
    if (db2[i2++] !== 1) {
      throw new Error("decryption error");
    }
    return db2.slice(i2);
  }
  function pkcs1(key2, msg, reverse2) {
    var p1 = msg.slice(0, 2);
    var i2 = 2;
    var status = 0;
    while (msg[i2++] !== 0) {
      if (i2 >= msg.length) {
        status++;
        break;
      }
    }
    var ps = msg.slice(2, i2 - 1);
    if (p1.toString("hex") !== "0002" && !reverse2 || p1.toString("hex") !== "0001" && reverse2) {
      status++;
    }
    if (ps.length < 8) {
      status++;
    }
    if (status) {
      throw new Error("decryption error");
    }
    return msg.slice(i2);
  }
  function compare(a2, b2) {
    a2 = Buffer.from(a2);
    b2 = Buffer.from(b2);
    var dif = 0;
    var len2 = a2.length;
    if (a2.length !== b2.length) {
      dif++;
      len2 = Math.min(a2.length, b2.length);
    }
    var i2 = -1;
    while (++i2 < len2) {
      dif += a2[i2] ^ b2[i2];
    }
    return dif;
  }
  return privateDecrypt;
}
var hasRequiredBrowser$1;
function requireBrowser$1() {
  if (hasRequiredBrowser$1)
    return browser$2;
  hasRequiredBrowser$1 = 1;
  (function(exports2) {
    exports2.publicEncrypt = requirePublicEncrypt();
    exports2.privateDecrypt = requirePrivateDecrypt();
    exports2.privateEncrypt = function privateEncrypt(key2, buf) {
      return exports2.publicEncrypt(key2, buf, true);
    };
    exports2.publicDecrypt = function publicDecrypt(key2, buf) {
      return exports2.privateDecrypt(key2, buf, true);
    };
  })(browser$2);
  return browser$2;
}
var browser$1 = {};
var hasRequiredBrowser;
function requireBrowser() {
  if (hasRequiredBrowser)
    return browser$1;
  hasRequiredBrowser = 1;
  function oldBrowser() {
    throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
  }
  var safeBuffer2 = requireSafeBuffer$1();
  var randombytes = requireBrowser$b();
  var Buffer = safeBuffer2.Buffer;
  var kBufferMaxLength = safeBuffer2.kMaxLength;
  var crypto2 = commonjsGlobal.crypto || commonjsGlobal.msCrypto;
  var kMaxUint32 = Math.pow(2, 32) - 1;
  function assertOffset(offset, length) {
    if (typeof offset !== "number" || offset !== offset) {
      throw new TypeError("offset must be a number");
    }
    if (offset > kMaxUint32 || offset < 0) {
      throw new TypeError("offset must be a uint32");
    }
    if (offset > kBufferMaxLength || offset > length) {
      throw new RangeError("offset out of range");
    }
  }
  function assertSize(size2, offset, length) {
    if (typeof size2 !== "number" || size2 !== size2) {
      throw new TypeError("size must be a number");
    }
    if (size2 > kMaxUint32 || size2 < 0) {
      throw new TypeError("size must be a uint32");
    }
    if (size2 + offset > length || size2 > kBufferMaxLength) {
      throw new RangeError("buffer too small");
    }
  }
  if (crypto2 && crypto2.getRandomValues || !process$1.browser) {
    browser$1.randomFill = randomFill;
    browser$1.randomFillSync = randomFillSync;
  } else {
    browser$1.randomFill = oldBrowser;
    browser$1.randomFillSync = oldBrowser;
  }
  function randomFill(buf, offset, size2, cb2) {
    if (!Buffer.isBuffer(buf) && !(buf instanceof commonjsGlobal.Uint8Array)) {
      throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    }
    if (typeof offset === "function") {
      cb2 = offset;
      offset = 0;
      size2 = buf.length;
    } else if (typeof size2 === "function") {
      cb2 = size2;
      size2 = buf.length - offset;
    } else if (typeof cb2 !== "function") {
      throw new TypeError('"cb" argument must be a function');
    }
    assertOffset(offset, buf.length);
    assertSize(size2, offset, buf.length);
    return actualFill(buf, offset, size2, cb2);
  }
  function actualFill(buf, offset, size2, cb2) {
    if (process$1.browser) {
      var ourBuf = buf.buffer;
      var uint = new Uint8Array(ourBuf, offset, size2);
      crypto2.getRandomValues(uint);
      if (cb2) {
        process$1.nextTick(function() {
          cb2(null, buf);
        });
        return;
      }
      return buf;
    }
    if (cb2) {
      randombytes(size2, function(err, bytes2) {
        if (err) {
          return cb2(err);
        }
        bytes2.copy(buf, offset);
        cb2(null, buf);
      });
      return;
    }
    var bytes = randombytes(size2);
    bytes.copy(buf, offset);
    return buf;
  }
  function randomFillSync(buf, offset, size2) {
    if (typeof offset === "undefined") {
      offset = 0;
    }
    if (!Buffer.isBuffer(buf) && !(buf instanceof commonjsGlobal.Uint8Array)) {
      throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    }
    assertOffset(offset, buf.length);
    if (size2 === void 0)
      size2 = buf.length - offset;
    assertSize(size2, offset, buf.length);
    return actualFill(buf, offset, size2);
  }
  return browser$1;
}
var hasRequiredCryptoBrowserify;
function requireCryptoBrowserify() {
  if (hasRequiredCryptoBrowserify)
    return cryptoBrowserify;
  hasRequiredCryptoBrowserify = 1;
  cryptoBrowserify.randomBytes = cryptoBrowserify.rng = cryptoBrowserify.pseudoRandomBytes = cryptoBrowserify.prng = requireBrowser$b();
  cryptoBrowserify.createHash = cryptoBrowserify.Hash = requireBrowser$9();
  cryptoBrowserify.createHmac = cryptoBrowserify.Hmac = requireBrowser$8();
  var algos2 = requireAlgos();
  var algoKeys = Object.keys(algos2);
  var hashes = ["sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160"].concat(algoKeys);
  cryptoBrowserify.getHashes = function() {
    return hashes;
  };
  var p2 = requireBrowser$7();
  cryptoBrowserify.pbkdf2 = p2.pbkdf2;
  cryptoBrowserify.pbkdf2Sync = p2.pbkdf2Sync;
  var aes2 = requireBrowser$5();
  cryptoBrowserify.Cipher = aes2.Cipher;
  cryptoBrowserify.createCipher = aes2.createCipher;
  cryptoBrowserify.Cipheriv = aes2.Cipheriv;
  cryptoBrowserify.createCipheriv = aes2.createCipheriv;
  cryptoBrowserify.Decipher = aes2.Decipher;
  cryptoBrowserify.createDecipher = aes2.createDecipher;
  cryptoBrowserify.Decipheriv = aes2.Decipheriv;
  cryptoBrowserify.createDecipheriv = aes2.createDecipheriv;
  cryptoBrowserify.getCiphers = aes2.getCiphers;
  cryptoBrowserify.listCiphers = aes2.listCiphers;
  var dh2 = requireBrowser$4();
  cryptoBrowserify.DiffieHellmanGroup = dh2.DiffieHellmanGroup;
  cryptoBrowserify.createDiffieHellmanGroup = dh2.createDiffieHellmanGroup;
  cryptoBrowserify.getDiffieHellman = dh2.getDiffieHellman;
  cryptoBrowserify.createDiffieHellman = dh2.createDiffieHellman;
  cryptoBrowserify.DiffieHellman = dh2.DiffieHellman;
  var sign2 = requireBrowser$3();
  cryptoBrowserify.createSign = sign2.createSign;
  cryptoBrowserify.Sign = sign2.Sign;
  cryptoBrowserify.createVerify = sign2.createVerify;
  cryptoBrowserify.Verify = sign2.Verify;
  cryptoBrowserify.createECDH = requireBrowser$2();
  var publicEncrypt2 = requireBrowser$1();
  cryptoBrowserify.publicEncrypt = publicEncrypt2.publicEncrypt;
  cryptoBrowserify.privateEncrypt = publicEncrypt2.privateEncrypt;
  cryptoBrowserify.publicDecrypt = publicEncrypt2.publicDecrypt;
  cryptoBrowserify.privateDecrypt = publicEncrypt2.privateDecrypt;
  var rf2 = requireBrowser();
  cryptoBrowserify.randomFill = rf2.randomFill;
  cryptoBrowserify.randomFillSync = rf2.randomFillSync;
  cryptoBrowserify.createCredentials = function() {
    throw new Error([
      "sorry, createCredentials is not implemented yet",
      "we accept pull requests",
      "https://github.com/crypto-browserify/crypto-browserify"
    ].join("\n"));
  };
  cryptoBrowserify.constants = {
    "DH_CHECK_P_NOT_SAFE_PRIME": 2,
    "DH_CHECK_P_NOT_PRIME": 1,
    "DH_UNABLE_TO_CHECK_GENERATOR": 4,
    "DH_NOT_SUITABLE_GENERATOR": 8,
    "NPN_ENABLED": 1,
    "ALPN_ENABLED": 1,
    "RSA_PKCS1_PADDING": 1,
    "RSA_SSLV23_PADDING": 2,
    "RSA_NO_PADDING": 3,
    "RSA_PKCS1_OAEP_PADDING": 4,
    "RSA_X931_PADDING": 5,
    "RSA_PKCS1_PSS_PADDING": 6,
    "POINT_CONVERSION_COMPRESSED": 2,
    "POINT_CONVERSION_UNCOMPRESSED": 4,
    "POINT_CONVERSION_HYBRID": 6
  };
  return cryptoBrowserify;
}
(function(module) {
  (function(nacl2) {
    var gf2 = function(init2) {
      var i2, r2 = new Float64Array(16);
      if (init2)
        for (i2 = 0; i2 < init2.length; i2++)
          r2[i2] = init2[i2];
      return r2;
    };
    var randombytes = function() {
      throw new Error("no PRNG");
    };
    var _0 = new Uint8Array(16);
    var _9 = new Uint8Array(32);
    _9[0] = 9;
    var gf0 = gf2(), gf1 = gf2([1]), _121665 = gf2([56129, 1]), D2 = gf2([30883, 4953, 19914, 30187, 55467, 16705, 2637, 112, 59544, 30585, 16505, 36039, 65139, 11119, 27886, 20995]), D22 = gf2([61785, 9906, 39828, 60374, 45398, 33411, 5274, 224, 53552, 61171, 33010, 6542, 64743, 22239, 55772, 9222]), X2 = gf2([54554, 36645, 11616, 51542, 42930, 38181, 51040, 26924, 56412, 64982, 57905, 49316, 21502, 52590, 14035, 8553]), Y2 = gf2([26200, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214]), I2 = gf2([41136, 18958, 6951, 50414, 58488, 44335, 6150, 12099, 55207, 15867, 153, 11085, 57099, 20417, 9344, 11139]);
    function ts64(x2, i2, h2, l2) {
      x2[i2] = h2 >> 24 & 255;
      x2[i2 + 1] = h2 >> 16 & 255;
      x2[i2 + 2] = h2 >> 8 & 255;
      x2[i2 + 3] = h2 & 255;
      x2[i2 + 4] = l2 >> 24 & 255;
      x2[i2 + 5] = l2 >> 16 & 255;
      x2[i2 + 6] = l2 >> 8 & 255;
      x2[i2 + 7] = l2 & 255;
    }
    function vn(x2, xi2, y2, yi2, n2) {
      var i2, d2 = 0;
      for (i2 = 0; i2 < n2; i2++)
        d2 |= x2[xi2 + i2] ^ y2[yi2 + i2];
      return (1 & d2 - 1 >>> 8) - 1;
    }
    function crypto_verify_16(x2, xi2, y2, yi2) {
      return vn(x2, xi2, y2, yi2, 16);
    }
    function crypto_verify_32(x2, xi2, y2, yi2) {
      return vn(x2, xi2, y2, yi2, 32);
    }
    function core_salsa20(o2, p2, k2, c2) {
      var j0 = c2[0] & 255 | (c2[1] & 255) << 8 | (c2[2] & 255) << 16 | (c2[3] & 255) << 24, j1 = k2[0] & 255 | (k2[1] & 255) << 8 | (k2[2] & 255) << 16 | (k2[3] & 255) << 24, j2 = k2[4] & 255 | (k2[5] & 255) << 8 | (k2[6] & 255) << 16 | (k2[7] & 255) << 24, j3 = k2[8] & 255 | (k2[9] & 255) << 8 | (k2[10] & 255) << 16 | (k2[11] & 255) << 24, j4 = k2[12] & 255 | (k2[13] & 255) << 8 | (k2[14] & 255) << 16 | (k2[15] & 255) << 24, j5 = c2[4] & 255 | (c2[5] & 255) << 8 | (c2[6] & 255) << 16 | (c2[7] & 255) << 24, j6 = p2[0] & 255 | (p2[1] & 255) << 8 | (p2[2] & 255) << 16 | (p2[3] & 255) << 24, j7 = p2[4] & 255 | (p2[5] & 255) << 8 | (p2[6] & 255) << 16 | (p2[7] & 255) << 24, j8 = p2[8] & 255 | (p2[9] & 255) << 8 | (p2[10] & 255) << 16 | (p2[11] & 255) << 24, j9 = p2[12] & 255 | (p2[13] & 255) << 8 | (p2[14] & 255) << 16 | (p2[15] & 255) << 24, j10 = c2[8] & 255 | (c2[9] & 255) << 8 | (c2[10] & 255) << 16 | (c2[11] & 255) << 24, j11 = k2[16] & 255 | (k2[17] & 255) << 8 | (k2[18] & 255) << 16 | (k2[19] & 255) << 24, j12 = k2[20] & 255 | (k2[21] & 255) << 8 | (k2[22] & 255) << 16 | (k2[23] & 255) << 24, j13 = k2[24] & 255 | (k2[25] & 255) << 8 | (k2[26] & 255) << 16 | (k2[27] & 255) << 24, j14 = k2[28] & 255 | (k2[29] & 255) << 8 | (k2[30] & 255) << 16 | (k2[31] & 255) << 24, j15 = c2[12] & 255 | (c2[13] & 255) << 8 | (c2[14] & 255) << 16 | (c2[15] & 255) << 24;
      var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u2;
      for (var i2 = 0; i2 < 20; i2 += 2) {
        u2 = x0 + x12 | 0;
        x4 ^= u2 << 7 | u2 >>> 32 - 7;
        u2 = x4 + x0 | 0;
        x8 ^= u2 << 9 | u2 >>> 32 - 9;
        u2 = x8 + x4 | 0;
        x12 ^= u2 << 13 | u2 >>> 32 - 13;
        u2 = x12 + x8 | 0;
        x0 ^= u2 << 18 | u2 >>> 32 - 18;
        u2 = x5 + x1 | 0;
        x9 ^= u2 << 7 | u2 >>> 32 - 7;
        u2 = x9 + x5 | 0;
        x13 ^= u2 << 9 | u2 >>> 32 - 9;
        u2 = x13 + x9 | 0;
        x1 ^= u2 << 13 | u2 >>> 32 - 13;
        u2 = x1 + x13 | 0;
        x5 ^= u2 << 18 | u2 >>> 32 - 18;
        u2 = x10 + x6 | 0;
        x14 ^= u2 << 7 | u2 >>> 32 - 7;
        u2 = x14 + x10 | 0;
        x2 ^= u2 << 9 | u2 >>> 32 - 9;
        u2 = x2 + x14 | 0;
        x6 ^= u2 << 13 | u2 >>> 32 - 13;
        u2 = x6 + x2 | 0;
        x10 ^= u2 << 18 | u2 >>> 32 - 18;
        u2 = x15 + x11 | 0;
        x3 ^= u2 << 7 | u2 >>> 32 - 7;
        u2 = x3 + x15 | 0;
        x7 ^= u2 << 9 | u2 >>> 32 - 9;
        u2 = x7 + x3 | 0;
        x11 ^= u2 << 13 | u2 >>> 32 - 13;
        u2 = x11 + x7 | 0;
        x15 ^= u2 << 18 | u2 >>> 32 - 18;
        u2 = x0 + x3 | 0;
        x1 ^= u2 << 7 | u2 >>> 32 - 7;
        u2 = x1 + x0 | 0;
        x2 ^= u2 << 9 | u2 >>> 32 - 9;
        u2 = x2 + x1 | 0;
        x3 ^= u2 << 13 | u2 >>> 32 - 13;
        u2 = x3 + x2 | 0;
        x0 ^= u2 << 18 | u2 >>> 32 - 18;
        u2 = x5 + x4 | 0;
        x6 ^= u2 << 7 | u2 >>> 32 - 7;
        u2 = x6 + x5 | 0;
        x7 ^= u2 << 9 | u2 >>> 32 - 9;
        u2 = x7 + x6 | 0;
        x4 ^= u2 << 13 | u2 >>> 32 - 13;
        u2 = x4 + x7 | 0;
        x5 ^= u2 << 18 | u2 >>> 32 - 18;
        u2 = x10 + x9 | 0;
        x11 ^= u2 << 7 | u2 >>> 32 - 7;
        u2 = x11 + x10 | 0;
        x8 ^= u2 << 9 | u2 >>> 32 - 9;
        u2 = x8 + x11 | 0;
        x9 ^= u2 << 13 | u2 >>> 32 - 13;
        u2 = x9 + x8 | 0;
        x10 ^= u2 << 18 | u2 >>> 32 - 18;
        u2 = x15 + x14 | 0;
        x12 ^= u2 << 7 | u2 >>> 32 - 7;
        u2 = x12 + x15 | 0;
        x13 ^= u2 << 9 | u2 >>> 32 - 9;
        u2 = x13 + x12 | 0;
        x14 ^= u2 << 13 | u2 >>> 32 - 13;
        u2 = x14 + x13 | 0;
        x15 ^= u2 << 18 | u2 >>> 32 - 18;
      }
      x0 = x0 + j0 | 0;
      x1 = x1 + j1 | 0;
      x2 = x2 + j2 | 0;
      x3 = x3 + j3 | 0;
      x4 = x4 + j4 | 0;
      x5 = x5 + j5 | 0;
      x6 = x6 + j6 | 0;
      x7 = x7 + j7 | 0;
      x8 = x8 + j8 | 0;
      x9 = x9 + j9 | 0;
      x10 = x10 + j10 | 0;
      x11 = x11 + j11 | 0;
      x12 = x12 + j12 | 0;
      x13 = x13 + j13 | 0;
      x14 = x14 + j14 | 0;
      x15 = x15 + j15 | 0;
      o2[0] = x0 >>> 0 & 255;
      o2[1] = x0 >>> 8 & 255;
      o2[2] = x0 >>> 16 & 255;
      o2[3] = x0 >>> 24 & 255;
      o2[4] = x1 >>> 0 & 255;
      o2[5] = x1 >>> 8 & 255;
      o2[6] = x1 >>> 16 & 255;
      o2[7] = x1 >>> 24 & 255;
      o2[8] = x2 >>> 0 & 255;
      o2[9] = x2 >>> 8 & 255;
      o2[10] = x2 >>> 16 & 255;
      o2[11] = x2 >>> 24 & 255;
      o2[12] = x3 >>> 0 & 255;
      o2[13] = x3 >>> 8 & 255;
      o2[14] = x3 >>> 16 & 255;
      o2[15] = x3 >>> 24 & 255;
      o2[16] = x4 >>> 0 & 255;
      o2[17] = x4 >>> 8 & 255;
      o2[18] = x4 >>> 16 & 255;
      o2[19] = x4 >>> 24 & 255;
      o2[20] = x5 >>> 0 & 255;
      o2[21] = x5 >>> 8 & 255;
      o2[22] = x5 >>> 16 & 255;
      o2[23] = x5 >>> 24 & 255;
      o2[24] = x6 >>> 0 & 255;
      o2[25] = x6 >>> 8 & 255;
      o2[26] = x6 >>> 16 & 255;
      o2[27] = x6 >>> 24 & 255;
      o2[28] = x7 >>> 0 & 255;
      o2[29] = x7 >>> 8 & 255;
      o2[30] = x7 >>> 16 & 255;
      o2[31] = x7 >>> 24 & 255;
      o2[32] = x8 >>> 0 & 255;
      o2[33] = x8 >>> 8 & 255;
      o2[34] = x8 >>> 16 & 255;
      o2[35] = x8 >>> 24 & 255;
      o2[36] = x9 >>> 0 & 255;
      o2[37] = x9 >>> 8 & 255;
      o2[38] = x9 >>> 16 & 255;
      o2[39] = x9 >>> 24 & 255;
      o2[40] = x10 >>> 0 & 255;
      o2[41] = x10 >>> 8 & 255;
      o2[42] = x10 >>> 16 & 255;
      o2[43] = x10 >>> 24 & 255;
      o2[44] = x11 >>> 0 & 255;
      o2[45] = x11 >>> 8 & 255;
      o2[46] = x11 >>> 16 & 255;
      o2[47] = x11 >>> 24 & 255;
      o2[48] = x12 >>> 0 & 255;
      o2[49] = x12 >>> 8 & 255;
      o2[50] = x12 >>> 16 & 255;
      o2[51] = x12 >>> 24 & 255;
      o2[52] = x13 >>> 0 & 255;
      o2[53] = x13 >>> 8 & 255;
      o2[54] = x13 >>> 16 & 255;
      o2[55] = x13 >>> 24 & 255;
      o2[56] = x14 >>> 0 & 255;
      o2[57] = x14 >>> 8 & 255;
      o2[58] = x14 >>> 16 & 255;
      o2[59] = x14 >>> 24 & 255;
      o2[60] = x15 >>> 0 & 255;
      o2[61] = x15 >>> 8 & 255;
      o2[62] = x15 >>> 16 & 255;
      o2[63] = x15 >>> 24 & 255;
    }
    function core_hsalsa20(o2, p2, k2, c2) {
      var j0 = c2[0] & 255 | (c2[1] & 255) << 8 | (c2[2] & 255) << 16 | (c2[3] & 255) << 24, j1 = k2[0] & 255 | (k2[1] & 255) << 8 | (k2[2] & 255) << 16 | (k2[3] & 255) << 24, j2 = k2[4] & 255 | (k2[5] & 255) << 8 | (k2[6] & 255) << 16 | (k2[7] & 255) << 24, j3 = k2[8] & 255 | (k2[9] & 255) << 8 | (k2[10] & 255) << 16 | (k2[11] & 255) << 24, j4 = k2[12] & 255 | (k2[13] & 255) << 8 | (k2[14] & 255) << 16 | (k2[15] & 255) << 24, j5 = c2[4] & 255 | (c2[5] & 255) << 8 | (c2[6] & 255) << 16 | (c2[7] & 255) << 24, j6 = p2[0] & 255 | (p2[1] & 255) << 8 | (p2[2] & 255) << 16 | (p2[3] & 255) << 24, j7 = p2[4] & 255 | (p2[5] & 255) << 8 | (p2[6] & 255) << 16 | (p2[7] & 255) << 24, j8 = p2[8] & 255 | (p2[9] & 255) << 8 | (p2[10] & 255) << 16 | (p2[11] & 255) << 24, j9 = p2[12] & 255 | (p2[13] & 255) << 8 | (p2[14] & 255) << 16 | (p2[15] & 255) << 24, j10 = c2[8] & 255 | (c2[9] & 255) << 8 | (c2[10] & 255) << 16 | (c2[11] & 255) << 24, j11 = k2[16] & 255 | (k2[17] & 255) << 8 | (k2[18] & 255) << 16 | (k2[19] & 255) << 24, j12 = k2[20] & 255 | (k2[21] & 255) << 8 | (k2[22] & 255) << 16 | (k2[23] & 255) << 24, j13 = k2[24] & 255 | (k2[25] & 255) << 8 | (k2[26] & 255) << 16 | (k2[27] & 255) << 24, j14 = k2[28] & 255 | (k2[29] & 255) << 8 | (k2[30] & 255) << 16 | (k2[31] & 255) << 24, j15 = c2[12] & 255 | (c2[13] & 255) << 8 | (c2[14] & 255) << 16 | (c2[15] & 255) << 24;
      var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u2;
      for (var i2 = 0; i2 < 20; i2 += 2) {
        u2 = x0 + x12 | 0;
        x4 ^= u2 << 7 | u2 >>> 32 - 7;
        u2 = x4 + x0 | 0;
        x8 ^= u2 << 9 | u2 >>> 32 - 9;
        u2 = x8 + x4 | 0;
        x12 ^= u2 << 13 | u2 >>> 32 - 13;
        u2 = x12 + x8 | 0;
        x0 ^= u2 << 18 | u2 >>> 32 - 18;
        u2 = x5 + x1 | 0;
        x9 ^= u2 << 7 | u2 >>> 32 - 7;
        u2 = x9 + x5 | 0;
        x13 ^= u2 << 9 | u2 >>> 32 - 9;
        u2 = x13 + x9 | 0;
        x1 ^= u2 << 13 | u2 >>> 32 - 13;
        u2 = x1 + x13 | 0;
        x5 ^= u2 << 18 | u2 >>> 32 - 18;
        u2 = x10 + x6 | 0;
        x14 ^= u2 << 7 | u2 >>> 32 - 7;
        u2 = x14 + x10 | 0;
        x2 ^= u2 << 9 | u2 >>> 32 - 9;
        u2 = x2 + x14 | 0;
        x6 ^= u2 << 13 | u2 >>> 32 - 13;
        u2 = x6 + x2 | 0;
        x10 ^= u2 << 18 | u2 >>> 32 - 18;
        u2 = x15 + x11 | 0;
        x3 ^= u2 << 7 | u2 >>> 32 - 7;
        u2 = x3 + x15 | 0;
        x7 ^= u2 << 9 | u2 >>> 32 - 9;
        u2 = x7 + x3 | 0;
        x11 ^= u2 << 13 | u2 >>> 32 - 13;
        u2 = x11 + x7 | 0;
        x15 ^= u2 << 18 | u2 >>> 32 - 18;
        u2 = x0 + x3 | 0;
        x1 ^= u2 << 7 | u2 >>> 32 - 7;
        u2 = x1 + x0 | 0;
        x2 ^= u2 << 9 | u2 >>> 32 - 9;
        u2 = x2 + x1 | 0;
        x3 ^= u2 << 13 | u2 >>> 32 - 13;
        u2 = x3 + x2 | 0;
        x0 ^= u2 << 18 | u2 >>> 32 - 18;
        u2 = x5 + x4 | 0;
        x6 ^= u2 << 7 | u2 >>> 32 - 7;
        u2 = x6 + x5 | 0;
        x7 ^= u2 << 9 | u2 >>> 32 - 9;
        u2 = x7 + x6 | 0;
        x4 ^= u2 << 13 | u2 >>> 32 - 13;
        u2 = x4 + x7 | 0;
        x5 ^= u2 << 18 | u2 >>> 32 - 18;
        u2 = x10 + x9 | 0;
        x11 ^= u2 << 7 | u2 >>> 32 - 7;
        u2 = x11 + x10 | 0;
        x8 ^= u2 << 9 | u2 >>> 32 - 9;
        u2 = x8 + x11 | 0;
        x9 ^= u2 << 13 | u2 >>> 32 - 13;
        u2 = x9 + x8 | 0;
        x10 ^= u2 << 18 | u2 >>> 32 - 18;
        u2 = x15 + x14 | 0;
        x12 ^= u2 << 7 | u2 >>> 32 - 7;
        u2 = x12 + x15 | 0;
        x13 ^= u2 << 9 | u2 >>> 32 - 9;
        u2 = x13 + x12 | 0;
        x14 ^= u2 << 13 | u2 >>> 32 - 13;
        u2 = x14 + x13 | 0;
        x15 ^= u2 << 18 | u2 >>> 32 - 18;
      }
      o2[0] = x0 >>> 0 & 255;
      o2[1] = x0 >>> 8 & 255;
      o2[2] = x0 >>> 16 & 255;
      o2[3] = x0 >>> 24 & 255;
      o2[4] = x5 >>> 0 & 255;
      o2[5] = x5 >>> 8 & 255;
      o2[6] = x5 >>> 16 & 255;
      o2[7] = x5 >>> 24 & 255;
      o2[8] = x10 >>> 0 & 255;
      o2[9] = x10 >>> 8 & 255;
      o2[10] = x10 >>> 16 & 255;
      o2[11] = x10 >>> 24 & 255;
      o2[12] = x15 >>> 0 & 255;
      o2[13] = x15 >>> 8 & 255;
      o2[14] = x15 >>> 16 & 255;
      o2[15] = x15 >>> 24 & 255;
      o2[16] = x6 >>> 0 & 255;
      o2[17] = x6 >>> 8 & 255;
      o2[18] = x6 >>> 16 & 255;
      o2[19] = x6 >>> 24 & 255;
      o2[20] = x7 >>> 0 & 255;
      o2[21] = x7 >>> 8 & 255;
      o2[22] = x7 >>> 16 & 255;
      o2[23] = x7 >>> 24 & 255;
      o2[24] = x8 >>> 0 & 255;
      o2[25] = x8 >>> 8 & 255;
      o2[26] = x8 >>> 16 & 255;
      o2[27] = x8 >>> 24 & 255;
      o2[28] = x9 >>> 0 & 255;
      o2[29] = x9 >>> 8 & 255;
      o2[30] = x9 >>> 16 & 255;
      o2[31] = x9 >>> 24 & 255;
    }
    function crypto_core_salsa20(out, inp, k2, c2) {
      core_salsa20(out, inp, k2, c2);
    }
    function crypto_core_hsalsa20(out, inp, k2, c2) {
      core_hsalsa20(out, inp, k2, c2);
    }
    var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
    function crypto_stream_salsa20_xor(c2, cpos, m2, mpos, b2, n2, k2) {
      var z2 = new Uint8Array(16), x2 = new Uint8Array(64);
      var u2, i2;
      for (i2 = 0; i2 < 16; i2++)
        z2[i2] = 0;
      for (i2 = 0; i2 < 8; i2++)
        z2[i2] = n2[i2];
      while (b2 >= 64) {
        crypto_core_salsa20(x2, z2, k2, sigma);
        for (i2 = 0; i2 < 64; i2++)
          c2[cpos + i2] = m2[mpos + i2] ^ x2[i2];
        u2 = 1;
        for (i2 = 8; i2 < 16; i2++) {
          u2 = u2 + (z2[i2] & 255) | 0;
          z2[i2] = u2 & 255;
          u2 >>>= 8;
        }
        b2 -= 64;
        cpos += 64;
        mpos += 64;
      }
      if (b2 > 0) {
        crypto_core_salsa20(x2, z2, k2, sigma);
        for (i2 = 0; i2 < b2; i2++)
          c2[cpos + i2] = m2[mpos + i2] ^ x2[i2];
      }
      return 0;
    }
    function crypto_stream_salsa20(c2, cpos, b2, n2, k2) {
      var z2 = new Uint8Array(16), x2 = new Uint8Array(64);
      var u2, i2;
      for (i2 = 0; i2 < 16; i2++)
        z2[i2] = 0;
      for (i2 = 0; i2 < 8; i2++)
        z2[i2] = n2[i2];
      while (b2 >= 64) {
        crypto_core_salsa20(x2, z2, k2, sigma);
        for (i2 = 0; i2 < 64; i2++)
          c2[cpos + i2] = x2[i2];
        u2 = 1;
        for (i2 = 8; i2 < 16; i2++) {
          u2 = u2 + (z2[i2] & 255) | 0;
          z2[i2] = u2 & 255;
          u2 >>>= 8;
        }
        b2 -= 64;
        cpos += 64;
      }
      if (b2 > 0) {
        crypto_core_salsa20(x2, z2, k2, sigma);
        for (i2 = 0; i2 < b2; i2++)
          c2[cpos + i2] = x2[i2];
      }
      return 0;
    }
    function crypto_stream(c2, cpos, d2, n2, k2) {
      var s2 = new Uint8Array(32);
      crypto_core_hsalsa20(s2, n2, k2, sigma);
      var sn = new Uint8Array(8);
      for (var i2 = 0; i2 < 8; i2++)
        sn[i2] = n2[i2 + 16];
      return crypto_stream_salsa20(c2, cpos, d2, sn, s2);
    }
    function crypto_stream_xor(c2, cpos, m2, mpos, d2, n2, k2) {
      var s2 = new Uint8Array(32);
      crypto_core_hsalsa20(s2, n2, k2, sigma);
      var sn = new Uint8Array(8);
      for (var i2 = 0; i2 < 8; i2++)
        sn[i2] = n2[i2 + 16];
      return crypto_stream_salsa20_xor(c2, cpos, m2, mpos, d2, sn, s2);
    }
    var poly1305 = function(key2) {
      this.buffer = new Uint8Array(16);
      this.r = new Uint16Array(10);
      this.h = new Uint16Array(10);
      this.pad = new Uint16Array(8);
      this.leftover = 0;
      this.fin = 0;
      var t0, t1, t2, t3, t4, t5, t6, t7;
      t0 = key2[0] & 255 | (key2[1] & 255) << 8;
      this.r[0] = t0 & 8191;
      t1 = key2[2] & 255 | (key2[3] & 255) << 8;
      this.r[1] = (t0 >>> 13 | t1 << 3) & 8191;
      t2 = key2[4] & 255 | (key2[5] & 255) << 8;
      this.r[2] = (t1 >>> 10 | t2 << 6) & 7939;
      t3 = key2[6] & 255 | (key2[7] & 255) << 8;
      this.r[3] = (t2 >>> 7 | t3 << 9) & 8191;
      t4 = key2[8] & 255 | (key2[9] & 255) << 8;
      this.r[4] = (t3 >>> 4 | t4 << 12) & 255;
      this.r[5] = t4 >>> 1 & 8190;
      t5 = key2[10] & 255 | (key2[11] & 255) << 8;
      this.r[6] = (t4 >>> 14 | t5 << 2) & 8191;
      t6 = key2[12] & 255 | (key2[13] & 255) << 8;
      this.r[7] = (t5 >>> 11 | t6 << 5) & 8065;
      t7 = key2[14] & 255 | (key2[15] & 255) << 8;
      this.r[8] = (t6 >>> 8 | t7 << 8) & 8191;
      this.r[9] = t7 >>> 5 & 127;
      this.pad[0] = key2[16] & 255 | (key2[17] & 255) << 8;
      this.pad[1] = key2[18] & 255 | (key2[19] & 255) << 8;
      this.pad[2] = key2[20] & 255 | (key2[21] & 255) << 8;
      this.pad[3] = key2[22] & 255 | (key2[23] & 255) << 8;
      this.pad[4] = key2[24] & 255 | (key2[25] & 255) << 8;
      this.pad[5] = key2[26] & 255 | (key2[27] & 255) << 8;
      this.pad[6] = key2[28] & 255 | (key2[29] & 255) << 8;
      this.pad[7] = key2[30] & 255 | (key2[31] & 255) << 8;
    };
    poly1305.prototype.blocks = function(m2, mpos, bytes) {
      var hibit = this.fin ? 0 : 1 << 11;
      var t0, t1, t2, t3, t4, t5, t6, t7, c2;
      var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
      var h0 = this.h[0], h1 = this.h[1], h2 = this.h[2], h3 = this.h[3], h4 = this.h[4], h5 = this.h[5], h6 = this.h[6], h7 = this.h[7], h8 = this.h[8], h9 = this.h[9];
      var r0 = this.r[0], r1 = this.r[1], r2 = this.r[2], r3 = this.r[3], r4 = this.r[4], r5 = this.r[5], r6 = this.r[6], r7 = this.r[7], r8 = this.r[8], r9 = this.r[9];
      while (bytes >= 16) {
        t0 = m2[mpos + 0] & 255 | (m2[mpos + 1] & 255) << 8;
        h0 += t0 & 8191;
        t1 = m2[mpos + 2] & 255 | (m2[mpos + 3] & 255) << 8;
        h1 += (t0 >>> 13 | t1 << 3) & 8191;
        t2 = m2[mpos + 4] & 255 | (m2[mpos + 5] & 255) << 8;
        h2 += (t1 >>> 10 | t2 << 6) & 8191;
        t3 = m2[mpos + 6] & 255 | (m2[mpos + 7] & 255) << 8;
        h3 += (t2 >>> 7 | t3 << 9) & 8191;
        t4 = m2[mpos + 8] & 255 | (m2[mpos + 9] & 255) << 8;
        h4 += (t3 >>> 4 | t4 << 12) & 8191;
        h5 += t4 >>> 1 & 8191;
        t5 = m2[mpos + 10] & 255 | (m2[mpos + 11] & 255) << 8;
        h6 += (t4 >>> 14 | t5 << 2) & 8191;
        t6 = m2[mpos + 12] & 255 | (m2[mpos + 13] & 255) << 8;
        h7 += (t5 >>> 11 | t6 << 5) & 8191;
        t7 = m2[mpos + 14] & 255 | (m2[mpos + 15] & 255) << 8;
        h8 += (t6 >>> 8 | t7 << 8) & 8191;
        h9 += t7 >>> 5 | hibit;
        c2 = 0;
        d0 = c2;
        d0 += h0 * r0;
        d0 += h1 * (5 * r9);
        d0 += h2 * (5 * r8);
        d0 += h3 * (5 * r7);
        d0 += h4 * (5 * r6);
        c2 = d0 >>> 13;
        d0 &= 8191;
        d0 += h5 * (5 * r5);
        d0 += h6 * (5 * r4);
        d0 += h7 * (5 * r3);
        d0 += h8 * (5 * r2);
        d0 += h9 * (5 * r1);
        c2 += d0 >>> 13;
        d0 &= 8191;
        d1 = c2;
        d1 += h0 * r1;
        d1 += h1 * r0;
        d1 += h2 * (5 * r9);
        d1 += h3 * (5 * r8);
        d1 += h4 * (5 * r7);
        c2 = d1 >>> 13;
        d1 &= 8191;
        d1 += h5 * (5 * r6);
        d1 += h6 * (5 * r5);
        d1 += h7 * (5 * r4);
        d1 += h8 * (5 * r3);
        d1 += h9 * (5 * r2);
        c2 += d1 >>> 13;
        d1 &= 8191;
        d2 = c2;
        d2 += h0 * r2;
        d2 += h1 * r1;
        d2 += h2 * r0;
        d2 += h3 * (5 * r9);
        d2 += h4 * (5 * r8);
        c2 = d2 >>> 13;
        d2 &= 8191;
        d2 += h5 * (5 * r7);
        d2 += h6 * (5 * r6);
        d2 += h7 * (5 * r5);
        d2 += h8 * (5 * r4);
        d2 += h9 * (5 * r3);
        c2 += d2 >>> 13;
        d2 &= 8191;
        d3 = c2;
        d3 += h0 * r3;
        d3 += h1 * r2;
        d3 += h2 * r1;
        d3 += h3 * r0;
        d3 += h4 * (5 * r9);
        c2 = d3 >>> 13;
        d3 &= 8191;
        d3 += h5 * (5 * r8);
        d3 += h6 * (5 * r7);
        d3 += h7 * (5 * r6);
        d3 += h8 * (5 * r5);
        d3 += h9 * (5 * r4);
        c2 += d3 >>> 13;
        d3 &= 8191;
        d4 = c2;
        d4 += h0 * r4;
        d4 += h1 * r3;
        d4 += h2 * r2;
        d4 += h3 * r1;
        d4 += h4 * r0;
        c2 = d4 >>> 13;
        d4 &= 8191;
        d4 += h5 * (5 * r9);
        d4 += h6 * (5 * r8);
        d4 += h7 * (5 * r7);
        d4 += h8 * (5 * r6);
        d4 += h9 * (5 * r5);
        c2 += d4 >>> 13;
        d4 &= 8191;
        d5 = c2;
        d5 += h0 * r5;
        d5 += h1 * r4;
        d5 += h2 * r3;
        d5 += h3 * r2;
        d5 += h4 * r1;
        c2 = d5 >>> 13;
        d5 &= 8191;
        d5 += h5 * r0;
        d5 += h6 * (5 * r9);
        d5 += h7 * (5 * r8);
        d5 += h8 * (5 * r7);
        d5 += h9 * (5 * r6);
        c2 += d5 >>> 13;
        d5 &= 8191;
        d6 = c2;
        d6 += h0 * r6;
        d6 += h1 * r5;
        d6 += h2 * r4;
        d6 += h3 * r3;
        d6 += h4 * r2;
        c2 = d6 >>> 13;
        d6 &= 8191;
        d6 += h5 * r1;
        d6 += h6 * r0;
        d6 += h7 * (5 * r9);
        d6 += h8 * (5 * r8);
        d6 += h9 * (5 * r7);
        c2 += d6 >>> 13;
        d6 &= 8191;
        d7 = c2;
        d7 += h0 * r7;
        d7 += h1 * r6;
        d7 += h2 * r5;
        d7 += h3 * r4;
        d7 += h4 * r3;
        c2 = d7 >>> 13;
        d7 &= 8191;
        d7 += h5 * r2;
        d7 += h6 * r1;
        d7 += h7 * r0;
        d7 += h8 * (5 * r9);
        d7 += h9 * (5 * r8);
        c2 += d7 >>> 13;
        d7 &= 8191;
        d8 = c2;
        d8 += h0 * r8;
        d8 += h1 * r7;
        d8 += h2 * r6;
        d8 += h3 * r5;
        d8 += h4 * r4;
        c2 = d8 >>> 13;
        d8 &= 8191;
        d8 += h5 * r3;
        d8 += h6 * r2;
        d8 += h7 * r1;
        d8 += h8 * r0;
        d8 += h9 * (5 * r9);
        c2 += d8 >>> 13;
        d8 &= 8191;
        d9 = c2;
        d9 += h0 * r9;
        d9 += h1 * r8;
        d9 += h2 * r7;
        d9 += h3 * r6;
        d9 += h4 * r5;
        c2 = d9 >>> 13;
        d9 &= 8191;
        d9 += h5 * r4;
        d9 += h6 * r3;
        d9 += h7 * r2;
        d9 += h8 * r1;
        d9 += h9 * r0;
        c2 += d9 >>> 13;
        d9 &= 8191;
        c2 = (c2 << 2) + c2 | 0;
        c2 = c2 + d0 | 0;
        d0 = c2 & 8191;
        c2 = c2 >>> 13;
        d1 += c2;
        h0 = d0;
        h1 = d1;
        h2 = d2;
        h3 = d3;
        h4 = d4;
        h5 = d5;
        h6 = d6;
        h7 = d7;
        h8 = d8;
        h9 = d9;
        mpos += 16;
        bytes -= 16;
      }
      this.h[0] = h0;
      this.h[1] = h1;
      this.h[2] = h2;
      this.h[3] = h3;
      this.h[4] = h4;
      this.h[5] = h5;
      this.h[6] = h6;
      this.h[7] = h7;
      this.h[8] = h8;
      this.h[9] = h9;
    };
    poly1305.prototype.finish = function(mac, macpos) {
      var g2 = new Uint16Array(10);
      var c2, mask, f2, i2;
      if (this.leftover) {
        i2 = this.leftover;
        this.buffer[i2++] = 1;
        for (; i2 < 16; i2++)
          this.buffer[i2] = 0;
        this.fin = 1;
        this.blocks(this.buffer, 0, 16);
      }
      c2 = this.h[1] >>> 13;
      this.h[1] &= 8191;
      for (i2 = 2; i2 < 10; i2++) {
        this.h[i2] += c2;
        c2 = this.h[i2] >>> 13;
        this.h[i2] &= 8191;
      }
      this.h[0] += c2 * 5;
      c2 = this.h[0] >>> 13;
      this.h[0] &= 8191;
      this.h[1] += c2;
      c2 = this.h[1] >>> 13;
      this.h[1] &= 8191;
      this.h[2] += c2;
      g2[0] = this.h[0] + 5;
      c2 = g2[0] >>> 13;
      g2[0] &= 8191;
      for (i2 = 1; i2 < 10; i2++) {
        g2[i2] = this.h[i2] + c2;
        c2 = g2[i2] >>> 13;
        g2[i2] &= 8191;
      }
      g2[9] -= 1 << 13;
      mask = (c2 ^ 1) - 1;
      for (i2 = 0; i2 < 10; i2++)
        g2[i2] &= mask;
      mask = ~mask;
      for (i2 = 0; i2 < 10; i2++)
        this.h[i2] = this.h[i2] & mask | g2[i2];
      this.h[0] = (this.h[0] | this.h[1] << 13) & 65535;
      this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 65535;
      this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 65535;
      this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 65535;
      this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 65535;
      this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 65535;
      this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 65535;
      this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 65535;
      f2 = this.h[0] + this.pad[0];
      this.h[0] = f2 & 65535;
      for (i2 = 1; i2 < 8; i2++) {
        f2 = (this.h[i2] + this.pad[i2] | 0) + (f2 >>> 16) | 0;
        this.h[i2] = f2 & 65535;
      }
      mac[macpos + 0] = this.h[0] >>> 0 & 255;
      mac[macpos + 1] = this.h[0] >>> 8 & 255;
      mac[macpos + 2] = this.h[1] >>> 0 & 255;
      mac[macpos + 3] = this.h[1] >>> 8 & 255;
      mac[macpos + 4] = this.h[2] >>> 0 & 255;
      mac[macpos + 5] = this.h[2] >>> 8 & 255;
      mac[macpos + 6] = this.h[3] >>> 0 & 255;
      mac[macpos + 7] = this.h[3] >>> 8 & 255;
      mac[macpos + 8] = this.h[4] >>> 0 & 255;
      mac[macpos + 9] = this.h[4] >>> 8 & 255;
      mac[macpos + 10] = this.h[5] >>> 0 & 255;
      mac[macpos + 11] = this.h[5] >>> 8 & 255;
      mac[macpos + 12] = this.h[6] >>> 0 & 255;
      mac[macpos + 13] = this.h[6] >>> 8 & 255;
      mac[macpos + 14] = this.h[7] >>> 0 & 255;
      mac[macpos + 15] = this.h[7] >>> 8 & 255;
    };
    poly1305.prototype.update = function(m2, mpos, bytes) {
      var i2, want;
      if (this.leftover) {
        want = 16 - this.leftover;
        if (want > bytes)
          want = bytes;
        for (i2 = 0; i2 < want; i2++)
          this.buffer[this.leftover + i2] = m2[mpos + i2];
        bytes -= want;
        mpos += want;
        this.leftover += want;
        if (this.leftover < 16)
          return;
        this.blocks(this.buffer, 0, 16);
        this.leftover = 0;
      }
      if (bytes >= 16) {
        want = bytes - bytes % 16;
        this.blocks(m2, mpos, want);
        mpos += want;
        bytes -= want;
      }
      if (bytes) {
        for (i2 = 0; i2 < bytes; i2++)
          this.buffer[this.leftover + i2] = m2[mpos + i2];
        this.leftover += bytes;
      }
    };
    function crypto_onetimeauth(out, outpos, m2, mpos, n2, k2) {
      var s2 = new poly1305(k2);
      s2.update(m2, mpos, n2);
      s2.finish(out, outpos);
      return 0;
    }
    function crypto_onetimeauth_verify(h2, hpos, m2, mpos, n2, k2) {
      var x2 = new Uint8Array(16);
      crypto_onetimeauth(x2, 0, m2, mpos, n2, k2);
      return crypto_verify_16(h2, hpos, x2, 0);
    }
    function crypto_secretbox(c2, m2, d2, n2, k2) {
      var i2;
      if (d2 < 32)
        return -1;
      crypto_stream_xor(c2, 0, m2, 0, d2, n2, k2);
      crypto_onetimeauth(c2, 16, c2, 32, d2 - 32, c2);
      for (i2 = 0; i2 < 16; i2++)
        c2[i2] = 0;
      return 0;
    }
    function crypto_secretbox_open(m2, c2, d2, n2, k2) {
      var i2;
      var x2 = new Uint8Array(32);
      if (d2 < 32)
        return -1;
      crypto_stream(x2, 0, 32, n2, k2);
      if (crypto_onetimeauth_verify(c2, 16, c2, 32, d2 - 32, x2) !== 0)
        return -1;
      crypto_stream_xor(m2, 0, c2, 0, d2, n2, k2);
      for (i2 = 0; i2 < 32; i2++)
        m2[i2] = 0;
      return 0;
    }
    function set25519(r2, a2) {
      var i2;
      for (i2 = 0; i2 < 16; i2++)
        r2[i2] = a2[i2] | 0;
    }
    function car25519(o2) {
      var i2, v2, c2 = 1;
      for (i2 = 0; i2 < 16; i2++) {
        v2 = o2[i2] + c2 + 65535;
        c2 = Math.floor(v2 / 65536);
        o2[i2] = v2 - c2 * 65536;
      }
      o2[0] += c2 - 1 + 37 * (c2 - 1);
    }
    function sel25519(p2, q2, b2) {
      var t2, c2 = ~(b2 - 1);
      for (var i2 = 0; i2 < 16; i2++) {
        t2 = c2 & (p2[i2] ^ q2[i2]);
        p2[i2] ^= t2;
        q2[i2] ^= t2;
      }
    }
    function pack25519(o2, n2) {
      var i2, j2, b2;
      var m2 = gf2(), t2 = gf2();
      for (i2 = 0; i2 < 16; i2++)
        t2[i2] = n2[i2];
      car25519(t2);
      car25519(t2);
      car25519(t2);
      for (j2 = 0; j2 < 2; j2++) {
        m2[0] = t2[0] - 65517;
        for (i2 = 1; i2 < 15; i2++) {
          m2[i2] = t2[i2] - 65535 - (m2[i2 - 1] >> 16 & 1);
          m2[i2 - 1] &= 65535;
        }
        m2[15] = t2[15] - 32767 - (m2[14] >> 16 & 1);
        b2 = m2[15] >> 16 & 1;
        m2[14] &= 65535;
        sel25519(t2, m2, 1 - b2);
      }
      for (i2 = 0; i2 < 16; i2++) {
        o2[2 * i2] = t2[i2] & 255;
        o2[2 * i2 + 1] = t2[i2] >> 8;
      }
    }
    function neq25519(a2, b2) {
      var c2 = new Uint8Array(32), d2 = new Uint8Array(32);
      pack25519(c2, a2);
      pack25519(d2, b2);
      return crypto_verify_32(c2, 0, d2, 0);
    }
    function par25519(a2) {
      var d2 = new Uint8Array(32);
      pack25519(d2, a2);
      return d2[0] & 1;
    }
    function unpack25519(o2, n2) {
      var i2;
      for (i2 = 0; i2 < 16; i2++)
        o2[i2] = n2[2 * i2] + (n2[2 * i2 + 1] << 8);
      o2[15] &= 32767;
    }
    function A2(o2, a2, b2) {
      for (var i2 = 0; i2 < 16; i2++)
        o2[i2] = a2[i2] + b2[i2];
    }
    function Z2(o2, a2, b2) {
      for (var i2 = 0; i2 < 16; i2++)
        o2[i2] = a2[i2] - b2[i2];
    }
    function M2(o2, a2, b2) {
      var v2, c2, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b2[0], b1 = b2[1], b22 = b2[2], b3 = b2[3], b4 = b2[4], b5 = b2[5], b6 = b2[6], b7 = b2[7], b8 = b2[8], b9 = b2[9], b10 = b2[10], b11 = b2[11], b12 = b2[12], b13 = b2[13], b14 = b2[14], b15 = b2[15];
      v2 = a2[0];
      t0 += v2 * b0;
      t1 += v2 * b1;
      t2 += v2 * b22;
      t3 += v2 * b3;
      t4 += v2 * b4;
      t5 += v2 * b5;
      t6 += v2 * b6;
      t7 += v2 * b7;
      t8 += v2 * b8;
      t9 += v2 * b9;
      t10 += v2 * b10;
      t11 += v2 * b11;
      t12 += v2 * b12;
      t13 += v2 * b13;
      t14 += v2 * b14;
      t15 += v2 * b15;
      v2 = a2[1];
      t1 += v2 * b0;
      t2 += v2 * b1;
      t3 += v2 * b22;
      t4 += v2 * b3;
      t5 += v2 * b4;
      t6 += v2 * b5;
      t7 += v2 * b6;
      t8 += v2 * b7;
      t9 += v2 * b8;
      t10 += v2 * b9;
      t11 += v2 * b10;
      t12 += v2 * b11;
      t13 += v2 * b12;
      t14 += v2 * b13;
      t15 += v2 * b14;
      t16 += v2 * b15;
      v2 = a2[2];
      t2 += v2 * b0;
      t3 += v2 * b1;
      t4 += v2 * b22;
      t5 += v2 * b3;
      t6 += v2 * b4;
      t7 += v2 * b5;
      t8 += v2 * b6;
      t9 += v2 * b7;
      t10 += v2 * b8;
      t11 += v2 * b9;
      t12 += v2 * b10;
      t13 += v2 * b11;
      t14 += v2 * b12;
      t15 += v2 * b13;
      t16 += v2 * b14;
      t17 += v2 * b15;
      v2 = a2[3];
      t3 += v2 * b0;
      t4 += v2 * b1;
      t5 += v2 * b22;
      t6 += v2 * b3;
      t7 += v2 * b4;
      t8 += v2 * b5;
      t9 += v2 * b6;
      t10 += v2 * b7;
      t11 += v2 * b8;
      t12 += v2 * b9;
      t13 += v2 * b10;
      t14 += v2 * b11;
      t15 += v2 * b12;
      t16 += v2 * b13;
      t17 += v2 * b14;
      t18 += v2 * b15;
      v2 = a2[4];
      t4 += v2 * b0;
      t5 += v2 * b1;
      t6 += v2 * b22;
      t7 += v2 * b3;
      t8 += v2 * b4;
      t9 += v2 * b5;
      t10 += v2 * b6;
      t11 += v2 * b7;
      t12 += v2 * b8;
      t13 += v2 * b9;
      t14 += v2 * b10;
      t15 += v2 * b11;
      t16 += v2 * b12;
      t17 += v2 * b13;
      t18 += v2 * b14;
      t19 += v2 * b15;
      v2 = a2[5];
      t5 += v2 * b0;
      t6 += v2 * b1;
      t7 += v2 * b22;
      t8 += v2 * b3;
      t9 += v2 * b4;
      t10 += v2 * b5;
      t11 += v2 * b6;
      t12 += v2 * b7;
      t13 += v2 * b8;
      t14 += v2 * b9;
      t15 += v2 * b10;
      t16 += v2 * b11;
      t17 += v2 * b12;
      t18 += v2 * b13;
      t19 += v2 * b14;
      t20 += v2 * b15;
      v2 = a2[6];
      t6 += v2 * b0;
      t7 += v2 * b1;
      t8 += v2 * b22;
      t9 += v2 * b3;
      t10 += v2 * b4;
      t11 += v2 * b5;
      t12 += v2 * b6;
      t13 += v2 * b7;
      t14 += v2 * b8;
      t15 += v2 * b9;
      t16 += v2 * b10;
      t17 += v2 * b11;
      t18 += v2 * b12;
      t19 += v2 * b13;
      t20 += v2 * b14;
      t21 += v2 * b15;
      v2 = a2[7];
      t7 += v2 * b0;
      t8 += v2 * b1;
      t9 += v2 * b22;
      t10 += v2 * b3;
      t11 += v2 * b4;
      t12 += v2 * b5;
      t13 += v2 * b6;
      t14 += v2 * b7;
      t15 += v2 * b8;
      t16 += v2 * b9;
      t17 += v2 * b10;
      t18 += v2 * b11;
      t19 += v2 * b12;
      t20 += v2 * b13;
      t21 += v2 * b14;
      t22 += v2 * b15;
      v2 = a2[8];
      t8 += v2 * b0;
      t9 += v2 * b1;
      t10 += v2 * b22;
      t11 += v2 * b3;
      t12 += v2 * b4;
      t13 += v2 * b5;
      t14 += v2 * b6;
      t15 += v2 * b7;
      t16 += v2 * b8;
      t17 += v2 * b9;
      t18 += v2 * b10;
      t19 += v2 * b11;
      t20 += v2 * b12;
      t21 += v2 * b13;
      t22 += v2 * b14;
      t23 += v2 * b15;
      v2 = a2[9];
      t9 += v2 * b0;
      t10 += v2 * b1;
      t11 += v2 * b22;
      t12 += v2 * b3;
      t13 += v2 * b4;
      t14 += v2 * b5;
      t15 += v2 * b6;
      t16 += v2 * b7;
      t17 += v2 * b8;
      t18 += v2 * b9;
      t19 += v2 * b10;
      t20 += v2 * b11;
      t21 += v2 * b12;
      t22 += v2 * b13;
      t23 += v2 * b14;
      t24 += v2 * b15;
      v2 = a2[10];
      t10 += v2 * b0;
      t11 += v2 * b1;
      t12 += v2 * b22;
      t13 += v2 * b3;
      t14 += v2 * b4;
      t15 += v2 * b5;
      t16 += v2 * b6;
      t17 += v2 * b7;
      t18 += v2 * b8;
      t19 += v2 * b9;
      t20 += v2 * b10;
      t21 += v2 * b11;
      t22 += v2 * b12;
      t23 += v2 * b13;
      t24 += v2 * b14;
      t25 += v2 * b15;
      v2 = a2[11];
      t11 += v2 * b0;
      t12 += v2 * b1;
      t13 += v2 * b22;
      t14 += v2 * b3;
      t15 += v2 * b4;
      t16 += v2 * b5;
      t17 += v2 * b6;
      t18 += v2 * b7;
      t19 += v2 * b8;
      t20 += v2 * b9;
      t21 += v2 * b10;
      t22 += v2 * b11;
      t23 += v2 * b12;
      t24 += v2 * b13;
      t25 += v2 * b14;
      t26 += v2 * b15;
      v2 = a2[12];
      t12 += v2 * b0;
      t13 += v2 * b1;
      t14 += v2 * b22;
      t15 += v2 * b3;
      t16 += v2 * b4;
      t17 += v2 * b5;
      t18 += v2 * b6;
      t19 += v2 * b7;
      t20 += v2 * b8;
      t21 += v2 * b9;
      t22 += v2 * b10;
      t23 += v2 * b11;
      t24 += v2 * b12;
      t25 += v2 * b13;
      t26 += v2 * b14;
      t27 += v2 * b15;
      v2 = a2[13];
      t13 += v2 * b0;
      t14 += v2 * b1;
      t15 += v2 * b22;
      t16 += v2 * b3;
      t17 += v2 * b4;
      t18 += v2 * b5;
      t19 += v2 * b6;
      t20 += v2 * b7;
      t21 += v2 * b8;
      t22 += v2 * b9;
      t23 += v2 * b10;
      t24 += v2 * b11;
      t25 += v2 * b12;
      t26 += v2 * b13;
      t27 += v2 * b14;
      t28 += v2 * b15;
      v2 = a2[14];
      t14 += v2 * b0;
      t15 += v2 * b1;
      t16 += v2 * b22;
      t17 += v2 * b3;
      t18 += v2 * b4;
      t19 += v2 * b5;
      t20 += v2 * b6;
      t21 += v2 * b7;
      t22 += v2 * b8;
      t23 += v2 * b9;
      t24 += v2 * b10;
      t25 += v2 * b11;
      t26 += v2 * b12;
      t27 += v2 * b13;
      t28 += v2 * b14;
      t29 += v2 * b15;
      v2 = a2[15];
      t15 += v2 * b0;
      t16 += v2 * b1;
      t17 += v2 * b22;
      t18 += v2 * b3;
      t19 += v2 * b4;
      t20 += v2 * b5;
      t21 += v2 * b6;
      t22 += v2 * b7;
      t23 += v2 * b8;
      t24 += v2 * b9;
      t25 += v2 * b10;
      t26 += v2 * b11;
      t27 += v2 * b12;
      t28 += v2 * b13;
      t29 += v2 * b14;
      t30 += v2 * b15;
      t0 += 38 * t16;
      t1 += 38 * t17;
      t2 += 38 * t18;
      t3 += 38 * t19;
      t4 += 38 * t20;
      t5 += 38 * t21;
      t6 += 38 * t22;
      t7 += 38 * t23;
      t8 += 38 * t24;
      t9 += 38 * t25;
      t10 += 38 * t26;
      t11 += 38 * t27;
      t12 += 38 * t28;
      t13 += 38 * t29;
      t14 += 38 * t30;
      c2 = 1;
      v2 = t0 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t0 = v2 - c2 * 65536;
      v2 = t1 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t1 = v2 - c2 * 65536;
      v2 = t2 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t2 = v2 - c2 * 65536;
      v2 = t3 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t3 = v2 - c2 * 65536;
      v2 = t4 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t4 = v2 - c2 * 65536;
      v2 = t5 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t5 = v2 - c2 * 65536;
      v2 = t6 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t6 = v2 - c2 * 65536;
      v2 = t7 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t7 = v2 - c2 * 65536;
      v2 = t8 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t8 = v2 - c2 * 65536;
      v2 = t9 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t9 = v2 - c2 * 65536;
      v2 = t10 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t10 = v2 - c2 * 65536;
      v2 = t11 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t11 = v2 - c2 * 65536;
      v2 = t12 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t12 = v2 - c2 * 65536;
      v2 = t13 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t13 = v2 - c2 * 65536;
      v2 = t14 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t14 = v2 - c2 * 65536;
      v2 = t15 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t15 = v2 - c2 * 65536;
      t0 += c2 - 1 + 37 * (c2 - 1);
      c2 = 1;
      v2 = t0 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t0 = v2 - c2 * 65536;
      v2 = t1 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t1 = v2 - c2 * 65536;
      v2 = t2 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t2 = v2 - c2 * 65536;
      v2 = t3 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t3 = v2 - c2 * 65536;
      v2 = t4 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t4 = v2 - c2 * 65536;
      v2 = t5 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t5 = v2 - c2 * 65536;
      v2 = t6 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t6 = v2 - c2 * 65536;
      v2 = t7 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t7 = v2 - c2 * 65536;
      v2 = t8 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t8 = v2 - c2 * 65536;
      v2 = t9 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t9 = v2 - c2 * 65536;
      v2 = t10 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t10 = v2 - c2 * 65536;
      v2 = t11 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t11 = v2 - c2 * 65536;
      v2 = t12 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t12 = v2 - c2 * 65536;
      v2 = t13 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t13 = v2 - c2 * 65536;
      v2 = t14 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t14 = v2 - c2 * 65536;
      v2 = t15 + c2 + 65535;
      c2 = Math.floor(v2 / 65536);
      t15 = v2 - c2 * 65536;
      t0 += c2 - 1 + 37 * (c2 - 1);
      o2[0] = t0;
      o2[1] = t1;
      o2[2] = t2;
      o2[3] = t3;
      o2[4] = t4;
      o2[5] = t5;
      o2[6] = t6;
      o2[7] = t7;
      o2[8] = t8;
      o2[9] = t9;
      o2[10] = t10;
      o2[11] = t11;
      o2[12] = t12;
      o2[13] = t13;
      o2[14] = t14;
      o2[15] = t15;
    }
    function S2(o2, a2) {
      M2(o2, a2, a2);
    }
    function inv25519(o2, i2) {
      var c2 = gf2();
      var a2;
      for (a2 = 0; a2 < 16; a2++)
        c2[a2] = i2[a2];
      for (a2 = 253; a2 >= 0; a2--) {
        S2(c2, c2);
        if (a2 !== 2 && a2 !== 4)
          M2(c2, c2, i2);
      }
      for (a2 = 0; a2 < 16; a2++)
        o2[a2] = c2[a2];
    }
    function pow2523(o2, i2) {
      var c2 = gf2();
      var a2;
      for (a2 = 0; a2 < 16; a2++)
        c2[a2] = i2[a2];
      for (a2 = 250; a2 >= 0; a2--) {
        S2(c2, c2);
        if (a2 !== 1)
          M2(c2, c2, i2);
      }
      for (a2 = 0; a2 < 16; a2++)
        o2[a2] = c2[a2];
    }
    function crypto_scalarmult(q2, n2, p2) {
      var z2 = new Uint8Array(32);
      var x2 = new Float64Array(80), r2, i2;
      var a2 = gf2(), b2 = gf2(), c2 = gf2(), d2 = gf2(), e2 = gf2(), f2 = gf2();
      for (i2 = 0; i2 < 31; i2++)
        z2[i2] = n2[i2];
      z2[31] = n2[31] & 127 | 64;
      z2[0] &= 248;
      unpack25519(x2, p2);
      for (i2 = 0; i2 < 16; i2++) {
        b2[i2] = x2[i2];
        d2[i2] = a2[i2] = c2[i2] = 0;
      }
      a2[0] = d2[0] = 1;
      for (i2 = 254; i2 >= 0; --i2) {
        r2 = z2[i2 >>> 3] >>> (i2 & 7) & 1;
        sel25519(a2, b2, r2);
        sel25519(c2, d2, r2);
        A2(e2, a2, c2);
        Z2(a2, a2, c2);
        A2(c2, b2, d2);
        Z2(b2, b2, d2);
        S2(d2, e2);
        S2(f2, a2);
        M2(a2, c2, a2);
        M2(c2, b2, e2);
        A2(e2, a2, c2);
        Z2(a2, a2, c2);
        S2(b2, a2);
        Z2(c2, d2, f2);
        M2(a2, c2, _121665);
        A2(a2, a2, d2);
        M2(c2, c2, a2);
        M2(a2, d2, f2);
        M2(d2, b2, x2);
        S2(b2, e2);
        sel25519(a2, b2, r2);
        sel25519(c2, d2, r2);
      }
      for (i2 = 0; i2 < 16; i2++) {
        x2[i2 + 16] = a2[i2];
        x2[i2 + 32] = c2[i2];
        x2[i2 + 48] = b2[i2];
        x2[i2 + 64] = d2[i2];
      }
      var x32 = x2.subarray(32);
      var x16 = x2.subarray(16);
      inv25519(x32, x32);
      M2(x16, x16, x32);
      pack25519(q2, x16);
      return 0;
    }
    function crypto_scalarmult_base(q2, n2) {
      return crypto_scalarmult(q2, n2, _9);
    }
    function crypto_box_keypair(y2, x2) {
      randombytes(x2, 32);
      return crypto_scalarmult_base(y2, x2);
    }
    function crypto_box_beforenm(k2, y2, x2) {
      var s2 = new Uint8Array(32);
      crypto_scalarmult(s2, x2, y2);
      return crypto_core_hsalsa20(k2, _0, s2, sigma);
    }
    var crypto_box_afternm = crypto_secretbox;
    var crypto_box_open_afternm = crypto_secretbox_open;
    function crypto_box(c2, m2, d2, n2, y2, x2) {
      var k2 = new Uint8Array(32);
      crypto_box_beforenm(k2, y2, x2);
      return crypto_box_afternm(c2, m2, d2, n2, k2);
    }
    function crypto_box_open(m2, c2, d2, n2, y2, x2) {
      var k2 = new Uint8Array(32);
      crypto_box_beforenm(k2, y2, x2);
      return crypto_box_open_afternm(m2, c2, d2, n2, k2);
    }
    var K2 = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    function crypto_hashblocks_hl(hh2, hl2, m2, n2) {
      var wh2 = new Int32Array(16), wl = new Int32Array(16), bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7, bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7, th2, tl2, i2, j2, h2, l2, a2, b2, c2, d2;
      var ah0 = hh2[0], ah1 = hh2[1], ah2 = hh2[2], ah3 = hh2[3], ah4 = hh2[4], ah5 = hh2[5], ah6 = hh2[6], ah7 = hh2[7], al0 = hl2[0], al1 = hl2[1], al2 = hl2[2], al3 = hl2[3], al4 = hl2[4], al5 = hl2[5], al6 = hl2[6], al7 = hl2[7];
      var pos = 0;
      while (n2 >= 128) {
        for (i2 = 0; i2 < 16; i2++) {
          j2 = 8 * i2 + pos;
          wh2[i2] = m2[j2 + 0] << 24 | m2[j2 + 1] << 16 | m2[j2 + 2] << 8 | m2[j2 + 3];
          wl[i2] = m2[j2 + 4] << 24 | m2[j2 + 5] << 16 | m2[j2 + 6] << 8 | m2[j2 + 7];
        }
        for (i2 = 0; i2 < 80; i2++) {
          bh0 = ah0;
          bh1 = ah1;
          bh2 = ah2;
          bh3 = ah3;
          bh4 = ah4;
          bh5 = ah5;
          bh6 = ah6;
          bh7 = ah7;
          bl0 = al0;
          bl1 = al1;
          bl2 = al2;
          bl3 = al3;
          bl4 = al4;
          bl5 = al5;
          bl6 = al6;
          bl7 = al7;
          h2 = ah7;
          l2 = al7;
          a2 = l2 & 65535;
          b2 = l2 >>> 16;
          c2 = h2 & 65535;
          d2 = h2 >>> 16;
          h2 = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));
          l2 = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));
          a2 += l2 & 65535;
          b2 += l2 >>> 16;
          c2 += h2 & 65535;
          d2 += h2 >>> 16;
          h2 = ah4 & ah5 ^ ~ah4 & ah6;
          l2 = al4 & al5 ^ ~al4 & al6;
          a2 += l2 & 65535;
          b2 += l2 >>> 16;
          c2 += h2 & 65535;
          d2 += h2 >>> 16;
          h2 = K2[i2 * 2];
          l2 = K2[i2 * 2 + 1];
          a2 += l2 & 65535;
          b2 += l2 >>> 16;
          c2 += h2 & 65535;
          d2 += h2 >>> 16;
          h2 = wh2[i2 % 16];
          l2 = wl[i2 % 16];
          a2 += l2 & 65535;
          b2 += l2 >>> 16;
          c2 += h2 & 65535;
          d2 += h2 >>> 16;
          b2 += a2 >>> 16;
          c2 += b2 >>> 16;
          d2 += c2 >>> 16;
          th2 = c2 & 65535 | d2 << 16;
          tl2 = a2 & 65535 | b2 << 16;
          h2 = th2;
          l2 = tl2;
          a2 = l2 & 65535;
          b2 = l2 >>> 16;
          c2 = h2 & 65535;
          d2 = h2 >>> 16;
          h2 = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));
          l2 = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));
          a2 += l2 & 65535;
          b2 += l2 >>> 16;
          c2 += h2 & 65535;
          d2 += h2 >>> 16;
          h2 = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
          l2 = al0 & al1 ^ al0 & al2 ^ al1 & al2;
          a2 += l2 & 65535;
          b2 += l2 >>> 16;
          c2 += h2 & 65535;
          d2 += h2 >>> 16;
          b2 += a2 >>> 16;
          c2 += b2 >>> 16;
          d2 += c2 >>> 16;
          bh7 = c2 & 65535 | d2 << 16;
          bl7 = a2 & 65535 | b2 << 16;
          h2 = bh3;
          l2 = bl3;
          a2 = l2 & 65535;
          b2 = l2 >>> 16;
          c2 = h2 & 65535;
          d2 = h2 >>> 16;
          h2 = th2;
          l2 = tl2;
          a2 += l2 & 65535;
          b2 += l2 >>> 16;
          c2 += h2 & 65535;
          d2 += h2 >>> 16;
          b2 += a2 >>> 16;
          c2 += b2 >>> 16;
          d2 += c2 >>> 16;
          bh3 = c2 & 65535 | d2 << 16;
          bl3 = a2 & 65535 | b2 << 16;
          ah1 = bh0;
          ah2 = bh1;
          ah3 = bh2;
          ah4 = bh3;
          ah5 = bh4;
          ah6 = bh5;
          ah7 = bh6;
          ah0 = bh7;
          al1 = bl0;
          al2 = bl1;
          al3 = bl2;
          al4 = bl3;
          al5 = bl4;
          al6 = bl5;
          al7 = bl6;
          al0 = bl7;
          if (i2 % 16 === 15) {
            for (j2 = 0; j2 < 16; j2++) {
              h2 = wh2[j2];
              l2 = wl[j2];
              a2 = l2 & 65535;
              b2 = l2 >>> 16;
              c2 = h2 & 65535;
              d2 = h2 >>> 16;
              h2 = wh2[(j2 + 9) % 16];
              l2 = wl[(j2 + 9) % 16];
              a2 += l2 & 65535;
              b2 += l2 >>> 16;
              c2 += h2 & 65535;
              d2 += h2 >>> 16;
              th2 = wh2[(j2 + 1) % 16];
              tl2 = wl[(j2 + 1) % 16];
              h2 = (th2 >>> 1 | tl2 << 32 - 1) ^ (th2 >>> 8 | tl2 << 32 - 8) ^ th2 >>> 7;
              l2 = (tl2 >>> 1 | th2 << 32 - 1) ^ (tl2 >>> 8 | th2 << 32 - 8) ^ (tl2 >>> 7 | th2 << 32 - 7);
              a2 += l2 & 65535;
              b2 += l2 >>> 16;
              c2 += h2 & 65535;
              d2 += h2 >>> 16;
              th2 = wh2[(j2 + 14) % 16];
              tl2 = wl[(j2 + 14) % 16];
              h2 = (th2 >>> 19 | tl2 << 32 - 19) ^ (tl2 >>> 61 - 32 | th2 << 32 - (61 - 32)) ^ th2 >>> 6;
              l2 = (tl2 >>> 19 | th2 << 32 - 19) ^ (th2 >>> 61 - 32 | tl2 << 32 - (61 - 32)) ^ (tl2 >>> 6 | th2 << 32 - 6);
              a2 += l2 & 65535;
              b2 += l2 >>> 16;
              c2 += h2 & 65535;
              d2 += h2 >>> 16;
              b2 += a2 >>> 16;
              c2 += b2 >>> 16;
              d2 += c2 >>> 16;
              wh2[j2] = c2 & 65535 | d2 << 16;
              wl[j2] = a2 & 65535 | b2 << 16;
            }
          }
        }
        h2 = ah0;
        l2 = al0;
        a2 = l2 & 65535;
        b2 = l2 >>> 16;
        c2 = h2 & 65535;
        d2 = h2 >>> 16;
        h2 = hh2[0];
        l2 = hl2[0];
        a2 += l2 & 65535;
        b2 += l2 >>> 16;
        c2 += h2 & 65535;
        d2 += h2 >>> 16;
        b2 += a2 >>> 16;
        c2 += b2 >>> 16;
        d2 += c2 >>> 16;
        hh2[0] = ah0 = c2 & 65535 | d2 << 16;
        hl2[0] = al0 = a2 & 65535 | b2 << 16;
        h2 = ah1;
        l2 = al1;
        a2 = l2 & 65535;
        b2 = l2 >>> 16;
        c2 = h2 & 65535;
        d2 = h2 >>> 16;
        h2 = hh2[1];
        l2 = hl2[1];
        a2 += l2 & 65535;
        b2 += l2 >>> 16;
        c2 += h2 & 65535;
        d2 += h2 >>> 16;
        b2 += a2 >>> 16;
        c2 += b2 >>> 16;
        d2 += c2 >>> 16;
        hh2[1] = ah1 = c2 & 65535 | d2 << 16;
        hl2[1] = al1 = a2 & 65535 | b2 << 16;
        h2 = ah2;
        l2 = al2;
        a2 = l2 & 65535;
        b2 = l2 >>> 16;
        c2 = h2 & 65535;
        d2 = h2 >>> 16;
        h2 = hh2[2];
        l2 = hl2[2];
        a2 += l2 & 65535;
        b2 += l2 >>> 16;
        c2 += h2 & 65535;
        d2 += h2 >>> 16;
        b2 += a2 >>> 16;
        c2 += b2 >>> 16;
        d2 += c2 >>> 16;
        hh2[2] = ah2 = c2 & 65535 | d2 << 16;
        hl2[2] = al2 = a2 & 65535 | b2 << 16;
        h2 = ah3;
        l2 = al3;
        a2 = l2 & 65535;
        b2 = l2 >>> 16;
        c2 = h2 & 65535;
        d2 = h2 >>> 16;
        h2 = hh2[3];
        l2 = hl2[3];
        a2 += l2 & 65535;
        b2 += l2 >>> 16;
        c2 += h2 & 65535;
        d2 += h2 >>> 16;
        b2 += a2 >>> 16;
        c2 += b2 >>> 16;
        d2 += c2 >>> 16;
        hh2[3] = ah3 = c2 & 65535 | d2 << 16;
        hl2[3] = al3 = a2 & 65535 | b2 << 16;
        h2 = ah4;
        l2 = al4;
        a2 = l2 & 65535;
        b2 = l2 >>> 16;
        c2 = h2 & 65535;
        d2 = h2 >>> 16;
        h2 = hh2[4];
        l2 = hl2[4];
        a2 += l2 & 65535;
        b2 += l2 >>> 16;
        c2 += h2 & 65535;
        d2 += h2 >>> 16;
        b2 += a2 >>> 16;
        c2 += b2 >>> 16;
        d2 += c2 >>> 16;
        hh2[4] = ah4 = c2 & 65535 | d2 << 16;
        hl2[4] = al4 = a2 & 65535 | b2 << 16;
        h2 = ah5;
        l2 = al5;
        a2 = l2 & 65535;
        b2 = l2 >>> 16;
        c2 = h2 & 65535;
        d2 = h2 >>> 16;
        h2 = hh2[5];
        l2 = hl2[5];
        a2 += l2 & 65535;
        b2 += l2 >>> 16;
        c2 += h2 & 65535;
        d2 += h2 >>> 16;
        b2 += a2 >>> 16;
        c2 += b2 >>> 16;
        d2 += c2 >>> 16;
        hh2[5] = ah5 = c2 & 65535 | d2 << 16;
        hl2[5] = al5 = a2 & 65535 | b2 << 16;
        h2 = ah6;
        l2 = al6;
        a2 = l2 & 65535;
        b2 = l2 >>> 16;
        c2 = h2 & 65535;
        d2 = h2 >>> 16;
        h2 = hh2[6];
        l2 = hl2[6];
        a2 += l2 & 65535;
        b2 += l2 >>> 16;
        c2 += h2 & 65535;
        d2 += h2 >>> 16;
        b2 += a2 >>> 16;
        c2 += b2 >>> 16;
        d2 += c2 >>> 16;
        hh2[6] = ah6 = c2 & 65535 | d2 << 16;
        hl2[6] = al6 = a2 & 65535 | b2 << 16;
        h2 = ah7;
        l2 = al7;
        a2 = l2 & 65535;
        b2 = l2 >>> 16;
        c2 = h2 & 65535;
        d2 = h2 >>> 16;
        h2 = hh2[7];
        l2 = hl2[7];
        a2 += l2 & 65535;
        b2 += l2 >>> 16;
        c2 += h2 & 65535;
        d2 += h2 >>> 16;
        b2 += a2 >>> 16;
        c2 += b2 >>> 16;
        d2 += c2 >>> 16;
        hh2[7] = ah7 = c2 & 65535 | d2 << 16;
        hl2[7] = al7 = a2 & 65535 | b2 << 16;
        pos += 128;
        n2 -= 128;
      }
      return n2;
    }
    function crypto_hash(out, m2, n2) {
      var hh2 = new Int32Array(8), hl2 = new Int32Array(8), x2 = new Uint8Array(256), i2, b2 = n2;
      hh2[0] = 1779033703;
      hh2[1] = 3144134277;
      hh2[2] = 1013904242;
      hh2[3] = 2773480762;
      hh2[4] = 1359893119;
      hh2[5] = 2600822924;
      hh2[6] = 528734635;
      hh2[7] = 1541459225;
      hl2[0] = 4089235720;
      hl2[1] = 2227873595;
      hl2[2] = 4271175723;
      hl2[3] = 1595750129;
      hl2[4] = 2917565137;
      hl2[5] = 725511199;
      hl2[6] = 4215389547;
      hl2[7] = 327033209;
      crypto_hashblocks_hl(hh2, hl2, m2, n2);
      n2 %= 128;
      for (i2 = 0; i2 < n2; i2++)
        x2[i2] = m2[b2 - n2 + i2];
      x2[n2] = 128;
      n2 = 256 - 128 * (n2 < 112 ? 1 : 0);
      x2[n2 - 9] = 0;
      ts64(x2, n2 - 8, b2 / 536870912 | 0, b2 << 3);
      crypto_hashblocks_hl(hh2, hl2, x2, n2);
      for (i2 = 0; i2 < 8; i2++)
        ts64(out, 8 * i2, hh2[i2], hl2[i2]);
      return 0;
    }
    function add(p2, q2) {
      var a2 = gf2(), b2 = gf2(), c2 = gf2(), d2 = gf2(), e2 = gf2(), f2 = gf2(), g2 = gf2(), h2 = gf2(), t2 = gf2();
      Z2(a2, p2[1], p2[0]);
      Z2(t2, q2[1], q2[0]);
      M2(a2, a2, t2);
      A2(b2, p2[0], p2[1]);
      A2(t2, q2[0], q2[1]);
      M2(b2, b2, t2);
      M2(c2, p2[3], q2[3]);
      M2(c2, c2, D22);
      M2(d2, p2[2], q2[2]);
      A2(d2, d2, d2);
      Z2(e2, b2, a2);
      Z2(f2, d2, c2);
      A2(g2, d2, c2);
      A2(h2, b2, a2);
      M2(p2[0], e2, f2);
      M2(p2[1], h2, g2);
      M2(p2[2], g2, f2);
      M2(p2[3], e2, h2);
    }
    function cswap(p2, q2, b2) {
      var i2;
      for (i2 = 0; i2 < 4; i2++) {
        sel25519(p2[i2], q2[i2], b2);
      }
    }
    function pack(r2, p2) {
      var tx = gf2(), ty = gf2(), zi2 = gf2();
      inv25519(zi2, p2[2]);
      M2(tx, p2[0], zi2);
      M2(ty, p2[1], zi2);
      pack25519(r2, ty);
      r2[31] ^= par25519(tx) << 7;
    }
    function scalarmult(p2, q2, s2) {
      var b2, i2;
      set25519(p2[0], gf0);
      set25519(p2[1], gf1);
      set25519(p2[2], gf1);
      set25519(p2[3], gf0);
      for (i2 = 255; i2 >= 0; --i2) {
        b2 = s2[i2 / 8 | 0] >> (i2 & 7) & 1;
        cswap(p2, q2, b2);
        add(q2, p2);
        add(p2, p2);
        cswap(p2, q2, b2);
      }
    }
    function scalarbase(p2, s2) {
      var q2 = [gf2(), gf2(), gf2(), gf2()];
      set25519(q2[0], X2);
      set25519(q2[1], Y2);
      set25519(q2[2], gf1);
      M2(q2[3], X2, Y2);
      scalarmult(p2, q2, s2);
    }
    function crypto_sign_keypair(pk2, sk2, seeded) {
      var d2 = new Uint8Array(64);
      var p2 = [gf2(), gf2(), gf2(), gf2()];
      var i2;
      if (!seeded)
        randombytes(sk2, 32);
      crypto_hash(d2, sk2, 32);
      d2[0] &= 248;
      d2[31] &= 127;
      d2[31] |= 64;
      scalarbase(p2, d2);
      pack(pk2, p2);
      for (i2 = 0; i2 < 32; i2++)
        sk2[i2 + 32] = pk2[i2];
      return 0;
    }
    var L2 = new Float64Array([237, 211, 245, 92, 26, 99, 18, 88, 214, 156, 247, 162, 222, 249, 222, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16]);
    function modL(r2, x2) {
      var carry, i2, j2, k2;
      for (i2 = 63; i2 >= 32; --i2) {
        carry = 0;
        for (j2 = i2 - 32, k2 = i2 - 12; j2 < k2; ++j2) {
          x2[j2] += carry - 16 * x2[i2] * L2[j2 - (i2 - 32)];
          carry = Math.floor((x2[j2] + 128) / 256);
          x2[j2] -= carry * 256;
        }
        x2[j2] += carry;
        x2[i2] = 0;
      }
      carry = 0;
      for (j2 = 0; j2 < 32; j2++) {
        x2[j2] += carry - (x2[31] >> 4) * L2[j2];
        carry = x2[j2] >> 8;
        x2[j2] &= 255;
      }
      for (j2 = 0; j2 < 32; j2++)
        x2[j2] -= carry * L2[j2];
      for (i2 = 0; i2 < 32; i2++) {
        x2[i2 + 1] += x2[i2] >> 8;
        r2[i2] = x2[i2] & 255;
      }
    }
    function reduce2(r2) {
      var x2 = new Float64Array(64), i2;
      for (i2 = 0; i2 < 64; i2++)
        x2[i2] = r2[i2];
      for (i2 = 0; i2 < 64; i2++)
        r2[i2] = 0;
      modL(r2, x2);
    }
    function crypto_sign(sm, m2, n2, sk2) {
      var d2 = new Uint8Array(64), h2 = new Uint8Array(64), r2 = new Uint8Array(64);
      var i2, j2, x2 = new Float64Array(64);
      var p2 = [gf2(), gf2(), gf2(), gf2()];
      crypto_hash(d2, sk2, 32);
      d2[0] &= 248;
      d2[31] &= 127;
      d2[31] |= 64;
      var smlen = n2 + 64;
      for (i2 = 0; i2 < n2; i2++)
        sm[64 + i2] = m2[i2];
      for (i2 = 0; i2 < 32; i2++)
        sm[32 + i2] = d2[32 + i2];
      crypto_hash(r2, sm.subarray(32), n2 + 32);
      reduce2(r2);
      scalarbase(p2, r2);
      pack(sm, p2);
      for (i2 = 32; i2 < 64; i2++)
        sm[i2] = sk2[i2];
      crypto_hash(h2, sm, n2 + 64);
      reduce2(h2);
      for (i2 = 0; i2 < 64; i2++)
        x2[i2] = 0;
      for (i2 = 0; i2 < 32; i2++)
        x2[i2] = r2[i2];
      for (i2 = 0; i2 < 32; i2++) {
        for (j2 = 0; j2 < 32; j2++) {
          x2[i2 + j2] += h2[i2] * d2[j2];
        }
      }
      modL(sm.subarray(32), x2);
      return smlen;
    }
    function unpackneg(r2, p2) {
      var t2 = gf2(), chk = gf2(), num = gf2(), den = gf2(), den2 = gf2(), den4 = gf2(), den6 = gf2();
      set25519(r2[2], gf1);
      unpack25519(r2[1], p2);
      S2(num, r2[1]);
      M2(den, num, D2);
      Z2(num, num, r2[2]);
      A2(den, r2[2], den);
      S2(den2, den);
      S2(den4, den2);
      M2(den6, den4, den2);
      M2(t2, den6, num);
      M2(t2, t2, den);
      pow2523(t2, t2);
      M2(t2, t2, num);
      M2(t2, t2, den);
      M2(t2, t2, den);
      M2(r2[0], t2, den);
      S2(chk, r2[0]);
      M2(chk, chk, den);
      if (neq25519(chk, num))
        M2(r2[0], r2[0], I2);
      S2(chk, r2[0]);
      M2(chk, chk, den);
      if (neq25519(chk, num))
        return -1;
      if (par25519(r2[0]) === p2[31] >> 7)
        Z2(r2[0], gf0, r2[0]);
      M2(r2[3], r2[0], r2[1]);
      return 0;
    }
    function crypto_sign_open(m2, sm, n2, pk2) {
      var i2;
      var t2 = new Uint8Array(32), h2 = new Uint8Array(64);
      var p2 = [gf2(), gf2(), gf2(), gf2()], q2 = [gf2(), gf2(), gf2(), gf2()];
      if (n2 < 64)
        return -1;
      if (unpackneg(q2, pk2))
        return -1;
      for (i2 = 0; i2 < n2; i2++)
        m2[i2] = sm[i2];
      for (i2 = 0; i2 < 32; i2++)
        m2[i2 + 32] = pk2[i2];
      crypto_hash(h2, m2, n2);
      reduce2(h2);
      scalarmult(p2, q2, h2);
      scalarbase(q2, sm.subarray(32));
      add(p2, q2);
      pack(t2, p2);
      n2 -= 64;
      if (crypto_verify_32(sm, 0, t2, 0)) {
        for (i2 = 0; i2 < n2; i2++)
          m2[i2] = 0;
        return -1;
      }
      for (i2 = 0; i2 < n2; i2++)
        m2[i2] = sm[i2 + 64];
      return n2;
    }
    var crypto_secretbox_KEYBYTES = 32, crypto_secretbox_NONCEBYTES = 24, crypto_secretbox_ZEROBYTES = 32, crypto_secretbox_BOXZEROBYTES = 16, crypto_scalarmult_BYTES = 32, crypto_scalarmult_SCALARBYTES = 32, crypto_box_PUBLICKEYBYTES = 32, crypto_box_SECRETKEYBYTES = 32, crypto_box_BEFORENMBYTES = 32, crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES, crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES, crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES, crypto_sign_BYTES = 64, crypto_sign_PUBLICKEYBYTES = 32, crypto_sign_SECRETKEYBYTES = 64, crypto_sign_SEEDBYTES = 32, crypto_hash_BYTES = 64;
    nacl2.lowlevel = {
      crypto_core_hsalsa20,
      crypto_stream_xor,
      crypto_stream,
      crypto_stream_salsa20_xor,
      crypto_stream_salsa20,
      crypto_onetimeauth,
      crypto_onetimeauth_verify,
      crypto_verify_16,
      crypto_verify_32,
      crypto_secretbox,
      crypto_secretbox_open,
      crypto_scalarmult,
      crypto_scalarmult_base,
      crypto_box_beforenm,
      crypto_box_afternm,
      crypto_box,
      crypto_box_open,
      crypto_box_keypair,
      crypto_hash,
      crypto_sign,
      crypto_sign_keypair,
      crypto_sign_open,
      crypto_secretbox_KEYBYTES,
      crypto_secretbox_NONCEBYTES,
      crypto_secretbox_ZEROBYTES,
      crypto_secretbox_BOXZEROBYTES,
      crypto_scalarmult_BYTES,
      crypto_scalarmult_SCALARBYTES,
      crypto_box_PUBLICKEYBYTES,
      crypto_box_SECRETKEYBYTES,
      crypto_box_BEFORENMBYTES,
      crypto_box_NONCEBYTES,
      crypto_box_ZEROBYTES,
      crypto_box_BOXZEROBYTES,
      crypto_sign_BYTES,
      crypto_sign_PUBLICKEYBYTES,
      crypto_sign_SECRETKEYBYTES,
      crypto_sign_SEEDBYTES,
      crypto_hash_BYTES,
      gf: gf2,
      D: D2,
      L: L2,
      pack25519,
      unpack25519,
      M: M2,
      A: A2,
      S: S2,
      Z: Z2,
      pow2523,
      add,
      set25519,
      modL,
      scalarmult,
      scalarbase
    };
    function checkLengths(k2, n2) {
      if (k2.length !== crypto_secretbox_KEYBYTES)
        throw new Error("bad key size");
      if (n2.length !== crypto_secretbox_NONCEBYTES)
        throw new Error("bad nonce size");
    }
    function checkBoxLengths(pk2, sk2) {
      if (pk2.length !== crypto_box_PUBLICKEYBYTES)
        throw new Error("bad public key size");
      if (sk2.length !== crypto_box_SECRETKEYBYTES)
        throw new Error("bad secret key size");
    }
    function checkArrayTypes() {
      for (var i2 = 0; i2 < arguments.length; i2++) {
        if (!(arguments[i2] instanceof Uint8Array))
          throw new TypeError("unexpected type, use Uint8Array");
      }
    }
    function cleanup(arr) {
      for (var i2 = 0; i2 < arr.length; i2++)
        arr[i2] = 0;
    }
    nacl2.randomBytes = function(n2) {
      var b2 = new Uint8Array(n2);
      randombytes(b2, n2);
      return b2;
    };
    nacl2.secretbox = function(msg, nonce, key2) {
      checkArrayTypes(msg, nonce, key2);
      checkLengths(key2, nonce);
      var m2 = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
      var c2 = new Uint8Array(m2.length);
      for (var i2 = 0; i2 < msg.length; i2++)
        m2[i2 + crypto_secretbox_ZEROBYTES] = msg[i2];
      crypto_secretbox(c2, m2, m2.length, nonce, key2);
      return c2.subarray(crypto_secretbox_BOXZEROBYTES);
    };
    nacl2.secretbox.open = function(box, nonce, key2) {
      checkArrayTypes(box, nonce, key2);
      checkLengths(key2, nonce);
      var c2 = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
      var m2 = new Uint8Array(c2.length);
      for (var i2 = 0; i2 < box.length; i2++)
        c2[i2 + crypto_secretbox_BOXZEROBYTES] = box[i2];
      if (c2.length < 32)
        return null;
      if (crypto_secretbox_open(m2, c2, c2.length, nonce, key2) !== 0)
        return null;
      return m2.subarray(crypto_secretbox_ZEROBYTES);
    };
    nacl2.secretbox.keyLength = crypto_secretbox_KEYBYTES;
    nacl2.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
    nacl2.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
    nacl2.scalarMult = function(n2, p2) {
      checkArrayTypes(n2, p2);
      if (n2.length !== crypto_scalarmult_SCALARBYTES)
        throw new Error("bad n size");
      if (p2.length !== crypto_scalarmult_BYTES)
        throw new Error("bad p size");
      var q2 = new Uint8Array(crypto_scalarmult_BYTES);
      crypto_scalarmult(q2, n2, p2);
      return q2;
    };
    nacl2.scalarMult.base = function(n2) {
      checkArrayTypes(n2);
      if (n2.length !== crypto_scalarmult_SCALARBYTES)
        throw new Error("bad n size");
      var q2 = new Uint8Array(crypto_scalarmult_BYTES);
      crypto_scalarmult_base(q2, n2);
      return q2;
    };
    nacl2.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
    nacl2.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
    nacl2.box = function(msg, nonce, publicKey, secretKey) {
      var k2 = nacl2.box.before(publicKey, secretKey);
      return nacl2.secretbox(msg, nonce, k2);
    };
    nacl2.box.before = function(publicKey, secretKey) {
      checkArrayTypes(publicKey, secretKey);
      checkBoxLengths(publicKey, secretKey);
      var k2 = new Uint8Array(crypto_box_BEFORENMBYTES);
      crypto_box_beforenm(k2, publicKey, secretKey);
      return k2;
    };
    nacl2.box.after = nacl2.secretbox;
    nacl2.box.open = function(msg, nonce, publicKey, secretKey) {
      var k2 = nacl2.box.before(publicKey, secretKey);
      return nacl2.secretbox.open(msg, nonce, k2);
    };
    nacl2.box.open.after = nacl2.secretbox.open;
    nacl2.box.keyPair = function() {
      var pk2 = new Uint8Array(crypto_box_PUBLICKEYBYTES);
      var sk2 = new Uint8Array(crypto_box_SECRETKEYBYTES);
      crypto_box_keypair(pk2, sk2);
      return { publicKey: pk2, secretKey: sk2 };
    };
    nacl2.box.keyPair.fromSecretKey = function(secretKey) {
      checkArrayTypes(secretKey);
      if (secretKey.length !== crypto_box_SECRETKEYBYTES)
        throw new Error("bad secret key size");
      var pk2 = new Uint8Array(crypto_box_PUBLICKEYBYTES);
      crypto_scalarmult_base(pk2, secretKey);
      return { publicKey: pk2, secretKey: new Uint8Array(secretKey) };
    };
    nacl2.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
    nacl2.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
    nacl2.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
    nacl2.box.nonceLength = crypto_box_NONCEBYTES;
    nacl2.box.overheadLength = nacl2.secretbox.overheadLength;
    nacl2.sign = function(msg, secretKey) {
      checkArrayTypes(msg, secretKey);
      if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
        throw new Error("bad secret key size");
      var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
      crypto_sign(signedMsg, msg, msg.length, secretKey);
      return signedMsg;
    };
    nacl2.sign.open = function(signedMsg, publicKey) {
      checkArrayTypes(signedMsg, publicKey);
      if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
        throw new Error("bad public key size");
      var tmp = new Uint8Array(signedMsg.length);
      var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
      if (mlen < 0)
        return null;
      var m2 = new Uint8Array(mlen);
      for (var i2 = 0; i2 < m2.length; i2++)
        m2[i2] = tmp[i2];
      return m2;
    };
    nacl2.sign.detached = function(msg, secretKey) {
      var signedMsg = nacl2.sign(msg, secretKey);
      var sig = new Uint8Array(crypto_sign_BYTES);
      for (var i2 = 0; i2 < sig.length; i2++)
        sig[i2] = signedMsg[i2];
      return sig;
    };
    nacl2.sign.detached.verify = function(msg, sig, publicKey) {
      checkArrayTypes(msg, sig, publicKey);
      if (sig.length !== crypto_sign_BYTES)
        throw new Error("bad signature size");
      if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
        throw new Error("bad public key size");
      var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
      var m2 = new Uint8Array(crypto_sign_BYTES + msg.length);
      var i2;
      for (i2 = 0; i2 < crypto_sign_BYTES; i2++)
        sm[i2] = sig[i2];
      for (i2 = 0; i2 < msg.length; i2++)
        sm[i2 + crypto_sign_BYTES] = msg[i2];
      return crypto_sign_open(m2, sm, sm.length, publicKey) >= 0;
    };
    nacl2.sign.keyPair = function() {
      var pk2 = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      var sk2 = new Uint8Array(crypto_sign_SECRETKEYBYTES);
      crypto_sign_keypair(pk2, sk2);
      return { publicKey: pk2, secretKey: sk2 };
    };
    nacl2.sign.keyPair.fromSecretKey = function(secretKey) {
      checkArrayTypes(secretKey);
      if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
        throw new Error("bad secret key size");
      var pk2 = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      for (var i2 = 0; i2 < pk2.length; i2++)
        pk2[i2] = secretKey[32 + i2];
      return { publicKey: pk2, secretKey: new Uint8Array(secretKey) };
    };
    nacl2.sign.keyPair.fromSeed = function(seed) {
      checkArrayTypes(seed);
      if (seed.length !== crypto_sign_SEEDBYTES)
        throw new Error("bad seed size");
      var pk2 = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      var sk2 = new Uint8Array(crypto_sign_SECRETKEYBYTES);
      for (var i2 = 0; i2 < 32; i2++)
        sk2[i2] = seed[i2];
      crypto_sign_keypair(pk2, sk2, true);
      return { publicKey: pk2, secretKey: sk2 };
    };
    nacl2.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
    nacl2.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
    nacl2.sign.seedLength = crypto_sign_SEEDBYTES;
    nacl2.sign.signatureLength = crypto_sign_BYTES;
    nacl2.hash = function(msg) {
      checkArrayTypes(msg);
      var h2 = new Uint8Array(crypto_hash_BYTES);
      crypto_hash(h2, msg, msg.length);
      return h2;
    };
    nacl2.hash.hashLength = crypto_hash_BYTES;
    nacl2.verify = function(x2, y2) {
      checkArrayTypes(x2, y2);
      if (x2.length === 0 || y2.length === 0)
        return false;
      if (x2.length !== y2.length)
        return false;
      return vn(x2, 0, y2, 0, x2.length) === 0 ? true : false;
    };
    nacl2.setPRNG = function(fn) {
      randombytes = fn;
    };
    (function() {
      var crypto2 = typeof self !== "undefined" ? self.crypto || self.msCrypto : null;
      if (crypto2 && crypto2.getRandomValues) {
        var QUOTA = 65536;
        nacl2.setPRNG(function(x2, n2) {
          var i2, v2 = new Uint8Array(n2);
          for (i2 = 0; i2 < n2; i2 += QUOTA) {
            crypto2.getRandomValues(v2.subarray(i2, i2 + Math.min(n2 - i2, QUOTA)));
          }
          for (i2 = 0; i2 < n2; i2++)
            x2[i2] = v2[i2];
          cleanup(v2);
        });
      } else if (typeof commonjsRequire !== "undefined") {
        crypto2 = requireCryptoBrowserify();
        if (crypto2 && crypto2.randomBytes) {
          nacl2.setPRNG(function(x2, n2) {
            var i2, v2 = crypto2.randomBytes(n2);
            for (i2 = 0; i2 < n2; i2++)
              x2[i2] = v2[i2];
            cleanup(v2);
          });
        }
      }
    })();
  })(module.exports ? module.exports : self.nacl = self.nacl || {});
})(naclFast);
var naclFastExports = naclFast.exports;
const nacl$1 = /* @__PURE__ */ getDefaultExportFromCjs(naclFastExports);
var CONNECT_EVENT_ERROR_CODES;
(function(CONNECT_EVENT_ERROR_CODES2) {
  CONNECT_EVENT_ERROR_CODES2[CONNECT_EVENT_ERROR_CODES2["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
  CONNECT_EVENT_ERROR_CODES2[CONNECT_EVENT_ERROR_CODES2["BAD_REQUEST_ERROR"] = 1] = "BAD_REQUEST_ERROR";
  CONNECT_EVENT_ERROR_CODES2[CONNECT_EVENT_ERROR_CODES2["MANIFEST_NOT_FOUND_ERROR"] = 2] = "MANIFEST_NOT_FOUND_ERROR";
  CONNECT_EVENT_ERROR_CODES2[CONNECT_EVENT_ERROR_CODES2["MANIFEST_CONTENT_ERROR"] = 3] = "MANIFEST_CONTENT_ERROR";
  CONNECT_EVENT_ERROR_CODES2[CONNECT_EVENT_ERROR_CODES2["UNKNOWN_APP_ERROR"] = 100] = "UNKNOWN_APP_ERROR";
  CONNECT_EVENT_ERROR_CODES2[CONNECT_EVENT_ERROR_CODES2["USER_REJECTS_ERROR"] = 300] = "USER_REJECTS_ERROR";
  CONNECT_EVENT_ERROR_CODES2[CONNECT_EVENT_ERROR_CODES2["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
})(CONNECT_EVENT_ERROR_CODES || (CONNECT_EVENT_ERROR_CODES = {}));
var CONNECT_ITEM_ERROR_CODES;
(function(CONNECT_ITEM_ERROR_CODES2) {
  CONNECT_ITEM_ERROR_CODES2[CONNECT_ITEM_ERROR_CODES2["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
  CONNECT_ITEM_ERROR_CODES2[CONNECT_ITEM_ERROR_CODES2["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
})(CONNECT_ITEM_ERROR_CODES || (CONNECT_ITEM_ERROR_CODES = {}));
var SEND_TRANSACTION_ERROR_CODES;
(function(SEND_TRANSACTION_ERROR_CODES2) {
  SEND_TRANSACTION_ERROR_CODES2[SEND_TRANSACTION_ERROR_CODES2["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
  SEND_TRANSACTION_ERROR_CODES2[SEND_TRANSACTION_ERROR_CODES2["BAD_REQUEST_ERROR"] = 1] = "BAD_REQUEST_ERROR";
  SEND_TRANSACTION_ERROR_CODES2[SEND_TRANSACTION_ERROR_CODES2["UNKNOWN_APP_ERROR"] = 100] = "UNKNOWN_APP_ERROR";
  SEND_TRANSACTION_ERROR_CODES2[SEND_TRANSACTION_ERROR_CODES2["USER_REJECTS_ERROR"] = 300] = "USER_REJECTS_ERROR";
  SEND_TRANSACTION_ERROR_CODES2[SEND_TRANSACTION_ERROR_CODES2["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
})(SEND_TRANSACTION_ERROR_CODES || (SEND_TRANSACTION_ERROR_CODES = {}));
var SIGN_DATA_ERROR_CODES;
(function(SIGN_DATA_ERROR_CODES2) {
  SIGN_DATA_ERROR_CODES2[SIGN_DATA_ERROR_CODES2["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
  SIGN_DATA_ERROR_CODES2[SIGN_DATA_ERROR_CODES2["BAD_REQUEST_ERROR"] = 1] = "BAD_REQUEST_ERROR";
  SIGN_DATA_ERROR_CODES2[SIGN_DATA_ERROR_CODES2["UNKNOWN_APP_ERROR"] = 100] = "UNKNOWN_APP_ERROR";
  SIGN_DATA_ERROR_CODES2[SIGN_DATA_ERROR_CODES2["USER_REJECTS_ERROR"] = 300] = "USER_REJECTS_ERROR";
  SIGN_DATA_ERROR_CODES2[SIGN_DATA_ERROR_CODES2["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
})(SIGN_DATA_ERROR_CODES || (SIGN_DATA_ERROR_CODES = {}));
var DISCONNECT_ERROR_CODES;
(function(DISCONNECT_ERROR_CODES2) {
  DISCONNECT_ERROR_CODES2[DISCONNECT_ERROR_CODES2["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
  DISCONNECT_ERROR_CODES2[DISCONNECT_ERROR_CODES2["BAD_REQUEST_ERROR"] = 1] = "BAD_REQUEST_ERROR";
  DISCONNECT_ERROR_CODES2[DISCONNECT_ERROR_CODES2["UNKNOWN_APP_ERROR"] = 100] = "UNKNOWN_APP_ERROR";
  DISCONNECT_ERROR_CODES2[DISCONNECT_ERROR_CODES2["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
})(DISCONNECT_ERROR_CODES || (DISCONNECT_ERROR_CODES = {}));
var CHAIN;
(function(CHAIN2) {
  CHAIN2["MAINNET"] = "-239";
  CHAIN2["TESTNET"] = "-3";
})(CHAIN || (CHAIN = {}));
function encodeUint8Array(value, urlSafe) {
  const encoded = nacl$2.encodeBase64(value);
  if (!urlSafe) {
    return encoded;
  }
  return encodeURIComponent(encoded);
}
function decodeToUint8Array(value, urlSafe) {
  if (urlSafe) {
    value = decodeURIComponent(value);
  }
  return nacl$2.decodeBase64(value);
}
function encode$1(value, urlSafe = false) {
  let uint8Array;
  if (value instanceof Uint8Array) {
    uint8Array = value;
  } else {
    if (typeof value !== "string") {
      value = JSON.stringify(value);
    }
    uint8Array = nacl$2.decodeUTF8(value);
  }
  return encodeUint8Array(uint8Array, urlSafe);
}
function decode(value, urlSafe = false) {
  const decodedUint8Array = decodeToUint8Array(value, urlSafe);
  return {
    toString() {
      return nacl$2.encodeUTF8(decodedUint8Array);
    },
    toObject() {
      try {
        return JSON.parse(nacl$2.encodeUTF8(decodedUint8Array));
      } catch (e2) {
        return null;
      }
    },
    toUint8Array() {
      return decodedUint8Array;
    }
  };
}
const Base64 = {
  encode: encode$1,
  decode
};
function concatUint8Arrays(buffer1, buffer2) {
  const mergedArray = new Uint8Array(buffer1.length + buffer2.length);
  mergedArray.set(buffer1);
  mergedArray.set(buffer2, buffer1.length);
  return mergedArray;
}
function splitToUint8Arrays(array2, index2) {
  if (index2 >= array2.length) {
    throw new Error("Index is out of buffer");
  }
  const subArray1 = array2.slice(0, index2);
  const subArray2 = array2.slice(index2);
  return [subArray1, subArray2];
}
function toHexString(byteArray) {
  let hexString = "";
  byteArray.forEach((byte) => {
    hexString += ("0" + (byte & 255).toString(16)).slice(-2);
  });
  return hexString;
}
function hexToByteArray(hexString) {
  if (hexString.length % 2 !== 0) {
    throw new Error(`Cannot convert ${hexString} to bytesArray`);
  }
  const result = new Uint8Array(hexString.length / 2);
  for (let i2 = 0; i2 < hexString.length; i2 += 2) {
    result[i2 / 2] = parseInt(hexString.slice(i2, i2 + 2), 16);
  }
  return result;
}
class SessionCrypto {
  constructor(keyPair) {
    this.nonceLength = 24;
    this.keyPair = keyPair ? this.createKeypairFromString(keyPair) : this.createKeypair();
    this.sessionId = toHexString(this.keyPair.publicKey);
  }
  createKeypair() {
    return nacl$1.box.keyPair();
  }
  createKeypairFromString(keyPair) {
    return {
      publicKey: hexToByteArray(keyPair.publicKey),
      secretKey: hexToByteArray(keyPair.secretKey)
    };
  }
  createNonce() {
    return nacl$1.randomBytes(this.nonceLength);
  }
  encrypt(message2, receiverPublicKey) {
    const encodedMessage = new TextEncoder().encode(message2);
    const nonce = this.createNonce();
    const encrypted = nacl$1.box(encodedMessage, nonce, receiverPublicKey, this.keyPair.secretKey);
    return concatUint8Arrays(nonce, encrypted);
  }
  decrypt(message2, senderPublicKey) {
    const [nonce, internalMessage] = splitToUint8Arrays(message2, this.nonceLength);
    const decrypted = nacl$1.box.open(internalMessage, nonce, senderPublicKey, this.keyPair.secretKey);
    if (!decrypted) {
      throw new Error(`Decryption error: 
 message: ${message2.toString()} 
 sender pubkey: ${senderPublicKey.toString()} 
 keypair pubkey: ${this.keyPair.publicKey.toString()} 
 keypair secretkey: ${this.keyPair.secretKey.toString()}`);
    }
    return new TextDecoder().decode(decrypted);
  }
  stringifyKeypair() {
    return {
      publicKey: toHexString(this.keyPair.publicKey),
      secretKey: toHexString(this.keyPair.secretKey)
    };
  }
}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function __rest(s2, e2) {
  var t2 = {};
  for (var p2 in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
}
function __awaiter(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
class TonConnectError extends Error {
  constructor(message2, options) {
    super(message2, options);
    this.message = `${TonConnectError.prefix} ${this.constructor.name}${this.info ? ": " + this.info : ""}${message2 ? "\n" + message2 : ""}`;
    Object.setPrototypeOf(this, TonConnectError.prototype);
  }
  get info() {
    return "";
  }
}
TonConnectError.prefix = "[TON_CONNECT_SDK_ERROR]";
class DappMetadataError extends TonConnectError {
  get info() {
    return "Passed DappMetadata is in incorrect format.";
  }
  constructor(...args) {
    super(...args);
    Object.setPrototypeOf(this, DappMetadataError.prototype);
  }
}
class ManifestContentErrorError extends TonConnectError {
  get info() {
    return "Passed `tonconnect-manifest.json` contains errors. Check format of your manifest. See more https://github.com/ton-connect/docs/blob/main/requests-responses.md#app-manifest";
  }
  constructor(...args) {
    super(...args);
    Object.setPrototypeOf(this, ManifestContentErrorError.prototype);
  }
}
class ManifestNotFoundError extends TonConnectError {
  get info() {
    return "Manifest not found. Make sure you added `tonconnect-manifest.json` to the root of your app or passed correct manifestUrl. See more https://github.com/ton-connect/docs/blob/main/requests-responses.md#app-manifest";
  }
  constructor(...args) {
    super(...args);
    Object.setPrototypeOf(this, ManifestNotFoundError.prototype);
  }
}
class WalletAlreadyConnectedError extends TonConnectError {
  get info() {
    return "Wallet connection called but wallet already connected. To avoid the error, disconnect the wallet before doing a new connection.";
  }
  constructor(...args) {
    super(...args);
    Object.setPrototypeOf(this, WalletAlreadyConnectedError.prototype);
  }
}
class WalletNotConnectedError extends TonConnectError {
  get info() {
    return "Send transaction or other protocol methods called while wallet is not connected.";
  }
  constructor(...args) {
    super(...args);
    Object.setPrototypeOf(this, WalletNotConnectedError.prototype);
  }
}
function isWalletConnectionSourceJS(value) {
  return "jsBridgeKey" in value;
}
class UserRejectsError extends TonConnectError {
  get info() {
    return "User rejects the action in the wallet.";
  }
  constructor(...args) {
    super(...args);
    Object.setPrototypeOf(this, UserRejectsError.prototype);
  }
}
class BadRequestError extends TonConnectError {
  get info() {
    return "Request to the wallet contains errors.";
  }
  constructor(...args) {
    super(...args);
    Object.setPrototypeOf(this, BadRequestError.prototype);
  }
}
class UnknownAppError extends TonConnectError {
  get info() {
    return "App tries to send rpc request to the injected wallet while not connected.";
  }
  constructor(...args) {
    super(...args);
    Object.setPrototypeOf(this, UnknownAppError.prototype);
  }
}
class WalletNotInjectedError extends TonConnectError {
  get info() {
    return "There is an attempt to connect to the injected wallet while it is not exists in the webpage.";
  }
  constructor(...args) {
    super(...args);
    Object.setPrototypeOf(this, WalletNotInjectedError.prototype);
  }
}
class FetchWalletsError extends TonConnectError {
  get info() {
    return "An error occurred while fetching the wallets list.";
  }
  constructor(...args) {
    super(...args);
    Object.setPrototypeOf(this, FetchWalletsError.prototype);
  }
}
class WrongAddressError extends TonConnectError {
  get info() {
    return "Passed address is in incorrect format.";
  }
  constructor(...args) {
    super(...args);
    Object.setPrototypeOf(this, WrongAddressError.prototype);
  }
}
class ParseHexError extends TonConnectError {
  get info() {
    return "Passed hex is in incorrect format.";
  }
  constructor(...args) {
    super(...args);
    Object.setPrototypeOf(this, ParseHexError.prototype);
  }
}
class UnknownError extends TonConnectError {
  constructor(...args) {
    super(...args);
    Object.setPrototypeOf(this, UnknownError.prototype);
  }
}
const connectEventErrorsCodes = {
  [CONNECT_EVENT_ERROR_CODES.UNKNOWN_ERROR]: UnknownError,
  [CONNECT_EVENT_ERROR_CODES.USER_REJECTS_ERROR]: UserRejectsError,
  [CONNECT_EVENT_ERROR_CODES.BAD_REQUEST_ERROR]: BadRequestError,
  [CONNECT_EVENT_ERROR_CODES.UNKNOWN_APP_ERROR]: UnknownAppError,
  [CONNECT_EVENT_ERROR_CODES.MANIFEST_NOT_FOUND_ERROR]: ManifestNotFoundError,
  [CONNECT_EVENT_ERROR_CODES.MANIFEST_CONTENT_ERROR]: ManifestContentErrorError
};
class ConnectErrorsParser {
  parseError(error) {
    let ErrorConstructor = UnknownError;
    if (error.code in connectEventErrorsCodes) {
      ErrorConstructor = connectEventErrorsCodes[error.code] || UnknownError;
    }
    return new ErrorConstructor(error.message);
  }
}
const connectErrorsParser = new ConnectErrorsParser();
class RpcParser {
  isError(response) {
    return "error" in response;
  }
}
const sendTransactionErrors = {
  [SEND_TRANSACTION_ERROR_CODES.UNKNOWN_ERROR]: UnknownError,
  [SEND_TRANSACTION_ERROR_CODES.USER_REJECTS_ERROR]: UserRejectsError,
  [SEND_TRANSACTION_ERROR_CODES.BAD_REQUEST_ERROR]: BadRequestError,
  [SEND_TRANSACTION_ERROR_CODES.UNKNOWN_APP_ERROR]: UnknownAppError
};
class SendTransactionParser extends RpcParser {
  convertToRpcRequest(request2) {
    return {
      method: "sendTransaction",
      params: [JSON.stringify(request2)]
    };
  }
  parseAndThrowError(response) {
    let ErrorConstructor = UnknownError;
    if (response.error.code in sendTransactionErrors) {
      ErrorConstructor = sendTransactionErrors[response.error.code] || UnknownError;
    }
    throw new ErrorConstructor(response.error.message);
  }
  convertFromRpcResponse(rpcResponse) {
    return {
      boc: rpcResponse.result
    };
  }
}
const sendTransactionParser = new SendTransactionParser();
class HttpBridgeGatewayStorage {
  constructor(storage, bridgeUrl) {
    this.storage = storage;
    this.storeKey = "ton-connect-storage_http-bridge-gateway::" + bridgeUrl;
  }
  storeLastEventId(lastEventId) {
    return __awaiter(this, void 0, void 0, function* () {
      return this.storage.setItem(this.storeKey, lastEventId);
    });
  }
  removeLastEventId() {
    return __awaiter(this, void 0, void 0, function* () {
      return this.storage.removeItem(this.storeKey);
    });
  }
  getLastEventId() {
    return __awaiter(this, void 0, void 0, function* () {
      const stored = yield this.storage.getItem(this.storeKey);
      if (!stored) {
        return null;
      }
      return stored;
    });
  }
}
function removeUrlLastSlash(url) {
  if (url.slice(-1) === "/") {
    return url.slice(0, -1);
  }
  return url;
}
function addPathToUrl(url, path) {
  return removeUrlLastSlash(url) + "/" + path;
}
function isTelegramUrl(link) {
  if (!link) {
    return false;
  }
  const url = new URL(link);
  return url.protocol === "tg:" || url.hostname === "t.me";
}
function encodeTelegramUrlParameters(parameters) {
  return parameters.replaceAll(".", "%2E").replaceAll("-", "%2D").replaceAll("_", "%5F").replaceAll("&", "-").replaceAll("=", "__").replaceAll("%", "--");
}
function delay(timeout2, options) {
  return __awaiter(this, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
      var _a2, _b2;
      if ((_a2 = options === null || options === void 0 ? void 0 : options.signal) === null || _a2 === void 0 ? void 0 : _a2.aborted) {
        reject(new TonConnectError("Delay aborted"));
        return;
      }
      const timeoutId = setTimeout(() => resolve(), timeout2);
      (_b2 = options === null || options === void 0 ? void 0 : options.signal) === null || _b2 === void 0 ? void 0 : _b2.addEventListener("abort", () => {
        clearTimeout(timeoutId);
        reject(new TonConnectError("Delay aborted"));
      });
    });
  });
}
function createAbortController(signal) {
  const abortController = new AbortController();
  if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
    abortController.abort();
  } else {
    signal === null || signal === void 0 ? void 0 : signal.addEventListener("abort", () => abortController.abort(), { once: true });
  }
  return abortController;
}
function callForSuccess(fn, options) {
  var _a2, _b2;
  return __awaiter(this, void 0, void 0, function* () {
    const attempts = (_a2 = options === null || options === void 0 ? void 0 : options.attempts) !== null && _a2 !== void 0 ? _a2 : 10;
    const delayMs = (_b2 = options === null || options === void 0 ? void 0 : options.delayMs) !== null && _b2 !== void 0 ? _b2 : 200;
    const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
    if (typeof fn !== "function") {
      throw new TonConnectError(`Expected a function, got ${typeof fn}`);
    }
    let i2 = 0;
    let lastError;
    while (i2 < attempts) {
      if (abortController.signal.aborted) {
        throw new TonConnectError(`Aborted after attempts ${i2}`);
      }
      try {
        return yield fn({ signal: abortController.signal });
      } catch (err) {
        lastError = err;
        i2++;
        if (i2 < attempts) {
          yield delay(delayMs);
        }
      }
    }
    throw lastError;
  });
}
function logDebug$1(...args) {
  {
    try {
      console.debug("[TON_CONNECT_SDK]", ...args);
    } catch (_a2) {
    }
  }
}
function logError$1(...args) {
  {
    try {
      console.error("[TON_CONNECT_SDK]", ...args);
    } catch (_a2) {
    }
  }
}
function logWarning$1(...args) {
  {
    try {
      console.warn("[TON_CONNECT_SDK]", ...args);
    } catch (_a2) {
    }
  }
}
function createResource$1(createFn, disposeFn) {
  let currentResource = null;
  let currentArgs = null;
  let currentPromise = null;
  let currentSignal = null;
  let abortController = null;
  const create = (signal, ...args) => __awaiter(this, void 0, void 0, function* () {
    currentSignal = signal !== null && signal !== void 0 ? signal : null;
    abortController === null || abortController === void 0 ? void 0 : abortController.abort();
    abortController = createAbortController(signal);
    if (abortController.signal.aborted) {
      throw new TonConnectError("Resource creation was aborted");
    }
    currentArgs = args !== null && args !== void 0 ? args : null;
    const promise = createFn(abortController.signal, ...args);
    currentPromise = promise;
    const resource = yield promise;
    if (currentPromise !== promise && resource !== currentResource) {
      yield disposeFn(resource);
      throw new TonConnectError("Resource creation was aborted by a new resource creation");
    }
    currentResource = resource;
    return currentResource;
  });
  const current = () => {
    return currentResource !== null && currentResource !== void 0 ? currentResource : null;
  };
  const dispose2 = () => __awaiter(this, void 0, void 0, function* () {
    try {
      const resource = currentResource;
      currentResource = null;
      const promise = currentPromise;
      currentPromise = null;
      try {
        abortController === null || abortController === void 0 ? void 0 : abortController.abort();
      } catch (e2) {
      }
      yield Promise.allSettled([
        resource ? disposeFn(resource) : Promise.resolve(),
        promise ? disposeFn(yield promise) : Promise.resolve()
      ]);
    } catch (e2) {
    }
  });
  const recreate = (delayMs) => __awaiter(this, void 0, void 0, function* () {
    const resource = currentResource;
    const promise = currentPromise;
    const args = currentArgs;
    const signal = currentSignal;
    yield delay(delayMs);
    if (resource === currentResource && promise === currentPromise && args === currentArgs && signal === currentSignal) {
      return yield create(currentSignal, ...args !== null && args !== void 0 ? args : []);
    }
    throw new TonConnectError("Resource recreation was aborted by a new resource creation");
  });
  return {
    create,
    current,
    dispose: dispose2,
    recreate
  };
}
function timeout(fn, options) {
  const timeout2 = options === null || options === void 0 ? void 0 : options.timeout;
  const signal = options === null || options === void 0 ? void 0 : options.signal;
  const abortController = createAbortController(signal);
  return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
    if (abortController.signal.aborted) {
      reject(new TonConnectError("Operation aborted"));
      return;
    }
    let timeoutId;
    if (typeof timeout2 !== "undefined") {
      timeoutId = setTimeout(() => {
        abortController.abort();
        reject(new TonConnectError(`Timeout after ${timeout2}ms`));
      }, timeout2);
    }
    abortController.signal.addEventListener("abort", () => {
      clearTimeout(timeoutId);
      reject(new TonConnectError("Operation aborted"));
    }, { once: true });
    const deferOptions = { timeout: timeout2, abort: abortController.signal };
    yield fn((...args) => {
      clearTimeout(timeoutId);
      resolve(...args);
    }, () => {
      clearTimeout(timeoutId);
      reject();
    }, deferOptions);
  }));
}
class BridgeGateway {
  constructor(storage, bridgeUrl, sessionId, listener, errorsListener) {
    this.bridgeUrl = bridgeUrl;
    this.sessionId = sessionId;
    this.listener = listener;
    this.errorsListener = errorsListener;
    this.ssePath = "events";
    this.postPath = "message";
    this.heartbeatMessage = "heartbeat";
    this.defaultTtl = 300;
    this.defaultReconnectDelay = 2e3;
    this.defaultResendDelay = 5e3;
    this.eventSource = createResource$1((signal, openingDeadlineMS) => __awaiter(this, void 0, void 0, function* () {
      const eventSourceConfig = {
        bridgeUrl: this.bridgeUrl,
        ssePath: this.ssePath,
        sessionId: this.sessionId,
        bridgeGatewayStorage: this.bridgeGatewayStorage,
        errorHandler: this.errorsHandler.bind(this),
        messageHandler: this.messagesHandler.bind(this),
        signal,
        openingDeadlineMS
      };
      return yield createEventSource(eventSourceConfig);
    }), (resource) => __awaiter(this, void 0, void 0, function* () {
      resource.close();
    }));
    this.bridgeGatewayStorage = new HttpBridgeGatewayStorage(storage, bridgeUrl);
  }
  get isReady() {
    const eventSource = this.eventSource.current();
    return (eventSource === null || eventSource === void 0 ? void 0 : eventSource.readyState) === EventSource.OPEN;
  }
  get isClosed() {
    const eventSource = this.eventSource.current();
    return (eventSource === null || eventSource === void 0 ? void 0 : eventSource.readyState) !== EventSource.OPEN;
  }
  get isConnecting() {
    const eventSource = this.eventSource.current();
    return (eventSource === null || eventSource === void 0 ? void 0 : eventSource.readyState) === EventSource.CONNECTING;
  }
  registerSession(options) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.eventSource.create(options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.openingDeadlineMS);
    });
  }
  send(message2, receiver, topic, ttlOrOptions) {
    var _a2;
    return __awaiter(this, void 0, void 0, function* () {
      const options = {};
      if (typeof ttlOrOptions === "number") {
        options.ttl = ttlOrOptions;
      } else {
        options.ttl = ttlOrOptions === null || ttlOrOptions === void 0 ? void 0 : ttlOrOptions.ttl;
        options.signal = ttlOrOptions === null || ttlOrOptions === void 0 ? void 0 : ttlOrOptions.signal;
        options.attempts = ttlOrOptions === null || ttlOrOptions === void 0 ? void 0 : ttlOrOptions.attempts;
      }
      const url = new URL(addPathToUrl(this.bridgeUrl, this.postPath));
      url.searchParams.append("client_id", this.sessionId);
      url.searchParams.append("to", receiver);
      url.searchParams.append("ttl", ((options === null || options === void 0 ? void 0 : options.ttl) || this.defaultTtl).toString());
      url.searchParams.append("topic", topic);
      const body = Base64.encode(message2);
      yield callForSuccess((options2) => __awaiter(this, void 0, void 0, function* () {
        const response = yield this.post(url, body, options2.signal);
        if (!response.ok) {
          throw new TonConnectError(`Bridge send failed, status ${response.status}`);
        }
      }), {
        attempts: (_a2 = options === null || options === void 0 ? void 0 : options.attempts) !== null && _a2 !== void 0 ? _a2 : Number.MAX_SAFE_INTEGER,
        delayMs: this.defaultResendDelay,
        signal: options === null || options === void 0 ? void 0 : options.signal
      });
    });
  }
  pause() {
    this.eventSource.dispose().catch((e2) => logError$1(`Bridge pause failed, ${e2}`));
  }
  unPause() {
    return __awaiter(this, void 0, void 0, function* () {
      const RECREATE_WITHOUT_DELAY = 0;
      yield this.eventSource.recreate(RECREATE_WITHOUT_DELAY);
    });
  }
  close() {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.eventSource.dispose().catch((e2) => logError$1(`Bridge close failed, ${e2}`));
    });
  }
  setListener(listener) {
    this.listener = listener;
  }
  setErrorsListener(errorsListener) {
    this.errorsListener = errorsListener;
  }
  post(url, body, signal) {
    return __awaiter(this, void 0, void 0, function* () {
      const response = yield fetch(url, {
        method: "post",
        body,
        signal
      });
      if (!response.ok) {
        throw new TonConnectError(`Bridge send failed, status ${response.status}`);
      }
      return response;
    });
  }
  errorsHandler(eventSource, e2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.isConnecting) {
        eventSource.close();
        throw new TonConnectError("Bridge error, failed to connect");
      }
      if (this.isReady) {
        try {
          this.errorsListener(e2);
        } catch (e3) {
        }
        return;
      }
      if (this.isClosed) {
        eventSource.close();
        logDebug$1(`Bridge reconnecting, ${this.defaultReconnectDelay}ms delay`);
        return yield this.eventSource.recreate(this.defaultReconnectDelay);
      }
      throw new TonConnectError("Bridge error, unknown state");
    });
  }
  messagesHandler(e2) {
    return __awaiter(this, void 0, void 0, function* () {
      if (e2.data === this.heartbeatMessage) {
        return;
      }
      yield this.bridgeGatewayStorage.storeLastEventId(e2.lastEventId);
      if (this.isClosed) {
        return;
      }
      let bridgeIncomingMessage;
      try {
        bridgeIncomingMessage = JSON.parse(e2.data);
      } catch (e3) {
        throw new TonConnectError(`Bridge message parse failed, message ${e3.data}`);
      }
      this.listener(bridgeIncomingMessage);
    });
  }
}
function createEventSource(config) {
  return __awaiter(this, void 0, void 0, function* () {
    return yield timeout((resolve, reject, deferOptions) => __awaiter(this, void 0, void 0, function* () {
      var _a2;
      const abortController = createAbortController(deferOptions.signal);
      const signal = abortController.signal;
      if (signal.aborted) {
        reject(new TonConnectError("Bridge connection aborted"));
        return;
      }
      const url = new URL(addPathToUrl(config.bridgeUrl, config.ssePath));
      url.searchParams.append("client_id", config.sessionId);
      const lastEventId = yield config.bridgeGatewayStorage.getLastEventId();
      if (lastEventId) {
        url.searchParams.append("last_event_id", lastEventId);
      }
      if (signal.aborted) {
        reject(new TonConnectError("Bridge connection aborted"));
        return;
      }
      const eventSource = new EventSource(url.toString());
      eventSource.onerror = (reason) => __awaiter(this, void 0, void 0, function* () {
        if (signal.aborted) {
          eventSource.close();
          reject(new TonConnectError("Bridge connection aborted"));
          return;
        }
        try {
          const newInstance = yield config.errorHandler(eventSource, reason);
          if (newInstance !== eventSource) {
            eventSource.close();
          }
          if (newInstance && newInstance !== eventSource) {
            resolve(newInstance);
          }
        } catch (e2) {
          eventSource.close();
          reject(e2);
        }
      });
      eventSource.onopen = () => {
        if (signal.aborted) {
          eventSource.close();
          reject(new TonConnectError("Bridge connection aborted"));
          return;
        }
        resolve(eventSource);
      };
      eventSource.onmessage = (event) => {
        if (signal.aborted) {
          eventSource.close();
          reject(new TonConnectError("Bridge connection aborted"));
          return;
        }
        config.messageHandler(event);
      };
      (_a2 = config.signal) === null || _a2 === void 0 ? void 0 : _a2.addEventListener("abort", () => {
        eventSource.close();
        reject(new TonConnectError("Bridge connection aborted"));
      });
    }), { timeout: config.openingDeadlineMS, signal: config.signal });
  });
}
function isPendingConnectionHttp(connection) {
  return !("connectEvent" in connection);
}
class BridgeConnectionStorage {
  constructor(storage) {
    this.storage = storage;
    this.storeKey = "ton-connect-storage_bridge-connection";
  }
  storeConnection(connection) {
    return __awaiter(this, void 0, void 0, function* () {
      if (connection.type === "injected") {
        return this.storage.setItem(this.storeKey, JSON.stringify(connection));
      }
      if (!isPendingConnectionHttp(connection)) {
        const rawSession = {
          sessionKeyPair: connection.session.sessionCrypto.stringifyKeypair(),
          walletPublicKey: connection.session.walletPublicKey,
          bridgeUrl: connection.session.bridgeUrl
        };
        const rawConnection2 = {
          type: "http",
          connectEvent: connection.connectEvent,
          session: rawSession,
          lastWalletEventId: connection.lastWalletEventId,
          nextRpcRequestId: connection.nextRpcRequestId
        };
        return this.storage.setItem(this.storeKey, JSON.stringify(rawConnection2));
      }
      const rawConnection = {
        type: "http",
        connectionSource: connection.connectionSource,
        sessionCrypto: connection.sessionCrypto.stringifyKeypair()
      };
      return this.storage.setItem(this.storeKey, JSON.stringify(rawConnection));
    });
  }
  removeConnection() {
    return __awaiter(this, void 0, void 0, function* () {
      return this.storage.removeItem(this.storeKey);
    });
  }
  getConnection() {
    return __awaiter(this, void 0, void 0, function* () {
      const stored = yield this.storage.getItem(this.storeKey);
      if (!stored) {
        return null;
      }
      const connection = JSON.parse(stored);
      if (connection.type === "injected") {
        return connection;
      }
      if ("connectEvent" in connection) {
        const sessionCrypto = new SessionCrypto(connection.session.sessionKeyPair);
        return {
          type: "http",
          connectEvent: connection.connectEvent,
          lastWalletEventId: connection.lastWalletEventId,
          nextRpcRequestId: connection.nextRpcRequestId,
          session: {
            sessionCrypto,
            bridgeUrl: connection.session.bridgeUrl,
            walletPublicKey: connection.session.walletPublicKey
          }
        };
      }
      return {
        type: "http",
        sessionCrypto: new SessionCrypto(connection.sessionCrypto),
        connectionSource: connection.connectionSource
      };
    });
  }
  getHttpConnection() {
    return __awaiter(this, void 0, void 0, function* () {
      const connection = yield this.getConnection();
      if (!connection) {
        throw new TonConnectError("Trying to read HTTP connection source while nothing is stored");
      }
      if (connection.type === "injected") {
        throw new TonConnectError("Trying to read HTTP connection source while injected connection is stored");
      }
      return connection;
    });
  }
  getHttpPendingConnection() {
    return __awaiter(this, void 0, void 0, function* () {
      const connection = yield this.getConnection();
      if (!connection) {
        throw new TonConnectError("Trying to read HTTP connection source while nothing is stored");
      }
      if (connection.type === "injected") {
        throw new TonConnectError("Trying to read HTTP connection source while injected connection is stored");
      }
      if (!isPendingConnectionHttp(connection)) {
        throw new TonConnectError("Trying to read HTTP-pending connection while http connection is stored");
      }
      return connection;
    });
  }
  getInjectedConnection() {
    return __awaiter(this, void 0, void 0, function* () {
      const connection = yield this.getConnection();
      if (!connection) {
        throw new TonConnectError("Trying to read Injected bridge connection source while nothing is stored");
      }
      if ((connection === null || connection === void 0 ? void 0 : connection.type) === "http") {
        throw new TonConnectError("Trying to read Injected bridge connection source while HTTP connection is stored");
      }
      return connection;
    });
  }
  storedConnectionType() {
    return __awaiter(this, void 0, void 0, function* () {
      const stored = yield this.storage.getItem(this.storeKey);
      if (!stored) {
        return null;
      }
      const connection = JSON.parse(stored);
      return connection.type;
    });
  }
  storeLastWalletEventId(id2) {
    return __awaiter(this, void 0, void 0, function* () {
      const connection = yield this.getConnection();
      if (connection && connection.type === "http" && !isPendingConnectionHttp(connection)) {
        connection.lastWalletEventId = id2;
        return this.storeConnection(connection);
      }
    });
  }
  getLastWalletEventId() {
    return __awaiter(this, void 0, void 0, function* () {
      const connection = yield this.getConnection();
      if (connection && "lastWalletEventId" in connection) {
        return connection.lastWalletEventId;
      }
      return void 0;
    });
  }
  increaseNextRpcRequestId() {
    return __awaiter(this, void 0, void 0, function* () {
      const connection = yield this.getConnection();
      if (connection && "nextRpcRequestId" in connection) {
        const lastId = connection.nextRpcRequestId || 0;
        connection.nextRpcRequestId = lastId + 1;
        return this.storeConnection(connection);
      }
    });
  }
  getNextRpcRequestId() {
    return __awaiter(this, void 0, void 0, function* () {
      const connection = yield this.getConnection();
      if (connection && "nextRpcRequestId" in connection) {
        return connection.nextRpcRequestId || 0;
      }
      return 0;
    });
  }
}
const PROTOCOL_VERSION = 2;
class BridgeProvider {
  constructor(storage, walletConnectionSource) {
    this.storage = storage;
    this.walletConnectionSource = walletConnectionSource;
    this.type = "http";
    this.standardUniversalLink = "tc://";
    this.pendingRequests = /* @__PURE__ */ new Map();
    this.session = null;
    this.gateway = null;
    this.pendingGateways = [];
    this.listeners = [];
    this.defaultOpeningDeadlineMS = 12e3;
    this.defaultRetryTimeoutMS = 2e3;
    this.connectionStorage = new BridgeConnectionStorage(storage);
  }
  static fromStorage(storage) {
    return __awaiter(this, void 0, void 0, function* () {
      const bridgeConnectionStorage = new BridgeConnectionStorage(storage);
      const connection = yield bridgeConnectionStorage.getHttpConnection();
      if (isPendingConnectionHttp(connection)) {
        return new BridgeProvider(storage, connection.connectionSource);
      }
      return new BridgeProvider(storage, { bridgeUrl: connection.session.bridgeUrl });
    });
  }
  connect(message2, options) {
    var _a2;
    const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
    (_a2 = this.abortController) === null || _a2 === void 0 ? void 0 : _a2.abort();
    this.abortController = abortController;
    this.closeGateways();
    const sessionCrypto = new SessionCrypto();
    this.session = {
      sessionCrypto,
      bridgeUrl: "bridgeUrl" in this.walletConnectionSource ? this.walletConnectionSource.bridgeUrl : ""
    };
    this.connectionStorage.storeConnection({
      type: "http",
      connectionSource: this.walletConnectionSource,
      sessionCrypto
    }).then(() => __awaiter(this, void 0, void 0, function* () {
      if (abortController.signal.aborted) {
        return;
      }
      yield callForSuccess((_options) => {
        var _a3;
        return this.openGateways(sessionCrypto, {
          openingDeadlineMS: (_a3 = options === null || options === void 0 ? void 0 : options.openingDeadlineMS) !== null && _a3 !== void 0 ? _a3 : this.defaultOpeningDeadlineMS,
          signal: _options === null || _options === void 0 ? void 0 : _options.signal
        });
      }, {
        attempts: Number.MAX_SAFE_INTEGER,
        delayMs: this.defaultRetryTimeoutMS,
        signal: abortController.signal
      });
    }));
    const universalLink = "universalLink" in this.walletConnectionSource && this.walletConnectionSource.universalLink ? this.walletConnectionSource.universalLink : this.standardUniversalLink;
    return this.generateUniversalLink(universalLink, message2);
  }
  restoreConnection(options) {
    var _a2, _b2;
    return __awaiter(this, void 0, void 0, function* () {
      const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
      (_a2 = this.abortController) === null || _a2 === void 0 ? void 0 : _a2.abort();
      this.abortController = abortController;
      if (abortController.signal.aborted) {
        return;
      }
      this.closeGateways();
      const storedConnection = yield this.connectionStorage.getHttpConnection();
      if (!storedConnection) {
        return;
      }
      if (abortController.signal.aborted) {
        return;
      }
      const openingDeadlineMS = (_b2 = options === null || options === void 0 ? void 0 : options.openingDeadlineMS) !== null && _b2 !== void 0 ? _b2 : this.defaultOpeningDeadlineMS;
      if (isPendingConnectionHttp(storedConnection)) {
        this.session = {
          sessionCrypto: storedConnection.sessionCrypto,
          bridgeUrl: "bridgeUrl" in this.walletConnectionSource ? this.walletConnectionSource.bridgeUrl : ""
        };
        return yield this.openGateways(storedConnection.sessionCrypto, {
          openingDeadlineMS,
          signal: abortController === null || abortController === void 0 ? void 0 : abortController.signal
        });
      }
      if (Array.isArray(this.walletConnectionSource)) {
        throw new TonConnectError("Internal error. Connection source is array while WalletConnectionSourceHTTP was expected.");
      }
      this.session = storedConnection.session;
      if (this.gateway) {
        logDebug$1("Gateway is already opened, closing previous gateway");
        yield this.gateway.close();
      }
      this.gateway = new BridgeGateway(this.storage, this.walletConnectionSource.bridgeUrl, storedConnection.session.sessionCrypto.sessionId, this.gatewayListener.bind(this), this.gatewayErrorsListener.bind(this));
      if (abortController.signal.aborted) {
        return;
      }
      this.listeners.forEach((listener) => listener(storedConnection.connectEvent));
      try {
        yield callForSuccess((options2) => this.gateway.registerSession({
          openingDeadlineMS,
          signal: options2.signal
        }), {
          attempts: Number.MAX_SAFE_INTEGER,
          delayMs: this.defaultRetryTimeoutMS,
          signal: abortController.signal
        });
      } catch (e2) {
        yield this.disconnect({ signal: abortController.signal });
        return;
      }
    });
  }
  sendRequest(request2, optionsOrOnRequestSent) {
    const options = {};
    if (typeof optionsOrOnRequestSent === "function") {
      options.onRequestSent = optionsOrOnRequestSent;
    } else {
      options.onRequestSent = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.onRequestSent;
      options.signal = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.signal;
      options.attempts = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.attempts;
    }
    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
      var _a2;
      if (!this.gateway || !this.session || !("walletPublicKey" in this.session)) {
        throw new TonConnectError("Trying to send bridge request without session");
      }
      const id2 = (yield this.connectionStorage.getNextRpcRequestId()).toString();
      yield this.connectionStorage.increaseNextRpcRequestId();
      logDebug$1("Send http-bridge request:", Object.assign(Object.assign({}, request2), { id: id2 }));
      const encodedRequest = this.session.sessionCrypto.encrypt(JSON.stringify(Object.assign(Object.assign({}, request2), { id: id2 })), hexToByteArray(this.session.walletPublicKey));
      try {
        yield this.gateway.send(encodedRequest, this.session.walletPublicKey, request2.method, { attempts: options === null || options === void 0 ? void 0 : options.attempts, signal: options === null || options === void 0 ? void 0 : options.signal });
        (_a2 = options === null || options === void 0 ? void 0 : options.onRequestSent) === null || _a2 === void 0 ? void 0 : _a2.call(options);
        this.pendingRequests.set(id2.toString(), resolve);
      } catch (e2) {
        reject(e2);
      }
    }));
  }
  closeConnection() {
    this.closeGateways();
    this.listeners = [];
    this.session = null;
    this.gateway = null;
  }
  disconnect(options) {
    return __awaiter(this, void 0, void 0, function* () {
      return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
        let called = false;
        let timeoutId = null;
        const onRequestSent = () => {
          if (!called) {
            called = true;
            this.removeBridgeAndSession().then(resolve);
          }
        };
        try {
          this.closeGateways();
          const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
          timeoutId = setTimeout(() => {
            abortController.abort();
          }, this.defaultOpeningDeadlineMS);
          yield this.sendRequest({ method: "disconnect", params: [] }, {
            onRequestSent,
            signal: abortController.signal,
            attempts: 1
          });
        } catch (e2) {
          logDebug$1("Disconnect error:", e2);
          if (!called) {
            this.removeBridgeAndSession().then(resolve);
          }
        } finally {
          if (timeoutId) {
            clearTimeout(timeoutId);
          }
          onRequestSent();
        }
      }));
    });
  }
  listen(callback) {
    this.listeners.push(callback);
    return () => this.listeners = this.listeners.filter((listener) => listener !== callback);
  }
  pause() {
    var _a2;
    (_a2 = this.gateway) === null || _a2 === void 0 ? void 0 : _a2.pause();
    this.pendingGateways.forEach((bridge) => bridge.pause());
  }
  unPause() {
    return __awaiter(this, void 0, void 0, function* () {
      const promises = this.pendingGateways.map((bridge) => bridge.unPause());
      if (this.gateway) {
        promises.push(this.gateway.unPause());
      }
      yield Promise.all(promises);
    });
  }
  pendingGatewaysListener(gateway, bridgeUrl, bridgeIncomingMessage) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.pendingGateways.includes(gateway)) {
        yield gateway.close();
        return;
      }
      this.closeGateways({ except: gateway });
      if (this.gateway) {
        logDebug$1("Gateway is already opened, closing previous gateway");
        yield this.gateway.close();
      }
      this.session.bridgeUrl = bridgeUrl;
      this.gateway = gateway;
      this.gateway.setErrorsListener(this.gatewayErrorsListener.bind(this));
      this.gateway.setListener(this.gatewayListener.bind(this));
      return this.gatewayListener(bridgeIncomingMessage);
    });
  }
  gatewayListener(bridgeIncomingMessage) {
    return __awaiter(this, void 0, void 0, function* () {
      const walletMessage = JSON.parse(this.session.sessionCrypto.decrypt(Base64.decode(bridgeIncomingMessage.message).toUint8Array(), hexToByteArray(bridgeIncomingMessage.from)));
      logDebug$1("Wallet message received:", walletMessage);
      if (!("event" in walletMessage)) {
        const id2 = walletMessage.id.toString();
        const resolve = this.pendingRequests.get(id2);
        if (!resolve) {
          logDebug$1(`Response id ${id2} doesn't match any request's id`);
          return;
        }
        resolve(walletMessage);
        this.pendingRequests.delete(id2);
        return;
      }
      if (walletMessage.id !== void 0) {
        const lastId = yield this.connectionStorage.getLastWalletEventId();
        if (lastId !== void 0 && walletMessage.id <= lastId) {
          logError$1(`Received event id (=${walletMessage.id}) must be greater than stored last wallet event id (=${lastId}) `);
          return;
        }
        if (walletMessage.event !== "connect") {
          yield this.connectionStorage.storeLastWalletEventId(walletMessage.id);
        }
      }
      const listeners = this.listeners;
      if (walletMessage.event === "connect") {
        yield this.updateSession(walletMessage, bridgeIncomingMessage.from);
      }
      if (walletMessage.event === "disconnect") {
        logDebug$1(`Removing bridge and session: received disconnect event`);
        yield this.removeBridgeAndSession();
      }
      listeners.forEach((listener) => listener(walletMessage));
    });
  }
  gatewayErrorsListener(e2) {
    return __awaiter(this, void 0, void 0, function* () {
      throw new TonConnectError(`Bridge error ${JSON.stringify(e2)}`);
    });
  }
  updateSession(connectEvent, walletPublicKey) {
    return __awaiter(this, void 0, void 0, function* () {
      this.session = Object.assign(Object.assign({}, this.session), { walletPublicKey });
      const tonAddrItem = connectEvent.payload.items.find((item) => item.name === "ton_addr");
      const connectEventToSave = Object.assign(Object.assign({}, connectEvent), { payload: Object.assign(Object.assign({}, connectEvent.payload), { items: [tonAddrItem] }) });
      yield this.connectionStorage.storeConnection({
        type: "http",
        session: this.session,
        lastWalletEventId: connectEvent.id,
        connectEvent: connectEventToSave,
        nextRpcRequestId: 0
      });
    });
  }
  removeBridgeAndSession() {
    return __awaiter(this, void 0, void 0, function* () {
      this.closeConnection();
      yield this.connectionStorage.removeConnection();
    });
  }
  generateUniversalLink(universalLink, message2) {
    if (isTelegramUrl(universalLink)) {
      return this.generateTGUniversalLink(universalLink, message2);
    }
    return this.generateRegularUniversalLink(universalLink, message2);
  }
  generateRegularUniversalLink(universalLink, message2) {
    const url = new URL(universalLink);
    url.searchParams.append("v", PROTOCOL_VERSION.toString());
    url.searchParams.append("id", this.session.sessionCrypto.sessionId);
    url.searchParams.append("r", JSON.stringify(message2));
    return url.toString();
  }
  generateTGUniversalLink(universalLink, message2) {
    const urlToWrap = this.generateRegularUniversalLink("about:blank", message2);
    const linkParams = urlToWrap.split("?")[1];
    const startapp = "tonconnect-" + encodeTelegramUrlParameters(linkParams);
    const updatedUniversalLink = this.convertToDirectLink(universalLink);
    const url = new URL(updatedUniversalLink);
    url.searchParams.append("startapp", startapp);
    return url.toString();
  }
  // TODO: Remove this method after all dApps and the wallets-list.json have been updated
  convertToDirectLink(universalLink) {
    const url = new URL(universalLink);
    if (url.searchParams.has("attach")) {
      url.searchParams.delete("attach");
      url.pathname += "/start";
    }
    return url.toString();
  }
  openGateways(sessionCrypto, options) {
    return __awaiter(this, void 0, void 0, function* () {
      if (Array.isArray(this.walletConnectionSource)) {
        this.pendingGateways.map((bridge) => bridge.close().catch());
        this.pendingGateways = this.walletConnectionSource.map((source) => {
          const gateway = new BridgeGateway(this.storage, source.bridgeUrl, sessionCrypto.sessionId, () => {
          }, () => {
          });
          gateway.setListener((message2) => this.pendingGatewaysListener(gateway, source.bridgeUrl, message2));
          return gateway;
        });
        yield Promise.allSettled(this.pendingGateways.map((bridge) => callForSuccess((_options) => {
          var _a2;
          if (!this.pendingGateways.some((item) => item === bridge)) {
            return bridge.close();
          }
          return bridge.registerSession({
            openingDeadlineMS: (_a2 = options === null || options === void 0 ? void 0 : options.openingDeadlineMS) !== null && _a2 !== void 0 ? _a2 : this.defaultOpeningDeadlineMS,
            signal: _options.signal
          });
        }, {
          attempts: Number.MAX_SAFE_INTEGER,
          delayMs: this.defaultRetryTimeoutMS,
          signal: options === null || options === void 0 ? void 0 : options.signal
        })));
        return;
      } else {
        if (this.gateway) {
          logDebug$1(`Gateway is already opened, closing previous gateway`);
          yield this.gateway.close();
        }
        this.gateway = new BridgeGateway(this.storage, this.walletConnectionSource.bridgeUrl, sessionCrypto.sessionId, this.gatewayListener.bind(this), this.gatewayErrorsListener.bind(this));
        return yield this.gateway.registerSession({
          openingDeadlineMS: options === null || options === void 0 ? void 0 : options.openingDeadlineMS,
          signal: options === null || options === void 0 ? void 0 : options.signal
        });
      }
    });
  }
  closeGateways(options) {
    var _a2;
    (_a2 = this.gateway) === null || _a2 === void 0 ? void 0 : _a2.close();
    this.pendingGateways.filter((item) => item !== (options === null || options === void 0 ? void 0 : options.except)).forEach((bridge) => bridge.close());
    this.pendingGateways = [];
  }
}
function hasProperty(value, propertyKey) {
  return hasProperties(value, [propertyKey]);
}
function hasProperties(value, propertyKeys) {
  if (!value || typeof value !== "object") {
    return false;
  }
  return propertyKeys.every((propertyKey) => propertyKey in value);
}
function isJSBridgeWithMetadata(value) {
  try {
    if (!hasProperty(value, "tonconnect") || !hasProperty(value.tonconnect, "walletInfo")) {
      return false;
    }
    return hasProperties(value.tonconnect.walletInfo, [
      "name",
      "app_name",
      "image",
      "about_url",
      "platforms"
    ]);
  } catch (_a2) {
    return false;
  }
}
let InMemoryStorage$1 = class InMemoryStorage2 {
  constructor() {
    this.storage = {};
  }
  static getInstance() {
    if (!InMemoryStorage2.instance) {
      InMemoryStorage2.instance = new InMemoryStorage2();
    }
    return InMemoryStorage2.instance;
  }
  get length() {
    return Object.keys(this.storage).length;
  }
  clear() {
    this.storage = {};
  }
  getItem(key2) {
    var _a2;
    return (_a2 = this.storage[key2]) !== null && _a2 !== void 0 ? _a2 : null;
  }
  key(index2) {
    var _a2;
    const keys2 = Object.keys(this.storage);
    if (index2 < 0 || index2 >= keys2.length) {
      return null;
    }
    return (_a2 = keys2[index2]) !== null && _a2 !== void 0 ? _a2 : null;
  }
  removeItem(key2) {
    delete this.storage[key2];
  }
  setItem(key2, value) {
    this.storage[key2] = value;
  }
};
function getWindow$2() {
  if (typeof window === "undefined") {
    return void 0;
  }
  return window;
}
function tryGetWindowKeys() {
  const window2 = getWindow$2();
  if (!window2) {
    return [];
  }
  try {
    return Object.keys(window2);
  } catch (_a2) {
    return [];
  }
}
function getDocument() {
  if (typeof document === "undefined") {
    return void 0;
  }
  return document;
}
function getWebPageManifest() {
  var _a2;
  const origin = (_a2 = getWindow$2()) === null || _a2 === void 0 ? void 0 : _a2.location.origin;
  if (origin) {
    return origin + "/tonconnect-manifest.json";
  }
  return "";
}
function tryGetLocalStorage$1() {
  if (isLocalStorageAvailable$1()) {
    return localStorage;
  }
  if (isNodeJs$1()) {
    throw new TonConnectError("`localStorage` is unavailable, but it is required for TonConnect. For more details, see https://github.com/ton-connect/sdk/tree/main/packages/sdk#init-connector");
  }
  return InMemoryStorage$1.getInstance();
}
function isLocalStorageAvailable$1() {
  try {
    return typeof localStorage !== "undefined";
  } catch (_a2) {
    return false;
  }
}
function isNodeJs$1() {
  return typeof process$1 !== "undefined" && process$1.versions != null && process$1.versions.node != null;
}
class InjectedProvider {
  constructor(storage, injectedWalletKey) {
    this.injectedWalletKey = injectedWalletKey;
    this.type = "injected";
    this.unsubscribeCallback = null;
    this.listenSubscriptions = false;
    this.listeners = [];
    const window2 = InjectedProvider.window;
    if (!InjectedProvider.isWindowContainsWallet(window2, injectedWalletKey)) {
      throw new WalletNotInjectedError();
    }
    this.connectionStorage = new BridgeConnectionStorage(storage);
    this.injectedWallet = window2[injectedWalletKey].tonconnect;
  }
  static fromStorage(storage) {
    return __awaiter(this, void 0, void 0, function* () {
      const bridgeConnectionStorage = new BridgeConnectionStorage(storage);
      const connection = yield bridgeConnectionStorage.getInjectedConnection();
      return new InjectedProvider(storage, connection.jsBridgeKey);
    });
  }
  static isWalletInjected(injectedWalletKey) {
    return InjectedProvider.isWindowContainsWallet(this.window, injectedWalletKey);
  }
  static isInsideWalletBrowser(injectedWalletKey) {
    if (InjectedProvider.isWindowContainsWallet(this.window, injectedWalletKey)) {
      return this.window[injectedWalletKey].tonconnect.isWalletBrowser;
    }
    return false;
  }
  static getCurrentlyInjectedWallets() {
    if (!this.window) {
      return [];
    }
    const windowKeys = tryGetWindowKeys();
    const wallets = windowKeys.filter(([_2, value]) => isJSBridgeWithMetadata(value));
    return wallets.map(([jsBridgeKey, wallet]) => ({
      name: wallet.tonconnect.walletInfo.name,
      appName: wallet.tonconnect.walletInfo.app_name,
      aboutUrl: wallet.tonconnect.walletInfo.about_url,
      imageUrl: wallet.tonconnect.walletInfo.image,
      tondns: wallet.tonconnect.walletInfo.tondns,
      jsBridgeKey,
      injected: true,
      embedded: wallet.tonconnect.isWalletBrowser,
      platforms: wallet.tonconnect.walletInfo.platforms
    }));
  }
  static isWindowContainsWallet(window2, injectedWalletKey) {
    return !!window2 && injectedWalletKey in window2 && typeof window2[injectedWalletKey] === "object" && "tonconnect" in window2[injectedWalletKey];
  }
  connect(message2) {
    this._connect(PROTOCOL_VERSION, message2);
  }
  restoreConnection() {
    return __awaiter(this, void 0, void 0, function* () {
      try {
        logDebug$1(`Injected Provider restoring connection...`);
        const connectEvent = yield this.injectedWallet.restoreConnection();
        logDebug$1("Injected Provider restoring connection response", connectEvent);
        if (connectEvent.event === "connect") {
          this.makeSubscriptions();
          this.listeners.forEach((listener) => listener(connectEvent));
        } else {
          yield this.connectionStorage.removeConnection();
        }
      } catch (e2) {
        yield this.connectionStorage.removeConnection();
        console.error(e2);
      }
    });
  }
  closeConnection() {
    if (this.listenSubscriptions) {
      this.injectedWallet.disconnect();
    }
    this.closeAllListeners();
  }
  disconnect() {
    return __awaiter(this, void 0, void 0, function* () {
      return new Promise((resolve) => {
        const onRequestSent = () => {
          this.closeAllListeners();
          this.connectionStorage.removeConnection().then(resolve);
        };
        try {
          this.injectedWallet.disconnect();
          onRequestSent();
        } catch (e2) {
          logDebug$1(e2);
          this.sendRequest({
            method: "disconnect",
            params: []
          }, onRequestSent);
        }
      });
    });
  }
  closeAllListeners() {
    var _a2;
    this.listenSubscriptions = false;
    this.listeners = [];
    (_a2 = this.unsubscribeCallback) === null || _a2 === void 0 ? void 0 : _a2.call(this);
  }
  listen(eventsCallback) {
    this.listeners.push(eventsCallback);
    return () => this.listeners = this.listeners.filter((listener) => listener !== eventsCallback);
  }
  sendRequest(request2, optionsOrOnRequestSent) {
    var _a2;
    return __awaiter(this, void 0, void 0, function* () {
      const options = {};
      if (typeof optionsOrOnRequestSent === "function") {
        options.onRequestSent = optionsOrOnRequestSent;
      } else {
        options.onRequestSent = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.onRequestSent;
        options.signal = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.signal;
      }
      const id2 = (yield this.connectionStorage.getNextRpcRequestId()).toString();
      yield this.connectionStorage.increaseNextRpcRequestId();
      logDebug$1("Send injected-bridge request:", Object.assign(Object.assign({}, request2), { id: id2 }));
      const result = this.injectedWallet.send(Object.assign(Object.assign({}, request2), { id: id2 }));
      result.then((response) => logDebug$1("Wallet message received:", response));
      (_a2 = options === null || options === void 0 ? void 0 : options.onRequestSent) === null || _a2 === void 0 ? void 0 : _a2.call(options);
      return result;
    });
  }
  _connect(protocolVersion, message2) {
    return __awaiter(this, void 0, void 0, function* () {
      try {
        logDebug$1(`Injected Provider connect request: protocolVersion: ${protocolVersion}, message:`, message2);
        const connectEvent = yield this.injectedWallet.connect(protocolVersion, message2);
        logDebug$1("Injected Provider connect response:", connectEvent);
        if (connectEvent.event === "connect") {
          yield this.updateSession();
          this.makeSubscriptions();
        }
        this.listeners.forEach((listener) => listener(connectEvent));
      } catch (e2) {
        logDebug$1("Injected Provider connect error:", e2);
        const connectEventError = {
          event: "connect_error",
          payload: {
            code: 0,
            message: e2 === null || e2 === void 0 ? void 0 : e2.toString()
          }
        };
        this.listeners.forEach((listener) => listener(connectEventError));
      }
    });
  }
  makeSubscriptions() {
    this.listenSubscriptions = true;
    this.unsubscribeCallback = this.injectedWallet.listen((e2) => {
      logDebug$1("Wallet message received:", e2);
      if (this.listenSubscriptions) {
        this.listeners.forEach((listener) => listener(e2));
      }
      if (e2.event === "disconnect") {
        this.disconnect();
      }
    });
  }
  updateSession() {
    return this.connectionStorage.storeConnection({
      type: "injected",
      jsBridgeKey: this.injectedWalletKey,
      nextRpcRequestId: 0
    });
  }
}
InjectedProvider.window = getWindow$2();
class DefaultStorage {
  constructor() {
    this.localStorage = tryGetLocalStorage$1();
  }
  getItem(key2) {
    return __awaiter(this, void 0, void 0, function* () {
      return this.localStorage.getItem(key2);
    });
  }
  removeItem(key2) {
    return __awaiter(this, void 0, void 0, function* () {
      this.localStorage.removeItem(key2);
    });
  }
  setItem(key2, value) {
    return __awaiter(this, void 0, void 0, function* () {
      this.localStorage.setItem(key2, value);
    });
  }
}
function isWalletInfoCurrentlyInjected(value) {
  return isWalletInfoInjectable(value) && value.injected;
}
function isWalletInfoCurrentlyEmbedded(value) {
  return isWalletInfoCurrentlyInjected(value) && value.embedded;
}
function isWalletInfoInjectable(value) {
  return "jsBridgeKey" in value;
}
function isWalletInfoRemote(value) {
  return "bridgeUrl" in value;
}
const FALLBACK_WALLETS_LIST = [
  {
    app_name: "telegram-wallet",
    name: "Wallet",
    image: "https://wallet.tg/images/logo-288.png",
    about_url: "https://wallet.tg/",
    universal_url: "https://t.me/wallet?attach=wallet",
    bridge: [
      {
        type: "sse",
        url: "https://bridge.ton.space/bridge"
      }
    ],
    platforms: ["ios", "android", "macos", "windows", "linux"]
  },
  {
    app_name: "tonkeeper",
    name: "Tonkeeper",
    image: "https://tonkeeper.com/assets/tonconnect-icon.png",
    tondns: "tonkeeper.ton",
    about_url: "https://tonkeeper.com",
    universal_url: "https://app.tonkeeper.com/ton-connect",
    deepLink: "tonkeeper-tc://",
    bridge: [
      {
        type: "sse",
        url: "https://bridge.tonapi.io/bridge"
      },
      {
        type: "js",
        key: "tonkeeper"
      }
    ],
    platforms: ["ios", "android", "chrome", "firefox", "macos"]
  },
  {
    app_name: "mytonwallet",
    name: "MyTonWallet",
    image: "https://static.mytonwallet.io/icon-256.png",
    about_url: "https://mytonwallet.io",
    universal_url: "https://connect.mytonwallet.org",
    bridge: [
      {
        type: "js",
        key: "mytonwallet"
      },
      {
        type: "sse",
        url: "https://tonconnectbridge.mytonwallet.org/bridge/"
      }
    ],
    platforms: ["chrome", "windows", "macos", "linux", "ios", "android", "firefox"]
  },
  {
    app_name: "openmask",
    name: "OpenMask",
    image: "https://raw.githubusercontent.com/OpenProduct/openmask-extension/main/public/openmask-logo-288.png",
    about_url: "https://www.openmask.app/",
    bridge: [
      {
        type: "js",
        key: "openmask"
      }
    ],
    platforms: ["chrome"]
  },
  {
    app_name: "tonhub",
    name: "Tonhub",
    image: "https://tonhub.com/tonconnect_logo.png",
    about_url: "https://tonhub.com",
    universal_url: "https://tonhub.com/ton-connect",
    bridge: [
      {
        type: "js",
        key: "tonhub"
      },
      {
        type: "sse",
        url: "https://connect.tonhubapi.com/tonconnect"
      }
    ],
    platforms: ["ios", "android"]
  },
  {
    app_name: "dewallet",
    name: "DeWallet",
    image: "https://raw.githubusercontent.com/delab-team/manifests-images/main/WalletAvatar.png",
    about_url: "https://delabwallet.com",
    universal_url: "https://t.me/dewallet?attach=wallet",
    bridge: [
      {
        type: "sse",
        url: "https://sse-bridge.delab.team/bridge"
      }
    ],
    platforms: ["ios", "android"]
  },
  {
    app_name: "xtonwallet",
    name: "XTONWallet",
    image: "https://xtonwallet.com/assets/img/icon-256-back.png",
    about_url: "https://xtonwallet.com",
    bridge: [
      {
        type: "js",
        key: "xtonwallet"
      }
    ],
    platforms: ["chrome", "firefox"]
  },
  {
    app_name: "tonwallet",
    name: "TON Wallet",
    image: "https://wallet.ton.org/assets/ui/qr-logo.png",
    about_url: "https://chrome.google.com/webstore/detail/ton-wallet/nphplpgoakhhjchkkhmiggakijnkhfnd",
    bridge: [
      {
        type: "js",
        key: "tonwallet"
      }
    ],
    platforms: ["chrome"]
  },
  {
    app_name: "bitgetTonWallet",
    name: "Bitget Wallet",
    image: "https://raw.githubusercontent.com/bitkeepwallet/download/main/logo/png/bitget_wallet_logo_0_gas_fee.png",
    about_url: "https://web3.bitget.com",
    deepLink: "bitkeep://",
    bridge: [
      {
        type: "js",
        key: "bitgetTonWallet"
      },
      {
        type: "sse",
        url: "https://bridge.tonapi.io/bridge"
      }
    ],
    platforms: ["ios", "android", "chrome"],
    universal_url: "https://bkcode.vip/ton-connect"
  },
  {
    app_name: "safepalwallet",
    name: "SafePal",
    image: "https://s.pvcliping.com/web/public_image/SafePal_x288.png",
    tondns: "",
    about_url: "https://www.safepal.com",
    universal_url: "https://link.safepal.io/ton-connect",
    deepLink: "safepal-tc://",
    bridge: [
      {
        type: "sse",
        url: "https://ton-bridge.safepal.com/tonbridge/v1/bridge"
      },
      {
        type: "js",
        key: "safepalwallet"
      }
    ],
    platforms: ["ios", "android", "chrome", "firefox"]
  },
  {
    app_name: "okxTonWallet",
    name: "OKX Wallet",
    image: "https://static.okx.com/cdn/assets/imgs/247/58E63FEA47A2B7D7.png",
    about_url: "https://www.okx.com/web3",
    universal_url: "https://www.okx.com/download?appendQuery=true&deeplink=okx://web3/wallet/tonconnect",
    bridge: [
      {
        type: "js",
        key: "okxTonWallet"
      },
      {
        type: "sse",
        url: "https://www.okx.com/tonbridge/discover/rpc/bridge"
      }
    ],
    platforms: ["chrome", "safari", "firefox", "ios", "android"]
  },
  {
    app_name: "okxTonWalletTr",
    name: "OKX TR Wallet",
    image: "https://static.okx.com/cdn/assets/imgs/247/587A8296F0BB640F.png",
    about_url: "https://tr.okx.com/web3",
    universal_url: "https://tr.okx.com/download?appendQuery=true&deeplink=okxtr://web3/wallet/tonconnect",
    bridge: [
      {
        type: "js",
        key: "okxTonWallet"
      },
      {
        type: "sse",
        url: "https://www.okx.com/tonbridge/discover/rpc/bridge"
      }
    ],
    platforms: ["chrome", "safari", "firefox", "ios", "android"]
  }
];
class WalletsListManager {
  constructor(options) {
    this.walletsListCache = null;
    this.walletsListCacheCreationTimestamp = null;
    this.walletsListSource = "https://raw.githubusercontent.com/ton-blockchain/wallets-list/main/wallets-v2.json";
    if (options === null || options === void 0 ? void 0 : options.walletsListSource) {
      this.walletsListSource = options.walletsListSource;
    }
    if (options === null || options === void 0 ? void 0 : options.cacheTTLMs) {
      this.cacheTTLMs = options.cacheTTLMs;
    }
  }
  getWallets() {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.cacheTTLMs && this.walletsListCacheCreationTimestamp && Date.now() > this.walletsListCacheCreationTimestamp + this.cacheTTLMs) {
        this.walletsListCache = null;
      }
      if (!this.walletsListCache) {
        this.walletsListCache = this.fetchWalletsList();
        this.walletsListCache.then(() => {
          this.walletsListCacheCreationTimestamp = Date.now();
        }).catch(() => {
          this.walletsListCache = null;
          this.walletsListCacheCreationTimestamp = null;
        });
      }
      return this.walletsListCache;
    });
  }
  getEmbeddedWallet() {
    return __awaiter(this, void 0, void 0, function* () {
      const walletsList = yield this.getWallets();
      const embeddedWallets = walletsList.filter(isWalletInfoCurrentlyEmbedded);
      if (embeddedWallets.length !== 1) {
        return null;
      }
      return embeddedWallets[0];
    });
  }
  fetchWalletsList() {
    return __awaiter(this, void 0, void 0, function* () {
      let walletsList = [];
      try {
        const walletsResponse = yield fetch(this.walletsListSource);
        walletsList = yield walletsResponse.json();
        if (!Array.isArray(walletsList)) {
          throw new FetchWalletsError("Wrong wallets list format, wallets list must be an array.");
        }
        const wrongFormatWallets = walletsList.filter((wallet) => !this.isCorrectWalletConfigDTO(wallet));
        if (wrongFormatWallets.length) {
          logError$1(`Wallet(s) ${wrongFormatWallets.map((wallet) => wallet.name).join(", ")} config format is wrong. They were removed from the wallets list.`);
          walletsList = walletsList.filter((wallet) => this.isCorrectWalletConfigDTO(wallet));
        }
      } catch (e2) {
        logError$1(e2);
        walletsList = FALLBACK_WALLETS_LIST;
      }
      let currentlyInjectedWallets = [];
      try {
        currentlyInjectedWallets = InjectedProvider.getCurrentlyInjectedWallets();
      } catch (e2) {
        logError$1(e2);
      }
      return this.mergeWalletsLists(this.walletConfigDTOListToWalletConfigList(walletsList), currentlyInjectedWallets);
    });
  }
  walletConfigDTOListToWalletConfigList(walletConfigDTO) {
    return walletConfigDTO.map((walletConfigDTO2) => {
      const walletConfigBase = {
        name: walletConfigDTO2.name,
        appName: walletConfigDTO2.app_name,
        imageUrl: walletConfigDTO2.image,
        aboutUrl: walletConfigDTO2.about_url,
        tondns: walletConfigDTO2.tondns,
        platforms: walletConfigDTO2.platforms
      };
      const walletConfig = walletConfigBase;
      walletConfigDTO2.bridge.forEach((bridge) => {
        if (bridge.type === "sse") {
          walletConfig.bridgeUrl = bridge.url;
          walletConfig.universalLink = walletConfigDTO2.universal_url;
          walletConfig.deepLink = walletConfigDTO2.deepLink;
        }
        if (bridge.type === "js") {
          const jsBridgeKey = bridge.key;
          walletConfig.jsBridgeKey = jsBridgeKey;
          walletConfig.injected = InjectedProvider.isWalletInjected(jsBridgeKey);
          walletConfig.embedded = InjectedProvider.isInsideWalletBrowser(jsBridgeKey);
        }
      });
      return walletConfig;
    });
  }
  mergeWalletsLists(list1, list2) {
    const names = new Set(list1.concat(list2).map((item) => item.name));
    return [...names.values()].map((name2) => {
      const list1Item = list1.find((item) => item.name === name2);
      const list2Item = list2.find((item) => item.name === name2);
      return Object.assign(Object.assign({}, list1Item && Object.assign({}, list1Item)), list2Item && Object.assign({}, list2Item));
    });
  }
  // eslint-disable-next-line complexity
  isCorrectWalletConfigDTO(value) {
    if (!value || !(typeof value === "object")) {
      return false;
    }
    const containsName = "name" in value;
    const containsAppName = "app_name" in value;
    const containsImage = "image" in value;
    const containsAbout = "about_url" in value;
    const containsPlatforms = "platforms" in value;
    if (!containsName || !containsImage || !containsAbout || !containsPlatforms || !containsAppName) {
      return false;
    }
    if (!value.platforms || !Array.isArray(value.platforms) || !value.platforms.length) {
      return false;
    }
    if (!("bridge" in value) || !Array.isArray(value.bridge) || !value.bridge.length) {
      return false;
    }
    const bridge = value.bridge;
    if (bridge.some((item) => !item || typeof item !== "object" || !("type" in item))) {
      return false;
    }
    const sseBridge = bridge.find((item) => item.type === "sse");
    if (sseBridge) {
      if (!("url" in sseBridge) || !sseBridge.url || !value.universal_url) {
        return false;
      }
    }
    const jsBridge = bridge.find((item) => item.type === "js");
    if (jsBridge) {
      if (!("key" in jsBridge) || !jsBridge.key) {
        return false;
      }
    }
    return true;
  }
}
class WalletNotSupportFeatureError extends TonConnectError {
  get info() {
    return "Wallet doesn't support requested feature method.";
  }
  constructor(...args) {
    super(...args);
    Object.setPrototypeOf(this, WalletNotSupportFeatureError.prototype);
  }
}
function checkSendTransactionSupport(features, options) {
  const supportsDeprecatedSendTransactionFeature = features.includes("SendTransaction");
  const sendTransactionFeature = features.find((feature) => feature && typeof feature === "object" && feature.name === "SendTransaction");
  if (!supportsDeprecatedSendTransactionFeature && !sendTransactionFeature) {
    throw new WalletNotSupportFeatureError("Wallet doesn't support SendTransaction feature.");
  }
  if (sendTransactionFeature && sendTransactionFeature.maxMessages !== void 0) {
    if (sendTransactionFeature.maxMessages < options.requiredMessagesNumber) {
      throw new WalletNotSupportFeatureError(`Wallet is not able to handle such SendTransaction request. Max support messages number is ${sendTransactionFeature.maxMessages}, but ${options.requiredMessagesNumber} is required.`);
    }
    return;
  }
  logWarning$1("Connected wallet didn't provide information about max allowed messages in the SendTransaction request. Request may be rejected by the wallet.");
}
function createRequestVersionEvent() {
  return {
    type: "request-version"
  };
}
function createResponseVersionEvent(version2) {
  return {
    type: "response-version",
    version: version2
  };
}
function createVersionInfo(version2) {
  return {
    ton_connect_sdk_lib: version2.ton_connect_sdk_lib,
    ton_connect_ui_lib: version2.ton_connect_ui_lib
  };
}
function createConnectionInfo(version2, wallet) {
  var _a2, _b2, _c2, _d2, _e2, _f2, _g2, _h2;
  const isTonProof = ((_a2 = wallet === null || wallet === void 0 ? void 0 : wallet.connectItems) === null || _a2 === void 0 ? void 0 : _a2.tonProof) && "proof" in wallet.connectItems.tonProof;
  const authType = isTonProof ? "ton_proof" : "ton_addr";
  return {
    wallet_address: (_c2 = (_b2 = wallet === null || wallet === void 0 ? void 0 : wallet.account) === null || _b2 === void 0 ? void 0 : _b2.address) !== null && _c2 !== void 0 ? _c2 : null,
    wallet_type: (_d2 = wallet === null || wallet === void 0 ? void 0 : wallet.device.appName) !== null && _d2 !== void 0 ? _d2 : null,
    wallet_version: (_e2 = wallet === null || wallet === void 0 ? void 0 : wallet.device.appVersion) !== null && _e2 !== void 0 ? _e2 : null,
    auth_type: authType,
    custom_data: Object.assign({ chain_id: (_g2 = (_f2 = wallet === null || wallet === void 0 ? void 0 : wallet.account) === null || _f2 === void 0 ? void 0 : _f2.chain) !== null && _g2 !== void 0 ? _g2 : null, provider: (_h2 = wallet === null || wallet === void 0 ? void 0 : wallet.provider) !== null && _h2 !== void 0 ? _h2 : null }, createVersionInfo(version2))
  };
}
function createConnectionStartedEvent(version2) {
  return {
    type: "connection-started",
    custom_data: createVersionInfo(version2)
  };
}
function createConnectionCompletedEvent(version2, wallet) {
  return Object.assign({ type: "connection-completed", is_success: true }, createConnectionInfo(version2, wallet));
}
function createConnectionErrorEvent(version2, error_message, errorCode) {
  return {
    type: "connection-error",
    is_success: false,
    error_message,
    error_code: errorCode !== null && errorCode !== void 0 ? errorCode : null,
    custom_data: createVersionInfo(version2)
  };
}
function createConnectionRestoringStartedEvent(version2) {
  return {
    type: "connection-restoring-started",
    custom_data: createVersionInfo(version2)
  };
}
function createConnectionRestoringCompletedEvent(version2, wallet) {
  return Object.assign({ type: "connection-restoring-completed", is_success: true }, createConnectionInfo(version2, wallet));
}
function createConnectionRestoringErrorEvent(version2, errorMessage) {
  return {
    type: "connection-restoring-error",
    is_success: false,
    error_message: errorMessage,
    custom_data: createVersionInfo(version2)
  };
}
function createTransactionInfo(wallet, transaction2) {
  var _a2, _b2, _c2, _d2;
  return {
    valid_until: (_a2 = String(transaction2.validUntil)) !== null && _a2 !== void 0 ? _a2 : null,
    from: (_d2 = (_b2 = transaction2.from) !== null && _b2 !== void 0 ? _b2 : (_c2 = wallet === null || wallet === void 0 ? void 0 : wallet.account) === null || _c2 === void 0 ? void 0 : _c2.address) !== null && _d2 !== void 0 ? _d2 : null,
    messages: transaction2.messages.map((message2) => {
      var _a3, _b3;
      return {
        address: (_a3 = message2.address) !== null && _a3 !== void 0 ? _a3 : null,
        amount: (_b3 = message2.amount) !== null && _b3 !== void 0 ? _b3 : null
      };
    })
  };
}
function createTransactionSentForSignatureEvent(version2, wallet, transaction2) {
  return Object.assign(Object.assign({ type: "transaction-sent-for-signature" }, createConnectionInfo(version2, wallet)), createTransactionInfo(wallet, transaction2));
}
function createTransactionSignedEvent(version2, wallet, transaction2, signedTransaction) {
  return Object.assign(Object.assign({ type: "transaction-signed", is_success: true, signed_transaction: signedTransaction.boc }, createConnectionInfo(version2, wallet)), createTransactionInfo(wallet, transaction2));
}
function createTransactionSigningFailedEvent(version2, wallet, transaction2, errorMessage, errorCode) {
  return Object.assign(Object.assign({ type: "transaction-signing-failed", is_success: false, error_message: errorMessage, error_code: errorCode !== null && errorCode !== void 0 ? errorCode : null }, createConnectionInfo(version2, wallet)), createTransactionInfo(wallet, transaction2));
}
function createDisconnectionEvent(version2, wallet, scope) {
  return Object.assign({ type: "disconnection", scope }, createConnectionInfo(version2, wallet));
}
class BrowserEventDispatcher {
  constructor() {
    this.window = getWindow$2();
  }
  /**
   * Dispatches an event with the given name and details to the browser window.
   * @param eventName - The name of the event to dispatch.
   * @param eventDetails - The details of the event to dispatch.
   * @returns A promise that resolves when the event has been dispatched.
   */
  dispatchEvent(eventName, eventDetails) {
    var _a2;
    return __awaiter(this, void 0, void 0, function* () {
      const event = new CustomEvent(eventName, { detail: eventDetails });
      (_a2 = this.window) === null || _a2 === void 0 ? void 0 : _a2.dispatchEvent(event);
    });
  }
  /**
   * Adds an event listener to the browser window.
   * @param eventName - The name of the event to listen for.
   * @param listener - The listener to add.
   * @param options - The options for the listener.
   * @returns A function that removes the listener.
   */
  addEventListener(eventName, listener, options) {
    var _a2;
    return __awaiter(this, void 0, void 0, function* () {
      (_a2 = this.window) === null || _a2 === void 0 ? void 0 : _a2.addEventListener(eventName, listener, options);
      return () => {
        var _a3;
        return (_a3 = this.window) === null || _a3 === void 0 ? void 0 : _a3.removeEventListener(eventName, listener);
      };
    });
  }
}
class TonConnectTracker {
  constructor(options) {
    var _a2;
    this.eventPrefix = "ton-connect-";
    this.tonConnectUiVersion = null;
    this.eventDispatcher = (_a2 = options === null || options === void 0 ? void 0 : options.eventDispatcher) !== null && _a2 !== void 0 ? _a2 : new BrowserEventDispatcher();
    this.tonConnectSdkVersion = options.tonConnectSdkVersion;
    this.init().catch();
  }
  /**
   * Version of the library.
   */
  get version() {
    return createVersionInfo({
      ton_connect_sdk_lib: this.tonConnectSdkVersion,
      ton_connect_ui_lib: this.tonConnectUiVersion
    });
  }
  /**
   * Called once when the tracker is created and request version other libraries.
   */
  init() {
    return __awaiter(this, void 0, void 0, function* () {
      try {
        yield this.setRequestVersionHandler();
        this.tonConnectUiVersion = yield this.requestTonConnectUiVersion();
      } catch (e2) {
      }
    });
  }
  /**
   * Set request version handler.
   * @private
   */
  setRequestVersionHandler() {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.eventDispatcher.addEventListener("ton-connect-request-version", () => __awaiter(this, void 0, void 0, function* () {
        yield this.eventDispatcher.dispatchEvent("ton-connect-response-version", createResponseVersionEvent(this.tonConnectSdkVersion));
      }));
    });
  }
  /**
   * Request TonConnect UI version.
   * @private
   */
  requestTonConnectUiVersion() {
    return __awaiter(this, void 0, void 0, function* () {
      return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
        try {
          yield this.eventDispatcher.addEventListener("ton-connect-ui-response-version", (event) => {
            resolve(event.detail.version);
          }, { once: true });
          yield this.eventDispatcher.dispatchEvent("ton-connect-ui-request-version", createRequestVersionEvent());
        } catch (e2) {
          reject(e2);
        }
      }));
    });
  }
  /**
   * Emit user action event to the window.
   * @param eventDetails
   * @private
   */
  dispatchUserActionEvent(eventDetails) {
    try {
      this.eventDispatcher.dispatchEvent(`${this.eventPrefix}${eventDetails.type}`, eventDetails).catch();
    } catch (e2) {
    }
  }
  /**
   * Track connection init event.
   * @param args
   */
  trackConnectionStarted(...args) {
    try {
      const event = createConnectionStartedEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
  /**
   * Track connection success event.
   * @param args
   */
  trackConnectionCompleted(...args) {
    try {
      const event = createConnectionCompletedEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
  /**
   * Track connection error event.
   * @param args
   */
  trackConnectionError(...args) {
    try {
      const event = createConnectionErrorEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
  /**
   * Track connection restoring init event.
   * @param args
   */
  trackConnectionRestoringStarted(...args) {
    try {
      const event = createConnectionRestoringStartedEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
  /**
   * Track connection restoring success event.
   * @param args
   */
  trackConnectionRestoringCompleted(...args) {
    try {
      const event = createConnectionRestoringCompletedEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
  /**
   * Track connection restoring error event.
   * @param args
   */
  trackConnectionRestoringError(...args) {
    try {
      const event = createConnectionRestoringErrorEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
  /**
   * Track disconnect event.
   * @param args
   */
  trackDisconnection(...args) {
    try {
      const event = createDisconnectionEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
  /**
   * Track transaction init event.
   * @param args
   */
  trackTransactionSentForSignature(...args) {
    try {
      const event = createTransactionSentForSignatureEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
  /**
   * Track transaction signed event.
   * @param args
   */
  trackTransactionSigned(...args) {
    try {
      const event = createTransactionSignedEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
  /**
   * Track transaction error event.
   * @param args
   */
  trackTransactionSigningFailed(...args) {
    try {
      const event = createTransactionSigningFailedEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
}
const tonConnectSdkVersion = "3.0.5";
class TonConnect {
  constructor(options) {
    this.walletsList = new WalletsListManager();
    this._wallet = null;
    this.provider = null;
    this.statusChangeSubscriptions = [];
    this.statusChangeErrorSubscriptions = [];
    this.dappSettings = {
      manifestUrl: (options === null || options === void 0 ? void 0 : options.manifestUrl) || getWebPageManifest(),
      storage: (options === null || options === void 0 ? void 0 : options.storage) || new DefaultStorage()
    };
    this.walletsList = new WalletsListManager({
      walletsListSource: options === null || options === void 0 ? void 0 : options.walletsListSource,
      cacheTTLMs: options === null || options === void 0 ? void 0 : options.walletsListCacheTTLMs
    });
    this.tracker = new TonConnectTracker({
      eventDispatcher: options === null || options === void 0 ? void 0 : options.eventDispatcher,
      tonConnectSdkVersion
    });
    if (!this.dappSettings.manifestUrl) {
      throw new DappMetadataError("Dapp tonconnect-manifest.json must be specified if window.location.origin is undefined. See more https://github.com/ton-connect/docs/blob/main/requests-responses.md#app-manifest");
    }
    this.bridgeConnectionStorage = new BridgeConnectionStorage(this.dappSettings.storage);
    if (!(options === null || options === void 0 ? void 0 : options.disableAutoPauseConnection)) {
      this.addWindowFocusAndBlurSubscriptions();
    }
  }
  /**
   * Returns available wallets list.
   */
  static getWallets() {
    return this.walletsList.getWallets();
  }
  /**
   * Shows if the wallet is connected right now.
   */
  get connected() {
    return this._wallet !== null;
  }
  /**
   * Current connected account or null if no account is connected.
   */
  get account() {
    var _a2;
    return ((_a2 = this._wallet) === null || _a2 === void 0 ? void 0 : _a2.account) || null;
  }
  /**
   * Current connected wallet or null if no account is connected.
   */
  get wallet() {
    return this._wallet;
  }
  set wallet(value) {
    this._wallet = value;
    this.statusChangeSubscriptions.forEach((callback) => callback(this._wallet));
  }
  /**
   * Returns available wallets list.
   */
  getWallets() {
    return this.walletsList.getWallets();
  }
  /**
   * Allows to subscribe to connection status changes and handle connection errors.
   * @param callback will be called after connections status changes with actual wallet or null.
   * @param errorsHandler (optional) will be called with some instance of TonConnectError when connect error is received.
   * @returns unsubscribe callback.
   */
  onStatusChange(callback, errorsHandler) {
    this.statusChangeSubscriptions.push(callback);
    if (errorsHandler) {
      this.statusChangeErrorSubscriptions.push(errorsHandler);
    }
    return () => {
      this.statusChangeSubscriptions = this.statusChangeSubscriptions.filter((item) => item !== callback);
      if (errorsHandler) {
        this.statusChangeErrorSubscriptions = this.statusChangeErrorSubscriptions.filter((item) => item !== errorsHandler);
      }
    };
  }
  connect(wallet, requestOrOptions) {
    var _a2, _b2;
    const options = {};
    if (typeof requestOrOptions === "object" && "tonProof" in requestOrOptions) {
      options.request = requestOrOptions;
    }
    if (typeof requestOrOptions === "object" && ("openingDeadlineMS" in requestOrOptions || "signal" in requestOrOptions || "request" in requestOrOptions)) {
      options.request = requestOrOptions === null || requestOrOptions === void 0 ? void 0 : requestOrOptions.request;
      options.openingDeadlineMS = requestOrOptions === null || requestOrOptions === void 0 ? void 0 : requestOrOptions.openingDeadlineMS;
      options.signal = requestOrOptions === null || requestOrOptions === void 0 ? void 0 : requestOrOptions.signal;
    }
    if (this.connected) {
      throw new WalletAlreadyConnectedError();
    }
    const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
    (_a2 = this.abortController) === null || _a2 === void 0 ? void 0 : _a2.abort();
    this.abortController = abortController;
    if (abortController.signal.aborted) {
      throw new TonConnectError("Connection was aborted");
    }
    (_b2 = this.provider) === null || _b2 === void 0 ? void 0 : _b2.closeConnection();
    this.provider = this.createProvider(wallet);
    abortController.signal.addEventListener("abort", () => {
      var _a3;
      (_a3 = this.provider) === null || _a3 === void 0 ? void 0 : _a3.closeConnection();
      this.provider = null;
    });
    this.tracker.trackConnectionStarted();
    return this.provider.connect(this.createConnectRequest(options === null || options === void 0 ? void 0 : options.request), {
      openingDeadlineMS: options === null || options === void 0 ? void 0 : options.openingDeadlineMS,
      signal: abortController.signal
    });
  }
  /**
   * Try to restore existing session and reconnect to the corresponding wallet. Call it immediately when your app is loaded.
   */
  restoreConnection(options) {
    var _a2, _b2;
    return __awaiter(this, void 0, void 0, function* () {
      this.tracker.trackConnectionRestoringStarted();
      const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
      (_a2 = this.abortController) === null || _a2 === void 0 ? void 0 : _a2.abort();
      this.abortController = abortController;
      if (abortController.signal.aborted) {
        this.tracker.trackConnectionRestoringError("Connection restoring was aborted");
        return;
      }
      const [bridgeConnectionType, embeddedWallet] = yield Promise.all([
        this.bridgeConnectionStorage.storedConnectionType(),
        this.walletsList.getEmbeddedWallet()
      ]);
      if (abortController.signal.aborted) {
        this.tracker.trackConnectionRestoringError("Connection restoring was aborted");
        return;
      }
      let provider = null;
      try {
        switch (bridgeConnectionType) {
          case "http":
            provider = yield BridgeProvider.fromStorage(this.dappSettings.storage);
            break;
          case "injected":
            provider = yield InjectedProvider.fromStorage(this.dappSettings.storage);
            break;
          default:
            if (embeddedWallet) {
              provider = this.createProvider(embeddedWallet);
            } else {
              return;
            }
        }
      } catch (_c2) {
        this.tracker.trackConnectionRestoringError("Provider is not restored");
        yield this.bridgeConnectionStorage.removeConnection();
        provider === null || provider === void 0 ? void 0 : provider.closeConnection();
        provider = null;
        return;
      }
      if (abortController.signal.aborted) {
        provider === null || provider === void 0 ? void 0 : provider.closeConnection();
        this.tracker.trackConnectionRestoringError("Connection restoring was aborted");
        return;
      }
      if (!provider) {
        logError$1("Provider is not restored");
        this.tracker.trackConnectionRestoringError("Provider is not restored");
        return;
      }
      (_b2 = this.provider) === null || _b2 === void 0 ? void 0 : _b2.closeConnection();
      this.provider = provider;
      provider.listen(this.walletEventsListener.bind(this));
      const onAbortRestore = () => {
        this.tracker.trackConnectionRestoringError("Connection restoring was aborted");
        provider === null || provider === void 0 ? void 0 : provider.closeConnection();
        provider = null;
      };
      abortController.signal.addEventListener("abort", onAbortRestore);
      const restoreConnectionTask = callForSuccess((_options) => __awaiter(this, void 0, void 0, function* () {
        yield provider === null || provider === void 0 ? void 0 : provider.restoreConnection({
          openingDeadlineMS: options === null || options === void 0 ? void 0 : options.openingDeadlineMS,
          signal: _options.signal
        });
        abortController.signal.removeEventListener("abort", onAbortRestore);
        if (this.connected) {
          this.tracker.trackConnectionRestoringCompleted(this.wallet);
        } else {
          this.tracker.trackConnectionRestoringError("Connection restoring failed");
        }
      }), {
        attempts: Number.MAX_SAFE_INTEGER,
        delayMs: 2e3,
        signal: options === null || options === void 0 ? void 0 : options.signal
      });
      const restoreConnectionTimeout = new Promise(
        (resolve) => setTimeout(() => resolve(), 12e3)
        // connection deadline
      );
      return Promise.race([restoreConnectionTask, restoreConnectionTimeout]);
    });
  }
  sendTransaction(transaction2, optionsOrOnRequestSent) {
    return __awaiter(this, void 0, void 0, function* () {
      const options = {};
      if (typeof optionsOrOnRequestSent === "function") {
        options.onRequestSent = optionsOrOnRequestSent;
      } else {
        options.onRequestSent = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.onRequestSent;
        options.signal = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.signal;
      }
      const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
      if (abortController.signal.aborted) {
        throw new TonConnectError("Transaction sending was aborted");
      }
      this.checkConnection();
      checkSendTransactionSupport(this.wallet.device.features, {
        requiredMessagesNumber: transaction2.messages.length
      });
      this.tracker.trackTransactionSentForSignature(this.wallet, transaction2);
      const { validUntil } = transaction2, tx = __rest(transaction2, ["validUntil"]);
      const from = transaction2.from || this.account.address;
      const network = transaction2.network || this.account.chain;
      const response = yield this.provider.sendRequest(sendTransactionParser.convertToRpcRequest(Object.assign(Object.assign({}, tx), {
        valid_until: validUntil,
        from,
        network
      })), { onRequestSent: options.onRequestSent, signal: abortController.signal });
      if (sendTransactionParser.isError(response)) {
        this.tracker.trackTransactionSigningFailed(this.wallet, transaction2, response.error.message, response.error.code);
        return sendTransactionParser.parseAndThrowError(response);
      }
      const result = sendTransactionParser.convertFromRpcResponse(response);
      this.tracker.trackTransactionSigned(this.wallet, transaction2, result);
      return result;
    });
  }
  /**
   * Disconnect form thw connected wallet and drop current session.
   */
  disconnect(options) {
    var _a2;
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.connected) {
        throw new WalletNotConnectedError();
      }
      const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
      const prevAbortController = this.abortController;
      this.abortController = abortController;
      if (abortController.signal.aborted) {
        throw new TonConnectError("Disconnect was aborted");
      }
      this.onWalletDisconnected("dapp");
      yield (_a2 = this.provider) === null || _a2 === void 0 ? void 0 : _a2.disconnect({
        signal: abortController.signal
      });
      prevAbortController === null || prevAbortController === void 0 ? void 0 : prevAbortController.abort();
    });
  }
  /**
   * Pause bridge HTTP connection. Might be helpful, if you want to pause connections while browser tab is unfocused,
   * or if you use SDK with NodeJS and want to save server resources.
   */
  pauseConnection() {
    var _a2;
    if (((_a2 = this.provider) === null || _a2 === void 0 ? void 0 : _a2.type) !== "http") {
      return;
    }
    this.provider.pause();
  }
  /**
   * Unpause bridge HTTP connection if it is paused.
   */
  unPauseConnection() {
    var _a2;
    if (((_a2 = this.provider) === null || _a2 === void 0 ? void 0 : _a2.type) !== "http") {
      return Promise.resolve();
    }
    return this.provider.unPause();
  }
  addWindowFocusAndBlurSubscriptions() {
    const document2 = getDocument();
    if (!document2) {
      return;
    }
    try {
      document2.addEventListener("visibilitychange", () => {
        if (document2.hidden) {
          this.pauseConnection();
        } else {
          this.unPauseConnection().catch();
        }
      });
    } catch (e2) {
      logError$1("Cannot subscribe to the document.visibilitychange: ", e2);
    }
  }
  createProvider(wallet) {
    let provider;
    if (!Array.isArray(wallet) && isWalletConnectionSourceJS(wallet)) {
      provider = new InjectedProvider(this.dappSettings.storage, wallet.jsBridgeKey);
    } else {
      provider = new BridgeProvider(this.dappSettings.storage, wallet);
    }
    provider.listen(this.walletEventsListener.bind(this));
    return provider;
  }
  walletEventsListener(e2) {
    switch (e2.event) {
      case "connect":
        this.onWalletConnected(e2.payload);
        break;
      case "connect_error":
        this.onWalletConnectError(e2.payload);
        break;
      case "disconnect":
        this.onWalletDisconnected("wallet");
    }
  }
  onWalletConnected(connectEvent) {
    const tonAccountItem = connectEvent.items.find((item) => item.name === "ton_addr");
    const tonProofItem = connectEvent.items.find((item) => item.name === "ton_proof");
    if (!tonAccountItem) {
      throw new TonConnectError("ton_addr connection item was not found");
    }
    const wallet = {
      device: connectEvent.device,
      provider: this.provider.type,
      account: {
        address: tonAccountItem.address,
        chain: tonAccountItem.network,
        walletStateInit: tonAccountItem.walletStateInit,
        publicKey: tonAccountItem.publicKey
      }
    };
    if (tonProofItem) {
      wallet.connectItems = {
        tonProof: tonProofItem
      };
    }
    this.wallet = wallet;
    this.tracker.trackConnectionCompleted(wallet);
  }
  onWalletConnectError(connectEventError) {
    const error = connectErrorsParser.parseError(connectEventError);
    this.statusChangeErrorSubscriptions.forEach((errorsHandler) => errorsHandler(error));
    logDebug$1(error);
    this.tracker.trackConnectionError(connectEventError.message, connectEventError.code);
    if (error instanceof ManifestNotFoundError || error instanceof ManifestContentErrorError) {
      logError$1(error);
      throw error;
    }
  }
  onWalletDisconnected(scope) {
    this.tracker.trackDisconnection(this.wallet, scope);
    this.wallet = null;
  }
  checkConnection() {
    if (!this.connected) {
      throw new WalletNotConnectedError();
    }
  }
  createConnectRequest(request2) {
    const items = [
      {
        name: "ton_addr"
      }
    ];
    if (request2 === null || request2 === void 0 ? void 0 : request2.tonProof) {
      items.push({
        name: "ton_proof",
        payload: request2.tonProof
      });
    }
    return {
      manifestUrl: this.dappSettings.manifestUrl,
      items
    };
  }
}
TonConnect.walletsList = new WalletsListManager();
TonConnect.isWalletInjected = (walletJSKey) => InjectedProvider.isWalletInjected(walletJSKey);
TonConnect.isInsideWalletBrowser = (walletJSKey) => InjectedProvider.isInsideWalletBrowser(walletJSKey);
const noBounceableTag = 81;
const testOnlyTag = 128;
function toUserFriendlyAddress(hexAddress, testOnly = false) {
  const { wc: wc2, hex } = parseHexAddress(hexAddress);
  let tag = noBounceableTag;
  if (testOnly) {
    tag |= testOnlyTag;
  }
  const addr = new Int8Array(34);
  addr[0] = tag;
  addr[1] = wc2;
  addr.set(hex, 2);
  const addressWithChecksum = new Uint8Array(36);
  addressWithChecksum.set(addr);
  addressWithChecksum.set(crc16$3(addr), 34);
  let addressBase64 = Base64.encode(addressWithChecksum);
  return addressBase64.replace(/\+/g, "-").replace(/\//g, "_");
}
function parseHexAddress(hexAddress) {
  if (!hexAddress.includes(":")) {
    throw new WrongAddressError(`Wrong address ${hexAddress}. Address must include ":".`);
  }
  const parts = hexAddress.split(":");
  if (parts.length !== 2) {
    throw new WrongAddressError(`Wrong address ${hexAddress}. Address must include ":" only once.`);
  }
  const wc2 = parseInt(parts[0]);
  if (wc2 !== 0 && wc2 !== -1) {
    throw new WrongAddressError(`Wrong address ${hexAddress}. WC must be eq 0 or -1, but ${wc2} received.`);
  }
  const hex = parts[1];
  if ((hex === null || hex === void 0 ? void 0 : hex.length) !== 64) {
    throw new WrongAddressError(`Wrong address ${hexAddress}. Hex part must be 64bytes length, but ${hex === null || hex === void 0 ? void 0 : hex.length} received.`);
  }
  return {
    wc: wc2,
    hex: hexToBytes(hex)
  };
}
function crc16$3(data2) {
  const poly = 4129;
  let reg = 0;
  const message2 = new Uint8Array(data2.length + 2);
  message2.set(data2);
  for (let byte of message2) {
    let mask = 128;
    while (mask > 0) {
      reg <<= 1;
      if (byte & mask) {
        reg += 1;
      }
      mask >>= 1;
      if (reg > 65535) {
        reg &= 65535;
        reg ^= poly;
      }
    }
  }
  return new Uint8Array([Math.floor(reg / 256), reg % 256]);
}
const toByteMap = {};
for (let ord = 0; ord <= 255; ord++) {
  let s2 = ord.toString(16);
  if (s2.length < 2) {
    s2 = "0" + s2;
  }
  toByteMap[s2] = ord;
}
function hexToBytes(hex) {
  hex = hex.toLowerCase();
  const length2 = hex.length;
  if (length2 % 2 !== 0) {
    throw new ParseHexError("Hex string must have length a multiple of 2: " + hex);
  }
  const length = length2 / 2;
  const result = new Uint8Array(length);
  for (let i2 = 0; i2 < length; i2++) {
    const doubled = i2 * 2;
    const hexSubstring = hex.substring(doubled, doubled + 2);
    if (!toByteMap.hasOwnProperty(hexSubstring)) {
      throw new ParseHexError("Invalid hex character: " + hexSubstring);
    }
    result[i2] = toByteMap[hexSubstring];
  }
  return result;
}
var uaParser = { exports: {} };
(function(module, exports2) {
  (function(window2, undefined$1) {
    var LIBVERSION = "1.0.38", EMPTY = "", UNKNOWN = "?", FUNC_TYPE = "function", UNDEF_TYPE = "undefined", OBJ_TYPE = "object", STR_TYPE = "string", MAJOR = "major", MODEL = "model", NAME = "name", TYPE = "type", VENDOR = "vendor", VERSION2 = "version", ARCHITECTURE = "architecture", CONSOLE = "console", MOBILE = "mobile", TABLET = "tablet", SMARTTV = "smarttv", WEARABLE = "wearable", EMBEDDED = "embedded", UA_MAX_LENGTH = 500;
    var AMAZON = "Amazon", APPLE = "Apple", ASUS = "ASUS", BLACKBERRY = "BlackBerry", BROWSER = "Browser", CHROME = "Chrome", EDGE = "Edge", FIREFOX = "Firefox", GOOGLE = "Google", HUAWEI = "Huawei", LG = "LG", MICROSOFT = "Microsoft", MOTOROLA = "Motorola", OPERA = "Opera", SAMSUNG = "Samsung", SHARP = "Sharp", SONY = "Sony", XIAOMI = "Xiaomi", ZEBRA = "Zebra", FACEBOOK = "Facebook", CHROMIUM_OS = "Chromium OS", MAC_OS = "Mac OS";
    var extend2 = function(regexes2, extensions) {
      var mergedRegexes = {};
      for (var i2 in regexes2) {
        if (extensions[i2] && extensions[i2].length % 2 === 0) {
          mergedRegexes[i2] = extensions[i2].concat(regexes2[i2]);
        } else {
          mergedRegexes[i2] = regexes2[i2];
        }
      }
      return mergedRegexes;
    }, enumerize = function(arr) {
      var enums = {};
      for (var i2 = 0; i2 < arr.length; i2++) {
        enums[arr[i2].toUpperCase()] = arr[i2];
      }
      return enums;
    }, has2 = function(str1, str2) {
      return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;
    }, lowerize = function(str) {
      return str.toLowerCase();
    }, majorize = function(version2) {
      return typeof version2 === STR_TYPE ? version2.replace(/[^\d\.]/g, EMPTY).split(".")[0] : undefined$1;
    }, trim2 = function(str, len2) {
      if (typeof str === STR_TYPE) {
        str = str.replace(/^\s\s*/, EMPTY);
        return typeof len2 === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
      }
    };
    var rgxMapper = function(ua2, arrays) {
      var i2 = 0, j2, k2, p2, q2, matches, match2;
      while (i2 < arrays.length && !matches) {
        var regex = arrays[i2], props = arrays[i2 + 1];
        j2 = k2 = 0;
        while (j2 < regex.length && !matches) {
          if (!regex[j2]) {
            break;
          }
          matches = regex[j2++].exec(ua2);
          if (!!matches) {
            for (p2 = 0; p2 < props.length; p2++) {
              match2 = matches[++k2];
              q2 = props[p2];
              if (typeof q2 === OBJ_TYPE && q2.length > 0) {
                if (q2.length === 2) {
                  if (typeof q2[1] == FUNC_TYPE) {
                    this[q2[0]] = q2[1].call(this, match2);
                  } else {
                    this[q2[0]] = q2[1];
                  }
                } else if (q2.length === 3) {
                  if (typeof q2[1] === FUNC_TYPE && !(q2[1].exec && q2[1].test)) {
                    this[q2[0]] = match2 ? q2[1].call(this, match2, q2[2]) : undefined$1;
                  } else {
                    this[q2[0]] = match2 ? match2.replace(q2[1], q2[2]) : undefined$1;
                  }
                } else if (q2.length === 4) {
                  this[q2[0]] = match2 ? q2[3].call(this, match2.replace(q2[1], q2[2])) : undefined$1;
                }
              } else {
                this[q2] = match2 ? match2 : undefined$1;
              }
            }
          }
        }
        i2 += 2;
      }
    }, strMapper = function(str, map2) {
      for (var i2 in map2) {
        if (typeof map2[i2] === OBJ_TYPE && map2[i2].length > 0) {
          for (var j2 = 0; j2 < map2[i2].length; j2++) {
            if (has2(map2[i2][j2], str)) {
              return i2 === UNKNOWN ? undefined$1 : i2;
            }
          }
        } else if (has2(map2[i2], str)) {
          return i2 === UNKNOWN ? undefined$1 : i2;
        }
      }
      return str;
    };
    var oldSafariMap = {
      "1.0": "/8",
      "1.2": "/1",
      "1.3": "/3",
      "2.0": "/412",
      "2.0.2": "/416",
      "2.0.3": "/417",
      "2.0.4": "/419",
      "?": "/"
    }, windowsVersionMap = {
      "ME": "4.90",
      "NT 3.11": "NT3.51",
      "NT 4.0": "NT4.0",
      "2000": "NT 5.0",
      "XP": ["NT 5.1", "NT 5.2"],
      "Vista": "NT 6.0",
      "7": "NT 6.1",
      "8": "NT 6.2",
      "8.1": "NT 6.3",
      "10": ["NT 6.4", "NT 10.0"],
      "RT": "ARM"
    };
    var regexes = {
      browser: [
        [
          /\b(?:crmo|crios)\/([\w\.]+)/i
          // Chrome for Android/iOS
        ],
        [VERSION2, [NAME, "Chrome"]],
        [
          /edg(?:e|ios|a)?\/([\w\.]+)/i
          // Microsoft Edge
        ],
        [VERSION2, [NAME, "Edge"]],
        [
          // Presto based
          /(opera mini)\/([-\w\.]+)/i,
          // Opera Mini
          /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
          // Opera Mobi/Tablet
          /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i
          // Opera
        ],
        [NAME, VERSION2],
        [
          /opios[\/ ]+([\w\.]+)/i
          // Opera mini on iphone >= 8.0
        ],
        [VERSION2, [NAME, OPERA + " Mini"]],
        [
          /\bop(?:rg)?x\/([\w\.]+)/i
          // Opera GX
        ],
        [VERSION2, [NAME, OPERA + " GX"]],
        [
          /\bopr\/([\w\.]+)/i
          // Opera Webkit
        ],
        [VERSION2, [NAME, OPERA]],
        [
          // Mixed
          /\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i
          // Baidu
        ],
        [VERSION2, [NAME, "Baidu"]],
        [
          /(kindle)\/([\w\.]+)/i,
          // Kindle
          /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,
          // Lunascape/Maxthon/Netfront/Jasmine/Blazer
          // Trident based
          /(avant|iemobile|slim)\s?(?:browser)?[\/ ]?([\w\.]*)/i,
          // Avant/IEMobile/SlimBrowser
          /(?:ms|\()(ie) ([\w\.]+)/i,
          // Internet Explorer
          // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
          /(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
          // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ
          /(heytap|ovi)browser\/([\d\.]+)/i,
          // Heytap/Ovi
          /(weibo)__([\d\.]+)/i
          // Weibo
        ],
        [NAME, VERSION2],
        [
          /\bddg\/([\w\.]+)/i
          // DuckDuckGo
        ],
        [VERSION2, [NAME, "DuckDuckGo"]],
        [
          /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i
          // UCBrowser
        ],
        [VERSION2, [NAME, "UC" + BROWSER]],
        [
          /microm.+\bqbcore\/([\w\.]+)/i,
          // WeChat Desktop for Windows Built-in Browser
          /\bqbcore\/([\w\.]+).+microm/i,
          /micromessenger\/([\w\.]+)/i
          // WeChat
        ],
        [VERSION2, [NAME, "WeChat"]],
        [
          /konqueror\/([\w\.]+)/i
          // Konqueror
        ],
        [VERSION2, [NAME, "Konqueror"]],
        [
          /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i
          // IE11
        ],
        [VERSION2, [NAME, "IE"]],
        [
          /ya(?:search)?browser\/([\w\.]+)/i
          // Yandex
        ],
        [VERSION2, [NAME, "Yandex"]],
        [
          /slbrowser\/([\w\.]+)/i
          // Smart Lenovo Browser
        ],
        [VERSION2, [NAME, "Smart Lenovo " + BROWSER]],
        [
          /(avast|avg)\/([\w\.]+)/i
          // Avast/AVG Secure Browser
        ],
        [[NAME, /(.+)/, "$1 Secure " + BROWSER], VERSION2],
        [
          /\bfocus\/([\w\.]+)/i
          // Firefox Focus
        ],
        [VERSION2, [NAME, FIREFOX + " Focus"]],
        [
          /\bopt\/([\w\.]+)/i
          // Opera Touch
        ],
        [VERSION2, [NAME, OPERA + " Touch"]],
        [
          /coc_coc\w+\/([\w\.]+)/i
          // Coc Coc Browser
        ],
        [VERSION2, [NAME, "Coc Coc"]],
        [
          /dolfin\/([\w\.]+)/i
          // Dolphin
        ],
        [VERSION2, [NAME, "Dolphin"]],
        [
          /coast\/([\w\.]+)/i
          // Opera Coast
        ],
        [VERSION2, [NAME, OPERA + " Coast"]],
        [
          /miuibrowser\/([\w\.]+)/i
          // MIUI Browser
        ],
        [VERSION2, [NAME, "MIUI " + BROWSER]],
        [
          /fxios\/([-\w\.]+)/i
          // Firefox for iOS
        ],
        [VERSION2, [NAME, FIREFOX]],
        [
          /\bqihu|(qi?ho?o?|360)browser/i
          // 360
        ],
        [[NAME, "360 " + BROWSER]],
        [
          /(oculus|sailfish|huawei|vivo)browser\/([\w\.]+)/i
        ],
        [[NAME, /(.+)/, "$1 " + BROWSER], VERSION2],
        [
          // Oculus/Sailfish/HuaweiBrowser/VivoBrowser
          /samsungbrowser\/([\w\.]+)/i
          // Samsung Internet
        ],
        [VERSION2, [NAME, SAMSUNG + " Internet"]],
        [
          /(comodo_dragon)\/([\w\.]+)/i
          // Comodo Dragon
        ],
        [[NAME, /_/g, " "], VERSION2],
        [
          /metasr[\/ ]?([\d\.]+)/i
          // Sogou Explorer
        ],
        [VERSION2, [NAME, "Sogou Explorer"]],
        [
          /(sogou)mo\w+\/([\d\.]+)/i
          // Sogou Mobile
        ],
        [[NAME, "Sogou Mobile"], VERSION2],
        [
          /(electron)\/([\w\.]+) safari/i,
          // Electron-based App
          /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
          // Tesla
          /m?(qqbrowser|2345Explorer)[\/ ]?([\w\.]+)/i
          // QQBrowser/2345 Browser
        ],
        [NAME, VERSION2],
        [
          /(lbbrowser)/i,
          // LieBao Browser
          /\[(linkedin)app\]/i
          // LinkedIn App for iOS & Android
        ],
        [NAME],
        [
          // WebView
          /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i
          // Facebook App for iOS & Android
        ],
        [[NAME, FACEBOOK], VERSION2],
        [
          /(Klarna)\/([\w\.]+)/i,
          // Klarna Shopping Browser for iOS & Android
          /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,
          // Kakao App
          /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,
          // Naver InApp
          /safari (line)\/([\w\.]+)/i,
          // Line App for iOS
          /\b(line)\/([\w\.]+)\/iab/i,
          // Line App for Android
          /(alipay)client\/([\w\.]+)/i,
          // Alipay
          /(twitter)(?:and| f.+e\/([\w\.]+))/i,
          // Twitter
          /(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i
          // Chromium/Instagram/Snapchat
        ],
        [NAME, VERSION2],
        [
          /\bgsa\/([\w\.]+) .*safari\//i
          // Google Search Appliance on iOS
        ],
        [VERSION2, [NAME, "GSA"]],
        [
          /musical_ly(?:.+app_?version\/|_)([\w\.]+)/i
          // TikTok
        ],
        [VERSION2, [NAME, "TikTok"]],
        [
          /headlesschrome(?:\/([\w\.]+)| )/i
          // Chrome Headless
        ],
        [VERSION2, [NAME, CHROME + " Headless"]],
        [
          / wv\).+(chrome)\/([\w\.]+)/i
          // Chrome WebView
        ],
        [[NAME, CHROME + " WebView"], VERSION2],
        [
          /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i
          // Android Browser
        ],
        [VERSION2, [NAME, "Android " + BROWSER]],
        [
          /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i
          // Chrome/OmniWeb/Arora/Tizen/Nokia
        ],
        [NAME, VERSION2],
        [
          /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i
          // Mobile Safari
        ],
        [VERSION2, [NAME, "Mobile Safari"]],
        [
          /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i
          // Safari & Safari Mobile
        ],
        [VERSION2, NAME],
        [
          /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i
          // Safari < 3.0
        ],
        [NAME, [VERSION2, strMapper, oldSafariMap]],
        [
          /(webkit|khtml)\/([\w\.]+)/i
        ],
        [NAME, VERSION2],
        [
          // Gecko based
          /(navigator|netscape\d?)\/([-\w\.]+)/i
          // Netscape
        ],
        [[NAME, "Netscape"], VERSION2],
        [
          /mobile vr; rv:([\w\.]+)\).+firefox/i
          // Firefox Reality
        ],
        [VERSION2, [NAME, FIREFOX + " Reality"]],
        [
          /ekiohf.+(flow)\/([\w\.]+)/i,
          // Flow
          /(swiftfox)/i,
          // Swiftfox
          /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
          // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar
          /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
          // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
          /(firefox)\/([\w\.]+)/i,
          // Other Firefox-based
          /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
          // Mozilla
          // Other
          /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
          // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser
          /(links) \(([\w\.]+)/i,
          // Links
          /panasonic;(viera)/i
          // Panasonic Viera
        ],
        [NAME, VERSION2],
        [
          /(cobalt)\/([\w\.]+)/i
          // Cobalt
        ],
        [NAME, [VERSION2, /master.|lts./, ""]]
      ],
      cpu: [
        [
          /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i
          // AMD64 (x64)
        ],
        [[ARCHITECTURE, "amd64"]],
        [
          /(ia32(?=;))/i
          // IA32 (quicktime)
        ],
        [[ARCHITECTURE, lowerize]],
        [
          /((?:i[346]|x)86)[;\)]/i
          // IA32 (x86)
        ],
        [[ARCHITECTURE, "ia32"]],
        [
          /\b(aarch64|arm(v?8e?l?|_?64))\b/i
          // ARM64
        ],
        [[ARCHITECTURE, "arm64"]],
        [
          /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i
          // ARMHF
        ],
        [[ARCHITECTURE, "armhf"]],
        [
          // PocketPC mistakenly identified as PowerPC
          /windows (ce|mobile); ppc;/i
        ],
        [[ARCHITECTURE, "arm"]],
        [
          /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i
          // PowerPC
        ],
        [[ARCHITECTURE, /ower/, EMPTY, lowerize]],
        [
          /(sun4\w)[;\)]/i
          // SPARC
        ],
        [[ARCHITECTURE, "sparc"]],
        [
          /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
          // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
        ],
        [[ARCHITECTURE, lowerize]]
      ],
      device: [
        [
          //////////////////////////
          // MOBILES & TABLETS
          /////////////////////////
          // Samsung
          /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
        ],
        [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]],
        [
          /\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
          /samsung[- ]([-\w]+)/i,
          /sec-(sgh\w+)/i
        ],
        [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]],
        [
          // Apple
          /(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i
          // iPod/iPhone
        ],
        [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]],
        [
          /\((ipad);[-\w\),; ]+apple/i,
          // iPad
          /applecoremedia\/[\w\.]+ \((ipad)/i,
          /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
        ],
        [MODEL, [VENDOR, APPLE], [TYPE, TABLET]],
        [
          /(macintosh);/i
        ],
        [MODEL, [VENDOR, APPLE]],
        [
          // Sharp
          /\b(sh-?[altvz]?\d\d[a-ekm]?)/i
        ],
        [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]],
        [
          // Huawei
          /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
        ],
        [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]],
        [
          /(?:huawei|honor)([-\w ]+)[;\)]/i,
          /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i
        ],
        [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]],
        [
          // Xiaomi
          /\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,
          // Xiaomi POCO
          /\b; (\w+) build\/hm\1/i,
          // Xiaomi Hongmi 'numeric' models
          /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
          // Xiaomi Hongmi
          /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
          // Xiaomi Redmi
          /oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,
          // Xiaomi Redmi 'numeric' models
          /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i
          // Xiaomi Mi
        ],
        [[MODEL, /_/g, " "], [VENDOR, XIAOMI], [TYPE, MOBILE]],
        [
          /oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i,
          // Redmi Pad
          /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i
          // Mi Pad tablets
        ],
        [[MODEL, /_/g, " "], [VENDOR, XIAOMI], [TYPE, TABLET]],
        [
          // OPPO
          /; (\w+) bui.+ oppo/i,
          /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i
        ],
        [MODEL, [VENDOR, "OPPO"], [TYPE, MOBILE]],
        [
          /\b(opd2\d{3}a?) bui/i
        ],
        [MODEL, [VENDOR, "OPPO"], [TYPE, TABLET]],
        [
          // Vivo
          /vivo (\w+)(?: bui|\))/i,
          /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
        ],
        [MODEL, [VENDOR, "Vivo"], [TYPE, MOBILE]],
        [
          // Realme
          /\b(rmx[1-3]\d{3})(?: bui|;|\))/i
        ],
        [MODEL, [VENDOR, "Realme"], [TYPE, MOBILE]],
        [
          // Motorola
          /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
          /\bmot(?:orola)?[- ](\w*)/i,
          /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
        ],
        [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]],
        [
          /\b(mz60\d|xoom[2 ]{0,2}) build\//i
        ],
        [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]],
        [
          // LG
          /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
        ],
        [MODEL, [VENDOR, LG], [TYPE, TABLET]],
        [
          /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
          /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
          /\blg-?([\d\w]+) bui/i
        ],
        [MODEL, [VENDOR, LG], [TYPE, MOBILE]],
        [
          // Lenovo
          /(ideatab[-\w ]+)/i,
          /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
        ],
        [MODEL, [VENDOR, "Lenovo"], [TYPE, TABLET]],
        [
          // Nokia
          /(?:maemo|nokia).*(n900|lumia \d+)/i,
          /nokia[-_ ]?([-\w\.]*)/i
        ],
        [[MODEL, /_/g, " "], [VENDOR, "Nokia"], [TYPE, MOBILE]],
        [
          // Google
          /(pixel c)\b/i
          // Google Pixel C
        ],
        [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]],
        [
          /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i
          // Google Pixel
        ],
        [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]],
        [
          // Sony
          /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
        ],
        [MODEL, [VENDOR, SONY], [TYPE, MOBILE]],
        [
          /sony tablet [ps]/i,
          /\b(?:sony)?sgp\w+(?: bui|\))/i
        ],
        [[MODEL, "Xperia Tablet"], [VENDOR, SONY], [TYPE, TABLET]],
        [
          // OnePlus
          / (kb2005|in20[12]5|be20[12][59])\b/i,
          /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
        ],
        [MODEL, [VENDOR, "OnePlus"], [TYPE, MOBILE]],
        [
          // Amazon
          /(alexa)webm/i,
          /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i,
          // Kindle Fire without Silk / Echo Show
          /(kf[a-z]+)( bui|\)).+silk\//i
          // Kindle Fire HD
        ],
        [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]],
        [
          /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i
          // Fire Phone
        ],
        [[MODEL, /(.+)/g, "Fire Phone $1"], [VENDOR, AMAZON], [TYPE, MOBILE]],
        [
          // BlackBerry
          /(playbook);[-\w\),; ]+(rim)/i
          // BlackBerry PlayBook
        ],
        [MODEL, VENDOR, [TYPE, TABLET]],
        [
          /\b((?:bb[a-f]|st[hv])100-\d)/i,
          /\(bb10; (\w+)/i
          // BlackBerry 10
        ],
        [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]],
        [
          // Asus
          /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
        ],
        [MODEL, [VENDOR, ASUS], [TYPE, TABLET]],
        [
          / (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i
        ],
        [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]],
        [
          // HTC
          /(nexus 9)/i
          // HTC Nexus 9
        ],
        [MODEL, [VENDOR, "HTC"], [TYPE, TABLET]],
        [
          /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
          // HTC
          // ZTE
          /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
          /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i
          // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
        ],
        [VENDOR, [MODEL, /_/g, " "], [TYPE, MOBILE]],
        [
          // Acer
          /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i
        ],
        [MODEL, [VENDOR, "Acer"], [TYPE, TABLET]],
        [
          // Meizu
          /droid.+; (m[1-5] note) bui/i,
          /\bmz-([-\w]{2,})/i
        ],
        [MODEL, [VENDOR, "Meizu"], [TYPE, MOBILE]],
        [
          // Ulefone
          /; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i
        ],
        [MODEL, [VENDOR, "Ulefone"], [TYPE, MOBILE]],
        [
          // MIXED
          /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno)[-_ ]?([-\w]*)/i,
          // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
          /(hp) ([\w ]+\w)/i,
          // HP iPAQ
          /(asus)-?(\w+)/i,
          // Asus
          /(microsoft); (lumia[\w ]+)/i,
          // Microsoft Lumia
          /(lenovo)[-_ ]?([-\w]+)/i,
          // Lenovo
          /(jolla)/i,
          // Jolla
          /(oppo) ?([\w ]+) bui/i
          // OPPO
        ],
        [VENDOR, MODEL, [TYPE, MOBILE]],
        [
          /(kobo)\s(ereader|touch)/i,
          // Kobo
          /(archos) (gamepad2?)/i,
          // Archos
          /(hp).+(touchpad(?!.+tablet)|tablet)/i,
          // HP TouchPad
          /(kindle)\/([\w\.]+)/i,
          // Kindle
          /(nook)[\w ]+build\/(\w+)/i,
          // Nook
          /(dell) (strea[kpr\d ]*[\dko])/i,
          // Dell Streak
          /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
          // Le Pan Tablets
          /(trinity)[- ]*(t\d{3}) bui/i,
          // Trinity Tablets
          /(gigaset)[- ]+(q\w{1,9}) bui/i,
          // Gigaset Tablets
          /(vodafone) ([\w ]+)(?:\)| bui)/i
          // Vodafone
        ],
        [VENDOR, MODEL, [TYPE, TABLET]],
        [
          /(surface duo)/i
          // Surface Duo
        ],
        [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]],
        [
          /droid [\d\.]+; (fp\du?)(?: b|\))/i
          // Fairphone
        ],
        [MODEL, [VENDOR, "Fairphone"], [TYPE, MOBILE]],
        [
          /(u304aa)/i
          // AT&T
        ],
        [MODEL, [VENDOR, "AT&T"], [TYPE, MOBILE]],
        [
          /\bsie-(\w*)/i
          // Siemens
        ],
        [MODEL, [VENDOR, "Siemens"], [TYPE, MOBILE]],
        [
          /\b(rct\w+) b/i
          // RCA Tablets
        ],
        [MODEL, [VENDOR, "RCA"], [TYPE, TABLET]],
        [
          /\b(venue[\d ]{2,7}) b/i
          // Dell Venue Tablets
        ],
        [MODEL, [VENDOR, "Dell"], [TYPE, TABLET]],
        [
          /\b(q(?:mv|ta)\w+) b/i
          // Verizon Tablet
        ],
        [MODEL, [VENDOR, "Verizon"], [TYPE, TABLET]],
        [
          /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i
          // Barnes & Noble Tablet
        ],
        [MODEL, [VENDOR, "Barnes & Noble"], [TYPE, TABLET]],
        [
          /\b(tm\d{3}\w+) b/i
        ],
        [MODEL, [VENDOR, "NuVision"], [TYPE, TABLET]],
        [
          /\b(k88) b/i
          // ZTE K Series Tablet
        ],
        [MODEL, [VENDOR, "ZTE"], [TYPE, TABLET]],
        [
          /\b(nx\d{3}j) b/i
          // ZTE Nubia
        ],
        [MODEL, [VENDOR, "ZTE"], [TYPE, MOBILE]],
        [
          /\b(gen\d{3}) b.+49h/i
          // Swiss GEN Mobile
        ],
        [MODEL, [VENDOR, "Swiss"], [TYPE, MOBILE]],
        [
          /\b(zur\d{3}) b/i
          // Swiss ZUR Tablet
        ],
        [MODEL, [VENDOR, "Swiss"], [TYPE, TABLET]],
        [
          /\b((zeki)?tb.*\b) b/i
          // Zeki Tablets
        ],
        [MODEL, [VENDOR, "Zeki"], [TYPE, TABLET]],
        [
          /\b([yr]\d{2}) b/i,
          /\b(dragon[- ]+touch |dt)(\w{5}) b/i
          // Dragon Touch Tablet
        ],
        [[VENDOR, "Dragon Touch"], MODEL, [TYPE, TABLET]],
        [
          /\b(ns-?\w{0,9}) b/i
          // Insignia Tablets
        ],
        [MODEL, [VENDOR, "Insignia"], [TYPE, TABLET]],
        [
          /\b((nxa|next)-?\w{0,9}) b/i
          // NextBook Tablets
        ],
        [MODEL, [VENDOR, "NextBook"], [TYPE, TABLET]],
        [
          /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i
          // Voice Xtreme Phones
        ],
        [[VENDOR, "Voice"], MODEL, [TYPE, MOBILE]],
        [
          /\b(lvtel\-)?(v1[12]) b/i
          // LvTel Phones
        ],
        [[VENDOR, "LvTel"], MODEL, [TYPE, MOBILE]],
        [
          /\b(ph-1) /i
          // Essential PH-1
        ],
        [MODEL, [VENDOR, "Essential"], [TYPE, MOBILE]],
        [
          /\b(v(100md|700na|7011|917g).*\b) b/i
          // Envizen Tablets
        ],
        [MODEL, [VENDOR, "Envizen"], [TYPE, TABLET]],
        [
          /\b(trio[-\w\. ]+) b/i
          // MachSpeed Tablets
        ],
        [MODEL, [VENDOR, "MachSpeed"], [TYPE, TABLET]],
        [
          /\btu_(1491) b/i
          // Rotor Tablets
        ],
        [MODEL, [VENDOR, "Rotor"], [TYPE, TABLET]],
        [
          /(shield[\w ]+) b/i
          // Nvidia Shield Tablets
        ],
        [MODEL, [VENDOR, "Nvidia"], [TYPE, TABLET]],
        [
          /(sprint) (\w+)/i
          // Sprint Phones
        ],
        [VENDOR, MODEL, [TYPE, MOBILE]],
        [
          /(kin\.[onetw]{3})/i
          // Microsoft Kin
        ],
        [[MODEL, /\./g, " "], [VENDOR, MICROSOFT], [TYPE, MOBILE]],
        [
          /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i
          // Zebra
        ],
        [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]],
        [
          /droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i
        ],
        [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]],
        [
          ///////////////////
          // SMARTTVS
          ///////////////////
          /smart-tv.+(samsung)/i
          // Samsung
        ],
        [VENDOR, [TYPE, SMARTTV]],
        [
          /hbbtv.+maple;(\d+)/i
        ],
        [[MODEL, /^/, "SmartTV"], [VENDOR, SAMSUNG], [TYPE, SMARTTV]],
        [
          /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i
          // LG SmartTV
        ],
        [[VENDOR, LG], [TYPE, SMARTTV]],
        [
          /(apple) ?tv/i
          // Apple TV
        ],
        [VENDOR, [MODEL, APPLE + " TV"], [TYPE, SMARTTV]],
        [
          /crkey/i
          // Google Chromecast
        ],
        [[MODEL, CHROME + "cast"], [VENDOR, GOOGLE], [TYPE, SMARTTV]],
        [
          /droid.+aft(\w+)( bui|\))/i
          // Fire TV
        ],
        [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]],
        [
          /\(dtv[\);].+(aquos)/i,
          /(aquos-tv[\w ]+)\)/i
          // Sharp
        ],
        [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],
        [
          /(bravia[\w ]+)( bui|\))/i
          // Sony
        ],
        [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]],
        [
          /(mitv-\w{5}) bui/i
          // Xiaomi
        ],
        [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]],
        [
          /Hbbtv.*(technisat) (.*);/i
          // TechniSAT
        ],
        [VENDOR, MODEL, [TYPE, SMARTTV]],
        [
          /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,
          // Roku
          /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i
          // HbbTV devices
        ],
        [[VENDOR, trim2], [MODEL, trim2], [TYPE, SMARTTV]],
        [
          /\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i
          // SmartTV from Unidentified Vendors
        ],
        [[TYPE, SMARTTV]],
        [
          ///////////////////
          // CONSOLES
          ///////////////////
          /(ouya)/i,
          // Ouya
          /(nintendo) ([wids3utch]+)/i
          // Nintendo
        ],
        [VENDOR, MODEL, [TYPE, CONSOLE]],
        [
          /droid.+; (shield) bui/i
          // Nvidia
        ],
        [MODEL, [VENDOR, "Nvidia"], [TYPE, CONSOLE]],
        [
          /(playstation [345portablevi]+)/i
          // Playstation
        ],
        [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]],
        [
          /\b(xbox(?: one)?(?!; xbox))[\); ]/i
          // Microsoft Xbox
        ],
        [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]],
        [
          ///////////////////
          // WEARABLES
          ///////////////////
          /((pebble))app/i
          // Pebble
        ],
        [VENDOR, MODEL, [TYPE, WEARABLE]],
        [
          /(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i
          // Apple Watch
        ],
        [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]],
        [
          /droid.+; (glass) \d/i
          // Google Glass
        ],
        [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]],
        [
          /droid.+; (wt63?0{2,3})\)/i
        ],
        [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]],
        [
          /(quest( \d| pro)?)/i
          // Oculus Quest
        ],
        [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]],
        [
          ///////////////////
          // EMBEDDED
          ///////////////////
          /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i
          // Tesla
        ],
        [VENDOR, [TYPE, EMBEDDED]],
        [
          /(aeobc)\b/i
          // Echo Dot
        ],
        [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]],
        [
          ////////////////////
          // MIXED (GENERIC)
          ///////////////////
          /droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i
          // Android Phones from Unidentified Vendors
        ],
        [MODEL, [TYPE, MOBILE]],
        [
          /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i
          // Android Tablets from Unidentified Vendors
        ],
        [MODEL, [TYPE, TABLET]],
        [
          /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i
          // Unidentifiable Tablet
        ],
        [[TYPE, TABLET]],
        [
          /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i
          // Unidentifiable Mobile
        ],
        [[TYPE, MOBILE]],
        [
          /(android[-\w\. ]{0,9});.+buil/i
          // Generic Android Device
        ],
        [MODEL, [VENDOR, "Generic"]]
      ],
      engine: [
        [
          /windows.+ edge\/([\w\.]+)/i
          // EdgeHTML
        ],
        [VERSION2, [NAME, EDGE + "HTML"]],
        [
          /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i
          // Blink
        ],
        [VERSION2, [NAME, "Blink"]],
        [
          /(presto)\/([\w\.]+)/i,
          // Presto
          /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,
          // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna
          /ekioh(flow)\/([\w\.]+)/i,
          // Flow
          /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
          // KHTML/Tasman/Links
          /(icab)[\/ ]([23]\.[\d\.]+)/i,
          // iCab
          /\b(libweb)/i
        ],
        [NAME, VERSION2],
        [
          /rv\:([\w\.]{1,9})\b.+(gecko)/i
          // Gecko
        ],
        [VERSION2, NAME]
      ],
      os: [
        [
          // Windows
          /microsoft (windows) (vista|xp)/i
          // Windows (iTunes)
        ],
        [NAME, VERSION2],
        [
          /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i
          // Windows Phone
        ],
        [NAME, [VERSION2, strMapper, windowsVersionMap]],
        [
          /windows nt 6\.2; (arm)/i,
          // Windows RT
          /windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i,
          /(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i
        ],
        [[VERSION2, strMapper, windowsVersionMap], [NAME, "Windows"]],
        [
          // iOS/macOS
          /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
          // iOS
          /(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,
          /cfnetwork\/.+darwin/i
        ],
        [[VERSION2, /_/g, "."], [NAME, "iOS"]],
        [
          /(mac os x) ?([\w\. ]*)/i,
          /(macintosh|mac_powerpc\b)(?!.+haiku)/i
          // Mac OS
        ],
        [[NAME, MAC_OS], [VERSION2, /_/g, "."]],
        [
          // Mobile OSes
          /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i
          // Android-x86/HarmonyOS
        ],
        [VERSION2, NAME],
        [
          // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS
          /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
          /(blackberry)\w*\/([\w\.]*)/i,
          // Blackberry
          /(tizen|kaios)[\/ ]([\w\.]+)/i,
          // Tizen/KaiOS
          /\((series40);/i
          // Series 40
        ],
        [NAME, VERSION2],
        [
          /\(bb(10);/i
          // BlackBerry 10
        ],
        [VERSION2, [NAME, BLACKBERRY]],
        [
          /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i
          // Symbian
        ],
        [VERSION2, [NAME, "Symbian"]],
        [
          /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i
          // Firefox OS
        ],
        [VERSION2, [NAME, FIREFOX + " OS"]],
        [
          /web0s;.+rt(tv)/i,
          /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i
          // WebOS
        ],
        [VERSION2, [NAME, "webOS"]],
        [
          /watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i
          // watchOS
        ],
        [VERSION2, [NAME, "watchOS"]],
        [
          // Google Chromecast
          /crkey\/([\d\.]+)/i
          // Google Chromecast
        ],
        [VERSION2, [NAME, CHROME + "cast"]],
        [
          /(cros) [\w]+(?:\)| ([\w\.]+)\b)/i
          // Chromium OS
        ],
        [[NAME, CHROMIUM_OS], VERSION2],
        [
          // Smart TVs
          /panasonic;(viera)/i,
          // Panasonic Viera
          /(netrange)mmh/i,
          // Netrange
          /(nettv)\/(\d+\.[\w\.]+)/i,
          // NetTV
          // Console
          /(nintendo|playstation) ([wids345portablevuch]+)/i,
          // Nintendo/Playstation
          /(xbox); +xbox ([^\);]+)/i,
          // Microsoft Xbox (360, One, X, S, Series X, Series S)
          // Other
          /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
          // Joli/Palm
          /(mint)[\/\(\) ]?(\w*)/i,
          // Mint
          /(mageia|vectorlinux)[; ]/i,
          // Mageia/VectorLinux
          /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
          // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
          /(hurd|linux) ?([\w\.]*)/i,
          // Hurd/Linux
          /(gnu) ?([\w\.]*)/i,
          // GNU
          /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
          // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly
          /(haiku) (\w+)/i
          // Haiku
        ],
        [NAME, VERSION2],
        [
          /(sunos) ?([\w\.\d]*)/i
          // Solaris
        ],
        [[NAME, "Solaris"], VERSION2],
        [
          /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
          // Solaris
          /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
          // AIX
          /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,
          // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS
          /(unix) ?([\w\.]*)/i
          // UNIX
        ],
        [NAME, VERSION2]
      ]
    };
    var UAParser2 = function(ua2, extensions) {
      if (typeof ua2 === OBJ_TYPE) {
        extensions = ua2;
        ua2 = undefined$1;
      }
      if (!(this instanceof UAParser2)) {
        return new UAParser2(ua2, extensions).getResult();
      }
      var _navigator = typeof window2 !== UNDEF_TYPE && window2.navigator ? window2.navigator : undefined$1;
      var _ua = ua2 || (_navigator && _navigator.userAgent ? _navigator.userAgent : EMPTY);
      var _uach = _navigator && _navigator.userAgentData ? _navigator.userAgentData : undefined$1;
      var _rgxmap = extensions ? extend2(regexes, extensions) : regexes;
      var _isSelfNav = _navigator && _navigator.userAgent == _ua;
      this.getBrowser = function() {
        var _browser = {};
        _browser[NAME] = undefined$1;
        _browser[VERSION2] = undefined$1;
        rgxMapper.call(_browser, _ua, _rgxmap.browser);
        _browser[MAJOR] = majorize(_browser[VERSION2]);
        if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {
          _browser[NAME] = "Brave";
        }
        return _browser;
      };
      this.getCPU = function() {
        var _cpu = {};
        _cpu[ARCHITECTURE] = undefined$1;
        rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
        return _cpu;
      };
      this.getDevice = function() {
        var _device = {};
        _device[VENDOR] = undefined$1;
        _device[MODEL] = undefined$1;
        _device[TYPE] = undefined$1;
        rgxMapper.call(_device, _ua, _rgxmap.device);
        if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {
          _device[TYPE] = MOBILE;
        }
        if (_isSelfNav && _device[MODEL] == "Macintosh" && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {
          _device[MODEL] = "iPad";
          _device[TYPE] = TABLET;
        }
        return _device;
      };
      this.getEngine = function() {
        var _engine = {};
        _engine[NAME] = undefined$1;
        _engine[VERSION2] = undefined$1;
        rgxMapper.call(_engine, _ua, _rgxmap.engine);
        return _engine;
      };
      this.getOS = function() {
        var _os = {};
        _os[NAME] = undefined$1;
        _os[VERSION2] = undefined$1;
        rgxMapper.call(_os, _ua, _rgxmap.os);
        if (_isSelfNav && !_os[NAME] && _uach && _uach.platform && _uach.platform != "Unknown") {
          _os[NAME] = _uach.platform.replace(/chrome os/i, CHROMIUM_OS).replace(/macos/i, MAC_OS);
        }
        return _os;
      };
      this.getResult = function() {
        return {
          ua: this.getUA(),
          browser: this.getBrowser(),
          engine: this.getEngine(),
          os: this.getOS(),
          device: this.getDevice(),
          cpu: this.getCPU()
        };
      };
      this.getUA = function() {
        return _ua;
      };
      this.setUA = function(ua3) {
        _ua = typeof ua3 === STR_TYPE && ua3.length > UA_MAX_LENGTH ? trim2(ua3, UA_MAX_LENGTH) : ua3;
        return this;
      };
      this.setUA(_ua);
      return this;
    };
    UAParser2.VERSION = LIBVERSION;
    UAParser2.BROWSER = enumerize([NAME, VERSION2, MAJOR]);
    UAParser2.CPU = enumerize([ARCHITECTURE]);
    UAParser2.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);
    UAParser2.ENGINE = UAParser2.OS = enumerize([NAME, VERSION2]);
    {
      if (module.exports) {
        exports2 = module.exports = UAParser2;
      }
      exports2.UAParser = UAParser2;
    }
    var $2 = typeof window2 !== UNDEF_TYPE && (window2.jQuery || window2.Zepto);
    if ($2 && !$2.ua) {
      var parser = new UAParser2();
      $2.ua = parser.getResult();
      $2.ua.get = function() {
        return parser.getUA();
      };
      $2.ua.set = function(ua2) {
        parser.setUA(ua2);
        var result = parser.getResult();
        for (var prop in result) {
          $2.ua[prop] = result[prop];
        }
      };
    }
  })(typeof window === "object" ? window : commonjsGlobal);
})(uaParser, uaParser.exports);
var uaParserExports = uaParser.exports;
const UAParser = /* @__PURE__ */ getDefaultExportFromCjs(uaParserExports);
var isMergeableObject = function isMergeableObject2(value) {
  return isNonNullObject(value) && !isSpecial(value);
};
function isNonNullObject(value) {
  return !!value && typeof value === "object";
}
function isSpecial(value) {
  var stringValue = Object.prototype.toString.call(value);
  return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
}
var canUseSymbol = typeof Symbol === "function" && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
function isReactElement(value) {
  return value.$$typeof === REACT_ELEMENT_TYPE;
}
function emptyTarget(val) {
  return Array.isArray(val) ? [] : {};
}
function cloneUnlessOtherwiseSpecified(value, options) {
  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
}
function defaultArrayMerge(target, source, options) {
  return target.concat(source).map(function(element) {
    return cloneUnlessOtherwiseSpecified(element, options);
  });
}
function getMergeFunction(key2, options) {
  if (!options.customMerge) {
    return deepmerge;
  }
  var customMerge = options.customMerge(key2);
  return typeof customMerge === "function" ? customMerge : deepmerge;
}
function getEnumerableOwnPropertySymbols(target) {
  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
    return Object.propertyIsEnumerable.call(target, symbol);
  }) : [];
}
function getKeys(target) {
  return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
}
function propertyIsOnObject(object2, property) {
  try {
    return property in object2;
  } catch (_2) {
    return false;
  }
}
function propertyIsUnsafe(target, key2) {
  return propertyIsOnObject(target, key2) && !(Object.hasOwnProperty.call(target, key2) && Object.propertyIsEnumerable.call(target, key2));
}
function mergeObject(target, source, options) {
  var destination = {};
  if (options.isMergeableObject(target)) {
    getKeys(target).forEach(function(key2) {
      destination[key2] = cloneUnlessOtherwiseSpecified(target[key2], options);
    });
  }
  getKeys(source).forEach(function(key2) {
    if (propertyIsUnsafe(target, key2)) {
      return;
    }
    if (propertyIsOnObject(target, key2) && options.isMergeableObject(source[key2])) {
      destination[key2] = getMergeFunction(key2, options)(target[key2], source[key2], options);
    } else {
      destination[key2] = cloneUnlessOtherwiseSpecified(source[key2], options);
    }
  });
  return destination;
}
function deepmerge(target, source, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge;
  options.isMergeableObject = options.isMergeableObject || isMergeableObject;
  options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject(target, source, options);
  }
}
deepmerge.all = function deepmergeAll(array2, options) {
  if (!Array.isArray(array2)) {
    throw new Error("first argument should be an array");
  }
  return array2.reduce(function(prev, next) {
    return deepmerge(prev, next, options);
  }, {});
};
var deepmerge_1 = deepmerge;
var cjs = deepmerge_1;
const deepmerge$1 = /* @__PURE__ */ getDefaultExportFromCjs(cjs);
var classnames = { exports: {} };
/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/
(function(module) {
  (function() {
    var hasOwn = {}.hasOwnProperty;
    function classNames() {
      var classes = "";
      for (var i2 = 0; i2 < arguments.length; i2++) {
        var arg = arguments[i2];
        if (arg) {
          classes = appendClass(classes, parseValue(arg));
        }
      }
      return classes;
    }
    function parseValue(arg) {
      if (typeof arg === "string" || typeof arg === "number") {
        return arg;
      }
      if (typeof arg !== "object") {
        return "";
      }
      if (Array.isArray(arg)) {
        return classNames.apply(null, arg);
      }
      if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
        return arg.toString();
      }
      var classes = "";
      for (var key2 in arg) {
        if (hasOwn.call(arg, key2) && arg[key2]) {
          classes = appendClass(classes, key2);
        }
      }
      return classes;
    }
    function appendClass(value, newClass) {
      if (!newClass) {
        return value;
      }
      if (value) {
        return value + " " + newClass;
      }
      return value + newClass;
    }
    if (module.exports) {
      classNames.default = classNames;
      module.exports = classNames;
    } else {
      window.classNames = classNames;
    }
  })();
})(classnames);
var classnamesExports = classnames.exports;
const cn = /* @__PURE__ */ getDefaultExportFromCjs(classnamesExports);
var __defProp$1 = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1 = (obj, key2, value) => key2 in obj ? __defProp$1(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues$1 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp$1.call(b2, prop))
      __defNormalProp$1(a2, prop, b2[prop]);
  if (__getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(b2)) {
      if (__propIsEnum$1.call(b2, prop))
        __defNormalProp$1(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps = (a2, b2) => __defProps(a2, __getOwnPropDescs(b2));
var __publicField = (obj, key2, value) => {
  __defNormalProp$1(obj, typeof key2 !== "symbol" ? key2 + "" : key2, value);
  return value;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e2) {
        reject(e2);
      }
    };
    var step = (x2) => x2.done ? resolve(x2.value) : Promise.resolve(x2.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var _a$3, _b, _c, _d, _e$1, _f, _g, _h;
const sharedConfig = {};
function setHydrateContext(context) {
  sharedConfig.context = context;
}
const equalFn = (a2, b2) => a2 === b2;
const $PROXY = Symbol("solid-proxy");
const $TRACK = Symbol("solid-track");
const signalOptions = {
  equals: equalFn
};
let runEffects = runQueue;
const STALE = 1;
const PENDING = 2;
const UNOWNED = {
  owned: null,
  cleanups: null,
  context: null,
  owner: null
};
const NO_INIT = {};
var Owner = null;
let Transition$1 = null;
let Listener = null;
let Updates = null;
let Effects = null;
let ExecCount = 0;
function createRoot(fn, detachedOwner) {
  const listener = Listener, owner = Owner, unowned = fn.length === 0, root = unowned ? UNOWNED : {
    owned: null,
    cleanups: null,
    context: null,
    owner: detachedOwner === void 0 ? owner : detachedOwner
  }, updateFn = unowned ? fn : () => fn(() => untrack(() => cleanNode(root)));
  Owner = root;
  Listener = null;
  try {
    return runUpdates(updateFn, true);
  } finally {
    Listener = listener;
    Owner = owner;
  }
}
function createSignal(value, options) {
  options = options ? Object.assign({}, signalOptions, options) : signalOptions;
  const s2 = {
    value,
    observers: null,
    observerSlots: null,
    comparator: options.equals || void 0
  };
  const setter = (value2) => {
    if (typeof value2 === "function") {
      value2 = value2(s2.value);
    }
    return writeSignal(s2, value2);
  };
  return [readSignal.bind(s2), setter];
}
function createComputed(fn, value, options) {
  const c2 = createComputation(fn, value, true, STALE);
  updateComputation(c2);
}
function createRenderEffect(fn, value, options) {
  const c2 = createComputation(fn, value, false, STALE);
  updateComputation(c2);
}
function createEffect(fn, value, options) {
  runEffects = runUserEffects;
  const c2 = createComputation(fn, value, false, STALE);
  c2.user = true;
  Effects ? Effects.push(c2) : updateComputation(c2);
}
function createMemo(fn, value, options) {
  options = options ? Object.assign({}, signalOptions, options) : signalOptions;
  const c2 = createComputation(fn, value, true, 0);
  c2.observers = null;
  c2.observerSlots = null;
  c2.comparator = options.equals || void 0;
  updateComputation(c2);
  return readSignal.bind(c2);
}
function createResource(pSource, pFetcher, pOptions) {
  let source;
  let fetcher;
  let options;
  if (arguments.length === 2 && typeof pFetcher === "object" || arguments.length === 1) {
    source = true;
    fetcher = pSource;
    options = pFetcher || {};
  } else {
    source = pSource;
    fetcher = pFetcher;
    options = pOptions || {};
  }
  let pr = null, initP = NO_INIT, id2 = null, scheduled = false, resolved = "initialValue" in options, dynamic = typeof source === "function" && createMemo(source);
  const contexts = /* @__PURE__ */ new Set(), [value, setValue] = (options.storage || createSignal)(options.initialValue), [error, setError] = createSignal(void 0), [track, trigger] = createSignal(void 0, {
    equals: false
  }), [state2, setState] = createSignal(resolved ? "ready" : "unresolved");
  if (sharedConfig.context) {
    id2 = `${sharedConfig.context.id}${sharedConfig.context.count++}`;
    let v2;
    if (options.ssrLoadFrom === "initial")
      initP = options.initialValue;
    else if (sharedConfig.load && (v2 = sharedConfig.load(id2)))
      initP = v2[0];
  }
  function loadEnd(p2, v2, error2, key2) {
    if (pr === p2) {
      pr = null;
      resolved = true;
      if ((p2 === initP || v2 === initP) && options.onHydrated)
        queueMicrotask(() => options.onHydrated(key2, {
          value: v2
        }));
      initP = NO_INIT;
      completeLoad(v2, error2);
    }
    return v2;
  }
  function completeLoad(v2, err) {
    runUpdates(() => {
      if (err === void 0)
        setValue(() => v2);
      setState(err !== void 0 ? "errored" : "ready");
      setError(err);
      for (const c2 of contexts.keys())
        c2.decrement();
      contexts.clear();
    }, false);
  }
  function read() {
    const c2 = SuspenseContext, v2 = value(), err = error();
    if (err !== void 0 && !pr)
      throw err;
    if (Listener && !Listener.user && c2) {
      createComputed(() => {
        track();
        if (pr) {
          if (c2.resolved)
            ;
          else if (!contexts.has(c2)) {
            c2.increment();
            contexts.add(c2);
          }
        }
      });
    }
    return v2;
  }
  function load(refetching = true) {
    if (refetching !== false && scheduled)
      return;
    scheduled = false;
    const lookup2 = dynamic ? dynamic() : source;
    if (lookup2 == null || lookup2 === false) {
      loadEnd(pr, untrack(value));
      return;
    }
    const p2 = initP !== NO_INIT ? initP : untrack(() => fetcher(lookup2, {
      value: value(),
      refetching
    }));
    if (typeof p2 !== "object" || !(p2 && "then" in p2)) {
      loadEnd(pr, p2, void 0, lookup2);
      return p2;
    }
    pr = p2;
    scheduled = true;
    queueMicrotask(() => scheduled = false);
    runUpdates(() => {
      setState(resolved ? "refreshing" : "pending");
      trigger();
    }, false);
    return p2.then((v2) => loadEnd(p2, v2, void 0, lookup2), (e2) => loadEnd(p2, void 0, castError(e2), lookup2));
  }
  Object.defineProperties(read, {
    state: {
      get: () => state2()
    },
    error: {
      get: () => error()
    },
    loading: {
      get() {
        const s2 = state2();
        return s2 === "pending" || s2 === "refreshing";
      }
    },
    latest: {
      get() {
        if (!resolved)
          return read();
        const err = error();
        if (err && !pr)
          throw err;
        return value();
      }
    }
  });
  if (dynamic)
    createComputed(() => load(false));
  else
    load(false);
  return [read, {
    refetch: load,
    mutate: setValue
  }];
}
function batch(fn) {
  return runUpdates(fn, false);
}
function untrack(fn) {
  if (Listener === null)
    return fn();
  const listener = Listener;
  Listener = null;
  try {
    return fn();
  } finally {
    Listener = listener;
  }
}
function on(deps, fn, options) {
  const isArray2 = Array.isArray(deps);
  let prevInput;
  let defer = options && options.defer;
  return (prevValue) => {
    let input;
    if (isArray2) {
      input = Array(deps.length);
      for (let i2 = 0; i2 < deps.length; i2++)
        input[i2] = deps[i2]();
    } else
      input = deps();
    if (defer) {
      defer = false;
      return void 0;
    }
    const result = untrack(() => fn(input, prevInput, prevValue));
    prevInput = input;
    return result;
  };
}
function onMount(fn) {
  createEffect(() => untrack(fn));
}
function onCleanup(fn) {
  if (Owner === null)
    ;
  else if (Owner.cleanups === null)
    Owner.cleanups = [fn];
  else
    Owner.cleanups.push(fn);
  return fn;
}
function getListener() {
  return Listener;
}
function getOwner() {
  return Owner;
}
function createContext(defaultValue, options) {
  const id2 = Symbol("context");
  return {
    id: id2,
    Provider: createProvider$2(id2),
    defaultValue
  };
}
function useContext(context) {
  let ctx;
  return (ctx = lookup$4(Owner, context.id)) !== void 0 ? ctx : context.defaultValue;
}
function children(fn) {
  const children2 = createMemo(fn);
  const memo = createMemo(() => resolveChildren(children2()));
  memo.toArray = () => {
    const c2 = memo();
    return Array.isArray(c2) ? c2 : c2 != null ? [c2] : [];
  };
  return memo;
}
let SuspenseContext;
function readSignal() {
  const runningTransition = Transition$1;
  if (this.sources && (this.state || runningTransition)) {
    if (this.state === STALE || runningTransition)
      updateComputation(this);
    else {
      const updates = Updates;
      Updates = null;
      runUpdates(() => lookUpstream(this), false);
      Updates = updates;
    }
  }
  if (Listener) {
    const sSlot = this.observers ? this.observers.length : 0;
    if (!Listener.sources) {
      Listener.sources = [this];
      Listener.sourceSlots = [sSlot];
    } else {
      Listener.sources.push(this);
      Listener.sourceSlots.push(sSlot);
    }
    if (!this.observers) {
      this.observers = [Listener];
      this.observerSlots = [Listener.sources.length - 1];
    } else {
      this.observers.push(Listener);
      this.observerSlots.push(Listener.sources.length - 1);
    }
  }
  return this.value;
}
function writeSignal(node2, value, isComp) {
  let current = node2.value;
  if (!node2.comparator || !node2.comparator(current, value)) {
    node2.value = value;
    if (node2.observers && node2.observers.length) {
      runUpdates(() => {
        for (let i2 = 0; i2 < node2.observers.length; i2 += 1) {
          const o2 = node2.observers[i2];
          const TransitionRunning = Transition$1 && Transition$1.running;
          if (TransitionRunning && Transition$1.disposed.has(o2))
            ;
          if (TransitionRunning && !o2.tState || !TransitionRunning && !o2.state) {
            if (o2.pure)
              Updates.push(o2);
            else
              Effects.push(o2);
            if (o2.observers)
              markDownstream(o2);
          }
          if (TransitionRunning)
            ;
          else
            o2.state = STALE;
        }
        if (Updates.length > 1e6) {
          Updates = [];
          if (false)
            ;
          throw new Error();
        }
      }, false);
    }
  }
  return value;
}
function updateComputation(node2) {
  if (!node2.fn)
    return;
  cleanNode(node2);
  const owner = Owner, listener = Listener, time = ExecCount;
  Listener = Owner = node2;
  runComputation(node2, node2.value, time);
  Listener = listener;
  Owner = owner;
}
function runComputation(node2, value, time) {
  let nextValue;
  try {
    nextValue = node2.fn(value);
  } catch (err) {
    if (node2.pure) {
      {
        node2.state = STALE;
        node2.owned && node2.owned.forEach(cleanNode);
        node2.owned = null;
      }
    }
    handleError(err);
  }
  if (!node2.updatedAt || node2.updatedAt <= time) {
    if (node2.updatedAt != null && "observers" in node2) {
      writeSignal(node2, nextValue);
    } else
      node2.value = nextValue;
    node2.updatedAt = time;
  }
}
function createComputation(fn, init2, pure, state2 = STALE, options) {
  const c2 = {
    fn,
    state: state2,
    updatedAt: null,
    owned: null,
    sources: null,
    sourceSlots: null,
    cleanups: null,
    value: init2,
    owner: Owner,
    context: null,
    pure
  };
  if (Owner === null)
    ;
  else if (Owner !== UNOWNED) {
    {
      if (!Owner.owned)
        Owner.owned = [c2];
      else
        Owner.owned.push(c2);
    }
  }
  return c2;
}
function runTop(node2) {
  const runningTransition = Transition$1;
  if (node2.state === 0 || runningTransition)
    return;
  if (node2.state === PENDING || runningTransition)
    return lookUpstream(node2);
  if (node2.suspense && untrack(node2.suspense.inFallback))
    return node2.suspense.effects.push(node2);
  const ancestors = [node2];
  while ((node2 = node2.owner) && (!node2.updatedAt || node2.updatedAt < ExecCount)) {
    if (node2.state || runningTransition)
      ancestors.push(node2);
  }
  for (let i2 = ancestors.length - 1; i2 >= 0; i2--) {
    node2 = ancestors[i2];
    if (node2.state === STALE || runningTransition) {
      updateComputation(node2);
    } else if (node2.state === PENDING || runningTransition) {
      const updates = Updates;
      Updates = null;
      runUpdates(() => lookUpstream(node2, ancestors[0]), false);
      Updates = updates;
    }
  }
}
function runUpdates(fn, init2) {
  if (Updates)
    return fn();
  let wait = false;
  if (!init2)
    Updates = [];
  if (Effects)
    wait = true;
  else
    Effects = [];
  ExecCount++;
  try {
    const res = fn();
    completeUpdates(wait);
    return res;
  } catch (err) {
    if (!wait)
      Effects = null;
    Updates = null;
    handleError(err);
  }
}
function completeUpdates(wait) {
  if (Updates) {
    runQueue(Updates);
    Updates = null;
  }
  if (wait)
    return;
  const e2 = Effects;
  Effects = null;
  if (e2.length)
    runUpdates(() => runEffects(e2), false);
}
function runQueue(queue2) {
  for (let i2 = 0; i2 < queue2.length; i2++)
    runTop(queue2[i2]);
}
function runUserEffects(queue2) {
  let i2, userLength = 0;
  for (i2 = 0; i2 < queue2.length; i2++) {
    const e2 = queue2[i2];
    if (!e2.user)
      runTop(e2);
    else
      queue2[userLength++] = e2;
  }
  if (sharedConfig.context)
    setHydrateContext();
  for (i2 = 0; i2 < userLength; i2++)
    runTop(queue2[i2]);
}
function lookUpstream(node2, ignore) {
  const runningTransition = Transition$1;
  node2.state = 0;
  for (let i2 = 0; i2 < node2.sources.length; i2 += 1) {
    const source = node2.sources[i2];
    if (source.sources) {
      if (source.state === STALE || runningTransition) {
        if (source !== ignore)
          runTop(source);
      } else if (source.state === PENDING || runningTransition)
        lookUpstream(source, ignore);
    }
  }
}
function markDownstream(node2) {
  const runningTransition = Transition$1;
  for (let i2 = 0; i2 < node2.observers.length; i2 += 1) {
    const o2 = node2.observers[i2];
    if (!o2.state || runningTransition) {
      o2.state = PENDING;
      if (o2.pure)
        Updates.push(o2);
      else
        Effects.push(o2);
      o2.observers && markDownstream(o2);
    }
  }
}
function cleanNode(node2) {
  let i2;
  if (node2.sources) {
    while (node2.sources.length) {
      const source = node2.sources.pop(), index2 = node2.sourceSlots.pop(), obs = source.observers;
      if (obs && obs.length) {
        const n2 = obs.pop(), s2 = source.observerSlots.pop();
        if (index2 < obs.length) {
          n2.sourceSlots[s2] = index2;
          obs[index2] = n2;
          source.observerSlots[index2] = s2;
        }
      }
    }
  }
  if (node2.owned) {
    for (i2 = 0; i2 < node2.owned.length; i2++)
      cleanNode(node2.owned[i2]);
    node2.owned = null;
  }
  if (node2.cleanups) {
    for (i2 = 0; i2 < node2.cleanups.length; i2++)
      node2.cleanups[i2]();
    node2.cleanups = null;
  }
  node2.state = 0;
  node2.context = null;
}
function castError(err) {
  if (err instanceof Error || typeof err === "string")
    return err;
  return new Error("Unknown error");
}
function handleError(err) {
  err = castError(err);
  throw err;
}
function lookup$4(owner, key2) {
  return owner ? owner.context && owner.context[key2] !== void 0 ? owner.context[key2] : lookup$4(owner.owner, key2) : void 0;
}
function resolveChildren(children2) {
  if (typeof children2 === "function" && !children2.length)
    return resolveChildren(children2());
  if (Array.isArray(children2)) {
    const results = [];
    for (let i2 = 0; i2 < children2.length; i2++) {
      const result = resolveChildren(children2[i2]);
      Array.isArray(result) ? results.push.apply(results, result) : results.push(result);
    }
    return results;
  }
  return children2;
}
function createProvider$2(id2, options) {
  return function provider(props) {
    let res;
    createRenderEffect(() => res = untrack(() => {
      Owner.context = {
        [id2]: props.value
      };
      return children(() => props.children);
    }), void 0);
    return res;
  };
}
const FALLBACK = Symbol("fallback");
function dispose(d2) {
  for (let i2 = 0; i2 < d2.length; i2++)
    d2[i2]();
}
function mapArray(list, mapFn, options = {}) {
  let items = [], mapped = [], disposers = [], len2 = 0, indexes = mapFn.length > 1 ? [] : null;
  onCleanup(() => dispose(disposers));
  return () => {
    let newItems = list() || [], i2, j2;
    newItems[$TRACK];
    return untrack(() => {
      let newLen = newItems.length, newIndices, newIndicesNext, temp, tempdisposers, tempIndexes, start, end, newEnd, item;
      if (newLen === 0) {
        if (len2 !== 0) {
          dispose(disposers);
          disposers = [];
          items = [];
          mapped = [];
          len2 = 0;
          indexes && (indexes = []);
        }
        if (options.fallback) {
          items = [FALLBACK];
          mapped[0] = createRoot((disposer) => {
            disposers[0] = disposer;
            return options.fallback();
          });
          len2 = 1;
        }
      } else if (len2 === 0) {
        mapped = new Array(newLen);
        for (j2 = 0; j2 < newLen; j2++) {
          items[j2] = newItems[j2];
          mapped[j2] = createRoot(mapper);
        }
        len2 = newLen;
      } else {
        temp = new Array(newLen);
        tempdisposers = new Array(newLen);
        indexes && (tempIndexes = new Array(newLen));
        for (start = 0, end = Math.min(len2, newLen); start < end && items[start] === newItems[start]; start++)
          ;
        for (end = len2 - 1, newEnd = newLen - 1; end >= start && newEnd >= start && items[end] === newItems[newEnd]; end--, newEnd--) {
          temp[newEnd] = mapped[end];
          tempdisposers[newEnd] = disposers[end];
          indexes && (tempIndexes[newEnd] = indexes[end]);
        }
        newIndices = /* @__PURE__ */ new Map();
        newIndicesNext = new Array(newEnd + 1);
        for (j2 = newEnd; j2 >= start; j2--) {
          item = newItems[j2];
          i2 = newIndices.get(item);
          newIndicesNext[j2] = i2 === void 0 ? -1 : i2;
          newIndices.set(item, j2);
        }
        for (i2 = start; i2 <= end; i2++) {
          item = items[i2];
          j2 = newIndices.get(item);
          if (j2 !== void 0 && j2 !== -1) {
            temp[j2] = mapped[i2];
            tempdisposers[j2] = disposers[i2];
            indexes && (tempIndexes[j2] = indexes[i2]);
            j2 = newIndicesNext[j2];
            newIndices.set(item, j2);
          } else
            disposers[i2]();
        }
        for (j2 = start; j2 < newLen; j2++) {
          if (j2 in temp) {
            mapped[j2] = temp[j2];
            disposers[j2] = tempdisposers[j2];
            if (indexes) {
              indexes[j2] = tempIndexes[j2];
              indexes[j2](j2);
            }
          } else
            mapped[j2] = createRoot(mapper);
        }
        mapped = mapped.slice(0, len2 = newLen);
        items = newItems.slice(0);
      }
      return mapped;
    });
    function mapper(disposer) {
      disposers[j2] = disposer;
      if (indexes) {
        const [s2, set] = createSignal(j2);
        indexes[j2] = set;
        return mapFn(newItems[j2], s2);
      }
      return mapFn(newItems[j2]);
    }
  };
}
function createComponent(Comp, props) {
  return untrack(() => Comp(props || {}));
}
function trueFn() {
  return true;
}
const propTraps = {
  get(_2, property, receiver) {
    if (property === $PROXY)
      return receiver;
    return _2.get(property);
  },
  has(_2, property) {
    if (property === $PROXY)
      return true;
    return _2.has(property);
  },
  set: trueFn,
  deleteProperty: trueFn,
  getOwnPropertyDescriptor(_2, property) {
    return {
      configurable: true,
      enumerable: true,
      get() {
        return _2.get(property);
      },
      set: trueFn,
      deleteProperty: trueFn
    };
  },
  ownKeys(_2) {
    return _2.keys();
  }
};
function resolveSource(s2) {
  return !(s2 = typeof s2 === "function" ? s2() : s2) ? {} : s2;
}
function mergeProps(...sources) {
  let proxy = false;
  for (let i2 = 0; i2 < sources.length; i2++) {
    const s2 = sources[i2];
    proxy = proxy || !!s2 && $PROXY in s2;
    sources[i2] = typeof s2 === "function" ? (proxy = true, createMemo(s2)) : s2;
  }
  if (proxy) {
    return new Proxy({
      get(property) {
        for (let i2 = sources.length - 1; i2 >= 0; i2--) {
          const v2 = resolveSource(sources[i2])[property];
          if (v2 !== void 0)
            return v2;
        }
      },
      has(property) {
        for (let i2 = sources.length - 1; i2 >= 0; i2--) {
          if (property in resolveSource(sources[i2]))
            return true;
        }
        return false;
      },
      keys() {
        const keys2 = [];
        for (let i2 = 0; i2 < sources.length; i2++)
          keys2.push(...Object.keys(resolveSource(sources[i2])));
        return [...new Set(keys2)];
      }
    }, propTraps);
  }
  const target = {};
  for (let i2 = sources.length - 1; i2 >= 0; i2--) {
    if (sources[i2]) {
      const descriptors = Object.getOwnPropertyDescriptors(sources[i2]);
      for (const key2 in descriptors) {
        if (key2 in target)
          continue;
        Object.defineProperty(target, key2, {
          enumerable: true,
          get() {
            for (let i3 = sources.length - 1; i3 >= 0; i3--) {
              const v2 = (sources[i3] || {})[key2];
              if (v2 !== void 0)
                return v2;
            }
          }
        });
      }
    }
  }
  return target;
}
function splitProps(props, ...keys2) {
  const blocked = new Set(keys2.flat());
  if ($PROXY in props) {
    const res = keys2.map((k2) => {
      return new Proxy({
        get(property) {
          return k2.includes(property) ? props[property] : void 0;
        },
        has(property) {
          return k2.includes(property) && property in props;
        },
        keys() {
          return k2.filter((property) => property in props);
        }
      }, propTraps);
    });
    res.push(new Proxy({
      get(property) {
        return blocked.has(property) ? void 0 : props[property];
      },
      has(property) {
        return blocked.has(property) ? false : property in props;
      },
      keys() {
        return Object.keys(props).filter((k2) => !blocked.has(k2));
      }
    }, propTraps));
    return res;
  }
  const descriptors = Object.getOwnPropertyDescriptors(props);
  keys2.push(Object.keys(descriptors).filter((k2) => !blocked.has(k2)));
  return keys2.map((k2) => {
    const clone = {};
    for (let i2 = 0; i2 < k2.length; i2++) {
      const key2 = k2[i2];
      if (!(key2 in props))
        continue;
      Object.defineProperty(clone, key2, descriptors[key2] ? descriptors[key2] : {
        get() {
          return props[key2];
        },
        set() {
          return true;
        },
        enumerable: true
      });
    }
    return clone;
  });
}
function For(props) {
  const fallback = "fallback" in props && {
    fallback: () => props.fallback
  };
  return createMemo(mapArray(() => props.each, props.children, fallback || void 0));
}
function Show(props) {
  let strictEqual = false;
  const keyed = props.keyed;
  const condition = createMemo(() => props.when, void 0, {
    equals: (a2, b2) => strictEqual ? a2 === b2 : !a2 === !b2
  });
  return createMemo(() => {
    const c2 = condition();
    if (c2) {
      const child = props.children;
      const fn = typeof child === "function" && child.length > 0;
      strictEqual = keyed || fn;
      return fn ? untrack(() => child(c2)) : child;
    }
    return props.fallback;
  }, void 0, void 0);
}
function Switch(props) {
  let strictEqual = false;
  let keyed = false;
  const equals = (a2, b2) => a2[0] === b2[0] && (strictEqual ? a2[1] === b2[1] : !a2[1] === !b2[1]) && a2[2] === b2[2];
  const conditions = children(() => props.children), evalConditions = createMemo(() => {
    let conds = conditions();
    if (!Array.isArray(conds))
      conds = [conds];
    for (let i2 = 0; i2 < conds.length; i2++) {
      const c2 = conds[i2].when;
      if (c2) {
        keyed = !!conds[i2].keyed;
        return [i2, c2, conds[i2]];
      }
    }
    return [-1];
  }, void 0, {
    equals
  });
  return createMemo(() => {
    const [index2, when, cond] = evalConditions();
    if (index2 < 0)
      return props.fallback;
    const c2 = cond.children;
    const fn = typeof c2 === "function" && c2.length > 0;
    strictEqual = keyed || fn;
    return fn ? untrack(() => c2(when)) : c2;
  }, void 0, void 0);
}
function Match(props) {
  return props;
}
const booleans = ["allowfullscreen", "async", "autofocus", "autoplay", "checked", "controls", "default", "disabled", "formnovalidate", "hidden", "indeterminate", "ismap", "loop", "multiple", "muted", "nomodule", "novalidate", "open", "playsinline", "readonly", "required", "reversed", "seamless", "selected"];
const Properties = /* @__PURE__ */ new Set(["className", "value", "readOnly", "formNoValidate", "isMap", "noModule", "playsInline", ...booleans]);
const ChildProperties = /* @__PURE__ */ new Set(["innerHTML", "textContent", "innerText", "children"]);
const Aliases = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {
  className: "class",
  htmlFor: "for"
});
const PropAliases = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {
  class: "className",
  formnovalidate: "formNoValidate",
  ismap: "isMap",
  nomodule: "noModule",
  playsinline: "playsInline",
  readonly: "readOnly"
});
const DelegatedEvents = /* @__PURE__ */ new Set(["beforeinput", "click", "dblclick", "contextmenu", "focusin", "focusout", "input", "keydown", "keyup", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "pointerdown", "pointermove", "pointerout", "pointerover", "pointerup", "touchend", "touchmove", "touchstart"]);
const SVGElements = /* @__PURE__ */ new Set([
  "altGlyph",
  "altGlyphDef",
  "altGlyphItem",
  "animate",
  "animateColor",
  "animateMotion",
  "animateTransform",
  "circle",
  "clipPath",
  "color-profile",
  "cursor",
  "defs",
  "desc",
  "ellipse",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence",
  "filter",
  "font",
  "font-face",
  "font-face-format",
  "font-face-name",
  "font-face-src",
  "font-face-uri",
  "foreignObject",
  "g",
  "glyph",
  "glyphRef",
  "hkern",
  "image",
  "line",
  "linearGradient",
  "marker",
  "mask",
  "metadata",
  "missing-glyph",
  "mpath",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "set",
  "stop",
  "svg",
  "switch",
  "symbol",
  "text",
  "textPath",
  "tref",
  "tspan",
  "use",
  "view",
  "vkern"
]);
const SVGNamespace = {
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace"
};
function reconcileArrays(parentNode, a2, b2) {
  let bLength = b2.length, aEnd = a2.length, bEnd = bLength, aStart = 0, bStart = 0, after = a2[aEnd - 1].nextSibling, map2 = null;
  while (aStart < aEnd || bStart < bEnd) {
    if (a2[aStart] === b2[bStart]) {
      aStart++;
      bStart++;
      continue;
    }
    while (a2[aEnd - 1] === b2[bEnd - 1]) {
      aEnd--;
      bEnd--;
    }
    if (aEnd === aStart) {
      const node2 = bEnd < bLength ? bStart ? b2[bStart - 1].nextSibling : b2[bEnd - bStart] : after;
      while (bStart < bEnd)
        parentNode.insertBefore(b2[bStart++], node2);
    } else if (bEnd === bStart) {
      while (aStart < aEnd) {
        if (!map2 || !map2.has(a2[aStart]))
          a2[aStart].remove();
        aStart++;
      }
    } else if (a2[aStart] === b2[bEnd - 1] && b2[bStart] === a2[aEnd - 1]) {
      const node2 = a2[--aEnd].nextSibling;
      parentNode.insertBefore(b2[bStart++], a2[aStart++].nextSibling);
      parentNode.insertBefore(b2[--bEnd], node2);
      a2[aEnd] = b2[bEnd];
    } else {
      if (!map2) {
        map2 = /* @__PURE__ */ new Map();
        let i2 = bStart;
        while (i2 < bEnd)
          map2.set(b2[i2], i2++);
      }
      const index2 = map2.get(a2[aStart]);
      if (index2 != null) {
        if (bStart < index2 && index2 < bEnd) {
          let i2 = aStart, sequence2 = 1, t2;
          while (++i2 < aEnd && i2 < bEnd) {
            if ((t2 = map2.get(a2[i2])) == null || t2 !== index2 + sequence2)
              break;
            sequence2++;
          }
          if (sequence2 > index2 - bStart) {
            const node2 = a2[aStart];
            while (bStart < index2)
              parentNode.insertBefore(b2[bStart++], node2);
          } else
            parentNode.replaceChild(b2[bStart++], a2[aStart++]);
        } else
          aStart++;
      } else
        a2[aStart++].remove();
    }
  }
}
const $$EVENTS = "_$DX_DELEGATE";
function render(code2, element, init2, options = {}) {
  let disposer;
  createRoot((dispose2) => {
    disposer = dispose2;
    element === document ? code2() : insert(element, code2(), element.firstChild ? null : void 0, init2);
  }, options.owner);
  return () => {
    disposer();
    element.textContent = "";
  };
}
function template$1(html, check, isSVG) {
  if (typeof window === "undefined") {
    return null;
  }
  const t2 = document.createElement("template");
  t2.innerHTML = html;
  let node2 = t2.content.firstChild;
  if (isSVG)
    node2 = node2.firstChild;
  return node2;
}
function delegateEvents(eventNames, document2 = window.document) {
  const e2 = document2[$$EVENTS] || (document2[$$EVENTS] = /* @__PURE__ */ new Set());
  for (let i2 = 0, l2 = eventNames.length; i2 < l2; i2++) {
    const name2 = eventNames[i2];
    if (!e2.has(name2)) {
      e2.add(name2);
      document2.addEventListener(name2, eventHandler);
    }
  }
}
function setAttribute(node2, name2, value) {
  if (value == null)
    node2.removeAttribute(name2);
  else
    node2.setAttribute(name2, value);
}
function setAttributeNS(node2, namespace, name2, value) {
  if (value == null)
    node2.removeAttributeNS(namespace, name2);
  else
    node2.setAttributeNS(namespace, name2, value);
}
function className(node2, value) {
  if (value == null)
    node2.removeAttribute("class");
  else
    node2.className = value;
}
function addEventListener(node2, name2, handler, delegate) {
  if (delegate) {
    if (Array.isArray(handler)) {
      node2[`$$${name2}`] = handler[0];
      node2[`$$${name2}Data`] = handler[1];
    } else
      node2[`$$${name2}`] = handler;
  } else if (Array.isArray(handler)) {
    const handlerFn = handler[0];
    node2.addEventListener(name2, handler[0] = (e2) => handlerFn.call(node2, handler[1], e2));
  } else
    node2.addEventListener(name2, handler);
}
function classList(node2, value, prev = {}) {
  const classKeys = Object.keys(value || {}), prevKeys = Object.keys(prev);
  let i2, len2;
  for (i2 = 0, len2 = prevKeys.length; i2 < len2; i2++) {
    const key2 = prevKeys[i2];
    if (!key2 || key2 === "undefined" || value[key2])
      continue;
    toggleClassKey(node2, key2, false);
    delete prev[key2];
  }
  for (i2 = 0, len2 = classKeys.length; i2 < len2; i2++) {
    const key2 = classKeys[i2], classValue = !!value[key2];
    if (!key2 || key2 === "undefined" || prev[key2] === classValue || !classValue)
      continue;
    toggleClassKey(node2, key2, true);
    prev[key2] = classValue;
  }
  return prev;
}
function style(node2, value, prev) {
  if (!value)
    return prev ? setAttribute(node2, "style") : value;
  const nodeStyle = node2.style;
  if (typeof value === "string")
    return nodeStyle.cssText = value;
  typeof prev === "string" && (nodeStyle.cssText = prev = void 0);
  prev || (prev = {});
  value || (value = {});
  let v2, s2;
  for (s2 in prev) {
    value[s2] == null && nodeStyle.removeProperty(s2);
    delete prev[s2];
  }
  for (s2 in value) {
    v2 = value[s2];
    if (v2 !== prev[s2]) {
      nodeStyle.setProperty(s2, v2);
      prev[s2] = v2;
    }
  }
  return prev;
}
function spread$1(node2, props = {}, isSVG, skipChildren) {
  const prevProps = {};
  if (!skipChildren) {
    createRenderEffect(() => prevProps.children = insertExpression(node2, props.children, prevProps.children));
  }
  createRenderEffect(() => props.ref && props.ref(node2));
  createRenderEffect(() => assign(node2, props, isSVG, true, prevProps, true));
  return prevProps;
}
function use(fn, element, arg) {
  return untrack(() => fn(element, arg));
}
function insert(parent, accessor, marker, initial) {
  if (marker !== void 0 && !initial)
    initial = [];
  if (typeof accessor !== "function")
    return insertExpression(parent, accessor, initial, marker);
  createRenderEffect((current) => insertExpression(parent, accessor(), current, marker), initial);
}
function assign(node2, props, isSVG, skipChildren, prevProps = {}, skipRef = false) {
  props || (props = {});
  for (const prop in prevProps) {
    if (!(prop in props)) {
      if (prop === "children")
        continue;
      prevProps[prop] = assignProp(node2, prop, null, prevProps[prop], isSVG, skipRef);
    }
  }
  for (const prop in props) {
    if (prop === "children") {
      if (!skipChildren)
        insertExpression(node2, props.children);
      continue;
    }
    const value = props[prop];
    prevProps[prop] = assignProp(node2, prop, value, prevProps[prop], isSVG, skipRef);
  }
}
function getNextElement(template2) {
  let node2, key2;
  if (!sharedConfig.context || !(node2 = sharedConfig.registry.get(key2 = getHydrationKey()))) {
    return template2.cloneNode(true);
  }
  if (sharedConfig.completed)
    sharedConfig.completed.add(node2);
  sharedConfig.registry.delete(key2);
  return node2;
}
function toPropertyName(name2) {
  return name2.toLowerCase().replace(/-([a-z])/g, (_2, w2) => w2.toUpperCase());
}
function toggleClassKey(node2, key2, value) {
  const classNames = key2.trim().split(/\s+/);
  for (let i2 = 0, nameLen = classNames.length; i2 < nameLen; i2++)
    node2.classList.toggle(classNames[i2], value);
}
function assignProp(node2, prop, value, prev, isSVG, skipRef) {
  let isCE, isProp, isChildProp;
  if (prop === "style")
    return style(node2, value, prev);
  if (prop === "classList")
    return classList(node2, value, prev);
  if (value === prev)
    return prev;
  if (prop === "ref") {
    if (!skipRef)
      value(node2);
  } else if (prop.slice(0, 3) === "on:") {
    const e2 = prop.slice(3);
    prev && node2.removeEventListener(e2, prev);
    value && node2.addEventListener(e2, value);
  } else if (prop.slice(0, 10) === "oncapture:") {
    const e2 = prop.slice(10);
    prev && node2.removeEventListener(e2, prev, true);
    value && node2.addEventListener(e2, value, true);
  } else if (prop.slice(0, 2) === "on") {
    const name2 = prop.slice(2).toLowerCase();
    const delegate = DelegatedEvents.has(name2);
    if (!delegate && prev) {
      const h2 = Array.isArray(prev) ? prev[0] : prev;
      node2.removeEventListener(name2, h2);
    }
    if (delegate || value) {
      addEventListener(node2, name2, value, delegate);
      delegate && delegateEvents([name2]);
    }
  } else if ((isChildProp = ChildProperties.has(prop)) || !isSVG && (PropAliases[prop] || (isProp = Properties.has(prop))) || (isCE = node2.nodeName.includes("-"))) {
    if (prop === "class" || prop === "className")
      className(node2, value);
    else if (isCE && !isProp && !isChildProp)
      node2[toPropertyName(prop)] = value;
    else
      node2[PropAliases[prop] || prop] = value;
  } else {
    const ns = isSVG && prop.indexOf(":") > -1 && SVGNamespace[prop.split(":")[0]];
    if (ns)
      setAttributeNS(node2, ns, prop, value);
    else
      setAttribute(node2, Aliases[prop] || prop, value);
  }
  return value;
}
function eventHandler(e2) {
  const key2 = `$$${e2.type}`;
  let node2 = e2.composedPath && e2.composedPath()[0] || e2.target;
  if (e2.target !== node2) {
    Object.defineProperty(e2, "target", {
      configurable: true,
      value: node2
    });
  }
  Object.defineProperty(e2, "currentTarget", {
    configurable: true,
    get() {
      return node2 || document;
    }
  });
  if (sharedConfig.registry && !sharedConfig.done) {
    sharedConfig.done = true;
    document.querySelectorAll("[id^=pl-]").forEach((elem2) => {
      while (elem2 && elem2.nodeType !== 8 && elem2.nodeValue !== "pl-" + e2) {
        let x2 = elem2.nextSibling;
        elem2.remove();
        elem2 = x2;
      }
      elem2 && elem2.remove();
    });
  }
  while (node2) {
    const handler = node2[key2];
    if (handler && !node2.disabled) {
      const data2 = node2[`${key2}Data`];
      data2 !== void 0 ? handler.call(node2, data2, e2) : handler.call(node2, e2);
      if (e2.cancelBubble)
        return;
    }
    node2 = node2._$host || node2.parentNode || node2.host;
  }
}
function insertExpression(parent, value, current, marker, unwrapArray) {
  if (sharedConfig.context && !current)
    current = [...parent.childNodes];
  while (typeof current === "function")
    current = current();
  if (value === current)
    return current;
  const t2 = typeof value, multi = marker !== void 0;
  parent = multi && current[0] && current[0].parentNode || parent;
  if (t2 === "string" || t2 === "number") {
    if (sharedConfig.context)
      return current;
    if (t2 === "number")
      value = value.toString();
    if (multi) {
      let node2 = current[0];
      if (node2 && node2.nodeType === 3) {
        node2.data = value;
      } else
        node2 = document.createTextNode(value);
      current = cleanChildren(parent, current, marker, node2);
    } else {
      if (current !== "" && typeof current === "string") {
        current = parent.firstChild.data = value;
      } else
        current = parent.textContent = value;
    }
  } else if (value == null || t2 === "boolean") {
    if (sharedConfig.context)
      return current;
    current = cleanChildren(parent, current, marker);
  } else if (t2 === "function") {
    createRenderEffect(() => {
      let v2 = value();
      while (typeof v2 === "function")
        v2 = v2();
      current = insertExpression(parent, v2, current, marker);
    });
    return () => current;
  } else if (Array.isArray(value)) {
    const array2 = [];
    const currentArray = current && Array.isArray(current);
    if (normalizeIncomingArray(array2, value, current, unwrapArray)) {
      createRenderEffect(() => current = insertExpression(parent, array2, current, marker, true));
      return () => current;
    }
    if (sharedConfig.context) {
      if (!array2.length)
        return current;
      for (let i2 = 0; i2 < array2.length; i2++) {
        if (array2[i2].parentNode)
          return current = array2;
      }
    }
    if (array2.length === 0) {
      current = cleanChildren(parent, current, marker);
      if (multi)
        return current;
    } else if (currentArray) {
      if (current.length === 0) {
        appendNodes(parent, array2, marker);
      } else
        reconcileArrays(parent, current, array2);
    } else {
      current && cleanChildren(parent);
      appendNodes(parent, array2);
    }
    current = array2;
  } else if (value instanceof Node) {
    if (sharedConfig.context && value.parentNode)
      return current = multi ? [value] : value;
    if (Array.isArray(current)) {
      if (multi)
        return current = cleanChildren(parent, current, marker, value);
      cleanChildren(parent, current, null, value);
    } else if (current == null || current === "" || !parent.firstChild) {
      parent.appendChild(value);
    } else
      parent.replaceChild(value, parent.firstChild);
    current = value;
  } else
    ;
  return current;
}
function normalizeIncomingArray(normalized, array2, current, unwrap2) {
  let dynamic = false;
  for (let i2 = 0, len2 = array2.length; i2 < len2; i2++) {
    let item = array2[i2], prev = current && current[i2];
    if (item instanceof Node) {
      normalized.push(item);
    } else if (item == null || item === true || item === false)
      ;
    else if (Array.isArray(item)) {
      dynamic = normalizeIncomingArray(normalized, item, prev) || dynamic;
    } else if (typeof item === "function") {
      if (unwrap2) {
        while (typeof item === "function")
          item = item();
        dynamic = normalizeIncomingArray(normalized, Array.isArray(item) ? item : [item], Array.isArray(prev) ? prev : [prev]) || dynamic;
      } else {
        normalized.push(item);
        dynamic = true;
      }
    } else {
      const value = String(item);
      if (prev && prev.nodeType === 3 && prev.data === value) {
        normalized.push(prev);
      } else
        normalized.push(document.createTextNode(value));
    }
  }
  return dynamic;
}
function appendNodes(parent, array2, marker = null) {
  for (let i2 = 0, len2 = array2.length; i2 < len2; i2++)
    parent.insertBefore(array2[i2], marker);
}
function cleanChildren(parent, current, marker, replacement) {
  if (marker === void 0)
    return parent.textContent = "";
  const node2 = replacement || document.createTextNode("");
  if (current.length) {
    let inserted = false;
    for (let i2 = current.length - 1; i2 >= 0; i2--) {
      const el2 = current[i2];
      if (node2 !== el2) {
        const isParent = el2.parentNode === parent;
        if (!inserted && !i2)
          isParent ? parent.replaceChild(node2, el2) : parent.insertBefore(node2, marker);
        else
          isParent && el2.remove();
      } else
        inserted = true;
    }
  } else
    parent.insertBefore(node2, marker);
  return [node2];
}
function getHydrationKey() {
  const hydrate = sharedConfig.context;
  return `${hydrate.id}${hydrate.count++}`;
}
const SVG_NAMESPACE = "http://www.w3.org/2000/svg";
function createElement(tagName, isSVG = false) {
  return isSVG ? document.createElementNS(SVG_NAMESPACE, tagName) : document.createElement(tagName);
}
function Portal(props) {
  const {
    useShadow
  } = props, marker = document.createTextNode(""), mount = props.mount || document.body;
  function renderPortal() {
    if (sharedConfig.context) {
      const [s2, set] = createSignal(false);
      queueMicrotask(() => set(true));
      return () => s2() && props.children;
    } else
      return () => props.children;
  }
  if (mount instanceof HTMLHeadElement) {
    const [clean2, setClean] = createSignal(false);
    const cleanup = () => setClean(true);
    createRoot((dispose2) => insert(mount, () => !clean2() ? renderPortal()() : dispose2(), null));
    onCleanup(() => {
      if (sharedConfig.context)
        queueMicrotask(cleanup);
      else
        cleanup();
    });
  } else {
    const container = createElement(props.isSVG ? "g" : "div", props.isSVG), renderRoot = useShadow && container.attachShadow ? container.attachShadow({
      mode: "open"
    }) : container;
    Object.defineProperty(container, "_$host", {
      get() {
        return marker.parentNode;
      },
      configurable: true
    });
    insert(renderRoot, renderPortal());
    mount.appendChild(container);
    props.ref && props.ref(container);
    onCleanup(() => mount.removeChild(container));
  }
  return marker;
}
function Dynamic(props) {
  const [p2, others] = splitProps(props, ["component"]);
  const cached = createMemo(() => p2.component);
  return createMemo(() => {
    const component = cached();
    switch (typeof component) {
      case "function":
        return untrack(() => component(others));
      case "string":
        const isSvg = SVGElements.has(component);
        const el2 = sharedConfig.context ? getNextElement() : createElement(component, isSvg);
        spread$1(el2, others, isSvg);
        return el2;
    }
  });
}
var THEME = /* @__PURE__ */ ((THEME2) => {
  THEME2["DARK"] = "DARK";
  THEME2["LIGHT"] = "LIGHT";
  return THEME2;
})(THEME || {});
let e$1 = { data: "" }, t$3 = (t2) => "object" == typeof window ? ((t2 ? t2.querySelector("#_goober") : window._goober) || Object.assign((t2 || document.head).appendChild(document.createElement("style")), { innerHTML: " ", id: "_goober" })).firstChild : t2 || e$1, l$1 = /(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g, a = /\/\*[^]*?\*\/|  +/g, n$1 = /\n+/g, o = (e2, t2) => {
  let r2 = "", l2 = "", a2 = "";
  for (let n2 in e2) {
    let c2 = e2[n2];
    "@" == n2[0] ? "i" == n2[1] ? r2 = n2 + " " + c2 + ";" : l2 += "f" == n2[1] ? o(c2, n2) : n2 + "{" + o(c2, "k" == n2[1] ? "" : t2) + "}" : "object" == typeof c2 ? l2 += o(c2, t2 ? t2.replace(/([^,])+/g, (e3) => n2.replace(/(^:.*)|([^,])+/g, (t3) => /&/.test(t3) ? t3.replace(/&/g, e3) : e3 ? e3 + " " + t3 : t3)) : n2) : null != c2 && (n2 = /^--/.test(n2) ? n2 : n2.replace(/[A-Z]/g, "-$&").toLowerCase(), a2 += o.p ? o.p(n2, c2) : n2 + ":" + c2 + ";");
  }
  return r2 + (t2 && a2 ? t2 + "{" + a2 + "}" : a2) + l2;
}, c$1 = {}, s = (e2) => {
  if ("object" == typeof e2) {
    let t2 = "";
    for (let r2 in e2)
      t2 += r2 + s(e2[r2]);
    return t2;
  }
  return e2;
}, i = (e2, t2, r2, i2, p2) => {
  let u2 = s(e2), d2 = c$1[u2] || (c$1[u2] = ((e3) => {
    let t3 = 0, r22 = 11;
    for (; t3 < e3.length; )
      r22 = 101 * r22 + e3.charCodeAt(t3++) >>> 0;
    return "go" + r22;
  })(u2));
  if (!c$1[d2]) {
    let t3 = u2 !== e2 ? e2 : ((e3) => {
      let t4, r22, o2 = [{}];
      for (; t4 = l$1.exec(e3.replace(a, "")); )
        t4[4] ? o2.shift() : t4[3] ? (r22 = t4[3].replace(n$1, " ").trim(), o2.unshift(o2[0][r22] = o2[0][r22] || {})) : o2[0][t4[1]] = t4[2].replace(n$1, " ").trim();
      return o2[0];
    })(e2);
    c$1[d2] = o(p2 ? { ["@keyframes " + d2]: t3 } : t3, r2 ? "" : "." + d2);
  }
  let f2 = r2 && c$1.g ? c$1.g : null;
  return r2 && (c$1.g = c$1[d2]), ((e3, t3, r22, l2) => {
    l2 ? t3.data = t3.data.replace(l2, e3) : -1 === t3.data.indexOf(e3) && (t3.data = r22 ? e3 + t3.data : t3.data + e3);
  })(c$1[d2], t2, i2, f2), d2;
}, p$1 = (e2, t2, r2) => e2.reduce((e3, l2, a2) => {
  let n2 = t2[a2];
  if (n2 && n2.call) {
    let e4 = n2(r2), t3 = e4 && e4.props && e4.props.className || /^go/.test(e4) && e4;
    n2 = t3 ? "." + t3 : e4 && "object" == typeof e4 ? e4.props ? "" : o(e4, "") : false === e4 ? "" : e4;
  }
  return e3 + l2 + (null == n2 ? "" : n2);
}, "");
function u(e2) {
  let r2 = this || {}, l2 = e2.call ? e2(r2.p) : e2;
  return i(l2.unshift ? l2.raw ? p$1(l2, [].slice.call(arguments, 1), r2.p) : l2.reduce((e3, t2) => Object.assign(e3, t2 && t2.call ? t2(r2.p) : t2), {}) : l2, t$3(r2.target), r2.g, r2.o, r2.k);
}
u.bind({ g: 1 });
let h$1 = u.bind({ k: 1 });
const ThemeContext = createContext();
function ThemeProvider(props) {
  return createComponent(ThemeContext.Provider, {
    value: props.theme,
    get children() {
      return props.children;
    }
  });
}
function useTheme() {
  return useContext(ThemeContext);
}
function makeStyled(tag) {
  let _ctx = this || {};
  return (...args) => {
    const Styled = (props) => {
      const theme = useContext(ThemeContext);
      const withTheme = mergeProps(props, { theme });
      const clone = mergeProps(withTheme, {
        get class() {
          const pClass = withTheme.class, append2 = "class" in withTheme && /^go[0-9]+/.test(pClass);
          let className2 = u.apply(
            { target: _ctx.target, o: append2, p: withTheme, g: _ctx.g },
            args
          );
          return [pClass, className2].filter(Boolean).join(" ");
        }
      });
      const [local, newProps] = splitProps(clone, ["as", "theme"]);
      const htmlProps = newProps;
      const createTag = local.as || tag;
      let el2;
      if (typeof createTag === "function") {
        el2 = createTag(htmlProps);
      } else {
        {
          if (_ctx.g == 1) {
            el2 = document.createElement(createTag);
            spread$1(el2, htmlProps);
          } else {
            el2 = Dynamic(mergeProps({ component: createTag }, htmlProps));
          }
        }
      }
      return el2;
    };
    Styled.class = (props) => {
      return untrack(() => {
        return u.apply({ target: _ctx.target, p: props, g: _ctx.g }, args);
      });
    };
    return Styled;
  };
}
const styled$1 = new Proxy(makeStyled, {
  get(target, tag) {
    return target(tag);
  }
});
function createGlobalStyles() {
  const fn = makeStyled.call({ g: 1 }, "div").apply(null, arguments);
  return function GlobalStyles2(props) {
    fn(props);
    return null;
  };
}
const globalStylesTag = "tc-root";
const disableScrollClass = "tc-disable-scroll";
const usingMouseClass = "tc-using-mouse";
const GlobalStyles = () => {
  document.body.addEventListener("mousedown", () => document.body.classList.add(usingMouseClass));
  document.body.addEventListener("keydown", (event) => {
    if (event.key === "Tab") {
      document.body.classList.remove(usingMouseClass);
    }
  });
  const Styles = createGlobalStyles`
    ${globalStylesTag} * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        
        font-family: -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', Arial, Tahoma, Verdana, sans-serif;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;        
        -webkit-tap-highlight-color: transparent;
    }
    
    ${globalStylesTag} img {
      -webkit-user-select: none;
      -webkit-touch-callout: none;
    }   
 
    ${globalStylesTag} *:focus {
        outline: #08f auto 2px;
    }
    
    ${globalStylesTag} li {
        list-style: none;
    }
    
    ${globalStylesTag} button {
        outline: none;
    }
    
    body.${disableScrollClass} {
        position: fixed; 
        overflow-y: scroll;
        right: 0;
        left: 0;
    }
    
    body.${usingMouseClass} ${globalStylesTag} *:focus {
        outline: none;
    }
`;
  return createComponent(Styles, {});
};
function hexToRgb(hex) {
  if (hex[0] === "#") {
    hex = hex.slice(1);
  }
  const bigint2 = parseInt(hex, 16);
  const r2 = bigint2 >> 16 & 255;
  const g2 = bigint2 >> 8 & 255;
  const b2 = bigint2 & 255;
  return [r2, g2, b2].join(",");
}
function rgba(color, opacity) {
  if (color[0] === "#") {
    color = hexToRgb(color);
  }
  return `rgba(${color}, ${opacity})`;
}
function toPx(value) {
  return value.toString() + "px";
}
const _InMemoryStorage = class {
  constructor() {
    __publicField(this, "storage", {});
  }
  static getInstance() {
    if (!_InMemoryStorage.instance) {
      _InMemoryStorage.instance = new _InMemoryStorage();
    }
    return _InMemoryStorage.instance;
  }
  get length() {
    return Object.keys(this.storage).length;
  }
  clear() {
    this.storage = {};
  }
  getItem(key2) {
    var _a2;
    return (_a2 = this.storage[key2]) != null ? _a2 : null;
  }
  key(index2) {
    var _a2;
    const keys2 = Object.keys(this.storage);
    if (index2 < 0 || index2 >= keys2.length) {
      return null;
    }
    return (_a2 = keys2[index2]) != null ? _a2 : null;
  }
  removeItem(key2) {
    delete this.storage[key2];
  }
  setItem(key2, value) {
    this.storage[key2] = value;
  }
};
let InMemoryStorage = _InMemoryStorage;
__publicField(InMemoryStorage, "instance");
class TonConnectUIError extends TonConnectError {
  constructor(...args) {
    super(...args);
    Object.setPrototypeOf(this, TonConnectUIError.prototype);
  }
}
function logDebug(...args) {
  {
    try {
      console.debug("[TON_CONNECT_UI]", ...args);
    } catch (e2) {
    }
  }
}
function logError(...args) {
  {
    try {
      console.error("[TON_CONNECT_UI]", ...args);
    } catch (e2) {
    }
  }
}
function logWarning(...args) {
  {
    try {
      console.warn("[TON_CONNECT_UI]", ...args);
    } catch (e2) {
    }
  }
}
function openLink(href, target = "_self") {
  logDebug("openLink", href, target);
  window.open(href, target, "noopener noreferrer");
}
function openLinkBlank(href) {
  openLink(href, "_blank");
}
function openDeeplinkWithFallback(href, fallback) {
  const doFallback = () => {
    if (isBrowser("safari") || isOS("android") && isBrowser("firefox")) {
      return;
    }
    fallback();
  };
  const fallbackTimeout = setTimeout(() => doFallback(), 200);
  window.addEventListener("blur", () => clearTimeout(fallbackTimeout), { once: true });
  openLink(href, "_self");
}
function getSystemTheme() {
  if (window.matchMedia && window.matchMedia("(prefers-color-scheme: light)").matches) {
    return THEME.LIGHT;
  }
  return THEME.DARK;
}
function subscribeToThemeChange(callback) {
  const handler = (event) => callback(event.matches ? THEME.DARK : THEME.LIGHT);
  window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", handler);
  return () => window.matchMedia("(prefers-color-scheme: dark)").removeEventListener("change", handler);
}
function disableScroll() {
  if (document.documentElement.scrollHeight === document.documentElement.clientHeight) {
    return;
  }
  document.body.style.top = toPx(-document.documentElement.scrollTop);
  document.body.classList.add(disableScrollClass);
}
function enableScroll() {
  document.body.classList.remove(disableScrollClass);
  document.documentElement.scrollTo({ top: -parseFloat(getComputedStyle(document.body).top) });
  document.body.style.top = "auto";
}
function fixMobileSafariActiveTransition() {
  if (!document.body.hasAttribute("ontouchstart")) {
    document.body.setAttribute("ontouchstart", "");
  }
}
function defineStylesRoot() {
  customElements.define(globalStylesTag, class TcRootElement extends HTMLElement {
  });
}
function createMacrotask(callback) {
  return __async(this, null, function* () {
    yield new Promise((resolve) => requestAnimationFrame(resolve));
    callback();
  });
}
function createMacrotaskAsync(callback) {
  return __async(this, null, function* () {
    yield new Promise((resolve) => requestAnimationFrame(resolve));
    return callback();
  });
}
function preloadImages(images) {
  if (document.readyState !== "complete") {
    window.addEventListener("load", () => createMacrotask(() => preloadImages(images)), {
      once: true
    });
  } else {
    images.forEach((img) => {
      const node2 = new window.Image();
      node2.src = img;
    });
  }
}
function getWindow$1() {
  if (typeof window !== "undefined") {
    return window;
  }
  return void 0;
}
function tryGetLocalStorage() {
  if (isLocalStorageAvailable()) {
    return localStorage;
  }
  if (isNodeJs()) {
    throw new TonConnectUIError(
      "`localStorage` is unavailable, but it is required for TonConnect. For more details, see https://github.com/ton-connect/sdk/tree/main/packages/sdk#init-connector"
    );
  }
  return InMemoryStorage.getInstance();
}
function isLocalStorageAvailable() {
  try {
    return typeof localStorage !== "undefined";
  } catch (e2) {
    return false;
  }
}
function isNodeJs() {
  return typeof process$1 !== "undefined" && process$1.versions != null && process$1.versions.node != null;
}
function getUserAgent() {
  var _a2, _b2, _c2;
  const results = new UAParser().getResult();
  const osName = (_a2 = results.os.name) == null ? void 0 : _a2.toLowerCase();
  const deviceModel = (_b2 = results.device.model) == null ? void 0 : _b2.toLowerCase();
  let os;
  switch (true) {
    case deviceModel === "ipad":
      os = "ipad";
      break;
    case osName === "ios":
      os = "ios";
      break;
    case osName === "android":
      os = "android";
      break;
    case osName === "mac os":
      os = "macos";
      break;
    case osName === "linux":
      os = "linux";
      break;
    case (osName == null ? void 0 : osName.includes("windows")):
      os = "windows";
      break;
  }
  const browserName = (_c2 = results.browser.name) == null ? void 0 : _c2.toLowerCase();
  let browser2;
  switch (true) {
    case browserName === "chrome":
      browser2 = "chrome";
      break;
    case browserName === "firefox":
      browser2 = "firefox";
      break;
    case (browserName == null ? void 0 : browserName.includes("safari")):
      browser2 = "safari";
      break;
    case (browserName == null ? void 0 : browserName.includes("opera")):
      browser2 = "opera";
      break;
  }
  return {
    os,
    browser: browser2
  };
}
function isOS(...os) {
  return os.includes(getUserAgent().os);
}
function isBrowser(...browser2) {
  return browser2.includes(getUserAgent().browser);
}
function toDeeplink(universalLink, deeplink) {
  const url = new URL(universalLink);
  return deeplink + url.search;
}
class WalletInfoStorage {
  constructor() {
    __publicField(this, "localStorage");
    __publicField(this, "storageKey", "ton-connect-ui_wallet-info");
    this.localStorage = tryGetLocalStorage();
  }
  setWalletInfo(walletInfo) {
    this.localStorage.setItem(this.storageKey, JSON.stringify(walletInfo));
  }
  getWalletInfo() {
    const walletInfoString = this.localStorage.getItem(this.storageKey);
    if (!walletInfoString) {
      return null;
    }
    return JSON.parse(walletInfoString);
  }
  removeWalletInfo() {
    this.localStorage.removeItem(this.storageKey);
  }
}
class PreferredWalletStorage {
  constructor() {
    __publicField(this, "localStorage");
    __publicField(this, "storageKey", "ton-connect-ui_preferred-wallet");
    this.localStorage = tryGetLocalStorage();
  }
  setPreferredWalletAppName(name2) {
    this.localStorage.setItem(this.storageKey, name2);
  }
  getPreferredWalletAppName() {
    return this.localStorage.getItem(this.storageKey) || void 0;
  }
}
class LastSelectedWalletInfoStorage {
  constructor() {
    __publicField(this, "localStorage");
    __publicField(this, "storageKey", "ton-connect-ui_last-selected-wallet-info");
    this.localStorage = tryGetLocalStorage();
  }
  setLastSelectedWalletInfo(walletInfo) {
    this.localStorage.setItem(this.storageKey, JSON.stringify(walletInfo));
  }
  getLastSelectedWalletInfo() {
    const walletInfoString = this.localStorage.getItem(this.storageKey);
    if (!walletInfoString) {
      return null;
    }
    return JSON.parse(walletInfoString);
  }
  removeLastSelectedWalletInfo() {
    this.localStorage.removeItem(this.storageKey);
  }
}
const [walletsModalState, setWalletsModalState] = createSignal({
  status: "closed",
  closeReason: null
});
const getWalletsModalIsOpened = createMemo(() => walletsModalState().status === "opened");
const [singleWalletModalState, setSingleWalletModalState] = createSignal({
  status: "closed",
  closeReason: null
});
const getSingleWalletModalIsOpened = createMemo(
  () => singleWalletModalState().status === "opened"
);
const getSingleWalletModalWalletInfo = createMemo(() => {
  const state2 = singleWalletModalState();
  if (state2.status === "opened") {
    return state2.walletInfo;
  }
  return null;
});
let lastSelectedWalletInfoStorage = typeof window !== "undefined" ? new LastSelectedWalletInfoStorage() : void 0;
const [lastSelectedWalletInfo, _setLastSelectedWalletInfo] = createSignal((lastSelectedWalletInfoStorage == null ? void 0 : lastSelectedWalletInfoStorage.getLastSelectedWalletInfo()) || null);
const setLastSelectedWalletInfo = (walletInfo) => {
  if (!lastSelectedWalletInfoStorage) {
    lastSelectedWalletInfoStorage = new LastSelectedWalletInfoStorage();
  }
  if (walletInfo) {
    lastSelectedWalletInfoStorage.setLastSelectedWalletInfo(walletInfo);
  } else {
    lastSelectedWalletInfoStorage.removeLastSelectedWalletInfo();
  }
  _setLastSelectedWalletInfo(walletInfo);
};
const [action, setAction] = createSignal(null);
const common$1 = {
  close: "Close",
  openWallet: "Open wallet",
  copyLink: "Copy Link",
  linkCopied: "Link Copied",
  copied: "Copied",
  yourWallet: "Your Wallet",
  retry: "Retry",
  get: "GET",
  mobile: "Mobile",
  browserExtension: "Browser Extension",
  desktop: "Desktop"
};
const button$1 = {
  connectWallet: "Connect Wallet",
  dropdown: {
    copy: "Copy address",
    copied: "Address copied!",
    disconnect: "Disconnect"
  }
};
const notifications$1 = {
  confirm: {
    header: "Open {{ name }} to confirm the transaction."
  },
  transactionSent: {
    header: "Transaction sent",
    text: "Your transaction will be processed in a few seconds."
  },
  transactionCanceled: {
    header: "Transaction canceled",
    text: "There will be no changes to your account."
  }
};
const walletItem$1 = {
  walletOn: "Wallet On",
  recent: "Recent",
  installed: "Installed",
  popular: "Popular"
};
const walletModal$1 = {
  loading: "Loading wallets",
  wallets: "Wallets",
  mobileUniversalModal: {
    connectYourWallet: "Connect your wallet",
    openWalletOnTelegramOrSelect: "Open Wallet in Telegram or select your wallet to connect",
    openWalletOnTelegram: "Open Wallet in Telegram",
    openLink: "Open Link",
    scan: "Scan with your mobile wallet"
  },
  desktopUniversalModal: {
    connectYourWallet: "Connect your wallet",
    scan: "Scan with your mobile wallet",
    availableWallets: "Available wallets"
  },
  mobileConnectionModal: {
    showQR: "Show QR Code",
    scanQR: "Scan the QR code below with your phone’s or {{ name }}’s camera",
    continueIn: "Continue in {{ name }}…",
    connectionDeclined: "Connection declined"
  },
  desktopConnectionModal: {
    scanQR: "Scan the QR code below with your phone’s or {{ name }}’s camera",
    continueInExtension: "Continue in {{ name }} browser extension…",
    dontHaveExtension: "Seems you don't have installed {{ name }} browser extension",
    getWallet: "Get {{ name }}",
    continueOnDesktop: "Continue in {{ name }} on desktop…",
    openWalletOnTelegram: "Open Wallet in Telegram on desktop",
    connectionDeclined: "Connection declined"
  },
  infoModal: {
    whatIsAWallet: "What is a wallet",
    secureDigitalAssets: "Secure digital assets storage",
    walletProtects: "A wallet protects and manages your digital assets including TON, tokens and collectables.",
    controlIdentity: "Control your Web3 identity",
    manageIdentity: "Manage your digital identity and access decentralized applications with ease. Maintain control over your data and engage securely in the blockchain ecosystem.",
    effortlessCryptoTransactions: "Effortless crypto transactions",
    easilySend: "Easily send, receive, monitor your cryptocurrencies. Streamline your operations with decentralized applications.",
    getAWallet: "Get a Wallet"
  }
};
const actionModal$1 = {
  confirmTransaction: {
    header: "Confirm the transaction in {{ name }}",
    text: "It will only take a moment."
  },
  transactionSent: "$notifications.transactionSent",
  transactionCanceled: "$notifications.transactionCanceled"
};
const en = {
  common: common$1,
  button: button$1,
  notifications: notifications$1,
  walletItem: walletItem$1,
  walletModal: walletModal$1,
  actionModal: actionModal$1
};
const common = {
  close: "Закрыть",
  openWallet: "Открыть кошелёк",
  copyLink: "Копировать ссылку",
  linkCopied: "Ссылка скопирована",
  copied: "Ссылка скопирована",
  yourWallet: "Ваш кошелёк",
  retry: "Повторить",
  get: "Скачать",
  mobile: "Мобильный",
  browserExtension: "Расширение",
  desktop: "Десктоп"
};
const button = {
  connectWallet: "Подключить кошелёк",
  dropdown: {
    copy: "Скопировать адрес",
    copied: "Адрес скопирован!",
    disconnect: "Отключить кошелёк"
  }
};
const notifications = {
  confirm: {
    header: "Откройте {{ name }}, чтобы подтвердить транзакцию."
  },
  transactionSent: {
    header: "Транзакция отправлена",
    text: "Ваша транзакция будет обработана через несколько секунд."
  },
  transactionCanceled: {
    header: "Транзакция отменена",
    text: "Состояние вашего счёта не изменится."
  }
};
const walletItem = {
  walletOn: "Wallet в",
  recent: "Недавний",
  installed: "Установлен",
  popular: "Популярен"
};
const walletModal = {
  loading: "Кошельки загружаются",
  wallets: "Кошельки",
  mobileUniversalModal: {
    connectYourWallet: "Подключите кошелёк",
    openWalletOnTelegramOrSelect: "Подключите Wallet в Telegram или выберете кошелёк для подключения",
    openWalletOnTelegram: "Открыть Wallet в Telegram",
    openLink: "Открыть ссылку",
    scan: "Отсканируйте камерой вашего телефона"
  },
  desktopUniversalModal: {
    connectYourWallet: "Подключите кошелёк",
    scan: "Отсканируйте QR-код камерой вашего телефона",
    availableWallets: "Доступные кошельки"
  },
  mobileConnectionModal: {
    showQR: "Показать QR-код",
    scanQR: "Отсканируйте QR-код ниже камерой в приложении {{ name }}, или камерой телефона",
    continueIn: "Продолжите в {{ name }}…",
    connectionDeclined: "Подключение отклонено"
  },
  desktopConnectionModal: {
    scanQR: "Отсканируйте QR-код ниже камерой в приложении {{ name }}, или камерой телефона",
    continueInExtension: "Откройте браузерное расширение {{ name }}",
    dontHaveExtension: "Похоже, у вас не установлено браузерное расширение {{ name }}",
    getWallet: "Скачать {{ name }}",
    continueOnDesktop: "Откройте {{ name }} на компьютере…",
    openWalletOnTelegram: "Открыть Wallet в Telegram",
    connectionDeclined: "Подключение отклонено"
  },
  infoModal: {
    whatIsAWallet: "Что такое кошелёк?",
    secureDigitalAssets: "Надежное хранилище цифровых активов",
    walletProtects: "Кошелёк защищает ваши цифровые активы, включая TON, токены и предметы коллекционирования, и управляет ими.",
    controlIdentity: "Контроль своей личности Web3",
    manageIdentity: "Управляйте своей цифровой идентификацией и с легкостью получайте доступ к децентрализованным приложениям. Сохраняйте контроль над своими данными и безопасно участвуйте в экосистеме блокчейна.",
    effortlessCryptoTransactions: "Простые криптотранзакции",
    easilySend: "Легко отправляйте, получайте и отслеживайте свои криптовалюты. Оптимизируйте свои операции с помощью децентрализованных приложений.",
    getAWallet: "Скачать кошелёк"
  }
};
const actionModal = {
  confirmTransaction: {
    header: "Подтвердите действие в {{ name }}",
    text: "Это займет пару секунд."
  },
  transactionSent: "$notifications.transactionSent",
  transactionCanceled: "$notifications.transactionCanceled"
};
const ru = {
  common,
  button,
  notifications,
  walletItem,
  walletModal,
  actionModal
};
const i18nDictionary = {
  en: parseDictionary(en),
  ru: parseDictionary(ru)
};
function parseDictionary(dictionary2) {
  const refSymbol = "$";
  const iterate = (subDictionary) => {
    Object.entries(subDictionary).forEach(([key2, value]) => {
      if (typeof value === "object" && value) {
        return iterate(value);
      }
      if (typeof value === "string") {
        if (value[0] === refSymbol) {
          const path = value.slice(1).split(".");
          let obj = dictionary2;
          path.forEach((item) => {
            if (item in obj) {
              obj = obj[item];
            } else {
              throw new Error(
                `Cannot parse translations: there is no property ${item} in translation`
              );
            }
          });
          subDictionary[key2] = obj;
        }
        if (value.slice(0, 2) === `\\${refSymbol}`) {
          subDictionary[key2] = value.slice(1);
        }
      }
    });
  };
  iterate(dictionary2);
  return dictionary2;
}
const ConnectorContext = createContext();
const $RAW = Symbol("store-raw"), $NODE = Symbol("store-node"), $NAME = Symbol("store-name");
function wrap$1(value, name2) {
  let p2 = value[$PROXY];
  if (!p2) {
    Object.defineProperty(value, $PROXY, {
      value: p2 = new Proxy(value, proxyTraps$1)
    });
    if (!Array.isArray(value)) {
      const keys2 = Object.keys(value), desc = Object.getOwnPropertyDescriptors(value);
      for (let i2 = 0, l2 = keys2.length; i2 < l2; i2++) {
        const prop = keys2[i2];
        if (desc[prop].get) {
          Object.defineProperty(value, prop, {
            enumerable: desc[prop].enumerable,
            get: desc[prop].get.bind(p2)
          });
        }
      }
    }
  }
  return p2;
}
function isWrappable(obj) {
  let proto;
  return obj != null && typeof obj === "object" && (obj[$PROXY] || !(proto = Object.getPrototypeOf(obj)) || proto === Object.prototype || Array.isArray(obj));
}
function unwrap(item, set = /* @__PURE__ */ new Set()) {
  let result, unwrapped, v2, prop;
  if (result = item != null && item[$RAW])
    return result;
  if (!isWrappable(item) || set.has(item))
    return item;
  if (Array.isArray(item)) {
    if (Object.isFrozen(item))
      item = item.slice(0);
    else
      set.add(item);
    for (let i2 = 0, l2 = item.length; i2 < l2; i2++) {
      v2 = item[i2];
      if ((unwrapped = unwrap(v2, set)) !== v2)
        item[i2] = unwrapped;
    }
  } else {
    if (Object.isFrozen(item))
      item = Object.assign({}, item);
    else
      set.add(item);
    const keys2 = Object.keys(item), desc = Object.getOwnPropertyDescriptors(item);
    for (let i2 = 0, l2 = keys2.length; i2 < l2; i2++) {
      prop = keys2[i2];
      if (desc[prop].get)
        continue;
      v2 = item[prop];
      if ((unwrapped = unwrap(v2, set)) !== v2)
        item[prop] = unwrapped;
    }
  }
  return item;
}
function getDataNodes(target) {
  let nodes = target[$NODE];
  if (!nodes)
    Object.defineProperty(target, $NODE, {
      value: nodes = {}
    });
  return nodes;
}
function getDataNode(nodes, property, value) {
  return nodes[property] || (nodes[property] = createDataNode(value));
}
function proxyDescriptor$1(target, property) {
  const desc = Reflect.getOwnPropertyDescriptor(target, property);
  if (!desc || desc.get || !desc.configurable || property === $PROXY || property === $NODE || property === $NAME)
    return desc;
  delete desc.value;
  delete desc.writable;
  desc.get = () => target[$PROXY][property];
  return desc;
}
function trackSelf(target) {
  if (getListener()) {
    const nodes = getDataNodes(target);
    (nodes._ || (nodes._ = createDataNode()))();
  }
}
function ownKeys(target) {
  trackSelf(target);
  return Reflect.ownKeys(target);
}
function createDataNode(value) {
  const [s2, set] = createSignal(value, {
    equals: false,
    internal: true
  });
  s2.$ = set;
  return s2;
}
const proxyTraps$1 = {
  get(target, property, receiver) {
    if (property === $RAW)
      return target;
    if (property === $PROXY)
      return receiver;
    if (property === $TRACK) {
      trackSelf(target);
      return receiver;
    }
    const nodes = getDataNodes(target);
    const tracked = nodes.hasOwnProperty(property);
    let value = tracked ? nodes[property]() : target[property];
    if (property === $NODE || property === "__proto__")
      return value;
    if (!tracked) {
      const desc = Object.getOwnPropertyDescriptor(target, property);
      if (getListener() && (typeof value !== "function" || target.hasOwnProperty(property)) && !(desc && desc.get))
        value = getDataNode(nodes, property, value)();
    }
    return isWrappable(value) ? wrap$1(value) : value;
  },
  has(target, property) {
    if (property === $RAW || property === $PROXY || property === $TRACK || property === $NODE || property === "__proto__")
      return true;
    this.get(target, property, target);
    return property in target;
  },
  set() {
    return true;
  },
  deleteProperty() {
    return true;
  },
  ownKeys,
  getOwnPropertyDescriptor: proxyDescriptor$1
};
function setProperty(state2, property, value, deleting = false) {
  if (!deleting && state2[property] === value)
    return;
  const prev = state2[property], len2 = state2.length;
  if (value === void 0)
    delete state2[property];
  else
    state2[property] = value;
  let nodes = getDataNodes(state2), node2;
  if (node2 = getDataNode(nodes, property, prev))
    node2.$(() => value);
  if (Array.isArray(state2) && state2.length !== len2)
    (node2 = getDataNode(nodes, "length", len2)) && node2.$(state2.length);
  (node2 = nodes._) && node2.$();
}
function mergeStoreNode(state2, value) {
  const keys2 = Object.keys(value);
  for (let i2 = 0; i2 < keys2.length; i2 += 1) {
    const key2 = keys2[i2];
    setProperty(state2, key2, value[key2]);
  }
}
function updateArray(current, next) {
  if (typeof next === "function")
    next = next(current);
  next = unwrap(next);
  if (Array.isArray(next)) {
    if (current === next)
      return;
    let i2 = 0, len2 = next.length;
    for (; i2 < len2; i2++) {
      const value = next[i2];
      if (current[i2] !== value)
        setProperty(current, i2, value);
    }
    setProperty(current, "length", len2);
  } else
    mergeStoreNode(current, next);
}
function updatePath(current, path, traversed = []) {
  let part, prev = current;
  if (path.length > 1) {
    part = path.shift();
    const partType = typeof part, isArray2 = Array.isArray(current);
    if (Array.isArray(part)) {
      for (let i2 = 0; i2 < part.length; i2++) {
        updatePath(current, [part[i2]].concat(path), traversed);
      }
      return;
    } else if (isArray2 && partType === "function") {
      for (let i2 = 0; i2 < current.length; i2++) {
        if (part(current[i2], i2))
          updatePath(current, [i2].concat(path), traversed);
      }
      return;
    } else if (isArray2 && partType === "object") {
      const {
        from = 0,
        to = current.length - 1,
        by = 1
      } = part;
      for (let i2 = from; i2 <= to; i2 += by) {
        updatePath(current, [i2].concat(path), traversed);
      }
      return;
    } else if (path.length > 1) {
      updatePath(current[part], path, [part].concat(traversed));
      return;
    }
    prev = current[part];
    traversed = [part].concat(traversed);
  }
  let value = path[0];
  if (typeof value === "function") {
    value = value(prev, traversed);
    if (value === prev)
      return;
  }
  if (part === void 0 && value == void 0)
    return;
  value = unwrap(value);
  if (part === void 0 || isWrappable(prev) && isWrappable(value) && !Array.isArray(value)) {
    mergeStoreNode(prev, value);
  } else
    setProperty(current, part, value);
}
function createStore(...[store, options]) {
  const unwrappedStore = unwrap(store || {});
  const isArray2 = Array.isArray(unwrappedStore);
  const wrappedStore = wrap$1(unwrappedStore);
  function setStore(...args) {
    batch(() => {
      isArray2 && args.length === 1 ? updateArray(unwrappedStore, args[0]) : updatePath(unwrappedStore, args);
    });
  }
  return [wrappedStore, setStore];
}
const defaultLightColorsSet = {
  constant: {
    black: "#000000",
    white: "#FFFFFF"
  },
  connectButton: {
    background: "#0098EA",
    foreground: "#FFFFFF"
  },
  accent: "#0098EA",
  telegramButton: "#0098EA",
  icon: {
    primary: "#0F0F0F",
    secondary: "#7A8999",
    tertiary: "#C1CAD2",
    success: "#29CC6A",
    error: "#F5A73B"
  },
  background: {
    primary: "#FFFFFF",
    secondary: "#F1F3F5",
    segment: "#FFFFFF",
    tint: "#F1F3F5",
    qr: "#F1F3F5"
  },
  text: {
    primary: "#0F0F0F",
    secondary: "#6A7785"
  }
};
const defaultDarkColorsSet = {
  constant: {
    black: "#000000",
    white: "#FFFFFF"
  },
  connectButton: {
    background: "#0098EA",
    foreground: "#FFFFFF"
  },
  accent: "#E5E5EA",
  telegramButton: "#31A6F5",
  icon: {
    primary: "#E5E5EA",
    secondary: "#909099",
    tertiary: "#434347",
    success: "#29CC6A",
    error: "#F5A73B"
  },
  background: {
    primary: "#121214",
    secondary: "#18181A",
    segment: "#262629",
    tint: "#222224",
    qr: "#FFFFFF"
  },
  text: {
    primary: "#E5E5EA",
    secondary: "#7D7D85"
  }
};
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
function isObject$1(o2) {
  return Object.prototype.toString.call(o2) === "[object Object]";
}
function isPlainObject$1(o2) {
  var ctor, prot;
  if (isObject$1(o2) === false)
    return false;
  ctor = o2.constructor;
  if (ctor === void 0)
    return true;
  prot = ctor.prototype;
  if (isObject$1(prot) === false)
    return false;
  if (prot.hasOwnProperty("isPrototypeOf") === false) {
    return false;
  }
  return true;
}
function mergeOptions(options, defaultOptions) {
  if (!options) {
    return defaultOptions;
  }
  const overwriteMerge = (_2, sourceArray, __) => sourceArray;
  return deepmerge$1(defaultOptions, options, {
    arrayMerge: overwriteMerge,
    isMergeableObject: isPlainObject$1
  });
}
const [themeState, setThemeState] = createStore({
  theme: THEME.LIGHT,
  colors: defaultLightColorsSet,
  borderRadius: "m"
});
const themeColorsMappingDefault = {
  [THEME.LIGHT]: defaultLightColorsSet,
  [THEME.DARK]: defaultDarkColorsSet
};
const themeCustomColors = {
  [THEME.LIGHT]: void 0,
  [THEME.DARK]: void 0
};
function setTheme(theme, colorsSet) {
  if (colorsSet) {
    themeCustomColors[THEME.DARK] = mergeOptions(
      colorsSet[THEME.DARK],
      themeCustomColors[THEME.DARK]
    );
    themeCustomColors[THEME.LIGHT] = mergeOptions(
      colorsSet[THEME.LIGHT],
      themeCustomColors[THEME.LIGHT]
    );
  }
  setThemeState({
    theme,
    colors: mergeOptions(themeCustomColors[theme], themeColorsMappingDefault[theme])
  });
}
function setBorderRadius(borderRadius) {
  setThemeState({ borderRadius });
}
function setColors(colorsSet) {
  themeCustomColors[THEME.DARK] = mergeOptions(
    colorsSet[THEME.DARK],
    themeCustomColors[THEME.DARK]
  );
  themeCustomColors[THEME.LIGHT] = mergeOptions(
    colorsSet[THEME.LIGHT],
    themeCustomColors[THEME.LIGHT]
  );
  setThemeState((state2) => ({
    colors: mergeOptions(
      themeCustomColors[state2.theme],
      themeColorsMappingDefault[state2.theme]
    )
  }));
}
const ImagePlaceholder = styled$1.div`
    background-color: ${(props) => props.theme.colors.background.secondary};
`;
const Image = (props) => {
  let imgRef;
  const [image, setImage] = createSignal(null);
  createEffect(() => {
    const img = new window.Image();
    img.src = props.src;
    img.alt = props.alt || "";
    img.setAttribute("draggable", "false");
    if (props.class) {
      img.classList.add(props.class);
    }
    if (img.complete) {
      return setImage(img);
    }
    img.addEventListener("load", () => setImage(img));
    return () => img.removeEventListener("load", () => setImage(img));
  });
  return [createComponent(Show, {
    get when() {
      return image();
    },
    get children() {
      return image();
    }
  }), createComponent(Show, {
    get when() {
      return !image();
    },
    get children() {
      return createComponent(ImagePlaceholder, {
        get ["class"]() {
          return props.class;
        },
        ref(r$) {
          const _ref$ = imgRef;
          typeof _ref$ === "function" ? _ref$(r$) : imgRef = r$;
        }
      });
    }
  })];
};
let initParams = {};
try {
  let locationHash = location.hash.toString();
  initParams = urlParseHashParams(locationHash);
} catch (e2) {
}
let tmaPlatform = "unknown";
if (initParams == null ? void 0 : initParams.tgWebAppPlatform) {
  tmaPlatform = (_a$3 = initParams.tgWebAppPlatform) != null ? _a$3 : "unknown";
}
if (tmaPlatform === "unknown") {
  const window2 = getWindow$1();
  tmaPlatform = (_d = (_c = (_b = window2 == null ? void 0 : window2.Telegram) == null ? void 0 : _b.WebApp) == null ? void 0 : _c.platform) != null ? _d : "unknown";
}
let webAppVersion = "6.0";
if (initParams == null ? void 0 : initParams.tgWebAppVersion) {
  webAppVersion = initParams.tgWebAppVersion;
}
if (!webAppVersion) {
  const window2 = getWindow$1();
  webAppVersion = (_g = (_f = (_e$1 = window2 == null ? void 0 : window2.Telegram) == null ? void 0 : _e$1.WebApp) == null ? void 0 : _f.version) != null ? _g : "6.0";
}
function isTmaPlatform(...platforms) {
  return platforms.includes(tmaPlatform);
}
function isInTMA() {
  var _a2;
  return tmaPlatform !== "unknown" || !!((_a2 = getWindow$1()) == null ? void 0 : _a2.TelegramWebviewProxy);
}
function isInTelegramBrowser() {
  var _a2;
  const isTelegramWebview = !!((_a2 = getWindow$1()) == null ? void 0 : _a2.TelegramWebview);
  return (isInTMA() || isTelegramWebview) && tmaPlatform === "unknown";
}
function sendExpand() {
  postEvent("web_app_expand", {});
}
function sendOpenTelegramLink(link, fallback) {
  const url = new URL(link);
  if (url.protocol !== "http:" && url.protocol !== "https:") {
    if (fallback) {
      return fallback();
    }
    throw new TonConnectUIError(`Url protocol is not supported: ${url}`);
  }
  if (url.hostname !== "t.me") {
    if (fallback) {
      return fallback();
    }
    throw new TonConnectUIError(`Url host is not supported: ${url}`);
  }
  const pathFull = url.pathname + url.search;
  if (isIframe() || versionAtLeast("6.1")) {
    postEvent("web_app_open_tg_link", { path_full: pathFull });
  } else {
    openLinkBlank("https://t.me" + pathFull);
  }
}
function isIframe() {
  try {
    const window2 = getWindow$1();
    if (!window2) {
      return false;
    }
    return window2.parent != null && window2 !== window2.parent;
  } catch (e2) {
    return false;
  }
}
function postEvent(eventType, eventData) {
  try {
    const window2 = getWindow$1();
    if (!window2) {
      throw new TonConnectUIError(`Can't post event to parent window: window is not defined`);
    }
    if (window2.TelegramWebviewProxy !== void 0) {
      logDebug("postEvent", eventType, eventData);
      window2.TelegramWebviewProxy.postEvent(eventType, JSON.stringify(eventData));
    } else if (window2.external && "notify" in window2.external) {
      logDebug("postEvent", eventType, eventData);
      window2.external.notify(JSON.stringify({ eventType, eventData }));
    } else if (isIframe()) {
      const trustedTarget = "*";
      const message2 = JSON.stringify({ eventType, eventData });
      logDebug("postEvent", eventType, eventData);
      window2.parent.postMessage(message2, trustedTarget);
    } else {
      throw new TonConnectUIError(`Can't post event to TMA`);
    }
  } catch (e2) {
    logError(`Can't post event to parent window: ${e2}`);
  }
}
function urlParseHashParams(locationHash) {
  locationHash = locationHash.replace(/^#/, "");
  let params = {};
  if (!locationHash.length) {
    return params;
  }
  if (locationHash.indexOf("=") < 0 && locationHash.indexOf("?") < 0) {
    params._path = urlSafeDecode(locationHash);
    return params;
  }
  let qIndex = locationHash.indexOf("?");
  if (qIndex >= 0) {
    let pathParam = locationHash.substr(0, qIndex);
    params._path = urlSafeDecode(pathParam);
    locationHash = locationHash.substr(qIndex + 1);
  }
  let query_params = urlParseQueryString(locationHash);
  for (let k2 in query_params) {
    params[k2] = query_params[k2];
  }
  return params;
}
function urlSafeDecode(urlencoded) {
  try {
    urlencoded = urlencoded.replace(/\+/g, "%20");
    return decodeURIComponent(urlencoded);
  } catch (e2) {
    return urlencoded;
  }
}
function urlParseQueryString(queryString) {
  let params = {};
  if (!queryString.length) {
    return params;
  }
  let queryStringParams = queryString.split("&");
  let i2, param, paramName, paramValue;
  for (i2 = 0; i2 < queryStringParams.length; i2++) {
    param = queryStringParams[i2].split("=");
    paramName = urlSafeDecode(param[0]);
    paramValue = param[1] == null ? null : urlSafeDecode(param[1]);
    params[paramName] = paramValue;
  }
  return params;
}
function versionCompare(v1, v2) {
  if (typeof v1 !== "string")
    v1 = "";
  if (typeof v2 !== "string")
    v2 = "";
  let v1List = v1.replace(/^\s+|\s+$/g, "").split(".");
  let v2List = v2.replace(/^\s+|\s+$/g, "").split(".");
  let a2, i2, p1, p2;
  a2 = Math.max(v1List.length, v2List.length);
  for (i2 = 0; i2 < a2; i2++) {
    p1 = parseInt(v1List[i2]) || 0;
    p2 = parseInt(v2List[i2]) || 0;
    if (p1 === p2)
      continue;
    if (p1 > p2)
      return 1;
    return -1;
  }
  return 0;
}
function versionAtLeast(ver) {
  return versionCompare(webAppVersion, ver) >= 0;
}
const maxWidth = {
  mobile: 440,
  tablet: 1020
};
function isDevice(device) {
  const window2 = getWindow$1();
  if (!window2) {
    return device === "desktop";
  }
  if (isTmaPlatform("weba")) {
    return true;
  }
  const width = window2.innerWidth;
  switch (device) {
    case "desktop":
      return width > maxWidth.tablet;
    case "tablet":
      return width > maxWidth.mobile;
    default:
    case "mobile":
      return width <= maxWidth.mobile || isOS("ios", "android", "ipad");
  }
}
function media(device) {
  switch (device) {
    case "mobile":
      return `@media (max-width: ${maxWidth.mobile}px)`;
    case "tablet":
      return `@media (max-width: ${maxWidth.tablet}px) (min-width: ${maxWidth.mobile}px)`;
    default:
    case "desktop":
      return `@media (min-width: ${maxWidth.tablet}px)`;
  }
}
const mediaTouch = "@media (hover: none)";
const mediaNotTouch = "@media not all and (hover: none)";
const borders$5 = {
  m: "100vh",
  s: "8px",
  none: "0"
};
const scaleValues = {
  s: 0.02,
  m: 0.04
};
const ButtonStyled$1 = styled$1.button`
    display: ${(props) => props.leftIcon || props.rightIcon ? "flex" : "inline-block"};
    gap: ${(props) => props.leftIcon || props.rightIcon ? "6px" : "unset"};
    align-items: ${(props) => props.leftIcon || props.rightIcon ? "center" : "unset"};
    justify-content: ${(props) => props.leftIcon || props.rightIcon ? "space-between" : "unset"};
    background-color: ${(props) => props.appearance === "flat" ? "transparent" : props.appearance === "secondary" ? props.theme.colors.background.tint : rgba(props.theme.colors.accent, 0.12)};
    color: ${(props) => props.appearance === "secondary" ? props.theme.colors.text.primary : props.theme.colors.accent};

    padding: ${(props) => props.appearance === "flat" ? "0" : "9px 16px"};
    padding-left: ${(props) => props.leftIcon && props.appearance !== "flat" ? "12px" : "16px"};
    padding-right: ${(props) => props.rightIcon && props.appearance !== "flat" ? "12px" : "16px"};
    border: none;
    border-radius: ${(props) => borders$5[props.theme.borderRadius]};
    cursor: ${(props) => props.disabled ? "not-allowed" : "pointer"};

    font-size: 14px;
    font-weight: 510;
    line-height: 18px;

    transition: transform 0.125s ease-in-out;

    ${mediaNotTouch} {
        &:hover {
            transform: ${(props) => props.disabled ? "unset" : `scale(${1 + scaleValues[props.scale]})`};
        }
    }

    &:active {
        transform: ${(props) => props.disabled ? "unset" : `scale(${1 - scaleValues[props.scale]})`};
    }

    ${mediaTouch} {
        &:active {
            transform: ${(props) => props.disabled ? "unset" : `scale(${1 - scaleValues[props.scale] * 2})`};
        }
    }
`;
function useDataAttributes(props) {
  const keys2 = untrack(() => Object.keys(props).filter((key2) => key2.startsWith("data-")));
  const [dataAttrs] = splitProps(props, keys2);
  return dataAttrs;
}
const Button$1 = (props) => {
  const dataAttrs = useDataAttributes(props);
  return createComponent(ButtonStyled$1, mergeProps({
    get appearance() {
      return props.appearance || "primary";
    },
    get ["class"]() {
      return props.class;
    },
    onClick: (e2) => {
      var _a2;
      return (_a2 = props.onClick) == null ? void 0 : _a2.call(props, e2);
    },
    onMouseEnter: (e2) => {
      var _a2;
      return (_a2 = props.onMouseEnter) == null ? void 0 : _a2.call(props, e2);
    },
    onMouseLeave: (e2) => {
      var _a2;
      return (_a2 = props.onMouseLeave) == null ? void 0 : _a2.call(props, e2);
    },
    ref(r$) {
      const _ref$ = props.ref;
      typeof _ref$ === "function" ? _ref$(r$) : props.ref = r$;
    },
    get disabled() {
      return props.disabled;
    },
    get scale() {
      return props.scale || "m";
    },
    get leftIcon() {
      return !!props.leftIcon;
    },
    get rightIcon() {
      return !!props.rightIcon;
    },
    "data-tc-button": "true"
  }, dataAttrs, {
    get children() {
      return [createMemo(() => props.leftIcon), createMemo(() => props.children), createMemo(() => props.rightIcon)];
    }
  }));
};
function nextFrame(fn) {
  requestAnimationFrame(() => {
    requestAnimationFrame(fn);
  });
}
const Transition = (props) => {
  let el2;
  let first2 = true;
  const [s1, set1] = createSignal();
  const [s2, set2] = createSignal();
  const resolved = children(() => props.children);
  const {
    onBeforeEnter,
    onEnter,
    onAfterEnter,
    onBeforeExit,
    onExit,
    onAfterExit
  } = props;
  const classnames2 = createMemo(() => {
    const name2 = props.name || "s";
    return {
      enterActiveClass: props.enterActiveClass || name2 + "-enter-active",
      enterClass: props.enterClass || name2 + "-enter",
      enterToClass: props.enterToClass || name2 + "-enter-to",
      exitActiveClass: props.exitActiveClass || name2 + "-exit-active",
      exitClass: props.exitClass || name2 + "-exit",
      exitToClass: props.exitToClass || name2 + "-exit-to"
    };
  });
  function enterTransition(el22, prev) {
    if (!first2 || props.appear) {
      let endTransition = function(e2) {
        if (el22 && (!e2 || e2.target === el22)) {
          el22.removeEventListener("transitionend", endTransition);
          el22.removeEventListener("animationend", endTransition);
          el22.classList.remove(...enterActiveClasses);
          el22.classList.remove(...enterToClasses);
          batch(() => {
            s1() !== el22 && set1(el22);
            s2() === el22 && set2(void 0);
          });
          onAfterEnter && onAfterEnter(el22);
          if (props.mode === "inout")
            exitTransition(el22, prev);
        }
      };
      const enterClasses = classnames2().enterClass.split(" ");
      const enterActiveClasses = classnames2().enterActiveClass.split(" ");
      const enterToClasses = classnames2().enterToClass.split(" ");
      onBeforeEnter && onBeforeEnter(el22);
      el22.classList.add(...enterClasses);
      el22.classList.add(...enterActiveClasses);
      nextFrame(() => {
        el22.classList.remove(...enterClasses);
        el22.classList.add(...enterToClasses);
        onEnter && onEnter(el22, () => endTransition());
        if (!onEnter || onEnter.length < 2) {
          el22.addEventListener("transitionend", endTransition);
          el22.addEventListener("animationend", endTransition);
        }
      });
    }
    prev && !props.mode ? set2(el22) : set1(el22);
  }
  function exitTransition(el22, prev) {
    const exitClasses = classnames2().exitClass.split(" ");
    const exitActiveClasses = classnames2().exitActiveClass.split(" ");
    const exitToClasses = classnames2().exitToClass.split(" ");
    if (!prev.parentNode)
      return endTransition();
    onBeforeExit && onBeforeExit(prev);
    prev.classList.add(...exitClasses);
    prev.classList.add(...exitActiveClasses);
    nextFrame(() => {
      prev.classList.remove(...exitClasses);
      prev.classList.add(...exitToClasses);
    });
    onExit && onExit(prev, () => endTransition());
    if (!onExit || onExit.length < 2) {
      prev.addEventListener("transitionend", endTransition);
      prev.addEventListener("animationend", endTransition);
    }
    function endTransition(e2) {
      if (!e2 || e2.target === prev) {
        prev.removeEventListener("transitionend", endTransition);
        prev.removeEventListener("animationend", endTransition);
        prev.classList.remove(...exitActiveClasses);
        prev.classList.remove(...exitToClasses);
        s1() === prev && set1(void 0);
        onAfterExit && onAfterExit(prev);
        if (props.mode === "outin")
          enterTransition(el22, prev);
      }
    }
  }
  createComputed((prev) => {
    el2 = resolved();
    while (typeof el2 === "function")
      el2 = el2();
    return untrack(() => {
      if (el2 && el2 !== prev) {
        if (props.mode !== "outin")
          enterTransition(el2, prev);
        else if (first2)
          set1(el2);
      }
      if (prev && prev !== el2 && props.mode !== "inout")
        exitTransition(el2, prev);
      first2 = false;
      return el2;
    });
  });
  return [s1, s2];
};
function getRect(element) {
  const {
    top,
    bottom,
    left: left2,
    right: right2,
    width,
    height
  } = element.getBoundingClientRect();
  const parentRect = element.parentNode.getBoundingClientRect();
  return {
    top: top - parentRect.top,
    bottom,
    left: left2 - parentRect.left,
    right: right2,
    width,
    height
  };
}
const TransitionGroup = (props) => {
  const resolved = children(() => props.children);
  const classnames2 = createMemo(() => {
    const name2 = props.name || "s";
    return {
      enterActiveClass: props.enterActiveClass || name2 + "-enter-active",
      enterClass: props.enterClass || name2 + "-enter",
      enterToClass: props.enterToClass || name2 + "-enter-to",
      exitActiveClass: props.exitActiveClass || name2 + "-exit-active",
      exitClass: props.exitClass || name2 + "-exit",
      exitToClass: props.exitToClass || name2 + "-exit-to",
      moveClass: props.moveClass || name2 + "-move"
    };
  });
  const {
    onBeforeEnter,
    onEnter,
    onAfterEnter,
    onBeforeExit,
    onExit,
    onAfterExit
  } = props;
  const [combined, setCombined] = createSignal();
  let p2 = [];
  let first2 = true;
  createComputed(() => {
    const c2 = resolved();
    const comb = [...c2];
    const next = new Set(c2);
    const prev = new Set(p2);
    const enterClasses = classnames2().enterClass.split(" ");
    const enterActiveClasses = classnames2().enterActiveClass.split(" ");
    const enterToClasses = classnames2().enterToClass.split(" ");
    const exitClasses = classnames2().exitClass.split(" ");
    const exitActiveClasses = classnames2().exitActiveClass.split(" ");
    const exitToClasses = classnames2().exitToClass.split(" ");
    for (let i2 = 0; i2 < c2.length; i2++) {
      const el2 = c2[i2];
      if (!first2 && !prev.has(el2)) {
        let endTransition = function(e2) {
          if (el2 && (!e2 || e2.target === el2)) {
            el2.removeEventListener("transitionend", endTransition);
            el2.removeEventListener("animationend", endTransition);
            el2.classList.remove(...enterActiveClasses);
            el2.classList.remove(...enterToClasses);
            onAfterEnter && onAfterEnter(el2);
          }
        };
        onBeforeEnter && onBeforeEnter(el2);
        el2.classList.add(...enterClasses);
        el2.classList.add(...enterActiveClasses);
        nextFrame(() => {
          el2.classList.remove(...enterClasses);
          el2.classList.add(...enterToClasses);
          onEnter && onEnter(el2, () => endTransition());
          if (!onEnter || onEnter.length < 2) {
            el2.addEventListener("transitionend", endTransition);
            el2.addEventListener("animationend", endTransition);
          }
        });
      }
    }
    for (let i2 = 0; i2 < p2.length; i2++) {
      const old = p2[i2];
      if (!next.has(old) && old.parentNode) {
        let endTransition = function(e2) {
          if (!e2 || e2.target === old) {
            old.removeEventListener("transitionend", endTransition);
            old.removeEventListener("animationend", endTransition);
            old.classList.remove(...exitActiveClasses);
            old.classList.remove(...exitToClasses);
            onAfterExit && onAfterExit(old);
            p2 = p2.filter((i3) => i3 !== old);
            setCombined(p2);
          }
        };
        comb.splice(i2, 0, old);
        onBeforeExit && onBeforeExit(old);
        old.classList.add(...exitClasses);
        old.classList.add(...exitActiveClasses);
        nextFrame(() => {
          old.classList.remove(...exitClasses);
          old.classList.add(...exitToClasses);
        });
        onExit && onExit(old, () => endTransition());
        if (!onExit || onExit.length < 2) {
          old.addEventListener("transitionend", endTransition);
          old.addEventListener("animationend", endTransition);
        }
      }
    }
    p2 = comb;
    setCombined(comb);
  });
  createEffect((nodes) => {
    const c2 = combined();
    c2.forEach((child) => {
      let n2;
      if (!(n2 = nodes.get(child))) {
        nodes.set(child, n2 = {
          pos: getRect(child),
          new: !first2
        });
      } else if (n2.new) {
        n2.new = false;
        n2.newPos = getRect(child);
      }
      if (n2.new) {
        child.addEventListener("transitionend", () => {
          n2.new = false;
          child.parentNode && (n2.newPos = getRect(child));
        }, {
          once: true
        });
      }
      n2.newPos && (n2.pos = n2.newPos);
      n2.newPos = getRect(child);
    });
    if (first2) {
      first2 = false;
      return nodes;
    }
    c2.forEach((child) => {
      const c3 = nodes.get(child);
      const oldPos = c3.pos;
      const newPos = c3.newPos;
      const dx = oldPos.left - newPos.left;
      const dy = oldPos.top - newPos.top;
      if (dx || dy) {
        c3.moved = true;
        const s2 = child.style;
        s2.transform = `translate(${dx}px,${dy}px)`;
        s2.transitionDuration = "0s";
      }
    });
    document.body.offsetHeight;
    c2.forEach((child) => {
      const c3 = nodes.get(child);
      if (c3.moved) {
        let endTransition = function(e2) {
          if (e2 && e2.target !== child || !child.parentNode)
            return;
          if (!e2 || /transform$/.test(e2.propertyName)) {
            child.removeEventListener("transitionend", endTransition);
            child.classList.remove(...moveClasses);
          }
        };
        c3.moved = false;
        const s2 = child.style;
        const moveClasses = classnames2().moveClass.split(" ");
        child.classList.add(...moveClasses);
        s2.transform = s2.transitionDuration = "";
        child.addEventListener("transitionend", endTransition);
      }
    });
    return nodes;
  }, /* @__PURE__ */ new Map());
  return combined;
};
function clickOutside$1(el2, accessor) {
  const onClick = (e2) => {
    var _a2;
    return !el2.contains(e2.target) && ((_a2 = accessor()) == null ? void 0 : _a2());
  };
  document.body.addEventListener("click", onClick);
  onCleanup(() => document.body.removeEventListener("click", onClick));
}
function escPressed(_2, accessor) {
  const onKeyPress = (e2) => {
    var _a2, _b2;
    if (e2.key === "Escape") {
      (_a2 = document.activeElement) == null ? void 0 : _a2.blur();
      (_b2 = accessor()) == null ? void 0 : _b2();
    }
  };
  document.body.addEventListener("keydown", onKeyPress);
  onCleanup(() => document.body.removeEventListener("keydown", onKeyPress));
}
function androidBackHandler$1(_2, config) {
  const {
    isEnabled,
    onClose
  } = config();
  if (!isEnabled) {
    return;
  }
  const userOSIsAndroid = getUserAgent().os === "android";
  if (!userOSIsAndroid) {
    return;
  }
  window.history.pushState(ROUTE_STATE, "");
  const popstateHandler = (event) => {
    event.preventDefault();
    onClose();
  };
  window.addEventListener("popstate", popstateHandler, {
    once: true
  });
  onCleanup(() => {
    window.removeEventListener("popstate", popstateHandler);
    createMacrotask(() => {
      var _a2;
      if (((_a2 = window.history.state) == null ? void 0 : _a2[ROUTE_STATE_KEY]) === true) {
        window.history.back();
      }
    });
  });
}
const ROUTE_STATE_KEY = "androidBackHandler";
const ROUTE_STATE = {
  [ROUTE_STATE_KEY]: true
};
const _tmpl$$w = /* @__PURE__ */ template$1(`<svg><path fill-rule="evenodd" clip-rule="evenodd" d="M10.2122 14.3407C10.5384 14.0854 10.5959 13.614 10.3406 13.2878L6.20237 8.00003L10.3406 2.71227C10.5959 2.38607 10.5384 1.91469 10.2122 1.6594C9.88604 1.40412 9.41465 1.46161 9.15937 1.7878L4.65937 7.5378C4.44688 7.80932 4.44688 8.19074 4.65937 8.46226L9.15937 14.2123C9.41465 14.5385 9.88604 14.5959 10.2122 14.3407Z"></path></svg>`, 4, true);
const rotationDegrees = {
  left: 0,
  top: 90,
  right: 180,
  bottom: 270
};
const ArrowIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.icon.secondary;
  const direction = () => props.direction || "left";
  const Svg = styled$1("svg")`
        transform: rotate(${(props2) => rotationDegrees[props2.svgDirection]}deg);
        transition: transform 0.1s ease-in-out;
    `;
  return createComponent(Svg, {
    xmlns: "http://www.w3.org/2000/svg",
    width: "16",
    height: "16",
    viewBox: "0 0 16 16",
    fill: "none",
    get svgDirection() {
      return direction();
    },
    get children() {
      const _el$ = _tmpl$$w.cloneNode(true);
      createRenderEffect(() => setAttribute(_el$, "fill", fill()));
      return _el$;
    }
  });
};
const _tmpl$$v = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M2.71966 2.71968C3.01255 2.42678 3.48743 2.42677 3.78032 2.71966L8.00002 6.93925L12.2197 2.71967C12.5126 2.42677 12.9874 2.42678 13.2803 2.71967C13.5732 3.01257 13.5732 3.48744 13.2803 3.78033L9.06068 7.99991L13.2803 12.2197C13.5732 12.5126 13.5732 12.9874 13.2803 13.2803C12.9874 13.5732 12.5126 13.5732 12.2197 13.2803L8.00002 9.06057L3.78033 13.2803C3.48744 13.5732 3.01257 13.5732 2.71967 13.2803C2.42678 12.9874 2.42677 12.5126 2.71967 12.2197L6.93936 7.99991L2.71968 3.78034C2.42678 3.48745 2.42677 3.01257 2.71966 2.71968Z"></path></svg>`);
const CloseIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.icon.secondary;
  return (() => {
    const _el$ = _tmpl$$v.cloneNode(true), _el$2 = _el$.firstChild;
    createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
    return _el$;
  })();
};
const IconButtonStyled = styled$1.button`
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background-color: ${(props) => props.theme.colors.background.tint};
    border: none;
    cursor: pointer;

    transition: transform 0.125s ease-in-out;

    ${mediaNotTouch} {
        &:hover {
            transform: scale(1.04);
        }
    }

    &:active {
        transform: scale(0.96);
    }

    ${mediaTouch} {
        &:active {
            transform: scale(0.92);
        }
    }
`;
const IconButton = (props) => {
  const dataAttrs = useDataAttributes(props);
  const icon = () => props.icon || "close";
  return createComponent(IconButtonStyled, mergeProps({
    get ["class"]() {
      return props.class;
    },
    onClick: () => props.onClick(),
    "data-tc-icon-button": "true"
  }, dataAttrs, {
    get children() {
      return [createComponent(Show, {
        get when() {
          return !!props.children;
        },
        get children() {
          return props.children;
        }
      }), createComponent(Show, {
        get when() {
          return !props.children;
        },
        get children() {
          return createComponent(Switch, {
            get children() {
              return [createComponent(Match, {
                get when() {
                  return icon() === "close";
                },
                get children() {
                  return createComponent(CloseIcon, {
                    get fill() {
                      return props.fill;
                    }
                  });
                }
              }), createComponent(Match, {
                get when() {
                  return icon() === "arrow";
                },
                get children() {
                  return createComponent(ArrowIcon, {
                    get fill() {
                      return props.fill;
                    }
                  });
                }
              }), createComponent(Match, {
                get when() {
                  return icon() === "question";
                },
                get children() {
                  return createComponent(QuestionIcon, {
                    get fill() {
                      return props.fill;
                    }
                  });
                }
              }), createComponent(Match, {
                get when() {
                  return typeof icon() !== "string";
                },
                get children() {
                  return icon();
                }
              })];
            }
          });
        }
      })];
    }
  }));
};
const borders$4 = {
  m: "24px",
  s: "16px",
  none: "0"
};
const ModalBackgroundStyled = styled$1.div`
    display: flex;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.4);
    padding: 20px 0;
    overflow-y: auto;

    ${media("mobile")} {
        padding-bottom: 0;
    }
`;
const ModalWrapperClass = u`
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08), 0 16px 64px rgba(0, 0, 0, 0.16);
    width: fit-content;
    margin: auto;

    ${media("mobile")} {
        width: 100%;
        height: fit-content;
        margin: auto 0 0 0;
    }
`;
const ModalBodyStyled = styled$1.div`
    position: relative;
    min-height: 100px;
    width: 416px;
    padding: 44px 56px 24px;

    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.04);

    background-color: ${(props) => props.theme.colors.background.primary};
    border-radius: ${(props) => borders$4[props.theme.borderRadius]};

    ${media("mobile")} {
        width: 100%;
    }
`;
const CloseButtonStyled = styled$1(IconButton)`
    position: absolute;
    right: 16px;
    top: 16px;
`;
const ModalFooterStyled = styled$1.div`
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px 16px 16px 18px;
    border-radius: 0 0 ${(props) => borders$4[props.theme.borderRadius]}
        ${(props) => borders$4[props.theme.borderRadius]};
`;
const QuestionButtonStyled = styled$1(IconButton)`
    background-color: ${(props) => rgba(props.theme.colors.icon.secondary, 0.12)};
`;
class AnimationTimelineNoop {
  constructor() {
    __publicField(this, "currentTime", 0);
  }
}
const _AnimationNoop = class {
  constructor() {
    __publicField(this, "currentTime", 0);
    __publicField(this, "playbackRate", 1);
    __publicField(this, "startTime", null);
    __publicField(this, "timeline", new AnimationTimelineNoop());
    __publicField(this, "finished", Promise.resolve(this));
    __publicField(this, "effect", null);
    __publicField(this, "id", "");
    __publicField(this, "pending", false);
    __publicField(this, "playState", "finished");
    __publicField(this, "replaceState", "active");
    __publicField(this, "ready", Promise.resolve(this));
    __publicField(this, "oncancel", null);
    __publicField(this, "onfinish", null);
    __publicField(this, "onremove", null);
  }
  static create() {
    if (!_AnimationNoop._instance) {
      logWarning(
        "Animation is not supported in this environment: please consider using the `web-animations-js` polyfill to provide a fallback implementation of the Web Animations API."
      );
      _AnimationNoop._instance = new _AnimationNoop();
    }
    return _AnimationNoop._instance;
  }
  cancel() {
  }
  finish() {
  }
  pause() {
  }
  play() {
  }
  reverse() {
  }
  addEventListener(_type, _listener, _options) {
  }
  dispatchEvent(_event) {
    return false;
  }
  removeEventListener(_type, _callback, _options) {
  }
  updatePlaybackRate(_playbackRate) {
  }
  commitStyles() {
  }
  persist() {
  }
};
let AnimationNoop = _AnimationNoop;
__publicField(AnimationNoop, "_instance", null);
function animate(element, keyframes, options) {
  if ("animate" in element) {
    return element.animate(keyframes, options);
  }
  return AnimationNoop.create();
}
const _tmpl$$u = /* @__PURE__ */ template$1(`<div></div>`);
const clickOutside = clickOutside$1;
const keyPressed = escPressed;
const androidBackHandler = androidBackHandler$1;
const Modal = (props) => {
  const theme = useTheme();
  const dataAttrs = useDataAttributes(props);
  createEffect(() => {
    if (props.opened) {
      disableScroll();
    } else {
      enableScroll();
    }
  });
  return createComponent(Transition, {
    onBeforeEnter: (el2) => {
      const duration = isDevice("mobile") ? 200 : 100;
      animate(el2, [{
        opacity: 0
      }, {
        opacity: 1
      }], {
        duration
      });
      if (isDevice("mobile")) {
        animate(el2.firstElementChild, [{
          transform: "translateY(390px)"
        }, {
          transform: "translateY(0)"
        }], {
          duration
        });
      }
    },
    onExit: (el2, done) => {
      const duration = isDevice("mobile") ? 200 : 100;
      const backgroundAnimation = animate(el2, [{
        opacity: 1
      }, {
        opacity: 0
      }], {
        duration
      });
      if (isDevice("mobile")) {
        const contentAnimation = animate(el2.firstElementChild, [{
          transform: "translateY(0)"
        }, {
          transform: "translateY(390px)"
        }], {
          duration
        });
        Promise.all([backgroundAnimation.finished, contentAnimation.finished]).then(done);
      } else {
        backgroundAnimation.finished.then(done);
      }
    },
    get children() {
      return createComponent(Show, {
        get when() {
          return props.opened;
        },
        get children() {
          return createComponent(ModalBackgroundStyled, mergeProps({
            "data-tc-modal": "true"
          }, dataAttrs, {
            get children() {
              const _el$ = _tmpl$$u.cloneNode(true);
              use(androidBackHandler, _el$, () => ({
                isEnabled: props.enableAndroidBackHandler,
                onClose: () => props.onClose()
              }));
              use(keyPressed, _el$, () => () => props.onClose());
              use(clickOutside, _el$, () => () => props.onClose());
              insert(_el$, createComponent(ModalBodyStyled, {
                get ["class"]() {
                  return props.class;
                },
                get children() {
                  return [createComponent(CloseButtonStyled, {
                    icon: "close",
                    onClick: () => props.onClose()
                  }), createMemo(() => props.children)];
                }
              }), null);
              insert(_el$, createComponent(Show, {
                get when() {
                  return props.onClickQuestion;
                },
                get children() {
                  return createComponent(ModalFooterStyled, {
                    get children() {
                      return [createComponent(TonConnectBrand, {}), createComponent(QuestionButtonStyled, {
                        get onClick() {
                          return props.onClickQuestion;
                        },
                        icon: "question"
                      })];
                    }
                  });
                }
              }), null);
              createRenderEffect(() => className(_el$, cn(ModalWrapperClass, u`
                                border-radius: ${borders$4[theme.borderRadius]};
                                background-color: ${theme.colors.background.tint};

                                ${media("mobile")} {
                                    border-radius: ${borders$4[theme.borderRadius]}
                                        ${borders$4[theme.borderRadius]} 0 0;
                                }
                            `)));
              return _el$;
            }
          }));
        }
      });
    }
  });
};
const wrapperBorderRadius = {
  m: "22px",
  s: "12px",
  none: "0"
};
const sliderBorderRadius = {
  m: "18px",
  s: "8px",
  none: "0"
};
const TabBarStyled = styled$1.div`
    display: grid;
    grid-template: 1fr / 1fr 1fr;
    width: fit-content;
    justify-items: center;
    gap: 4px;

    position: relative;
    padding: 4px;
    border-radius: ${(props) => wrapperBorderRadius[props.theme.borderRadius]};

    background-color: ${(props) => props.theme.colors.background.secondary};
`;
const SliderStyled = styled$1.div`
    position: absolute;
    top: 4px;
    left: 4px;

    height: calc(100% - 8px);
    width: calc(50% - 4px);

    border-radius: ${(props) => sliderBorderRadius[props.theme.borderRadius]};
    background-color: ${(props) => props.theme.colors.background.segment};

    transform: ${(props) => props.right ? "translateX(100%)" : "translateX(0)"};

    transition: transform 0.13s ease-in-out;
`;
const InputStyled = styled$1.input`
    display: none;
`;
const LabelStyled = styled$1.label`
    padding: 9px 12px;
    z-index: 1;

    cursor: ${(props) => props.isActive ? "default" : "pointer"};

    transition: transform 0.13s ease-in-out;

    &:hover {
        transform: ${(props) => props.isActive ? "none" : "scale(1.025)"};
    }

    > * {
        ${(props) => !props.isActive ? `color: ${props.theme.colors.text.secondary};` : ""}
    }
`;
const TabBar = (props) => {
  const groupName = "tabBar" + Math.floor(Math.random() * 1e4);
  return createComponent(TabBarStyled, {
    get ["class"]() {
      return props.class;
    },
    "data-tc-tab-bar": "true",
    get children() {
      return [createComponent(SliderStyled, {
        get right() {
          return props.selectedTabIndex === 1;
        }
      }), createComponent(LabelStyled, {
        get isActive() {
          return props.selectedTabIndex === 0;
        },
        get children() {
          return [createComponent(InputStyled, {
            type: "radio",
            name: groupName,
            get checked() {
              return props.selectedTabIndex === 0;
            },
            onInput: () => {
              var _a2;
              return (_a2 = props.onSelectedTabIndexChange) == null ? void 0 : _a2.call(props, 0);
            }
          }), createMemo(() => props.tab1)];
        }
      }), createComponent(LabelStyled, {
        get isActive() {
          return props.selectedTabIndex === 1;
        },
        get children() {
          return [createComponent(InputStyled, {
            type: "radio",
            get checked() {
              return props.selectedTabIndex === 1;
            },
            name: groupName,
            onInput: () => {
              var _a2;
              return (_a2 = props.onSelectedTabIndexChange) == null ? void 0 : _a2.call(props, 1);
            }
          }), createMemo(() => props.tab2)];
        }
      })];
    }
  });
};
const backgroundBorders = {
  m: "16px",
  s: "12px",
  none: "0"
};
const imageBorders = {
  m: "12px",
  s: "8px",
  none: "0"
};
const qrNormalSize = 256;
const imgSizeDefault = 60;
const picSizeDefault = 48;
const qrPaddingTop = 24;
const CopyIconButton = styled$1.div`
    width: 52px;
    height: 52px;
    background: transparent;
    position: absolute;
    right: 0;
    bottom: 0;

    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.125s ease-in-out;
`;
const QrCodeBackground = styled$1.button`
    display: flex;
    align-items: center;
    position: relative;
    background-color: ${(props) => props.theme.colors.background.qr};
    border-radius: ${(props) => backgroundBorders[props.theme.borderRadius]};
    padding: ${toPx(qrPaddingTop)} 0;
    height: ${toPx(qrNormalSize + qrPaddingTop * 2)};
    width: 100%;

    overflow: hidden;
    cursor: pointer;
    border: none;

    ${mediaNotTouch} {
        &:hover {
            ${CopyIconButton.class} {
                transform: scale(1.04);
            }
        }
    }

    &:active {
        ${CopyIconButton.class} {
            transform: scale(0.96);
        }
    }

    ${mediaTouch} {
        &:active {
            ${CopyIconButton.class} {
                transform: scale(0.92);
            }
        }
    }
`;
const QrCodeWrapper$2 = styled$1.div`
    position: relative;

    width: fit-content;
    margin: 0 auto;

    > div:first-child {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    rect {
        fill: transparent;
    }

    path {
        fill: ${(props) => props.theme.colors.constant.black};
    }
`;
const ImageBackground = styled$1.div`
    position: absolute;
    width: ${toPx(imgSizeDefault)};
    height: ${toPx(imgSizeDefault)};
    background: ${(props) => props.theme.colors.background.qr};

    display: flex;
    align-items: center;
    justify-content: center;
`;
const ImageStyled$3 = styled$1(Image)`
    width: ${(props) => toPx(props.size)};
    height: ${(props) => toPx(props.size)};
    border-radius: ${(props) => imageBorders[props.theme.borderRadius]};
    background-color: ${(props) => props.theme.colors.background.qr};
`;
const CopiedBoxStyled = styled$1.div`
    position: absolute;
    bottom: 14px;
    left: 50%;
    transform: translate(-50%, 0);

    display: flex;
    gap: 6px;
    align-items: center;
    border-radius: 18px;
    min-width: 126px;
    padding: 9px 16px 9px 10px;

    filter: drop-shadow(0px 2px 8px rgba(0, 0, 0, 0.08));
    background-color: ${(props) => props.theme.colors.background.segment};
`;
var qrcode$1 = { exports: {} };
(function(module, exports2) {
  var qrcode2 = function() {
    var qrcode3 = function(typeNumber, errorCorrectionLevel) {
      var PAD0 = 236;
      var PAD1 = 17;
      var _typeNumber = typeNumber;
      var _errorCorrectionLevel = QRErrorCorrectionLevel[errorCorrectionLevel];
      var _modules = null;
      var _moduleCount = 0;
      var _dataCache = null;
      var _dataList = [];
      var _this = {};
      var makeImpl = function(test, maskPattern) {
        _moduleCount = _typeNumber * 4 + 17;
        _modules = function(moduleCount) {
          var modules = new Array(moduleCount);
          for (var row = 0; row < moduleCount; row += 1) {
            modules[row] = new Array(moduleCount);
            for (var col = 0; col < moduleCount; col += 1) {
              modules[row][col] = null;
            }
          }
          return modules;
        }(_moduleCount);
        setupPositionProbePattern(0, 0);
        setupPositionProbePattern(_moduleCount - 7, 0);
        setupPositionProbePattern(0, _moduleCount - 7);
        setupPositionAdjustPattern();
        setupTimingPattern();
        setupTypeInfo(test, maskPattern);
        if (_typeNumber >= 7) {
          setupTypeNumber(test);
        }
        if (_dataCache == null) {
          _dataCache = createData(_typeNumber, _errorCorrectionLevel, _dataList);
        }
        mapData(_dataCache, maskPattern);
      };
      var setupPositionProbePattern = function(row, col) {
        for (var r2 = -1; r2 <= 7; r2 += 1) {
          if (row + r2 <= -1 || _moduleCount <= row + r2)
            continue;
          for (var c2 = -1; c2 <= 7; c2 += 1) {
            if (col + c2 <= -1 || _moduleCount <= col + c2)
              continue;
            if (0 <= r2 && r2 <= 6 && (c2 == 0 || c2 == 6) || 0 <= c2 && c2 <= 6 && (r2 == 0 || r2 == 6) || 2 <= r2 && r2 <= 4 && 2 <= c2 && c2 <= 4) {
              _modules[row + r2][col + c2] = true;
            } else {
              _modules[row + r2][col + c2] = false;
            }
          }
        }
      };
      var getBestMaskPattern = function() {
        var minLostPoint = 0;
        var pattern = 0;
        for (var i2 = 0; i2 < 8; i2 += 1) {
          makeImpl(true, i2);
          var lostPoint = QRUtil.getLostPoint(_this);
          if (i2 == 0 || minLostPoint > lostPoint) {
            minLostPoint = lostPoint;
            pattern = i2;
          }
        }
        return pattern;
      };
      var setupTimingPattern = function() {
        for (var r2 = 8; r2 < _moduleCount - 8; r2 += 1) {
          if (_modules[r2][6] != null) {
            continue;
          }
          _modules[r2][6] = r2 % 2 == 0;
        }
        for (var c2 = 8; c2 < _moduleCount - 8; c2 += 1) {
          if (_modules[6][c2] != null) {
            continue;
          }
          _modules[6][c2] = c2 % 2 == 0;
        }
      };
      var setupPositionAdjustPattern = function() {
        var pos = QRUtil.getPatternPosition(_typeNumber);
        for (var i2 = 0; i2 < pos.length; i2 += 1) {
          for (var j2 = 0; j2 < pos.length; j2 += 1) {
            var row = pos[i2];
            var col = pos[j2];
            if (_modules[row][col] != null) {
              continue;
            }
            for (var r2 = -2; r2 <= 2; r2 += 1) {
              for (var c2 = -2; c2 <= 2; c2 += 1) {
                if (r2 == -2 || r2 == 2 || c2 == -2 || c2 == 2 || r2 == 0 && c2 == 0) {
                  _modules[row + r2][col + c2] = true;
                } else {
                  _modules[row + r2][col + c2] = false;
                }
              }
            }
          }
        }
      };
      var setupTypeNumber = function(test) {
        var bits = QRUtil.getBCHTypeNumber(_typeNumber);
        for (var i2 = 0; i2 < 18; i2 += 1) {
          var mod = !test && (bits >> i2 & 1) == 1;
          _modules[Math.floor(i2 / 3)][i2 % 3 + _moduleCount - 8 - 3] = mod;
        }
        for (var i2 = 0; i2 < 18; i2 += 1) {
          var mod = !test && (bits >> i2 & 1) == 1;
          _modules[i2 % 3 + _moduleCount - 8 - 3][Math.floor(i2 / 3)] = mod;
        }
      };
      var setupTypeInfo = function(test, maskPattern) {
        var data2 = _errorCorrectionLevel << 3 | maskPattern;
        var bits = QRUtil.getBCHTypeInfo(data2);
        for (var i2 = 0; i2 < 15; i2 += 1) {
          var mod = !test && (bits >> i2 & 1) == 1;
          if (i2 < 6) {
            _modules[i2][8] = mod;
          } else if (i2 < 8) {
            _modules[i2 + 1][8] = mod;
          } else {
            _modules[_moduleCount - 15 + i2][8] = mod;
          }
        }
        for (var i2 = 0; i2 < 15; i2 += 1) {
          var mod = !test && (bits >> i2 & 1) == 1;
          if (i2 < 8) {
            _modules[8][_moduleCount - i2 - 1] = mod;
          } else if (i2 < 9) {
            _modules[8][15 - i2 - 1 + 1] = mod;
          } else {
            _modules[8][15 - i2 - 1] = mod;
          }
        }
        _modules[_moduleCount - 8][8] = !test;
      };
      var mapData = function(data2, maskPattern) {
        var inc = -1;
        var row = _moduleCount - 1;
        var bitIndex = 7;
        var byteIndex = 0;
        var maskFunc = QRUtil.getMaskFunction(maskPattern);
        for (var col = _moduleCount - 1; col > 0; col -= 2) {
          if (col == 6)
            col -= 1;
          while (true) {
            for (var c2 = 0; c2 < 2; c2 += 1) {
              if (_modules[row][col - c2] == null) {
                var dark = false;
                if (byteIndex < data2.length) {
                  dark = (data2[byteIndex] >>> bitIndex & 1) == 1;
                }
                var mask = maskFunc(row, col - c2);
                if (mask) {
                  dark = !dark;
                }
                _modules[row][col - c2] = dark;
                bitIndex -= 1;
                if (bitIndex == -1) {
                  byteIndex += 1;
                  bitIndex = 7;
                }
              }
            }
            row += inc;
            if (row < 0 || _moduleCount <= row) {
              row -= inc;
              inc = -inc;
              break;
            }
          }
        }
      };
      var createBytes = function(buffer2, rsBlocks) {
        var offset = 0;
        var maxDcCount = 0;
        var maxEcCount = 0;
        var dcdata = new Array(rsBlocks.length);
        var ecdata = new Array(rsBlocks.length);
        for (var r2 = 0; r2 < rsBlocks.length; r2 += 1) {
          var dcCount = rsBlocks[r2].dataCount;
          var ecCount = rsBlocks[r2].totalCount - dcCount;
          maxDcCount = Math.max(maxDcCount, dcCount);
          maxEcCount = Math.max(maxEcCount, ecCount);
          dcdata[r2] = new Array(dcCount);
          for (var i2 = 0; i2 < dcdata[r2].length; i2 += 1) {
            dcdata[r2][i2] = 255 & buffer2.getBuffer()[i2 + offset];
          }
          offset += dcCount;
          var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);
          var rawPoly = qrPolynomial(dcdata[r2], rsPoly.getLength() - 1);
          var modPoly = rawPoly.mod(rsPoly);
          ecdata[r2] = new Array(rsPoly.getLength() - 1);
          for (var i2 = 0; i2 < ecdata[r2].length; i2 += 1) {
            var modIndex = i2 + modPoly.getLength() - ecdata[r2].length;
            ecdata[r2][i2] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;
          }
        }
        var totalCodeCount = 0;
        for (var i2 = 0; i2 < rsBlocks.length; i2 += 1) {
          totalCodeCount += rsBlocks[i2].totalCount;
        }
        var data2 = new Array(totalCodeCount);
        var index2 = 0;
        for (var i2 = 0; i2 < maxDcCount; i2 += 1) {
          for (var r2 = 0; r2 < rsBlocks.length; r2 += 1) {
            if (i2 < dcdata[r2].length) {
              data2[index2] = dcdata[r2][i2];
              index2 += 1;
            }
          }
        }
        for (var i2 = 0; i2 < maxEcCount; i2 += 1) {
          for (var r2 = 0; r2 < rsBlocks.length; r2 += 1) {
            if (i2 < ecdata[r2].length) {
              data2[index2] = ecdata[r2][i2];
              index2 += 1;
            }
          }
        }
        return data2;
      };
      var createData = function(typeNumber2, errorCorrectionLevel2, dataList) {
        var rsBlocks = QRRSBlock.getRSBlocks(typeNumber2, errorCorrectionLevel2);
        var buffer2 = qrBitBuffer();
        for (var i2 = 0; i2 < dataList.length; i2 += 1) {
          var data2 = dataList[i2];
          buffer2.put(data2.getMode(), 4);
          buffer2.put(data2.getLength(), QRUtil.getLengthInBits(data2.getMode(), typeNumber2));
          data2.write(buffer2);
        }
        var totalDataCount = 0;
        for (var i2 = 0; i2 < rsBlocks.length; i2 += 1) {
          totalDataCount += rsBlocks[i2].dataCount;
        }
        if (buffer2.getLengthInBits() > totalDataCount * 8) {
          throw "code length overflow. (" + buffer2.getLengthInBits() + ">" + totalDataCount * 8 + ")";
        }
        if (buffer2.getLengthInBits() + 4 <= totalDataCount * 8) {
          buffer2.put(0, 4);
        }
        while (buffer2.getLengthInBits() % 8 != 0) {
          buffer2.putBit(false);
        }
        while (true) {
          if (buffer2.getLengthInBits() >= totalDataCount * 8) {
            break;
          }
          buffer2.put(PAD0, 8);
          if (buffer2.getLengthInBits() >= totalDataCount * 8) {
            break;
          }
          buffer2.put(PAD1, 8);
        }
        return createBytes(buffer2, rsBlocks);
      };
      _this.addData = function(data2, mode) {
        mode = mode || "Byte";
        var newData = null;
        switch (mode) {
          case "Numeric":
            newData = qrNumber(data2);
            break;
          case "Alphanumeric":
            newData = qrAlphaNum(data2);
            break;
          case "Byte":
            newData = qr8BitByte(data2);
            break;
          case "Kanji":
            newData = qrKanji(data2);
            break;
          default:
            throw "mode:" + mode;
        }
        _dataList.push(newData);
        _dataCache = null;
      };
      _this.isDark = function(row, col) {
        if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {
          throw row + "," + col;
        }
        return _modules[row][col];
      };
      _this.getModuleCount = function() {
        return _moduleCount;
      };
      _this.make = function() {
        if (_typeNumber < 1) {
          var typeNumber2 = 1;
          for (; typeNumber2 < 40; typeNumber2++) {
            var rsBlocks = QRRSBlock.getRSBlocks(typeNumber2, _errorCorrectionLevel);
            var buffer2 = qrBitBuffer();
            for (var i2 = 0; i2 < _dataList.length; i2++) {
              var data2 = _dataList[i2];
              buffer2.put(data2.getMode(), 4);
              buffer2.put(data2.getLength(), QRUtil.getLengthInBits(data2.getMode(), typeNumber2));
              data2.write(buffer2);
            }
            var totalDataCount = 0;
            for (var i2 = 0; i2 < rsBlocks.length; i2++) {
              totalDataCount += rsBlocks[i2].dataCount;
            }
            if (buffer2.getLengthInBits() <= totalDataCount * 8) {
              break;
            }
          }
          _typeNumber = typeNumber2;
        }
        makeImpl(false, getBestMaskPattern());
      };
      _this.createTableTag = function(cellSize, margin) {
        cellSize = cellSize || 2;
        margin = typeof margin == "undefined" ? cellSize * 4 : margin;
        var qrHtml = "";
        qrHtml += '<table style="';
        qrHtml += " border-width: 0px; border-style: none;";
        qrHtml += " border-collapse: collapse;";
        qrHtml += " padding: 0px; margin: " + margin + "px;";
        qrHtml += '">';
        qrHtml += "<tbody>";
        for (var r2 = 0; r2 < _this.getModuleCount(); r2 += 1) {
          qrHtml += "<tr>";
          for (var c2 = 0; c2 < _this.getModuleCount(); c2 += 1) {
            qrHtml += '<td style="';
            qrHtml += " border-width: 0px; border-style: none;";
            qrHtml += " border-collapse: collapse;";
            qrHtml += " padding: 0px; margin: 0px;";
            qrHtml += " width: " + cellSize + "px;";
            qrHtml += " height: " + cellSize + "px;";
            qrHtml += " background-color: ";
            qrHtml += _this.isDark(r2, c2) ? "#000000" : "#ffffff";
            qrHtml += ";";
            qrHtml += '"/>';
          }
          qrHtml += "</tr>";
        }
        qrHtml += "</tbody>";
        qrHtml += "</table>";
        return qrHtml;
      };
      _this.createSvgTag = function(cellSize, margin, alt2, title) {
        var opts = {};
        if (typeof arguments[0] == "object") {
          opts = arguments[0];
          cellSize = opts.cellSize;
          margin = opts.margin;
          alt2 = opts.alt;
          title = opts.title;
        }
        cellSize = cellSize || 2;
        margin = typeof margin == "undefined" ? cellSize * 4 : margin;
        alt2 = typeof alt2 === "string" ? { text: alt2 } : alt2 || {};
        alt2.text = alt2.text || null;
        alt2.id = alt2.text ? alt2.id || "qrcode-description" : null;
        title = typeof title === "string" ? { text: title } : title || {};
        title.text = title.text || null;
        title.id = title.text ? title.id || "qrcode-title" : null;
        var size2 = _this.getModuleCount() * cellSize + margin * 2;
        var c2, mc2, r2, mr2, qrSvg = "", rect;
        rect = "l" + cellSize + ",0 0," + cellSize + " -" + cellSize + ",0 0,-" + cellSize + "z ";
        qrSvg += '<svg version="1.1" xmlns="http://www.w3.org/2000/svg"';
        qrSvg += !opts.scalable ? ' width="' + size2 + 'px" height="' + size2 + 'px"' : "";
        qrSvg += ' viewBox="0 0 ' + size2 + " " + size2 + '" ';
        qrSvg += ' preserveAspectRatio="xMinYMin meet"';
        qrSvg += title.text || alt2.text ? ' role="img" aria-labelledby="' + escapeXml([title.id, alt2.id].join(" ").trim()) + '"' : "";
        qrSvg += ">";
        qrSvg += title.text ? '<title id="' + escapeXml(title.id) + '">' + escapeXml(title.text) + "</title>" : "";
        qrSvg += alt2.text ? '<description id="' + escapeXml(alt2.id) + '">' + escapeXml(alt2.text) + "</description>" : "";
        qrSvg += '<rect width="100%" height="100%" fill="white" cx="0" cy="0"/>';
        qrSvg += '<path d="';
        for (r2 = 0; r2 < _this.getModuleCount(); r2 += 1) {
          mr2 = r2 * cellSize + margin;
          for (c2 = 0; c2 < _this.getModuleCount(); c2 += 1) {
            if (_this.isDark(r2, c2)) {
              mc2 = c2 * cellSize + margin;
              qrSvg += "M" + mc2 + "," + mr2 + rect;
            }
          }
        }
        qrSvg += '" stroke="transparent" fill="black"/>';
        qrSvg += "</svg>";
        return qrSvg;
      };
      _this.createDataURL = function(cellSize, margin) {
        cellSize = cellSize || 2;
        margin = typeof margin == "undefined" ? cellSize * 4 : margin;
        var size2 = _this.getModuleCount() * cellSize + margin * 2;
        var min2 = margin;
        var max2 = size2 - margin;
        return createDataURL(size2, size2, function(x2, y2) {
          if (min2 <= x2 && x2 < max2 && min2 <= y2 && y2 < max2) {
            var c2 = Math.floor((x2 - min2) / cellSize);
            var r2 = Math.floor((y2 - min2) / cellSize);
            return _this.isDark(r2, c2) ? 0 : 1;
          } else {
            return 1;
          }
        });
      };
      _this.createImgTag = function(cellSize, margin, alt2) {
        cellSize = cellSize || 2;
        margin = typeof margin == "undefined" ? cellSize * 4 : margin;
        var size2 = _this.getModuleCount() * cellSize + margin * 2;
        var img = "";
        img += "<img";
        img += ' src="';
        img += _this.createDataURL(cellSize, margin);
        img += '"';
        img += ' width="';
        img += size2;
        img += '"';
        img += ' height="';
        img += size2;
        img += '"';
        if (alt2) {
          img += ' alt="';
          img += escapeXml(alt2);
          img += '"';
        }
        img += "/>";
        return img;
      };
      var escapeXml = function(s2) {
        var escaped = "";
        for (var i2 = 0; i2 < s2.length; i2 += 1) {
          var c2 = s2.charAt(i2);
          switch (c2) {
            case "<":
              escaped += "&lt;";
              break;
            case ">":
              escaped += "&gt;";
              break;
            case "&":
              escaped += "&amp;";
              break;
            case '"':
              escaped += "&quot;";
              break;
            default:
              escaped += c2;
              break;
          }
        }
        return escaped;
      };
      var _createHalfASCII = function(margin) {
        var cellSize = 1;
        margin = typeof margin == "undefined" ? cellSize * 2 : margin;
        var size2 = _this.getModuleCount() * cellSize + margin * 2;
        var min2 = margin;
        var max2 = size2 - margin;
        var y2, x2, r1, r2, p2;
        var blocks = {
          "██": "█",
          "█ ": "▀",
          " █": "▄",
          "  ": " "
        };
        var blocksLastLineNoMargin = {
          "██": "▀",
          "█ ": "▀",
          " █": " ",
          "  ": " "
        };
        var ascii = "";
        for (y2 = 0; y2 < size2; y2 += 2) {
          r1 = Math.floor((y2 - min2) / cellSize);
          r2 = Math.floor((y2 + 1 - min2) / cellSize);
          for (x2 = 0; x2 < size2; x2 += 1) {
            p2 = "█";
            if (min2 <= x2 && x2 < max2 && min2 <= y2 && y2 < max2 && _this.isDark(r1, Math.floor((x2 - min2) / cellSize))) {
              p2 = " ";
            }
            if (min2 <= x2 && x2 < max2 && min2 <= y2 + 1 && y2 + 1 < max2 && _this.isDark(r2, Math.floor((x2 - min2) / cellSize))) {
              p2 += " ";
            } else {
              p2 += "█";
            }
            ascii += margin < 1 && y2 + 1 >= max2 ? blocksLastLineNoMargin[p2] : blocks[p2];
          }
          ascii += "\n";
        }
        if (size2 % 2 && margin > 0) {
          return ascii.substring(0, ascii.length - size2 - 1) + Array(size2 + 1).join("▀");
        }
        return ascii.substring(0, ascii.length - 1);
      };
      _this.createASCII = function(cellSize, margin) {
        cellSize = cellSize || 1;
        if (cellSize < 2) {
          return _createHalfASCII(margin);
        }
        cellSize -= 1;
        margin = typeof margin == "undefined" ? cellSize * 2 : margin;
        var size2 = _this.getModuleCount() * cellSize + margin * 2;
        var min2 = margin;
        var max2 = size2 - margin;
        var y2, x2, r2, p2;
        var white = Array(cellSize + 1).join("██");
        var black = Array(cellSize + 1).join("  ");
        var ascii = "";
        var line = "";
        for (y2 = 0; y2 < size2; y2 += 1) {
          r2 = Math.floor((y2 - min2) / cellSize);
          line = "";
          for (x2 = 0; x2 < size2; x2 += 1) {
            p2 = 1;
            if (min2 <= x2 && x2 < max2 && min2 <= y2 && y2 < max2 && _this.isDark(r2, Math.floor((x2 - min2) / cellSize))) {
              p2 = 0;
            }
            line += p2 ? white : black;
          }
          for (r2 = 0; r2 < cellSize; r2 += 1) {
            ascii += line + "\n";
          }
        }
        return ascii.substring(0, ascii.length - 1);
      };
      _this.renderTo2dContext = function(context, cellSize) {
        cellSize = cellSize || 2;
        var length = _this.getModuleCount();
        for (var row = 0; row < length; row++) {
          for (var col = 0; col < length; col++) {
            context.fillStyle = _this.isDark(row, col) ? "black" : "white";
            context.fillRect(row * cellSize, col * cellSize, cellSize, cellSize);
          }
        }
      };
      return _this;
    };
    qrcode3.stringToBytesFuncs = {
      "default": function(s2) {
        var bytes = [];
        for (var i2 = 0; i2 < s2.length; i2 += 1) {
          var c2 = s2.charCodeAt(i2);
          bytes.push(c2 & 255);
        }
        return bytes;
      }
    };
    qrcode3.stringToBytes = qrcode3.stringToBytesFuncs["default"];
    qrcode3.createStringToBytes = function(unicodeData, numChars) {
      var unicodeMap = function() {
        var bin = base64DecodeInputStream(unicodeData);
        var read = function() {
          var b4 = bin.read();
          if (b4 == -1)
            throw "eof";
          return b4;
        };
        var count = 0;
        var unicodeMap2 = {};
        while (true) {
          var b0 = bin.read();
          if (b0 == -1)
            break;
          var b1 = read();
          var b2 = read();
          var b3 = read();
          var k2 = String.fromCharCode(b0 << 8 | b1);
          var v2 = b2 << 8 | b3;
          unicodeMap2[k2] = v2;
          count += 1;
        }
        if (count != numChars) {
          throw count + " != " + numChars;
        }
        return unicodeMap2;
      }();
      var unknownChar = "?".charCodeAt(0);
      return function(s2) {
        var bytes = [];
        for (var i2 = 0; i2 < s2.length; i2 += 1) {
          var c2 = s2.charCodeAt(i2);
          if (c2 < 128) {
            bytes.push(c2);
          } else {
            var b2 = unicodeMap[s2.charAt(i2)];
            if (typeof b2 == "number") {
              if ((b2 & 255) == b2) {
                bytes.push(b2);
              } else {
                bytes.push(b2 >>> 8);
                bytes.push(b2 & 255);
              }
            } else {
              bytes.push(unknownChar);
            }
          }
        }
        return bytes;
      };
    };
    var QRMode = {
      MODE_NUMBER: 1 << 0,
      MODE_ALPHA_NUM: 1 << 1,
      MODE_8BIT_BYTE: 1 << 2,
      MODE_KANJI: 1 << 3
    };
    var QRErrorCorrectionLevel = {
      L: 1,
      M: 0,
      Q: 3,
      H: 2
    };
    var QRMaskPattern = {
      PATTERN000: 0,
      PATTERN001: 1,
      PATTERN010: 2,
      PATTERN011: 3,
      PATTERN100: 4,
      PATTERN101: 5,
      PATTERN110: 6,
      PATTERN111: 7
    };
    var QRUtil = function() {
      var PATTERN_POSITION_TABLE = [
        [],
        [6, 18],
        [6, 22],
        [6, 26],
        [6, 30],
        [6, 34],
        [6, 22, 38],
        [6, 24, 42],
        [6, 26, 46],
        [6, 28, 50],
        [6, 30, 54],
        [6, 32, 58],
        [6, 34, 62],
        [6, 26, 46, 66],
        [6, 26, 48, 70],
        [6, 26, 50, 74],
        [6, 30, 54, 78],
        [6, 30, 56, 82],
        [6, 30, 58, 86],
        [6, 34, 62, 90],
        [6, 28, 50, 72, 94],
        [6, 26, 50, 74, 98],
        [6, 30, 54, 78, 102],
        [6, 28, 54, 80, 106],
        [6, 32, 58, 84, 110],
        [6, 30, 58, 86, 114],
        [6, 34, 62, 90, 118],
        [6, 26, 50, 74, 98, 122],
        [6, 30, 54, 78, 102, 126],
        [6, 26, 52, 78, 104, 130],
        [6, 30, 56, 82, 108, 134],
        [6, 34, 60, 86, 112, 138],
        [6, 30, 58, 86, 114, 142],
        [6, 34, 62, 90, 118, 146],
        [6, 30, 54, 78, 102, 126, 150],
        [6, 24, 50, 76, 102, 128, 154],
        [6, 28, 54, 80, 106, 132, 158],
        [6, 32, 58, 84, 110, 136, 162],
        [6, 26, 54, 82, 110, 138, 166],
        [6, 30, 58, 86, 114, 142, 170]
      ];
      var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;
      var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;
      var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;
      var _this = {};
      var getBCHDigit = function(data2) {
        var digit = 0;
        while (data2 != 0) {
          digit += 1;
          data2 >>>= 1;
        }
        return digit;
      };
      _this.getBCHTypeInfo = function(data2) {
        var d2 = data2 << 10;
        while (getBCHDigit(d2) - getBCHDigit(G15) >= 0) {
          d2 ^= G15 << getBCHDigit(d2) - getBCHDigit(G15);
        }
        return (data2 << 10 | d2) ^ G15_MASK;
      };
      _this.getBCHTypeNumber = function(data2) {
        var d2 = data2 << 12;
        while (getBCHDigit(d2) - getBCHDigit(G18) >= 0) {
          d2 ^= G18 << getBCHDigit(d2) - getBCHDigit(G18);
        }
        return data2 << 12 | d2;
      };
      _this.getPatternPosition = function(typeNumber) {
        return PATTERN_POSITION_TABLE[typeNumber - 1];
      };
      _this.getMaskFunction = function(maskPattern) {
        switch (maskPattern) {
          case QRMaskPattern.PATTERN000:
            return function(i2, j2) {
              return (i2 + j2) % 2 == 0;
            };
          case QRMaskPattern.PATTERN001:
            return function(i2, j2) {
              return i2 % 2 == 0;
            };
          case QRMaskPattern.PATTERN010:
            return function(i2, j2) {
              return j2 % 3 == 0;
            };
          case QRMaskPattern.PATTERN011:
            return function(i2, j2) {
              return (i2 + j2) % 3 == 0;
            };
          case QRMaskPattern.PATTERN100:
            return function(i2, j2) {
              return (Math.floor(i2 / 2) + Math.floor(j2 / 3)) % 2 == 0;
            };
          case QRMaskPattern.PATTERN101:
            return function(i2, j2) {
              return i2 * j2 % 2 + i2 * j2 % 3 == 0;
            };
          case QRMaskPattern.PATTERN110:
            return function(i2, j2) {
              return (i2 * j2 % 2 + i2 * j2 % 3) % 2 == 0;
            };
          case QRMaskPattern.PATTERN111:
            return function(i2, j2) {
              return (i2 * j2 % 3 + (i2 + j2) % 2) % 2 == 0;
            };
          default:
            throw "bad maskPattern:" + maskPattern;
        }
      };
      _this.getErrorCorrectPolynomial = function(errorCorrectLength) {
        var a2 = qrPolynomial([1], 0);
        for (var i2 = 0; i2 < errorCorrectLength; i2 += 1) {
          a2 = a2.multiply(qrPolynomial([1, QRMath.gexp(i2)], 0));
        }
        return a2;
      };
      _this.getLengthInBits = function(mode, type2) {
        if (1 <= type2 && type2 < 10) {
          switch (mode) {
            case QRMode.MODE_NUMBER:
              return 10;
            case QRMode.MODE_ALPHA_NUM:
              return 9;
            case QRMode.MODE_8BIT_BYTE:
              return 8;
            case QRMode.MODE_KANJI:
              return 8;
            default:
              throw "mode:" + mode;
          }
        } else if (type2 < 27) {
          switch (mode) {
            case QRMode.MODE_NUMBER:
              return 12;
            case QRMode.MODE_ALPHA_NUM:
              return 11;
            case QRMode.MODE_8BIT_BYTE:
              return 16;
            case QRMode.MODE_KANJI:
              return 10;
            default:
              throw "mode:" + mode;
          }
        } else if (type2 < 41) {
          switch (mode) {
            case QRMode.MODE_NUMBER:
              return 14;
            case QRMode.MODE_ALPHA_NUM:
              return 13;
            case QRMode.MODE_8BIT_BYTE:
              return 16;
            case QRMode.MODE_KANJI:
              return 12;
            default:
              throw "mode:" + mode;
          }
        } else {
          throw "type:" + type2;
        }
      };
      _this.getLostPoint = function(qrcode4) {
        var moduleCount = qrcode4.getModuleCount();
        var lostPoint = 0;
        for (var row = 0; row < moduleCount; row += 1) {
          for (var col = 0; col < moduleCount; col += 1) {
            var sameCount = 0;
            var dark = qrcode4.isDark(row, col);
            for (var r2 = -1; r2 <= 1; r2 += 1) {
              if (row + r2 < 0 || moduleCount <= row + r2) {
                continue;
              }
              for (var c2 = -1; c2 <= 1; c2 += 1) {
                if (col + c2 < 0 || moduleCount <= col + c2) {
                  continue;
                }
                if (r2 == 0 && c2 == 0) {
                  continue;
                }
                if (dark == qrcode4.isDark(row + r2, col + c2)) {
                  sameCount += 1;
                }
              }
            }
            if (sameCount > 5) {
              lostPoint += 3 + sameCount - 5;
            }
          }
        }
        for (var row = 0; row < moduleCount - 1; row += 1) {
          for (var col = 0; col < moduleCount - 1; col += 1) {
            var count = 0;
            if (qrcode4.isDark(row, col))
              count += 1;
            if (qrcode4.isDark(row + 1, col))
              count += 1;
            if (qrcode4.isDark(row, col + 1))
              count += 1;
            if (qrcode4.isDark(row + 1, col + 1))
              count += 1;
            if (count == 0 || count == 4) {
              lostPoint += 3;
            }
          }
        }
        for (var row = 0; row < moduleCount; row += 1) {
          for (var col = 0; col < moduleCount - 6; col += 1) {
            if (qrcode4.isDark(row, col) && !qrcode4.isDark(row, col + 1) && qrcode4.isDark(row, col + 2) && qrcode4.isDark(row, col + 3) && qrcode4.isDark(row, col + 4) && !qrcode4.isDark(row, col + 5) && qrcode4.isDark(row, col + 6)) {
              lostPoint += 40;
            }
          }
        }
        for (var col = 0; col < moduleCount; col += 1) {
          for (var row = 0; row < moduleCount - 6; row += 1) {
            if (qrcode4.isDark(row, col) && !qrcode4.isDark(row + 1, col) && qrcode4.isDark(row + 2, col) && qrcode4.isDark(row + 3, col) && qrcode4.isDark(row + 4, col) && !qrcode4.isDark(row + 5, col) && qrcode4.isDark(row + 6, col)) {
              lostPoint += 40;
            }
          }
        }
        var darkCount = 0;
        for (var col = 0; col < moduleCount; col += 1) {
          for (var row = 0; row < moduleCount; row += 1) {
            if (qrcode4.isDark(row, col)) {
              darkCount += 1;
            }
          }
        }
        var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
        lostPoint += ratio * 10;
        return lostPoint;
      };
      return _this;
    }();
    var QRMath = function() {
      var EXP_TABLE = new Array(256);
      var LOG_TABLE = new Array(256);
      for (var i2 = 0; i2 < 8; i2 += 1) {
        EXP_TABLE[i2] = 1 << i2;
      }
      for (var i2 = 8; i2 < 256; i2 += 1) {
        EXP_TABLE[i2] = EXP_TABLE[i2 - 4] ^ EXP_TABLE[i2 - 5] ^ EXP_TABLE[i2 - 6] ^ EXP_TABLE[i2 - 8];
      }
      for (var i2 = 0; i2 < 255; i2 += 1) {
        LOG_TABLE[EXP_TABLE[i2]] = i2;
      }
      var _this = {};
      _this.glog = function(n2) {
        if (n2 < 1) {
          throw "glog(" + n2 + ")";
        }
        return LOG_TABLE[n2];
      };
      _this.gexp = function(n2) {
        while (n2 < 0) {
          n2 += 255;
        }
        while (n2 >= 256) {
          n2 -= 255;
        }
        return EXP_TABLE[n2];
      };
      return _this;
    }();
    function qrPolynomial(num, shift) {
      if (typeof num.length == "undefined") {
        throw num.length + "/" + shift;
      }
      var _num = function() {
        var offset = 0;
        while (offset < num.length && num[offset] == 0) {
          offset += 1;
        }
        var _num2 = new Array(num.length - offset + shift);
        for (var i2 = 0; i2 < num.length - offset; i2 += 1) {
          _num2[i2] = num[i2 + offset];
        }
        return _num2;
      }();
      var _this = {};
      _this.getAt = function(index2) {
        return _num[index2];
      };
      _this.getLength = function() {
        return _num.length;
      };
      _this.multiply = function(e2) {
        var num2 = new Array(_this.getLength() + e2.getLength() - 1);
        for (var i2 = 0; i2 < _this.getLength(); i2 += 1) {
          for (var j2 = 0; j2 < e2.getLength(); j2 += 1) {
            num2[i2 + j2] ^= QRMath.gexp(QRMath.glog(_this.getAt(i2)) + QRMath.glog(e2.getAt(j2)));
          }
        }
        return qrPolynomial(num2, 0);
      };
      _this.mod = function(e2) {
        if (_this.getLength() - e2.getLength() < 0) {
          return _this;
        }
        var ratio = QRMath.glog(_this.getAt(0)) - QRMath.glog(e2.getAt(0));
        var num2 = new Array(_this.getLength());
        for (var i2 = 0; i2 < _this.getLength(); i2 += 1) {
          num2[i2] = _this.getAt(i2);
        }
        for (var i2 = 0; i2 < e2.getLength(); i2 += 1) {
          num2[i2] ^= QRMath.gexp(QRMath.glog(e2.getAt(i2)) + ratio);
        }
        return qrPolynomial(num2, 0).mod(e2);
      };
      return _this;
    }
    var QRRSBlock = function() {
      var RS_BLOCK_TABLE = [
        [1, 26, 19],
        [1, 26, 16],
        [1, 26, 13],
        [1, 26, 9],
        [1, 44, 34],
        [1, 44, 28],
        [1, 44, 22],
        [1, 44, 16],
        [1, 70, 55],
        [1, 70, 44],
        [2, 35, 17],
        [2, 35, 13],
        [1, 100, 80],
        [2, 50, 32],
        [2, 50, 24],
        [4, 25, 9],
        [1, 134, 108],
        [2, 67, 43],
        [2, 33, 15, 2, 34, 16],
        [2, 33, 11, 2, 34, 12],
        [2, 86, 68],
        [4, 43, 27],
        [4, 43, 19],
        [4, 43, 15],
        [2, 98, 78],
        [4, 49, 31],
        [2, 32, 14, 4, 33, 15],
        [4, 39, 13, 1, 40, 14],
        [2, 121, 97],
        [2, 60, 38, 2, 61, 39],
        [4, 40, 18, 2, 41, 19],
        [4, 40, 14, 2, 41, 15],
        [2, 146, 116],
        [3, 58, 36, 2, 59, 37],
        [4, 36, 16, 4, 37, 17],
        [4, 36, 12, 4, 37, 13],
        [2, 86, 68, 2, 87, 69],
        [4, 69, 43, 1, 70, 44],
        [6, 43, 19, 2, 44, 20],
        [6, 43, 15, 2, 44, 16],
        [4, 101, 81],
        [1, 80, 50, 4, 81, 51],
        [4, 50, 22, 4, 51, 23],
        [3, 36, 12, 8, 37, 13],
        [2, 116, 92, 2, 117, 93],
        [6, 58, 36, 2, 59, 37],
        [4, 46, 20, 6, 47, 21],
        [7, 42, 14, 4, 43, 15],
        [4, 133, 107],
        [8, 59, 37, 1, 60, 38],
        [8, 44, 20, 4, 45, 21],
        [12, 33, 11, 4, 34, 12],
        [3, 145, 115, 1, 146, 116],
        [4, 64, 40, 5, 65, 41],
        [11, 36, 16, 5, 37, 17],
        [11, 36, 12, 5, 37, 13],
        [5, 109, 87, 1, 110, 88],
        [5, 65, 41, 5, 66, 42],
        [5, 54, 24, 7, 55, 25],
        [11, 36, 12, 7, 37, 13],
        [5, 122, 98, 1, 123, 99],
        [7, 73, 45, 3, 74, 46],
        [15, 43, 19, 2, 44, 20],
        [3, 45, 15, 13, 46, 16],
        [1, 135, 107, 5, 136, 108],
        [10, 74, 46, 1, 75, 47],
        [1, 50, 22, 15, 51, 23],
        [2, 42, 14, 17, 43, 15],
        [5, 150, 120, 1, 151, 121],
        [9, 69, 43, 4, 70, 44],
        [17, 50, 22, 1, 51, 23],
        [2, 42, 14, 19, 43, 15],
        [3, 141, 113, 4, 142, 114],
        [3, 70, 44, 11, 71, 45],
        [17, 47, 21, 4, 48, 22],
        [9, 39, 13, 16, 40, 14],
        [3, 135, 107, 5, 136, 108],
        [3, 67, 41, 13, 68, 42],
        [15, 54, 24, 5, 55, 25],
        [15, 43, 15, 10, 44, 16],
        [4, 144, 116, 4, 145, 117],
        [17, 68, 42],
        [17, 50, 22, 6, 51, 23],
        [19, 46, 16, 6, 47, 17],
        [2, 139, 111, 7, 140, 112],
        [17, 74, 46],
        [7, 54, 24, 16, 55, 25],
        [34, 37, 13],
        [4, 151, 121, 5, 152, 122],
        [4, 75, 47, 14, 76, 48],
        [11, 54, 24, 14, 55, 25],
        [16, 45, 15, 14, 46, 16],
        [6, 147, 117, 4, 148, 118],
        [6, 73, 45, 14, 74, 46],
        [11, 54, 24, 16, 55, 25],
        [30, 46, 16, 2, 47, 17],
        [8, 132, 106, 4, 133, 107],
        [8, 75, 47, 13, 76, 48],
        [7, 54, 24, 22, 55, 25],
        [22, 45, 15, 13, 46, 16],
        [10, 142, 114, 2, 143, 115],
        [19, 74, 46, 4, 75, 47],
        [28, 50, 22, 6, 51, 23],
        [33, 46, 16, 4, 47, 17],
        [8, 152, 122, 4, 153, 123],
        [22, 73, 45, 3, 74, 46],
        [8, 53, 23, 26, 54, 24],
        [12, 45, 15, 28, 46, 16],
        [3, 147, 117, 10, 148, 118],
        [3, 73, 45, 23, 74, 46],
        [4, 54, 24, 31, 55, 25],
        [11, 45, 15, 31, 46, 16],
        [7, 146, 116, 7, 147, 117],
        [21, 73, 45, 7, 74, 46],
        [1, 53, 23, 37, 54, 24],
        [19, 45, 15, 26, 46, 16],
        [5, 145, 115, 10, 146, 116],
        [19, 75, 47, 10, 76, 48],
        [15, 54, 24, 25, 55, 25],
        [23, 45, 15, 25, 46, 16],
        [13, 145, 115, 3, 146, 116],
        [2, 74, 46, 29, 75, 47],
        [42, 54, 24, 1, 55, 25],
        [23, 45, 15, 28, 46, 16],
        [17, 145, 115],
        [10, 74, 46, 23, 75, 47],
        [10, 54, 24, 35, 55, 25],
        [19, 45, 15, 35, 46, 16],
        [17, 145, 115, 1, 146, 116],
        [14, 74, 46, 21, 75, 47],
        [29, 54, 24, 19, 55, 25],
        [11, 45, 15, 46, 46, 16],
        [13, 145, 115, 6, 146, 116],
        [14, 74, 46, 23, 75, 47],
        [44, 54, 24, 7, 55, 25],
        [59, 46, 16, 1, 47, 17],
        [12, 151, 121, 7, 152, 122],
        [12, 75, 47, 26, 76, 48],
        [39, 54, 24, 14, 55, 25],
        [22, 45, 15, 41, 46, 16],
        [6, 151, 121, 14, 152, 122],
        [6, 75, 47, 34, 76, 48],
        [46, 54, 24, 10, 55, 25],
        [2, 45, 15, 64, 46, 16],
        [17, 152, 122, 4, 153, 123],
        [29, 74, 46, 14, 75, 47],
        [49, 54, 24, 10, 55, 25],
        [24, 45, 15, 46, 46, 16],
        [4, 152, 122, 18, 153, 123],
        [13, 74, 46, 32, 75, 47],
        [48, 54, 24, 14, 55, 25],
        [42, 45, 15, 32, 46, 16],
        [20, 147, 117, 4, 148, 118],
        [40, 75, 47, 7, 76, 48],
        [43, 54, 24, 22, 55, 25],
        [10, 45, 15, 67, 46, 16],
        [19, 148, 118, 6, 149, 119],
        [18, 75, 47, 31, 76, 48],
        [34, 54, 24, 34, 55, 25],
        [20, 45, 15, 61, 46, 16]
      ];
      var qrRSBlock = function(totalCount, dataCount) {
        var _this2 = {};
        _this2.totalCount = totalCount;
        _this2.dataCount = dataCount;
        return _this2;
      };
      var _this = {};
      var getRsBlockTable = function(typeNumber, errorCorrectionLevel) {
        switch (errorCorrectionLevel) {
          case QRErrorCorrectionLevel.L:
            return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];
          case QRErrorCorrectionLevel.M:
            return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];
          case QRErrorCorrectionLevel.Q:
            return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];
          case QRErrorCorrectionLevel.H:
            return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];
          default:
            return void 0;
        }
      };
      _this.getRSBlocks = function(typeNumber, errorCorrectionLevel) {
        var rsBlock = getRsBlockTable(typeNumber, errorCorrectionLevel);
        if (typeof rsBlock == "undefined") {
          throw "bad rs block @ typeNumber:" + typeNumber + "/errorCorrectionLevel:" + errorCorrectionLevel;
        }
        var length = rsBlock.length / 3;
        var list = [];
        for (var i2 = 0; i2 < length; i2 += 1) {
          var count = rsBlock[i2 * 3 + 0];
          var totalCount = rsBlock[i2 * 3 + 1];
          var dataCount = rsBlock[i2 * 3 + 2];
          for (var j2 = 0; j2 < count; j2 += 1) {
            list.push(qrRSBlock(totalCount, dataCount));
          }
        }
        return list;
      };
      return _this;
    }();
    var qrBitBuffer = function() {
      var _buffer = [];
      var _length = 0;
      var _this = {};
      _this.getBuffer = function() {
        return _buffer;
      };
      _this.getAt = function(index2) {
        var bufIndex = Math.floor(index2 / 8);
        return (_buffer[bufIndex] >>> 7 - index2 % 8 & 1) == 1;
      };
      _this.put = function(num, length) {
        for (var i2 = 0; i2 < length; i2 += 1) {
          _this.putBit((num >>> length - i2 - 1 & 1) == 1);
        }
      };
      _this.getLengthInBits = function() {
        return _length;
      };
      _this.putBit = function(bit) {
        var bufIndex = Math.floor(_length / 8);
        if (_buffer.length <= bufIndex) {
          _buffer.push(0);
        }
        if (bit) {
          _buffer[bufIndex] |= 128 >>> _length % 8;
        }
        _length += 1;
      };
      return _this;
    };
    var qrNumber = function(data2) {
      var _mode = QRMode.MODE_NUMBER;
      var _data = data2;
      var _this = {};
      _this.getMode = function() {
        return _mode;
      };
      _this.getLength = function(buffer2) {
        return _data.length;
      };
      _this.write = function(buffer2) {
        var data22 = _data;
        var i2 = 0;
        while (i2 + 2 < data22.length) {
          buffer2.put(strToNum(data22.substring(i2, i2 + 3)), 10);
          i2 += 3;
        }
        if (i2 < data22.length) {
          if (data22.length - i2 == 1) {
            buffer2.put(strToNum(data22.substring(i2, i2 + 1)), 4);
          } else if (data22.length - i2 == 2) {
            buffer2.put(strToNum(data22.substring(i2, i2 + 2)), 7);
          }
        }
      };
      var strToNum = function(s2) {
        var num = 0;
        for (var i2 = 0; i2 < s2.length; i2 += 1) {
          num = num * 10 + chatToNum(s2.charAt(i2));
        }
        return num;
      };
      var chatToNum = function(c2) {
        if ("0" <= c2 && c2 <= "9") {
          return c2.charCodeAt(0) - "0".charCodeAt(0);
        }
        throw "illegal char :" + c2;
      };
      return _this;
    };
    var qrAlphaNum = function(data2) {
      var _mode = QRMode.MODE_ALPHA_NUM;
      var _data = data2;
      var _this = {};
      _this.getMode = function() {
        return _mode;
      };
      _this.getLength = function(buffer2) {
        return _data.length;
      };
      _this.write = function(buffer2) {
        var s2 = _data;
        var i2 = 0;
        while (i2 + 1 < s2.length) {
          buffer2.put(
            getCode(s2.charAt(i2)) * 45 + getCode(s2.charAt(i2 + 1)),
            11
          );
          i2 += 2;
        }
        if (i2 < s2.length) {
          buffer2.put(getCode(s2.charAt(i2)), 6);
        }
      };
      var getCode = function(c2) {
        if ("0" <= c2 && c2 <= "9") {
          return c2.charCodeAt(0) - "0".charCodeAt(0);
        } else if ("A" <= c2 && c2 <= "Z") {
          return c2.charCodeAt(0) - "A".charCodeAt(0) + 10;
        } else {
          switch (c2) {
            case " ":
              return 36;
            case "$":
              return 37;
            case "%":
              return 38;
            case "*":
              return 39;
            case "+":
              return 40;
            case "-":
              return 41;
            case ".":
              return 42;
            case "/":
              return 43;
            case ":":
              return 44;
            default:
              throw "illegal char :" + c2;
          }
        }
      };
      return _this;
    };
    var qr8BitByte = function(data2) {
      var _mode = QRMode.MODE_8BIT_BYTE;
      var _bytes = qrcode3.stringToBytes(data2);
      var _this = {};
      _this.getMode = function() {
        return _mode;
      };
      _this.getLength = function(buffer2) {
        return _bytes.length;
      };
      _this.write = function(buffer2) {
        for (var i2 = 0; i2 < _bytes.length; i2 += 1) {
          buffer2.put(_bytes[i2], 8);
        }
      };
      return _this;
    };
    var qrKanji = function(data2) {
      var _mode = QRMode.MODE_KANJI;
      var stringToBytes = qrcode3.stringToBytesFuncs["SJIS"];
      if (!stringToBytes) {
        throw "sjis not supported.";
      }
      !function(c2, code2) {
        var test = stringToBytes(c2);
        if (test.length != 2 || (test[0] << 8 | test[1]) != code2) {
          throw "sjis not supported.";
        }
      }("友", 38726);
      var _bytes = stringToBytes(data2);
      var _this = {};
      _this.getMode = function() {
        return _mode;
      };
      _this.getLength = function(buffer2) {
        return ~~(_bytes.length / 2);
      };
      _this.write = function(buffer2) {
        var data22 = _bytes;
        var i2 = 0;
        while (i2 + 1 < data22.length) {
          var c2 = (255 & data22[i2]) << 8 | 255 & data22[i2 + 1];
          if (33088 <= c2 && c2 <= 40956) {
            c2 -= 33088;
          } else if (57408 <= c2 && c2 <= 60351) {
            c2 -= 49472;
          } else {
            throw "illegal char at " + (i2 + 1) + "/" + c2;
          }
          c2 = (c2 >>> 8 & 255) * 192 + (c2 & 255);
          buffer2.put(c2, 13);
          i2 += 2;
        }
        if (i2 < data22.length) {
          throw "illegal char at " + (i2 + 1);
        }
      };
      return _this;
    };
    var byteArrayOutputStream = function() {
      var _bytes = [];
      var _this = {};
      _this.writeByte = function(b2) {
        _bytes.push(b2 & 255);
      };
      _this.writeShort = function(i2) {
        _this.writeByte(i2);
        _this.writeByte(i2 >>> 8);
      };
      _this.writeBytes = function(b2, off, len2) {
        off = off || 0;
        len2 = len2 || b2.length;
        for (var i2 = 0; i2 < len2; i2 += 1) {
          _this.writeByte(b2[i2 + off]);
        }
      };
      _this.writeString = function(s2) {
        for (var i2 = 0; i2 < s2.length; i2 += 1) {
          _this.writeByte(s2.charCodeAt(i2));
        }
      };
      _this.toByteArray = function() {
        return _bytes;
      };
      _this.toString = function() {
        var s2 = "";
        s2 += "[";
        for (var i2 = 0; i2 < _bytes.length; i2 += 1) {
          if (i2 > 0) {
            s2 += ",";
          }
          s2 += _bytes[i2];
        }
        s2 += "]";
        return s2;
      };
      return _this;
    };
    var base64EncodeOutputStream = function() {
      var _buffer = 0;
      var _buflen = 0;
      var _length = 0;
      var _base64 = "";
      var _this = {};
      var writeEncoded = function(b2) {
        _base64 += String.fromCharCode(encode2(b2 & 63));
      };
      var encode2 = function(n2) {
        if (n2 < 0)
          ;
        else if (n2 < 26) {
          return 65 + n2;
        } else if (n2 < 52) {
          return 97 + (n2 - 26);
        } else if (n2 < 62) {
          return 48 + (n2 - 52);
        } else if (n2 == 62) {
          return 43;
        } else if (n2 == 63) {
          return 47;
        }
        throw "n:" + n2;
      };
      _this.writeByte = function(n2) {
        _buffer = _buffer << 8 | n2 & 255;
        _buflen += 8;
        _length += 1;
        while (_buflen >= 6) {
          writeEncoded(_buffer >>> _buflen - 6);
          _buflen -= 6;
        }
      };
      _this.flush = function() {
        if (_buflen > 0) {
          writeEncoded(_buffer << 6 - _buflen);
          _buffer = 0;
          _buflen = 0;
        }
        if (_length % 3 != 0) {
          var padlen = 3 - _length % 3;
          for (var i2 = 0; i2 < padlen; i2 += 1) {
            _base64 += "=";
          }
        }
      };
      _this.toString = function() {
        return _base64;
      };
      return _this;
    };
    var base64DecodeInputStream = function(str) {
      var _str = str;
      var _pos = 0;
      var _buffer = 0;
      var _buflen = 0;
      var _this = {};
      _this.read = function() {
        while (_buflen < 8) {
          if (_pos >= _str.length) {
            if (_buflen == 0) {
              return -1;
            }
            throw "unexpected end of file./" + _buflen;
          }
          var c2 = _str.charAt(_pos);
          _pos += 1;
          if (c2 == "=") {
            _buflen = 0;
            return -1;
          } else if (c2.match(/^\s$/)) {
            continue;
          }
          _buffer = _buffer << 6 | decode2(c2.charCodeAt(0));
          _buflen += 6;
        }
        var n2 = _buffer >>> _buflen - 8 & 255;
        _buflen -= 8;
        return n2;
      };
      var decode2 = function(c2) {
        if (65 <= c2 && c2 <= 90) {
          return c2 - 65;
        } else if (97 <= c2 && c2 <= 122) {
          return c2 - 97 + 26;
        } else if (48 <= c2 && c2 <= 57) {
          return c2 - 48 + 52;
        } else if (c2 == 43) {
          return 62;
        } else if (c2 == 47) {
          return 63;
        } else {
          throw "c:" + c2;
        }
      };
      return _this;
    };
    var gifImage = function(width, height) {
      var _width = width;
      var _height = height;
      var _data = new Array(width * height);
      var _this = {};
      _this.setPixel = function(x2, y2, pixel) {
        _data[y2 * _width + x2] = pixel;
      };
      _this.write = function(out) {
        out.writeString("GIF87a");
        out.writeShort(_width);
        out.writeShort(_height);
        out.writeByte(128);
        out.writeByte(0);
        out.writeByte(0);
        out.writeByte(0);
        out.writeByte(0);
        out.writeByte(0);
        out.writeByte(255);
        out.writeByte(255);
        out.writeByte(255);
        out.writeString(",");
        out.writeShort(0);
        out.writeShort(0);
        out.writeShort(_width);
        out.writeShort(_height);
        out.writeByte(0);
        var lzwMinCodeSize = 2;
        var raster = getLZWRaster(lzwMinCodeSize);
        out.writeByte(lzwMinCodeSize);
        var offset = 0;
        while (raster.length - offset > 255) {
          out.writeByte(255);
          out.writeBytes(raster, offset, 255);
          offset += 255;
        }
        out.writeByte(raster.length - offset);
        out.writeBytes(raster, offset, raster.length - offset);
        out.writeByte(0);
        out.writeString(";");
      };
      var bitOutputStream = function(out) {
        var _out = out;
        var _bitLength = 0;
        var _bitBuffer = 0;
        var _this2 = {};
        _this2.write = function(data2, length) {
          if (data2 >>> length != 0) {
            throw "length over";
          }
          while (_bitLength + length >= 8) {
            _out.writeByte(255 & (data2 << _bitLength | _bitBuffer));
            length -= 8 - _bitLength;
            data2 >>>= 8 - _bitLength;
            _bitBuffer = 0;
            _bitLength = 0;
          }
          _bitBuffer = data2 << _bitLength | _bitBuffer;
          _bitLength = _bitLength + length;
        };
        _this2.flush = function() {
          if (_bitLength > 0) {
            _out.writeByte(_bitBuffer);
          }
        };
        return _this2;
      };
      var getLZWRaster = function(lzwMinCodeSize) {
        var clearCode = 1 << lzwMinCodeSize;
        var endCode = (1 << lzwMinCodeSize) + 1;
        var bitLength = lzwMinCodeSize + 1;
        var table = lzwTable();
        for (var i2 = 0; i2 < clearCode; i2 += 1) {
          table.add(String.fromCharCode(i2));
        }
        table.add(String.fromCharCode(clearCode));
        table.add(String.fromCharCode(endCode));
        var byteOut = byteArrayOutputStream();
        var bitOut = bitOutputStream(byteOut);
        bitOut.write(clearCode, bitLength);
        var dataIndex = 0;
        var s2 = String.fromCharCode(_data[dataIndex]);
        dataIndex += 1;
        while (dataIndex < _data.length) {
          var c2 = String.fromCharCode(_data[dataIndex]);
          dataIndex += 1;
          if (table.contains(s2 + c2)) {
            s2 = s2 + c2;
          } else {
            bitOut.write(table.indexOf(s2), bitLength);
            if (table.size() < 4095) {
              if (table.size() == 1 << bitLength) {
                bitLength += 1;
              }
              table.add(s2 + c2);
            }
            s2 = c2;
          }
        }
        bitOut.write(table.indexOf(s2), bitLength);
        bitOut.write(endCode, bitLength);
        bitOut.flush();
        return byteOut.toByteArray();
      };
      var lzwTable = function() {
        var _map2 = {};
        var _size = 0;
        var _this2 = {};
        _this2.add = function(key2) {
          if (_this2.contains(key2)) {
            throw "dup key:" + key2;
          }
          _map2[key2] = _size;
          _size += 1;
        };
        _this2.size = function() {
          return _size;
        };
        _this2.indexOf = function(key2) {
          return _map2[key2];
        };
        _this2.contains = function(key2) {
          return typeof _map2[key2] != "undefined";
        };
        return _this2;
      };
      return _this;
    };
    var createDataURL = function(width, height, getPixel) {
      var gif = gifImage(width, height);
      for (var y2 = 0; y2 < height; y2 += 1) {
        for (var x2 = 0; x2 < width; x2 += 1) {
          gif.setPixel(x2, y2, getPixel(x2, y2));
        }
      }
      var b2 = byteArrayOutputStream();
      gif.write(b2);
      var base64 = base64EncodeOutputStream();
      var bytes = b2.toByteArray();
      for (var i2 = 0; i2 < bytes.length; i2 += 1) {
        base64.writeByte(bytes[i2]);
      }
      base64.flush();
      return "data:image/gif;base64," + base64;
    };
    return qrcode3;
  }();
  !function() {
    qrcode2.stringToBytesFuncs["UTF-8"] = function(s2) {
      function toUTF8Array(str) {
        var utf8 = [];
        for (var i2 = 0; i2 < str.length; i2++) {
          var charcode = str.charCodeAt(i2);
          if (charcode < 128)
            utf8.push(charcode);
          else if (charcode < 2048) {
            utf8.push(
              192 | charcode >> 6,
              128 | charcode & 63
            );
          } else if (charcode < 55296 || charcode >= 57344) {
            utf8.push(
              224 | charcode >> 12,
              128 | charcode >> 6 & 63,
              128 | charcode & 63
            );
          } else {
            i2++;
            charcode = 65536 + ((charcode & 1023) << 10 | str.charCodeAt(i2) & 1023);
            utf8.push(
              240 | charcode >> 18,
              128 | charcode >> 12 & 63,
              128 | charcode >> 6 & 63,
              128 | charcode & 63
            );
          }
        }
        return utf8;
      }
      return toUTF8Array(s2);
    };
  }();
  (function(factory) {
    {
      module.exports = factory();
    }
  })(function() {
    return qrcode2;
  });
})(qrcode$1);
const qrcode = qrcode$1.exports;
function copyToClipboard(text) {
  return __async(this, null, function* () {
    try {
      if (!(navigator == null ? void 0 : navigator.clipboard)) {
        throw new TonConnectUIError("Clipboard API not available");
      }
      return yield navigator.clipboard.writeText(text);
    } catch (e2) {
    }
    fallbackCopyTextToClipboard(text);
  });
}
function fallbackCopyTextToClipboard(text) {
  const textArea = document.createElement("textarea");
  textArea.value = text;
  textArea.style.top = "0";
  textArea.style.left = "0";
  textArea.style.position = "fixed";
  document.body.appendChild(textArea);
  textArea.focus();
  textArea.select();
  try {
    document.execCommand("copy");
  } finally {
    document.body.removeChild(textArea);
  }
}
const _tmpl$$t = /* @__PURE__ */ template$1(`<div></div>`);
const QRCode = (props) => {
  let qrCodeCanvasRef;
  let qrCodeWrapperRef;
  let imageRef;
  const [copyButtonOpened, setCopyButtonOpened] = createSignal(false);
  const [picSize, setPicSize] = createSignal(picSizeDefault);
  createEffect(() => {
    const errorCorrectionLevel = "L";
    const cellSize = 4;
    const qr = qrcode(0, errorCorrectionLevel);
    qr.addData(props.sourceUrl);
    qr.make();
    qrCodeCanvasRef.innerHTML = qr.createSvgTag(cellSize, 0);
    const qrSize = qrCodeCanvasRef.firstElementChild.clientWidth;
    const scale = Math.round(qrNormalSize / qrSize * 1e5) / 1e5;
    if (imageRef) {
      const imgSize = Math.ceil(imgSizeDefault / (scale * cellSize)) * cellSize;
      const imgOffset = toPx(Math.ceil((qrSize - imgSize) / (2 * cellSize)) * cellSize);
      imageRef.style.top = imgOffset;
      imageRef.style.left = imgOffset;
      imageRef.style.height = toPx(imgSize);
      imageRef.style.width = toPx(imgSize);
      setPicSize(Math.round(picSizeDefault / scale));
    }
    qrCodeWrapperRef.style.transform = `scale(${scale})`;
  });
  let timeoutId = null;
  const onCopyClick = () => {
    setCopyButtonOpened(true);
    copyToClipboard(props.sourceUrl);
    if (timeoutId != null) {
      clearTimeout(timeoutId);
    }
    timeoutId = setTimeout(() => setCopyButtonOpened(false), 1500);
  };
  return createComponent(QrCodeBackground, {
    get ["class"]() {
      return props.class;
    },
    onClick: onCopyClick,
    get children() {
      return [createComponent(QrCodeWrapper$2, {
        ref(r$) {
          const _ref$ = qrCodeWrapperRef;
          typeof _ref$ === "function" ? _ref$(r$) : qrCodeWrapperRef = r$;
        },
        get children() {
          return [(() => {
            const _el$ = _tmpl$$t.cloneNode(true);
            const _ref$2 = qrCodeCanvasRef;
            typeof _ref$2 === "function" ? use(_ref$2, _el$) : qrCodeCanvasRef = _el$;
            return _el$;
          })(), createComponent(Show, {
            get when() {
              return props.imageUrl;
            },
            get children() {
              return createComponent(ImageBackground, {
                ref(r$) {
                  const _ref$3 = imageRef;
                  typeof _ref$3 === "function" ? _ref$3(r$) : imageRef = r$;
                },
                get children() {
                  return createComponent(ImageStyled$3, {
                    get src() {
                      return props.imageUrl;
                    },
                    alt: "",
                    get size() {
                      return picSize();
                    }
                  });
                }
              });
            }
          })];
        }
      }), createComponent(Transition, {
        onBeforeEnter: (el2) => {
          animate(el2, [{
            opacity: 0,
            transform: "translate(-50%, 44px)"
          }, {
            opacity: 1,
            transform: "translate(-50%, 0)"
          }], {
            duration: 150,
            easing: "ease-out"
          });
        },
        onExit: (el2, done) => {
          animate(el2, [{
            opacity: 1,
            transform: "translate(-50%, 0)"
          }, {
            opacity: 0,
            transform: "translate(-50%, 44px)"
          }], {
            duration: 150,
            easing: "ease-out"
          }).finished.then(() => {
            done();
          });
        },
        get children() {
          return createComponent(Show, {
            get when() {
              return copyButtonOpened() && !props.disableCopy;
            },
            get children() {
              return createComponent(CopiedBoxStyled, {
                get children() {
                  return [createComponent(SuccessIcon, {
                    size: "xs"
                  }), createComponent(Text, {
                    translationKey: "common.linkCopied",
                    children: "Link Copied"
                  })];
                }
              });
            }
          });
        }
      }), createComponent(Show, {
        get when() {
          return !props.disableCopy;
        },
        get children() {
          return createComponent(CopyIconButton, {
            get children() {
              return createComponent(CopyLightIcon, {});
            }
          });
        }
      })];
    }
  });
};
var deepReadObject = (obj, path, defaultValue) => {
  const value = path.trim().split(".").reduce((a2, b2) => a2 ? a2[b2] : void 0, obj);
  return value !== void 0 ? value : defaultValue;
};
var template = (str, params, reg = /{{(.*?)}}/g) => str.replace(reg, (_2, key2) => deepReadObject(params, key2, ""));
var createI18nContext = (init2 = {}, lang = navigator.language in init2 ? navigator.language : Object.keys(init2)[0]) => {
  const [locale, setLocale] = createSignal(lang);
  const [dict, setDict] = createStore(init2);
  const translate = (key2, params, defaultValue) => {
    const val = deepReadObject(dict[locale()], key2, defaultValue || "");
    if (typeof val === "function")
      return val(params);
    if (typeof val === "string")
      return template(val, params || {});
    return val;
  };
  const actions = {
    add(lang2, table) {
      setDict(lang2, (t2) => Object.assign(t2 || {}, table));
    },
    locale: (lang2) => lang2 ? setLocale(lang2) : locale(),
    dict: (lang2) => deepReadObject(dict, lang2)
  };
  return [translate, actions];
};
var I18nContext = createContext({});
var useI18n = () => useContext(I18nContext);
const TextStyled$3 = styled$1.div`
    font-style: normal;
    font-weight: ${(props) => props.fontWeight};
    font-size: ${(props) => props.fontSize};
    line-height: ${(props) => props.lineHeight};

    color: ${(props) => props.color};
`;
const Text = (inputs) => {
  const theme = useTheme();
  const [t2] = useI18n();
  let textRef;
  const color = () => inputs.color || theme.colors.text.primary;
  const props = mergeProps({
    fontSize: "14px",
    fontWeight: "510",
    lineHeight: "130%"
  }, inputs);
  createEffect(() => {
    if (!textRef) {
      return;
    }
    if (props.cursor === "unset") {
      return;
    }
    if (getComputedStyle(textRef).cursor !== "pointer") {
      textRef.style.cursor = "default";
    }
  });
  return createComponent(TextStyled$3, {
    get fontSize() {
      return props.fontSize;
    },
    get fontWeight() {
      return props.fontWeight;
    },
    get lineHeight() {
      return props.lineHeight;
    },
    get color() {
      return color();
    },
    get ["class"]() {
      return props.class;
    },
    ref(r$) {
      const _ref$ = textRef;
      typeof _ref$ === "function" ? _ref$(r$) : textRef = r$;
    },
    "data-tc-text": "true",
    get children() {
      var _a2;
      return createMemo(() => !!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
    }
  });
};
const ImageContainer = styled$1.div`
    position: relative;

    &::after {
        content: '';
        display: block;
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        border: 0.5px solid rgba(0, 0, 0, 0.08);

        border-radius: inherit;
    }
`;
const ImageStyled$2 = styled$1(Image)`
    width: 100%;
    height: 100%;
    border-radius: inherit;
`;
const WalletImage = (props) => {
  return createComponent(ImageContainer, {
    get ["class"]() {
      return props.class;
    },
    get children() {
      return createComponent(ImageStyled$2, {
        get src() {
          return props.src;
        }
      });
    }
  });
};
const borders$3 = {
  m: "16px",
  s: "12px",
  none: "0"
};
const badgeBorders = {
  m: "6px",
  s: "6px",
  none: "0"
};
const WalletItemStyled = styled$1.button`
    position: relative;
    cursor: pointer;
    border: none;
    background-color: unset;
    padding: 8px 4px;
    width: 92px;
    display: flex;
    flex-direction: column;
    align-items: center;

    transition: transform 0.125s ease-in-out;

    ${mediaNotTouch} {
        &:hover {
            transform: scale(1.04);
        }
    }

    &:active {
        transform: scale(0.96);
    }

    ${media("mobile")} {
        padding: 8px 4px;
        width: 82px;
    }

    ${mediaTouch} {
        &:active {
            transform: scale(0.92);
        }
    }
`;
const ImageStyled$1 = styled$1(WalletImage)`
    width: 60px;
    height: 60px;
    border-radius: ${(props) => borders$3[props.theme.borderRadius]};

    margin-bottom: 8px;
`;
const BadgeStyled = styled$1(Image)`
    position: absolute;
    right: 10px;
    top: 50px;
    width: 24px;
    height: 24px;
    border-radius: ${(props) => badgeBorders[props.theme.borderRadius]};
    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.08);
`;
const StyledText = styled$1(Text)`
    max-width: 90px;
    font-weight: 510;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;

    ${media("mobile")} {
        max-width: 80px;
    }
`;
const StyledSecondLine = styled$1(Text)`
    font-weight: ${(props) => props.colorPrimary ? "510" : "400"};
    max-width: 90px;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
    color: ${(props) => props.colorPrimary ? props.theme.colors.text.primary : props.theme.colors.text.secondary};

    ${media("mobile")} {
        max-width: 80px;
    }
`;
const _tmpl$$s = /* @__PURE__ */ template$1(`<div></div>`);
const WalletItem = (props) => {
  let ctxRef = null;
  const adjustLetterSpacing = () => {
    const name2 = ctxRef == null ? void 0 : ctxRef.querySelector("div");
    if (name2 && name2.scrollWidth > name2.clientWidth) {
      let spacing = 0;
      const minSpacing = -0.4;
      const step = 0.05;
      while (name2.scrollWidth > name2.clientWidth && spacing >= minSpacing) {
        spacing -= step;
        name2.style.letterSpacing = `${spacing}px`;
      }
      if (spacing !== 0) {
        spacing -= step;
        name2.style.letterSpacing = `${spacing}px`;
      }
    }
  };
  onMount(() => adjustLetterSpacing());
  createEffect(() => {
    adjustLetterSpacing();
  });
  return createComponent(WalletItemStyled, {
    get ["class"]() {
      return props.class;
    },
    onClick: () => props.onClick(),
    "data-tc-wallet-item": "true",
    get children() {
      return [createMemo(() => createMemo(() => typeof props.icon === "string")() ? createComponent(ImageStyled$1, {
        get src() {
          return props.icon;
        }
      }) : props.icon), createMemo(() => createMemo(() => !!props.badgeUrl)() && createComponent(BadgeStyled, {
        get src() {
          return props.badgeUrl;
        }
      })), (() => {
        const _el$ = _tmpl$$s.cloneNode(true);
        use((el2) => ctxRef = el2, _el$);
        insert(_el$, createComponent(StyledText, {
          get children() {
            return props.name;
          }
        }));
        return _el$;
      })(), createMemo(() => createMemo(() => !!props.secondLine)() && createComponent(StyledSecondLine, {
        get colorPrimary() {
          var _a2;
          return (_a2 = props.secondLineColorPrimary) != null ? _a2 : true;
        },
        get children() {
          return props.secondLine;
        }
      }))];
    }
  });
};
const H1Styled$9 = styled$1.h1`
    font-style: normal;
    font-weight: 590;
    font-size: 20px;
    line-height: 28px;

    text-align: center;

    color: ${(props) => props.theme.colors.text.primary};

    margin-top: 0;
    margin-bottom: 0;

    cursor: default;
`;
const H1 = (props) => {
  const [t2] = useI18n();
  return createComponent(H1Styled$9, {
    get ["class"]() {
      return props.class;
    },
    "data-tc-h1": "true",
    get children() {
      var _a2;
      return createMemo(() => !!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
    }
  });
};
const H2Styled$5 = styled$1.h2`
    font-style: normal;
    font-weight: 400;
    font-size: 16px;
    line-height: 22px;

    text-align: center;

    color: ${(props) => props.theme.colors.text.secondary};

    margin-top: 0;
    margin-bottom: 32px;

    cursor: default;
`;
const H2 = (props) => {
  const [t2] = useI18n();
  return createComponent(H2Styled$5, {
    get ["class"]() {
      return props.class;
    },
    "data-tc-h2": "true",
    get children() {
      var _a2;
      return createMemo(() => !!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
    }
  });
};
const H3Styled$1 = styled$1.h3`
    font-style: normal;
    font-weight: 510;
    font-size: 16px;
    line-height: 20px;

    color: ${(props) => props.theme.colors.text.primary};

    margin-top: 0;
    margin-bottom: 0;

    cursor: default;
`;
const H3 = (props) => {
  const [t2] = useI18n();
  return createComponent(H3Styled$1, {
    "data-tc-h3": "true",
    get ["class"]() {
      return props.class;
    },
    get children() {
      var _a2;
      return createMemo(() => !!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
    }
  });
};
const _tmpl$$r = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 28 28"><path fill-rule="evenodd" clip-rule="evenodd" d="M9.75 7.5C9.33579 7.5 9 7.16421 9 6.75C9 6.33579 9.33579 6 9.75 6H21.25C21.6642 6 22 6.33579 22 6.75V18.25C22 18.6642 21.6642 19 21.25 19C20.8358 19 20.5 18.6642 20.5 18.25V8.56066L6.28033 22.7803C5.98744 23.0732 5.51256 23.0732 5.21967 22.7803C4.92678 22.4874 4.92678 22.0126 5.21967 21.7197L19.4393 7.5H9.75Z"></path></svg>`);
const LongArrowIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.icon.secondary;
  return (() => {
    const _el$ = _tmpl$$r.cloneNode(true), _el$2 = _el$.firstChild;
    createRenderEffect((_p$) => {
      const _v$ = fill(), _v$2 = fill();
      _v$ !== _p$._v$ && setAttribute(_el$, "fill", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0
    });
    return _el$;
  })();
};
const _tmpl$$q = /* @__PURE__ */ template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M14.1839 17.7069C13.6405 18.6507 13.3688 19.1226 13.0591 19.348C12.4278 19.8074 11.5723 19.8074 10.941 19.348C10.6312 19.1226 10.3595 18.6507 9.81613 17.7069L5.52066 10.2464C4.76864 8.94024 4.39263 8.28717 4.33762 7.75894C4.2255 6.68236 4.81894 5.65591 5.80788 5.21589C6.29309 5 7.04667 5 8.55383 5H15.4462C16.9534 5 17.7069 5 18.1922 5.21589C19.1811 5.65591 19.7745 6.68236 19.6624 7.75894C19.6074 8.28717 19.2314 8.94024 18.4794 10.2464L14.1839 17.7069ZM11.1 16.3412L6.56139 8.48002C6.31995 8.06185 6.19924 7.85276 6.18146 7.68365C6.14523 7.33896 6.33507 7.01015 6.65169 6.86919C6.80703 6.80002 7.04847 6.80002 7.53133 6.80002H7.53134L11.1 6.80002V16.3412ZM12.9 16.3412L17.4387 8.48002C17.6801 8.06185 17.8008 7.85276 17.8186 7.68365C17.8548 7.33896 17.665 7.01015 17.3484 6.86919C17.193 6.80002 16.9516 6.80002 16.4687 6.80002L12.9 6.80002V16.3412Z"></path></svg>`);
const TonIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.icon.primary;
  return (() => {
    const _el$ = _tmpl$$q.cloneNode(true), _el$2 = _el$.firstChild;
    createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
    return _el$;
  })();
};
const _tmpl$$p = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><g clip-path="url(#clip0_3783_2045)"><circle cx="8" cy="8.00098" r="8"></circle><path d="M4.75 8.50098L7 10.751L11.75 6.00098" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></g><defs><clipPath id="clip0_3783_2045"><rect width="16" height="16" fill="white" transform="translate(0 0.000976562)"></rect></clipPath></defs></svg>`), _tmpl$2$3 = /* @__PURE__ */ template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="12" cy="12" r="11"></circle><path d="M17.1364 9.6364C17.4879 9.28493 17.4879 8.71508 17.1364 8.36361C16.7849 8.01214 16.2151 8.01214 15.8636 8.36361L10 14.2272L8.1364 12.3636C7.78493 12.0121 7.21508 12.0121 6.86361 12.3636C6.51214 12.7151 6.51214 13.2849 6.86361 13.6364L9.36361 16.1364C9.71508 16.4879 10.2849 16.4879 10.6364 16.1364L17.1364 9.6364Z"></path></svg>`), _tmpl$3$2 = /* @__PURE__ */ template$1(`<svg width="72" height="72" viewBox="0 0 72 72" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="36" cy="36" r="33"></circle><path d="M50.9142 28.4142C51.6953 27.6332 51.6953 26.3668 50.9142 25.5858C50.1332 24.8047 48.8668 24.8047 48.0858 25.5858L30 43.6716L23.9142 37.5858C23.1332 36.8047 21.8668 36.8047 21.0858 37.5858C20.3047 38.3668 20.3047 39.6332 21.0858 40.4142L28.5858 47.9142C29.3668 48.6953 30.6332 48.6953 31.4142 47.9142L50.9142 28.4142Z"></path></svg>`);
const SuccessIcon = (props) => {
  const theme = useTheme();
  const size2 = () => props.size || "s";
  const fill = () => props.fill || theme.colors.icon.success;
  return createMemo((() => {
    const _c$ = createMemo(() => size2() === "xs");
    return () => _c$() ? (() => {
      const _el$ = _tmpl$$p.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.firstChild, _el$4 = _el$3.nextSibling;
      createRenderEffect((_p$) => {
        const _v$ = props.class, _v$2 = fill(), _v$3 = theme.colors.constant.white;
        _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
        _v$2 !== _p$._v$2 && setAttribute(_el$3, "fill", _p$._v$2 = _v$2);
        _v$3 !== _p$._v$3 && setAttribute(_el$4, "stroke", _p$._v$3 = _v$3);
        return _p$;
      }, {
        _v$: void 0,
        _v$2: void 0,
        _v$3: void 0
      });
      return _el$;
    })() : (() => {
      const _c$2 = createMemo(() => size2() === "s");
      return () => _c$2() ? (() => {
        const _el$5 = _tmpl$2$3.cloneNode(true), _el$6 = _el$5.firstChild, _el$7 = _el$6.nextSibling;
        createRenderEffect((_p$) => {
          const _v$4 = props.class, _v$5 = fill(), _v$6 = theme.colors.constant.white;
          _v$4 !== _p$._v$4 && setAttribute(_el$5, "class", _p$._v$4 = _v$4);
          _v$5 !== _p$._v$5 && setAttribute(_el$6, "fill", _p$._v$5 = _v$5);
          _v$6 !== _p$._v$6 && setAttribute(_el$7, "fill", _p$._v$6 = _v$6);
          return _p$;
        }, {
          _v$4: void 0,
          _v$5: void 0,
          _v$6: void 0
        });
        return _el$5;
      })() : (() => {
        const _el$8 = _tmpl$3$2.cloneNode(true), _el$9 = _el$8.firstChild, _el$10 = _el$9.nextSibling;
        createRenderEffect((_p$) => {
          const _v$7 = props.class, _v$8 = fill(), _v$9 = theme.colors.constant.white;
          _v$7 !== _p$._v$7 && setAttribute(_el$8, "class", _p$._v$7 = _v$7);
          _v$8 !== _p$._v$8 && setAttribute(_el$9, "fill", _p$._v$8 = _v$8);
          _v$9 !== _p$._v$9 && setAttribute(_el$10, "fill", _p$._v$9 = _v$9);
          return _p$;
        }, {
          _v$7: void 0,
          _v$8: void 0,
          _v$9: void 0
        });
        return _el$8;
      })();
    })();
  })());
};
const _tmpl$$o = /* @__PURE__ */ template$1(`<svg width="72" height="72" viewBox="0 0 72 72" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="36" cy="36" r="33"></circle><path d="M24.0858 26.9142C23.3047 26.1332 23.3047 24.8668 24.0858 24.0858C24.8668 23.3047 26.1332 23.3047 26.9142 24.0858L36 33.1716L45.0858 24.0858C45.8668 23.3047 47.1332 23.3047 47.9142 24.0858C48.6953 24.8668 48.6953 26.1332 47.9142 26.9142L38.8284 36L47.9142 45.0858C48.6953 45.8668 48.6953 47.1332 47.9142 47.9142C47.1332 48.6953 45.8668 48.6953 45.0858 47.9142L36 38.8284L26.9142 47.9142C26.1332 48.6953 24.8668 48.6953 24.0858 47.9142C23.3047 47.1332 23.3047 45.8668 24.0858 45.0858L33.1716 36L24.0858 26.9142Z"></path></svg>`), _tmpl$2$2 = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48" fill="none"><circle cx="24" cy="24.001" r="22"></circle><path d="M24 24.001L31.5 16.501M24 24.001L16.5 16.501M24 24.001L16.5 31.501M24 24.001L31.5 31.501" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"></path></svg>`), _tmpl$3$1 = /* @__PURE__ */ template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="12" cy="12" r="11"></circle><path d="M7.86361 9.1364C7.51214 8.78493 7.51214 8.21508 7.86361 7.86361C8.21508 7.51214 8.78493 7.51214 9.1364 7.86361L12 10.7272L14.8636 7.86361C15.2151 7.51214 15.7849 7.51214 16.1364 7.86361C16.4879 8.21508 16.4879 8.78493 16.1364 9.1364L13.2728 12L16.1364 14.8636C16.4879 15.2151 16.4879 15.7849 16.1364 16.1364C15.7849 16.4879 15.2151 16.4879 14.8636 16.1364L12 13.2728L9.1364 16.1364C8.78493 16.4879 8.21508 16.4879 7.86361 16.1364C7.51214 15.7849 7.51214 15.2151 7.86361 14.8636L10.7272 12L7.86361 9.1364Z"></path></svg>`);
const ErrorIcon = (props) => {
  const theme = useTheme();
  const size2 = () => props.size || "m";
  const fill = () => props.fill || theme.colors.icon.error;
  return createMemo((() => {
    const _c$ = createMemo(() => size2() === "m");
    return () => _c$() ? (() => {
      const _el$ = _tmpl$$o.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.nextSibling;
      createRenderEffect((_p$) => {
        const _v$ = props.class, _v$2 = fill(), _v$3 = theme.colors.constant.white;
        _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
        _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
        _v$3 !== _p$._v$3 && setAttribute(_el$3, "fill", _p$._v$3 = _v$3);
        return _p$;
      }, {
        _v$: void 0,
        _v$2: void 0,
        _v$3: void 0
      });
      return _el$;
    })() : (() => {
      const _c$2 = createMemo(() => size2() === "s");
      return () => _c$2() ? (() => {
        const _el$4 = _tmpl$2$2.cloneNode(true), _el$5 = _el$4.firstChild, _el$6 = _el$5.nextSibling;
        createRenderEffect((_p$) => {
          const _v$4 = props.class, _v$5 = fill(), _v$6 = theme.colors.constant.white;
          _v$4 !== _p$._v$4 && setAttribute(_el$4, "class", _p$._v$4 = _v$4);
          _v$5 !== _p$._v$5 && setAttribute(_el$5, "fill", _p$._v$5 = _v$5);
          _v$6 !== _p$._v$6 && setAttribute(_el$6, "stroke", _p$._v$6 = _v$6);
          return _p$;
        }, {
          _v$4: void 0,
          _v$5: void 0,
          _v$6: void 0
        });
        return _el$4;
      })() : (() => {
        const _el$7 = _tmpl$3$1.cloneNode(true), _el$8 = _el$7.firstChild, _el$9 = _el$8.nextSibling;
        createRenderEffect((_p$) => {
          const _v$7 = props.class, _v$8 = fill(), _v$9 = theme.colors.constant.white;
          _v$7 !== _p$._v$7 && setAttribute(_el$7, "class", _p$._v$7 = _v$7);
          _v$8 !== _p$._v$8 && setAttribute(_el$8, "fill", _p$._v$8 = _v$8);
          _v$9 !== _p$._v$9 && setAttribute(_el$9, "fill", _p$._v$9 = _v$9);
          return _p$;
        }, {
          _v$7: void 0,
          _v$8: void 0,
          _v$9: void 0
        });
        return _el$7;
      })();
    })();
  })());
};
const _tmpl$$n = /* @__PURE__ */ template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15.55 5.85123C18.9459 7.81184 20.1094 12.1541 18.1488 15.55C16.1882 18.9459 11.8459 20.1094 8.44998 18.1488C8.01952 17.9003 7.46909 18.0478 7.22056 18.4782C6.97203 18.9087 7.11952 19.4591 7.54998 19.7076C11.8068 22.1653 17.2499 20.7068 19.7076 16.45C22.1653 12.1932 20.7068 6.75005 16.45 4.29239C12.1932 1.83472 6.75003 3.29321 4.29236 7.55001C4.04383 7.98047 4.19132 8.53091 4.62178 8.77943C5.05224 9.02796 5.60268 8.88048 5.8512 8.45001C7.81181 5.05413 12.1541 3.89062 15.55 5.85123Z"></path></svg>`), _tmpl$2$1 = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 44 44" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M22 2.99951C11.5066 2.99951 3 11.5061 3 21.9995C3 32.4929 11.5066 40.9995 22 40.9995C22.8284 40.9995 23.5 41.6711 23.5 42.4995C23.5 43.3279 22.8284 43.9995 22 43.9995C9.84974 43.9995 0 34.1498 0 21.9995C0 9.84925 9.84974 -0.000488281 22 -0.000488281C34.1503 -0.000488281 44 9.84925 44 21.9995C44 22.8279 43.3284 23.4995 42.5 23.4995C41.6716 23.4995 41 22.8279 41 21.9995C41 11.5061 32.4934 2.99951 22 2.99951Z"></path></svg>`), _tmpl$3 = /* @__PURE__ */ template$1(`<svg width="72" height="72" viewBox="0 0 72 72" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M24 56.7846C35.479 63.412 50.1572 59.479 56.7846 47.9999C63.412 36.5209 59.479 21.8427 48 15.2153C36.521 8.58791 21.8428 12.5209 15.2154 23.9999" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"></path></svg>`);
const LoaderIcon = (props) => {
  const theme = useTheme();
  const size2 = () => props.size || "xs";
  const fill = () => props.fill || theme.colors.icon.tertiary;
  const rotateAnimation = h$1`
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
    `;
  const svgClass = u`
        animation: ${rotateAnimation} 1s linear infinite;
    `;
  return createMemo((() => {
    const _c$ = createMemo(() => size2() === "xs");
    return () => _c$() ? (() => {
      const _el$ = _tmpl$$n.cloneNode(true), _el$2 = _el$.firstChild;
      createRenderEffect((_p$) => {
        const _v$ = cn(svgClass, props.class), _v$2 = fill();
        _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
        _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
        return _p$;
      }, {
        _v$: void 0,
        _v$2: void 0
      });
      return _el$;
    })() : (() => {
      const _c$2 = createMemo(() => size2() === "s");
      return () => _c$2() ? (() => {
        const _el$3 = _tmpl$2$1.cloneNode(true), _el$4 = _el$3.firstChild;
        createRenderEffect((_p$) => {
          const _v$3 = cn(svgClass, props.class), _v$4 = fill();
          _v$3 !== _p$._v$3 && setAttribute(_el$3, "class", _p$._v$3 = _v$3);
          _v$4 !== _p$._v$4 && setAttribute(_el$4, "fill", _p$._v$4 = _v$4);
          return _p$;
        }, {
          _v$3: void 0,
          _v$4: void 0
        });
        return _el$3;
      })() : (() => {
        const _el$5 = _tmpl$3.cloneNode(true), _el$6 = _el$5.firstChild;
        createRenderEffect((_p$) => {
          const _v$5 = cn(svgClass, props.class), _v$6 = fill();
          _v$5 !== _p$._v$5 && setAttribute(_el$5, "class", _p$._v$5 = _v$5);
          _v$6 !== _p$._v$6 && setAttribute(_el$6, "stroke", _p$._v$6 = _v$6);
          return _p$;
        }, {
          _v$5: void 0,
          _v$6: void 0
        });
        return _el$5;
      })();
    })();
  })());
};
const _tmpl$$m = /* @__PURE__ */ template$1(`<svg width="158" height="28" viewBox="0 0 158 28" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M28 14.001C28 21.733 21.732 28.001 14 28.001C6.26801 28.001 0 21.733 0 14.001C0 6.26899 6.26801 0.000976562 14 0.000976562C21.732 0.000976562 28 6.26899 28 14.001ZM9.21931 8.00098H18.7801H18.7813C20.538 8.00098 21.6522 9.89966 20.7691 11.4302L14.8672 21.6576C14.4822 22.3254 13.5172 22.3254 13.1322 21.6576L7.23158 11.4302C6.34721 9.89726 7.4614 8.00098 9.21931 8.00098ZM13.1262 18.5882V9.74806H9.21811C8.78976 9.74806 8.53708 10.2029 8.74163 10.5578L11.8423 16.1035L13.1262 18.5882ZM16.1559 16.1047L19.2554 10.5566C19.4599 10.2017 19.2073 9.74685 18.7789 9.74685H14.8709V18.5906L16.1559 16.1047Z" fill="#0098EA"></path><path d="M18.7802 8.00098H9.21936C7.46145 8.00098 6.34727 9.89726 7.23164 11.4302L13.1322 21.6576C13.5173 22.3254 14.4823 22.3254 14.8673 21.6576L20.7691 11.4302C21.6523 9.89966 20.5381 8.00098 18.7814 8.00098H18.7802ZM13.1274 18.5906L11.8424 16.1035L8.74168 10.5578C8.53714 10.2029 8.78981 9.74806 9.21816 9.74806H13.1262V18.5918L13.1274 18.5906ZM19.2555 10.5566L16.156 16.1047L14.8709 18.5906V9.74685H18.779C19.2073 9.74685 19.46 10.2017 19.2555 10.5566Z" fill="white"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M51.7483 22.1967C55.7182 22.1967 58.9609 18.954 58.9609 14.9841C58.9609 11.0142 55.7182 7.77148 51.7483 7.77148C47.7588 7.77148 44.5357 11.0142 44.5357 14.9841C44.5357 18.954 47.7588 22.1967 51.7483 22.1967ZM51.7483 19.1702C49.4686 19.1702 47.6802 17.2442 47.6802 14.9841C47.6802 12.724 49.4686 10.798 51.7483 10.798C54.0084 10.798 55.7968 12.724 55.7968 14.9841C55.7968 17.2442 54.0084 19.1702 51.7483 19.1702ZM37.0698 21.9609H40.2142V10.9946H44.2843V8.00732H33V10.9946H37.0698V21.9609ZM69.9379 8.00732H73.0823V21.9609H70.3899L63.59 13.3333V21.9609H60.4652V8.00732H63.1576L69.9379 16.6153V8.00732ZM79.2259 14.9887C79.2259 10.9202 82.351 7.77539 86.4982 7.77539C89.8592 7.77539 92.5519 9.95709 93.2202 12.6891H90.7437C90.154 11.0971 88.4637 9.9964 86.4982 9.9964C83.5893 9.9964 81.5452 12.1781 81.5452 14.9887C81.5452 17.7994 83.5893 19.9811 86.4982 19.9811C88.4637 19.9811 90.154 18.8804 90.7437 17.2884H93.2202C92.5519 20.0204 89.8592 22.2021 86.4982 22.2021C82.351 22.2021 79.2259 19.0573 79.2259 14.9887ZM104.584 17.0525C104.584 19.9025 102.343 22.1628 99.4342 22.1628C96.5253 22.1628 94.2846 19.9025 94.2846 17.0525C94.2846 14.2025 96.5253 11.9422 99.4342 11.9422C102.343 11.9422 104.584 14.2025 104.584 17.0525ZM96.4663 17.0525C96.4663 18.8018 97.6849 20.158 99.4342 20.158C101.164 20.158 102.382 18.8018 102.382 17.0525C102.382 15.3032 101.164 13.947 99.4342 13.947C97.6849 13.947 96.4663 15.3032 96.4663 17.0525ZM108.626 12.1388H106.463V21.9662H108.626V17.1311C108.626 15.0281 109.726 13.9077 111.161 13.9077C112.419 13.9077 113.205 14.8512 113.205 16.4039V21.9662H115.367V16.0501C115.367 13.5539 113.893 11.9422 111.613 11.9422C110.335 11.9422 109.215 12.4926 108.626 13.4753V12.1388ZM117.839 12.1388H120.001V13.4753C120.59 12.4926 121.711 11.9422 122.988 11.9422C125.268 11.9422 126.742 13.5539 126.742 16.0501V21.9662H124.58V16.4039C124.58 14.8512 123.794 13.9077 122.536 13.9077C121.101 13.9077 120.001 15.0281 120.001 17.1311V21.9662H117.839V12.1388ZM133.558 22.1628C136.054 22.1628 137.823 20.728 138.373 18.8804H136.113C135.661 19.8238 134.717 20.2563 133.636 20.2563C131.887 20.2563 130.747 19.077 130.668 17.5832H138.491C138.688 14.2419 136.585 11.9422 133.577 11.9422C130.551 11.9422 128.526 14.1436 128.526 17.0525C128.526 20.0007 130.629 22.1628 133.558 22.1628ZM130.747 16.0501C131.042 14.5367 132.162 13.7505 133.518 13.7505C134.717 13.7505 135.838 14.4581 136.172 16.0501H130.747ZM149.851 18.3694C149.32 20.5511 147.453 22.1628 144.859 22.1628C141.871 22.1628 139.709 19.8828 139.709 17.0525C139.709 14.2222 141.871 11.9422 144.859 11.9422C147.453 11.9422 149.32 13.5539 149.851 15.7356H147.571C147.178 14.6743 146.215 13.9077 144.859 13.9077C143.109 13.9077 141.91 15.2246 141.91 17.0525C141.91 18.8804 143.109 20.1973 144.859 20.1973C146.215 20.1973 147.178 19.4307 147.571 18.3694H149.851ZM155.75 22.0645C156.418 22.0645 156.929 21.9859 157.362 21.8483V19.9221C157.047 20.0401 156.615 20.1187 156.202 20.1187C155.082 20.1187 154.551 19.6666 154.551 18.448V14.065H157.362V12.1388H154.551V9.40675H152.389V12.1388H150.345V14.065H152.389V18.8018C152.389 21.0228 153.863 22.0645 155.75 22.0645Z"></path></svg>`);
const TonConnectBrand = () => {
  const theme = useTheme();
  const fill = () => theme.theme === THEME.DARK ? theme.colors.constant.white : theme.colors.constant.black;
  return (() => {
    const _el$ = _tmpl$$m.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.nextSibling, _el$4 = _el$3.nextSibling;
    createRenderEffect(() => setAttribute(_el$4, "fill", fill()));
    return _el$;
  })();
};
const _tmpl$$l = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M5.56608 4.42584C5.82527 3.32158 6.8176 2.5 8.00001 2.5C9.38072 2.5 10.5 3.61929 10.5 5C10.5 5.63026 10.3391 6.0386 10.1264 6.34455C9.90018 6.66993 9.58561 6.92478 9.18864 7.20877C9.12579 7.25372 9.05873 7.30025 8.9887 7.34883C8.27392 7.84472 7.25001 8.55507 7.25001 10V10.25C7.25001 10.6642 7.5858 11 8.00001 11C8.41422 11 8.75001 10.6642 8.75001 10.25V10C8.75001 9.36502 9.10777 9.1096 9.94554 8.51149L10.0614 8.42873C10.4769 8.13147 10.9748 7.75194 11.358 7.20076C11.7547 6.63015 12 5.91973 12 5C12 2.79086 10.2091 1 8.00001 1C6.10564 1 4.5205 2.31615 4.10577 4.08308C4.01112 4.48634 4.26129 4.88997 4.66454 4.98462C5.0678 5.07927 5.47143 4.8291 5.56608 4.42584ZM8.00001 15C8.60752 15 9.10001 14.5075 9.10001 13.9C9.10001 13.2925 8.60752 12.8 8.00001 12.8C7.39249 12.8 6.90001 13.2925 6.90001 13.9C6.90001 14.5075 7.39249 15 8.00001 15Z"></path></svg>`);
const QuestionIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.icon.secondary;
  return (() => {
    const _el$ = _tmpl$$l.cloneNode(true), _el$2 = _el$.firstChild;
    createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
    return _el$;
  })();
};
const _tmpl$$k = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M9.98156 8.75C9.84854 11.4328 9.01206 13.5 8 13.5C6.98794 13.5 6.15146 11.4328 6.01844 8.75H9.98156ZM11.4832 8.75C11.4217 10.1155 11.1929 11.3869 10.8239 12.4017C10.7734 12.5405 10.7188 12.6789 10.6595 12.8154C12.1454 11.993 13.2103 10.5029 13.4493 8.75H11.4832ZM13.4493 7.25H11.4832C11.4217 5.88453 11.1929 4.61314 10.8239 3.5983C10.7734 3.4595 10.7188 3.32111 10.6595 3.18459C12.1454 4.00697 13.2103 5.49709 13.4493 7.25ZM9.98156 7.25H6.01844C6.15144 4.56764 6.98769 2.50062 7.99955 2.5H8C9.01206 2.5 9.84854 4.56724 9.98156 7.25ZM4.51678 7.25C4.57826 5.88453 4.80706 4.61314 5.1761 3.5983C5.22657 3.4595 5.28124 3.32111 5.3405 3.18459C3.85463 4.00697 2.78972 5.49709 2.55071 7.25H4.51678ZM2.55071 8.75C2.78972 10.5029 3.85463 11.993 5.3405 12.8154C5.28124 12.6789 5.22657 12.5405 5.1761 12.4017C4.80706 11.3869 4.57826 10.1155 4.51678 8.75H2.55071ZM15 8C15 11.866 11.866 15 8 15C4.13401 15 1 11.866 1 8C1 4.13401 4.13401 1 8 1C11.866 1 15 4.13401 15 8Z"></path></svg>`);
const BrowserIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.icon.primary;
  return (() => {
    const _el$ = _tmpl$$k.cloneNode(true), _el$2 = _el$.firstChild;
    createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
    return _el$;
  })();
};
const _tmpl$$j = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M2.5 4.8C2.5 3.11984 2.5 2.27976 2.82698 1.63803C3.1146 1.07354 3.57354 0.614601 4.13803 0.32698C4.77976 0 5.61984 0 7.3 0H8.7C10.3802 0 11.2202 0 11.862 0.32698C12.4265 0.614601 12.8854 1.07354 13.173 1.63803C13.5 2.27976 13.5 3.11984 13.5 4.8V11.2C13.5 12.8802 13.5 13.7202 13.173 14.362C12.8854 14.9265 12.4265 15.3854 11.862 15.673C11.2202 16 10.3802 16 8.7 16H7.3C5.61984 16 4.77976 16 4.13803 15.673C3.57354 15.3854 3.1146 14.9265 2.82698 14.362C2.5 13.7202 2.5 12.8802 2.5 11.2V4.8ZM4 3.9C4 3.05992 4 2.63988 4.16349 2.31901C4.3073 2.03677 4.53677 1.8073 4.81901 1.66349C5.13988 1.5 5.55992 1.5 6.4 1.5H9.6C10.4401 1.5 10.8601 1.5 11.181 1.66349C11.4632 1.8073 11.6927 2.03677 11.8365 2.31901C12 2.63988 12 3.05992 12 3.9V12.1C12 12.9401 12 13.3601 11.8365 13.681C11.6927 13.9632 11.4632 14.1927 11.181 14.3365C10.8601 14.5 10.4401 14.5 9.6 14.5H6.4C5.55992 14.5 5.13988 14.5 4.81901 14.3365C4.53677 14.1927 4.3073 13.9632 4.16349 13.681C4 13.3601 4 12.9401 4 12.1V3.9ZM7 2.5C6.58579 2.5 6.25 2.83579 6.25 3.25C6.25 3.66421 6.58579 4 7 4H9C9.41421 4 9.75 3.66421 9.75 3.25C9.75 2.83579 9.41421 2.5 9 2.5H7Z"></path></svg>`);
const MobileIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.icon.primary;
  return (() => {
    const _el$ = _tmpl$$j.cloneNode(true), _el$2 = _el$.firstChild;
    createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
    return _el$;
  })();
};
const _tmpl$$i = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 6.8C1.5 5.11984 1.5 4.27976 1.82698 3.63803C2.1146 3.07354 2.57354 2.6146 3.13803 2.32698C3.77976 2 4.61984 2 6.3 2H9.7C11.3802 2 12.2202 2 12.862 2.32698C13.4265 2.6146 13.8854 3.07354 14.173 3.63803C14.5 4.27976 14.5 5.11984 14.5 6.8V11.5H15.25C15.6642 11.5 16 11.8358 16 12.25C16 12.6642 15.6642 13 15.25 13H0.75C0.335786 13 0 12.6642 0 12.25C0 11.8358 0.335786 11.5 0.75 11.5H1.5V6.8ZM3 11.5H13V5.9C13 5.05992 13 4.63988 12.8365 4.31901C12.6927 4.03677 12.4632 3.8073 12.181 3.66349C11.8601 3.5 11.4401 3.5 10.6 3.5H5.4C4.55992 3.5 4.13988 3.5 3.81901 3.66349C3.53677 3.8073 3.3073 4.03677 3.16349 4.31901C3 4.63988 3 5.05992 3 5.9V11.5Z"></path></svg>`);
const DesktopIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.icon.primary;
  return (() => {
    const _el$ = _tmpl$$i.cloneNode(true), _el$2 = _el$.firstChild;
    createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
    return _el$;
  })();
};
const _tmpl$$h = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="17" height="16" viewBox="0 0 17 16" fill="none"><g clip-path="url(#clip0_3676_1603)"><path fill-rule="evenodd" clip-rule="evenodd" d="M15.5 1.25049C15.5 0.836275 15.1642 0.500488 14.75 0.500488C14.3358 0.500488 14 0.836275 14 1.25049V3.67012C12.7187 2.04487 10.7318 1.00049 8.5 1.00049C4.63401 1.00049 1.5 4.1345 1.5 8.00049C1.5 11.8665 4.63401 15.0005 8.5 15.0005C11.6844 15.0005 14.3703 12.8748 15.2199 9.96661C15.3361 9.56902 15.1079 9.15254 14.7103 9.03638C14.3127 8.92023 13.8962 9.14838 13.7801 9.54597C13.1123 11.8319 11 13.5005 8.5 13.5005C5.46243 13.5005 3 11.0381 3 8.00049C3 4.96292 5.46243 2.50049 8.5 2.50049C10.321 2.50049 11.9363 3.3855 12.9377 4.75049H10.5C10.0858 4.75049 9.75 5.08627 9.75 5.50049C9.75 5.9147 10.0858 6.25049 10.5 6.25049H14.75C15.1642 6.25049 15.5 5.9147 15.5 5.50049V1.25049Z"></path></g><defs><clipPath id="clip0_3676_1603"><rect width="16" height="16" fill="white" transform="translate(0.5 0.000488281)"></rect></clipPath></defs></svg>`);
const RetryIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.accent;
  return (() => {
    const _el$ = _tmpl$$h.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.firstChild;
    createRenderEffect(() => setAttribute(_el$3, "fill", fill()));
    return _el$;
  })();
};
const _tmpl$$g = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M13 4.06119V6.75053C13 7.16474 13.3358 7.50053 13.75 7.50053C14.1642 7.50053 14.5 7.16474 14.5 6.75053V2.75053L14.5 2.72807C14.5001 2.63191 14.5003 2.49627 14.4842 2.37627C14.4638 2.22503 14.4063 1.99261 14.2071 1.79342C14.0079 1.59423 13.7755 1.5367 13.6243 1.51637C13.5043 1.50023 13.3686 1.50039 13.2725 1.50051L13.25 1.50053H9.25C8.83579 1.50053 8.5 1.83631 8.5 2.25053C8.5 2.66474 8.83579 3.00053 9.25 3.00053H11.9393L7.21967 7.7202C6.92678 8.01309 6.92678 8.48796 7.21967 8.78086C7.51256 9.07375 7.98744 9.07375 8.28033 8.78086L13 4.06119ZM5.85 1.50053H5.81903H5.81899C5.21528 1.50052 4.71702 1.50051 4.31113 1.53367C3.88956 1.56812 3.50203 1.64204 3.13803 1.82751C2.57354 2.11513 2.1146 2.57407 1.82698 3.13856C1.64151 3.50256 1.56759 3.89009 1.53315 4.31166C1.49998 4.71755 1.49999 5.21581 1.5 5.81953V5.81955V5.85053V10.1505V10.1815V10.1815C1.49999 10.7852 1.49998 11.2835 1.53315 11.6894C1.56759 12.111 1.64151 12.4985 1.82698 12.8625C2.1146 13.427 2.57354 13.8859 3.13803 14.1735C3.50203 14.359 3.88956 14.4329 4.31113 14.4674C4.71702 14.5005 5.21527 14.5005 5.81897 14.5005H5.81901H5.85H10.15H10.181H10.181C10.7847 14.5005 11.283 14.5005 11.6889 14.4674C12.1104 14.4329 12.498 14.359 12.862 14.1735C13.4265 13.8859 13.8854 13.427 14.173 12.8625C14.3585 12.4985 14.4324 12.111 14.4669 11.6894C14.5 11.2835 14.5 10.7853 14.5 10.1816V10.1815V10.1505V9.75053C14.5 9.33631 14.1642 9.00053 13.75 9.00053C13.3358 9.00053 13 9.33631 13 9.75053V10.1505C13 10.793 12.9994 11.2297 12.9718 11.5672C12.945 11.8961 12.8963 12.0642 12.8365 12.1815C12.6927 12.4638 12.4632 12.6932 12.181 12.837C12.0637 12.8968 11.8955 12.9455 11.5667 12.9724C11.2292 12.9999 10.7924 13.0005 10.15 13.0005H5.85C5.20757 13.0005 4.77085 12.9999 4.43328 12.9724C4.10447 12.9455 3.93632 12.8968 3.81902 12.837C3.53677 12.6932 3.3073 12.4638 3.16349 12.1815C3.10372 12.0642 3.05503 11.8961 3.02816 11.5672C3.00058 11.2297 3 10.793 3 10.1505V5.85053C3 5.20809 3.00058 4.77137 3.02816 4.43381C3.05503 4.10499 3.10372 3.93684 3.16349 3.81954C3.3073 3.5373 3.53677 3.30783 3.81902 3.16402C3.93632 3.10425 4.10447 3.05556 4.43328 3.02869C4.77085 3.00111 5.20757 3.00053 5.85 3.00053H6.25C6.66422 3.00053 7 2.66474 7 2.25053C7 1.83631 6.66422 1.50053 6.25 1.50053H5.85Z"></path></svg>`);
const LinkIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.accent;
  return (() => {
    const _el$ = _tmpl$$g.cloneNode(true), _el$2 = _el$.firstChild;
    createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
    return _el$;
  })();
};
const _tmpl$$f = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="17" height="16" viewBox="0 0 17 16" fill="none"><g clip-path="url(#clip0_3676_1274)"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.82698 2.63901C1.5 3.28074 1.5 4.12082 1.5 5.80098V8.80098V9.00098V10.201C1.5 11.8811 1.5 12.7212 1.82698 13.3629C2.1146 13.9274 2.57354 14.3864 3.13803 14.674C3.77976 15.001 4.61984 15.001 6.3 15.001H11.7C13.3802 15.001 14.2202 15.001 14.862 14.674C15.4265 14.3864 15.8854 13.9274 16.173 13.3629C16.5 12.7212 16.5 11.8811 16.5 10.201V8.80098C16.5 7.12082 16.5 6.28074 16.173 5.63901C15.8854 5.07452 15.4265 4.61558 14.862 4.32796C14.743 4.26733 14.6172 4.21795 14.4805 4.17772C14.4501 3.49449 14.3722 3.02994 14.173 2.63901C13.8854 2.07452 13.4265 1.61558 12.862 1.32796C12.2202 1.00098 11.3802 1.00098 9.7 1.00098H6.3C4.61984 1.00098 3.77976 1.00098 3.13803 1.32796C2.57354 1.61558 2.1146 2.07452 1.82698 2.63901ZM12.9861 4.00942C12.9684 3.7108 12.9281 3.49982 12.8365 3.31999C12.6927 3.03775 12.4632 2.80828 12.181 2.66447C11.8601 2.50098 11.4401 2.50098 10.6 2.50098H5.4C4.55992 2.50098 4.13988 2.50098 3.81901 2.66447C3.53677 2.80828 3.3073 3.03775 3.16349 3.31999C3.03615 3.56991 3.00799 3.88 3.00177 4.40188C3.04646 4.37612 3.09189 4.35146 3.13803 4.32796C3.77976 4.00098 4.61984 4.00098 6.3 4.00098H11.7C12.1966 4.00098 12.6197 4.00098 12.9861 4.00942ZM3 7.90098V8.10098C3 8.47468 3 8.76527 3.01439 9.00098H3V11.101C3 11.9411 3 12.3611 3.16349 12.682C3.3073 12.9642 3.53677 13.1937 3.81901 13.3375C4.13988 13.501 4.55992 13.501 5.4 13.501H12.6C13.4401 13.501 13.8601 13.501 14.181 13.3375C14.4632 13.1937 14.6927 12.9642 14.8365 12.682C15 12.3611 15 11.9411 15 11.101V7.90098C15 7.0609 15 6.64086 14.8365 6.31999C14.6927 6.03775 14.4632 5.80828 14.181 5.66447C13.8601 5.50098 13.4401 5.50098 12.6 5.50098H5.4C4.55992 5.50098 4.13988 5.50098 3.81901 5.66447C3.53677 5.80828 3.3073 6.03775 3.16349 6.31999C3 6.64086 3 7.0609 3 7.90098ZM10.5 9.75098C10.5 9.33676 10.8358 9.00098 11.25 9.00098H12.75C13.1642 9.00098 13.5 9.33676 13.5 9.75098C13.5 10.1652 13.1642 10.501 12.75 10.501H11.25C10.8358 10.501 10.5 10.1652 10.5 9.75098Z"></path></g><defs><clipPath id="clip0_3676_1274"><rect width="16" height="16" fill="white" transform="translate(0.5 0.000976562)"></rect></clipPath></defs></svg>`);
const WalletIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.accent;
  return (() => {
    const _el$ = _tmpl$$f.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.firstChild;
    createRenderEffect(() => setAttribute(_el$3, "fill", fill()));
    return _el$;
  })();
};
const _tmpl$$e = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M39.6319 16.8719C38.3212 16.2041 36.7002 16.0478 34 16.0112V11C34 5.47715 29.5228 1 24 1C18.4772 1 14 5.47715 14 11V16.0112C11.2998 16.0478 9.6788 16.2041 8.36808 16.8719C6.86278 17.6389 5.63893 18.8628 4.87195 20.3681C4 22.0794 4 24.3196 4 28.8V32.2C4 36.6804 4 38.9206 4.87195 40.6319C5.63893 42.1372 6.86278 43.3611 8.36808 44.1281C10.0794 45 12.3196 45 16.8 45H31.2C35.6804 45 37.9206 45 39.6319 44.1281C41.1372 43.3611 42.3611 42.1372 43.1281 40.6319C44 38.9206 44 36.6804 44 32.2V28.8C44 24.3196 44 22.0794 43.1281 20.3681C42.3611 18.8628 41.1372 17.6389 39.6319 16.8719ZM31 11V16H17V11C17 7.13401 20.134 4 24 4C27.866 4 31 7.13401 31 11ZM7.54497 21.73C7 22.7996 7 24.1997 7 27V34C7 36.8003 7 38.2004 7.54497 39.27C8.02433 40.2108 8.78924 40.9757 9.73005 41.455C10.7996 42 12.1997 42 15 42H33C35.8003 42 37.2004 42 38.27 41.455C39.2108 40.9757 39.9757 40.2108 40.455 39.27C41 38.2004 41 36.8003 41 34V27C41 24.1997 41 22.7996 40.455 21.73C39.9757 20.7892 39.2108 20.0243 38.27 19.545C37.2004 19 35.8003 19 33 19H15C12.1997 19 10.7996 19 9.73005 19.545C8.78924 20.0243 8.02433 20.7892 7.54497 21.73ZM24 24C23.1716 24 22.5 24.6716 22.5 25.5V29.5C22.5 30.3284 23.1716 31 24 31C24.8284 31 25.5 30.3284 25.5 29.5V25.5C25.5 24.6716 24.8284 24 24 24Z"></path></svg>`);
const SecurityIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.icon.secondary;
  return (() => {
    const _el$ = _tmpl$$e.cloneNode(true), _el$2 = _el$.firstChild;
    createRenderEffect((_p$) => {
      const _v$ = props.class, _v$2 = fill();
      _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0
    });
    return _el$;
  })();
};
const _tmpl$$d = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M37.485 37.3849C40.894 33.9506 43 29.2212 43 24C43 13.5066 34.4934 5 24 5C13.5066 5 5 13.5066 5 24C5 29.2213 7.1061 33.9507 10.5151 37.385C13.3583 32.9438 18.3354 30 24.0001 30C29.6647 30 34.6418 32.9437 37.485 37.3849ZM35.1809 39.3635C32.9143 35.5532 28.7554 33 24.0001 33C19.2448 33 15.0858 35.5533 12.8193 39.3636C15.9564 41.6506 19.8206 43 24 43C28.1795 43 32.0437 41.6505 35.1809 39.3635ZM24 46C36.1503 46 46 36.1503 46 24C46 11.8497 36.1503 2 24 2C11.8497 2 2 11.8497 2 24C2 36.1503 11.8497 46 24 46ZM24 24C26.7614 24 29 21.7614 29 19C29 16.2386 26.7614 14 24 14C21.2386 14 19 16.2386 19 19C19 21.7614 21.2386 24 24 24ZM24 27C28.4183 27 32 23.4183 32 19C32 14.5817 28.4183 11 24 11C19.5817 11 16 14.5817 16 19C16 23.4183 19.5817 27 24 27Z"></path></svg>`);
const PersonalityIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.icon.secondary;
  return (() => {
    const _el$ = _tmpl$$d.cloneNode(true), _el$2 = _el$.firstChild;
    createRenderEffect((_p$) => {
      const _v$ = props.class, _v$2 = fill();
      _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0
    });
    return _el$;
  })();
};
const _tmpl$$c = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M34.5607 4.43934C33.9749 3.85355 33.0251 3.85355 32.4393 4.43934C31.8536 5.02513 31.8536 5.97487 32.4393 6.56066L37.8787 12H10.5C9.67157 12 9 12.6716 9 13.5C9 14.3284 9.67157 15 10.5 15H37.8787L32.4393 20.4393C31.8536 21.0251 31.8536 21.9749 32.4393 22.5607C33.0251 23.1464 33.9749 23.1464 34.5607 22.5607L42.5607 14.5607C43.1464 13.9749 43.1464 13.0251 42.5607 12.4393L34.5607 4.43934ZM13.4393 25.4393C14.0251 24.8536 14.9749 24.8536 15.5607 25.4393C16.1464 26.0251 16.1464 26.9749 15.5607 27.5607L10.1213 33H37.5C38.3284 33 39 33.6716 39 34.5C39 35.3284 38.3284 36 37.5 36H10.1213L15.5607 41.4393C16.1464 42.0251 16.1464 42.9749 15.5607 43.5607C14.9749 44.1464 14.0251 44.1464 13.4393 43.5607L5.43934 35.5607C4.85355 34.9749 4.85355 34.0251 5.43934 33.4393L13.4393 25.4393Z"></path></svg>`);
const SwapIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.icon.secondary;
  return (() => {
    const _el$ = _tmpl$$c.cloneNode(true), _el$2 = _el$.firstChild;
    createRenderEffect((_p$) => {
      const _v$ = props.class, _v$2 = fill();
      _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0
    });
    return _el$;
  })();
};
const _tmpl$$b = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="28" height="29" viewBox="0 0 28 29" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.75 12.002C1.75 9.20169 1.75 7.80156 2.29497 6.732C2.77433 5.79119 3.53924 5.02629 4.48005 4.54692C5.54961 4.00195 6.94974 4.00195 9.75 4.00195H17.25C20.0503 4.00195 21.4504 4.00195 22.52 4.54692C23.4608 5.02629 24.2257 5.79119 24.705 6.732C24.8256 6.96861 24.9195 7.2214 24.9926 7.50195H21.5C19.6377 7.50195 18.7065 7.50195 17.9609 7.77334C16.711 8.22828 15.7263 9.21291 15.2714 10.4629C15 11.2085 15 12.1396 15 14.002C15 15.8643 15 16.7954 15.2714 17.541C15.7263 18.791 16.711 19.7756 17.9609 20.2306C18.7065 20.502 19.6377 20.502 21.5 20.502H24.9926C24.9195 20.7825 24.8256 21.0353 24.705 21.2719C24.2257 22.2127 23.4608 22.9776 22.52 23.457C21.4504 24.002 20.0503 24.002 17.25 24.002H9.75C6.94974 24.002 5.54961 24.002 4.48005 23.457C3.53924 22.9776 2.77433 22.2127 2.29497 21.2719C1.75 20.2023 1.75 18.8022 1.75 16.002V12.002ZM16.4999 13.802C16.4999 12.1218 16.4999 11.2817 16.8269 10.64C17.1145 10.0755 17.5735 9.61656 18.138 9.32894C18.7797 9.00196 19.6198 9.00196 21.2999 9.00196H23.1999C24.8801 9.00196 25.7202 9.00196 26.3619 9.32894C26.9264 9.61656 27.3853 10.0755 27.673 10.64C27.9999 11.2817 27.9999 12.1218 27.9999 13.802V14.202C27.9999 15.8821 27.9999 16.7222 27.673 17.3639C27.3853 17.9284 26.9264 18.3874 26.3619 18.675C25.7202 19.002 24.8801 19.002 23.1999 19.002H21.2999C19.6198 19.002 18.7797 19.002 18.138 18.675C17.5735 18.3874 17.1145 17.9284 16.8269 17.3639C16.4999 16.7222 16.4999 15.8821 16.4999 14.202V13.802ZM22.4999 14.002C22.4999 14.9685 21.7164 15.752 20.7499 15.752C19.7834 15.752 18.9999 14.9685 18.9999 14.002C18.9999 13.0355 19.7834 12.252 20.7499 12.252C21.7164 12.252 22.4999 13.0355 22.4999 14.002Z"></path></svg>`);
const AtWalletIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.constant.white;
  return (() => {
    const _el$ = _tmpl$$b.cloneNode(true), _el$2 = _el$.firstChild;
    createRenderEffect((_p$) => {
      const _v$ = props.class, _v$2 = fill();
      _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0
    });
    return _el$;
  })();
};
const _tmpl$$a = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 28 28" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M24.7803 7.21967C25.0732 7.51256 25.0732 7.98744 24.7803 8.28033L11.5303 21.5303C11.2374 21.8232 10.7626 21.8232 10.4697 21.5303L4.21967 15.2803C3.92678 14.9874 3.92678 14.5126 4.21967 14.2197C4.51256 13.9268 4.98744 13.9268 5.28033 14.2197L11 19.9393L23.7197 7.21967C24.0126 6.92678 24.4874 6.92678 24.7803 7.21967Z"></path></svg>`);
const DoneIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.icon.secondary;
  return (() => {
    const _el$ = _tmpl$$a.cloneNode(true), _el$2 = _el$.firstChild;
    createRenderEffect((_p$) => {
      const _v$ = props.class, _v$2 = fill();
      _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0
    });
    return _el$;
  })();
};
const _tmpl$$9 = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 28 28"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.0001 10.0001C10.0016 8.02333 10.0267 6.98719 10.436 6.18404C10.8195 5.43139 11.4314 4.81947 12.184 4.43597C13.0397 4 14.1598 4 16.4 4H17.6C19.8402 4 20.9603 4 21.816 4.43597C22.5686 4.81947 23.1805 5.43139 23.564 6.18404C24 7.03969 24 8.15979 24 10.4V11.6C24 13.8402 24 14.9603 23.564 15.816C23.1805 16.5686 22.5686 17.1805 21.816 17.564C21.0128 17.9733 19.9767 17.9984 17.9999 17.9999C17.9984 19.9767 17.9733 21.0128 17.564 21.816C17.1805 22.5686 16.5686 23.1805 15.816 23.564C14.9603 24 13.8402 24 11.6 24H10.4C8.15979 24 7.03969 24 6.18404 23.564C5.43139 23.1805 4.81947 22.5686 4.43597 21.816C4 20.9603 4 19.8402 4 17.6V16.4C4 14.1598 4 13.0397 4.43597 12.184C4.81947 11.4314 5.43139 10.8195 6.18404 10.436C6.98719 10.0267 8.02333 10.0016 10.0001 10.0001ZM10 11.5H9.5C8.09987 11.5 7.3998 11.5 6.86502 11.7725C6.39462 12.0122 6.01217 12.3946 5.77248 12.865C5.5 13.3998 5.5 14.0999 5.5 15.5V18.5C5.5 19.9001 5.5 20.6002 5.77248 21.135C6.01217 21.6054 6.39462 21.9878 6.86502 22.2275C7.3998 22.5 8.09987 22.5 9.5 22.5H12.5C13.9001 22.5 14.6002 22.5 15.135 22.2275C15.6054 21.9878 15.9878 21.6054 16.2275 21.135C16.5 20.6002 16.5 19.9001 16.5 18.5V18H16.4C14.1598 18 13.0397 18 12.184 17.564C11.4314 17.1805 10.8195 16.5686 10.436 15.816C10 14.9603 10 13.8402 10 11.6V11.5ZM11.5 9.5C11.5 8.09987 11.5 7.3998 11.7725 6.86502C12.0122 6.39462 12.3946 6.01217 12.865 5.77248C13.3998 5.5 14.0999 5.5 15.5 5.5H18.5C19.9001 5.5 20.6002 5.5 21.135 5.77248C21.6054 6.01217 21.9878 6.39462 22.2275 6.86502C22.5 7.3998 22.5 8.09987 22.5 9.5V12.5C22.5 13.9001 22.5 14.6002 22.2275 15.135C21.9878 15.6054 21.6054 15.9878 21.135 16.2275C20.6002 16.5 19.9001 16.5 18.5 16.5H15.5C14.0999 16.5 13.3998 16.5 12.865 16.2275C12.3946 15.9878 12.0122 15.6054 11.7725 15.135C11.5 14.6002 11.5 13.9001 11.5 12.5V9.5Z"></path></svg>`);
const CopyLightIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.icon.secondary;
  return (() => {
    const _el$ = _tmpl$$9.cloneNode(true), _el$2 = _el$.firstChild;
    createRenderEffect((_p$) => {
      const _v$ = fill(), _v$2 = fill();
      _v$ !== _p$._v$ && setAttribute(_el$, "fill", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0
    });
    return _el$;
  })();
};
const _tmpl$$8 = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" viewBox="0 0 16 17" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M1 4.12695C1 3.07754 1 2.55284 1.19202 2.14684C1.38986 1.72856 1.7266 1.39181 2.14489 1.19397C2.55088 1.00195 3.07559 1.00195 4.125 1.00195C5.17441 1.00195 5.69912 1.00195 6.10511 1.19397C6.5234 1.39181 6.86014 1.72856 7.05798 2.14684C7.25 2.55284 7.25 3.07754 7.25 4.12695C7.25 5.17636 7.25 5.70107 7.05798 6.10706C6.86014 6.52535 6.5234 6.8621 6.10511 7.05993C5.69912 7.25195 5.17441 7.25195 4.125 7.25195C3.07559 7.25195 2.55088 7.25195 2.14489 7.05993C1.7266 6.8621 1.38986 6.52535 1.19202 6.10706C1 5.70107 1 5.17636 1 4.12695ZM2.5 3.30195C2.5 3.02193 2.5 2.88191 2.5545 2.77496C2.60243 2.68088 2.67892 2.60439 2.773 2.55645C2.87996 2.50195 3.01997 2.50195 3.3 2.50195H4.95C5.23003 2.50195 5.37004 2.50195 5.477 2.55645C5.57108 2.60439 5.64757 2.68088 5.6955 2.77496C5.75 2.88191 5.75 3.02193 5.75 3.30195V4.95195C5.75 5.23198 5.75 5.37199 5.6955 5.47895C5.64757 5.57303 5.57108 5.64952 5.477 5.69746C5.37004 5.75195 5.23003 5.75195 4.95 5.75195H3.3C3.01997 5.75195 2.87996 5.75195 2.773 5.69746C2.67892 5.64952 2.60243 5.57303 2.5545 5.47895C2.5 5.37199 2.5 5.23198 2.5 4.95195V3.30195ZM1 11.877C1 10.8275 1 10.3028 1.19202 9.89684C1.38986 9.47856 1.7266 9.14181 2.14489 8.94397C2.55088 8.75195 3.07559 8.75195 4.125 8.75195C5.17441 8.75195 5.69912 8.75195 6.10511 8.94397C6.5234 9.14181 6.86014 9.47856 7.05798 9.89684C7.25 10.3028 7.25 10.8275 7.25 11.877C7.25 12.9264 7.25 13.4511 7.05798 13.8571C6.86014 14.2753 6.5234 14.6121 6.10511 14.8099C5.69912 15.002 5.17441 15.002 4.125 15.002C3.07559 15.002 2.55088 15.002 2.14489 14.8099C1.7266 14.6121 1.38986 14.2753 1.19202 13.8571C1 13.4511 1 12.9264 1 11.877ZM2.5 11.052C2.5 10.7719 2.5 10.6319 2.5545 10.525C2.60243 10.4309 2.67892 10.3544 2.773 10.3064C2.87996 10.252 3.01997 10.252 3.3 10.252H4.95C5.23003 10.252 5.37004 10.252 5.477 10.3064C5.57108 10.3544 5.64757 10.4309 5.6955 10.525C5.75 10.6319 5.75 10.7719 5.75 11.052V12.702C5.75 12.982 5.75 13.122 5.6955 13.2289C5.64757 13.323 5.57108 13.3995 5.477 13.4475C5.37004 13.502 5.23003 13.502 4.95 13.502H3.3C3.01997 13.502 2.87996 13.502 2.773 13.4475C2.67892 13.3995 2.60243 13.323 2.5545 13.2289C2.5 13.122 2.5 12.982 2.5 12.702V11.052ZM8.94202 2.14684C8.75 2.55284 8.75 3.07754 8.75 4.12695C8.75 5.17636 8.75 5.70107 8.94202 6.10706C9.13986 6.52535 9.4766 6.8621 9.89489 7.05993C10.3009 7.25195 10.8256 7.25195 11.875 7.25195C12.9244 7.25195 13.4491 7.25195 13.8551 7.05993C14.2734 6.8621 14.6101 6.52535 14.808 6.10706C15 5.70107 15 5.17636 15 4.12695C15 3.07754 15 2.55284 14.808 2.14684C14.6101 1.72856 14.2734 1.39181 13.8551 1.19397C13.4491 1.00195 12.9244 1.00195 11.875 1.00195C10.8256 1.00195 10.3009 1.00195 9.89489 1.19397C9.4766 1.39181 9.13986 1.72856 8.94202 2.14684ZM10.3045 2.77496C10.25 2.88191 10.25 3.02193 10.25 3.30195V4.95195C10.25 5.23198 10.25 5.37199 10.3045 5.47895C10.3524 5.57303 10.4289 5.64952 10.523 5.69746C10.63 5.75195 10.77 5.75195 11.05 5.75195H12.7C12.98 5.75195 13.12 5.75195 13.227 5.69746C13.3211 5.64952 13.3976 5.57303 13.4455 5.47895C13.5 5.37199 13.5 5.23198 13.5 4.95195V3.30195C13.5 3.02193 13.5 2.88191 13.4455 2.77496C13.3976 2.68088 13.3211 2.60439 13.227 2.55645C13.12 2.50195 12.98 2.50195 12.7 2.50195H11.05C10.77 2.50195 10.63 2.50195 10.523 2.55645C10.4289 2.60439 10.3524 2.68088 10.3045 2.77496ZM8.80727 9.13518C8.75 9.26242 8.75 9.4256 8.75 9.75195C8.75 10.0783 8.75 10.2415 8.80727 10.3687C8.87245 10.5136 8.9884 10.6295 9.13323 10.6947C9.26047 10.752 9.42365 10.752 9.75 10.752C10.0764 10.752 10.2395 10.752 10.3668 10.6947C10.5116 10.6295 10.6276 10.5136 10.6927 10.3687C10.75 10.2415 10.75 10.0783 10.75 9.75195C10.75 9.4256 10.75 9.26242 10.6927 9.13518C10.6276 8.99035 10.5116 8.8744 10.3668 8.80922C10.2395 8.75195 10.0764 8.75195 9.75 8.75195C9.42365 8.75195 9.26047 8.75195 9.13323 8.80922C8.9884 8.8744 8.87245 8.99035 8.80727 9.13518ZM10.87 11.8771C10.87 11.546 10.87 11.3805 10.9289 11.2517C10.9938 11.1098 11.1077 10.9959 11.2497 10.931C11.3784 10.8721 11.5439 10.8721 11.875 10.8721C12.2061 10.8721 12.3716 10.8721 12.5003 10.931C12.6423 10.9959 12.7562 11.1098 12.8211 11.2517C12.88 11.3805 12.88 11.546 12.88 11.8771C12.88 12.2081 12.88 12.3737 12.8211 12.5024C12.7562 12.6444 12.6423 12.7583 12.5003 12.8232C12.3716 12.8821 12.2061 12.8821 11.875 12.8821C11.5439 12.8821 11.3784 12.8821 11.2497 12.8232C11.1077 12.7583 10.9938 12.6444 10.9289 12.5024C10.87 12.3737 10.87 12.2081 10.87 11.8771ZM8.80727 13.3852C8.75 13.5124 8.75 13.6756 8.75 14.002C8.75 14.3283 8.75 14.4915 8.80727 14.6187C8.87245 14.7636 8.9884 14.8795 9.13323 14.9447C9.26047 15.002 9.42365 15.002 9.75 15.002C10.0764 15.002 10.2395 15.002 10.3668 14.9447C10.5116 14.8795 10.6276 14.7636 10.6927 14.6187C10.75 14.4915 10.75 14.3283 10.75 14.002C10.75 13.6756 10.75 13.5124 10.6927 13.3852C10.6276 13.2404 10.5116 13.1244 10.3668 13.0592C10.2395 13.002 10.0764 13.002 9.75 13.002C9.42365 13.002 9.26047 13.002 9.13323 13.0592C8.9884 13.1244 8.87245 13.2404 8.80727 13.3852ZM13 9.75195C13 9.4256 13 9.26242 13.0573 9.13518C13.1224 8.99035 13.2384 8.8744 13.3832 8.80922C13.5105 8.75195 13.6736 8.75195 14 8.75195C14.3264 8.75195 14.4895 8.75195 14.6168 8.80922C14.7616 8.8744 14.8776 8.99035 14.9427 9.13518C15 9.26242 15 9.4256 15 9.75195C15 10.0783 15 10.2415 14.9427 10.3687C14.8776 10.5136 14.7616 10.6295 14.6168 10.6947C14.4895 10.752 14.3264 10.752 14 10.752C13.6736 10.752 13.5105 10.752 13.3832 10.6947C13.2384 10.6295 13.1224 10.5136 13.0573 10.3687C13 10.2415 13 10.0783 13 9.75195ZM13.0573 13.3852C13 13.5124 13 13.6756 13 14.002C13 14.3283 13 14.4915 13.0573 14.6187C13.1224 14.7636 13.2384 14.8795 13.3832 14.9447C13.5105 15.002 13.6736 15.002 14 15.002C14.3264 15.002 14.4895 15.002 14.6168 14.9447C14.7616 14.8795 14.8776 14.7636 14.9427 14.6187C15 14.4915 15 14.3283 15 14.002C15 13.6756 15 13.5124 14.9427 13.3852C14.8776 13.2404 14.7616 13.1244 14.6168 13.0592C14.4895 13.002 14.3264 13.002 14 13.002C13.6736 13.002 13.5105 13.002 13.3832 13.0592C13.2384 13.1244 13.1224 13.2404 13.0573 13.3852Z"></path></svg>`);
const QRIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.icon.secondary;
  return (() => {
    const _el$ = _tmpl$$8.cloneNode(true), _el$2 = _el$.firstChild;
    createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
    return _el$;
  })();
};
const containerBorders = {
  m: "16px",
  s: "12px",
  none: "0"
};
const walletBorders = {
  m: "6px",
  s: "6px",
  none: "0"
};
const FourWalletsCard = styled$1.div`
    width: 60px;
    height: 60px;
    padding: 8px;
    margin-bottom: 8px;
    border-radius: ${(props) => containerBorders[props.theme.borderRadius]};
    background-color: ${(props) => props.theme.colors.background.tint};
    display: grid;
    grid-template: 1fr 1fr / 1fr 1fr;
    gap: 4px;
`;
const FourWalletsImage = styled$1(WalletImage)`
    width: 20px;
    height: 20px;
    border-radius: ${(props) => walletBorders[props.theme.borderRadius]};
`;
const FourWalletsItem = (props) => {
  return createComponent(WalletItem, {
    get name() {
      return props.labelLine1;
    },
    get secondLine() {
      return props.labelLine2;
    },
    get icon() {
      return createComponent(FourWalletsCard, {
        get children() {
          return createComponent(For, {
            each: [0, 1, 2, 3],
            children: (index2) => createComponent(FourWalletsImage, {
              get src() {
                return props.images[index2];
              }
            })
          });
        }
      });
    },
    onClick: () => props.onClick()
  });
};
const AT_WALLET_APP_NAME = "telegram-wallet";
const IMG = {
  TON: "https://raw.githubusercontent.com/ton-connect/sdk/main/assets/ton-icon-48.png",
  TG: "https://raw.githubusercontent.com/ton-connect/sdk/main/assets/tg.png"
};
const WalletLabeledItem = (props) => {
  const [t2] = useI18n();
  const walletsSecondLine = () => {
    if (props.wallet.appName === AT_WALLET_APP_NAME) {
      return void 0;
    }
    if ("isPreferred" in props.wallet && props.wallet.isPreferred) {
      return t2("walletItem.recent", {}, "Recent");
    }
    if (isWalletInfoCurrentlyInjected(props.wallet)) {
      return t2("walletItem.installed", {}, "Installed");
    }
    if (props.wallet.name === "Tonkeeper") {
      return t2("walletItem.popular", {}, "Popular");
    }
    return void 0;
  };
  return createMemo((() => {
    const _c$ = createMemo(() => props.wallet.appName === AT_WALLET_APP_NAME);
    return () => _c$() ? createComponent(WalletItem, {
      get icon() {
        return props.wallet.imageUrl;
      },
      get name() {
        return t2("walletItem.walletOn", {}, "Wallet On");
      },
      secondLine: "Telegram",
      get badgeUrl() {
        return IMG.TG;
      },
      onClick: () => props.onClick()
    }) : createComponent(WalletItem, {
      get icon() {
        return props.wallet.imageUrl;
      },
      get name() {
        return props.wallet.name;
      },
      get secondLine() {
        return walletsSecondLine();
      },
      secondLineColorPrimary: false,
      onClick: () => props.onClick()
    });
  })());
};
const ScrollContainerStyled = styled$1.div`
    width: 100%;
    overflow-y: auto;
    max-height: ${(props) => props.maxHeight};

    scrollbar-width: none;
    &&::-webkit-scrollbar {
        display: none;
    }

    &&::-webkit-scrollbar-track {
        background: transparent;
    }

    &&::-webkit-scrollbar-thumb {
        display: none;
    }
`;
const ScrollDivider = styled$1.div`
    height: 1px;
    margin: 0 -24px;
    width: calc(100% + 48px);
    opacity: 0.08;
    background: ${(props) => props.isShown ? props.theme.colors.icon.secondary : "transparent"};
    transition: background 0.15s ease-in-out;

    ${media("mobile")} {
        width: 100%;
        margin: 0;
    }
`;
const [windowHeight, setWindowHeight] = createSignal(((_h = getWindow$1()) == null ? void 0 : _h.innerHeight) || 0);
if (getWindow$1()) {
  window.addEventListener("resize", () => setWindowHeight(window.innerHeight));
}
const [isMobile, setIsMobile] = createSignal(isDevice("mobile"));
const updateIsMobile = () => setIsMobile(isDevice("mobile"));
if (getWindow$1()) {
  window.addEventListener("resize", () => updateIsMobile());
  window.addEventListener("load", () => updateIsMobile(), { once: true });
}
const ScrollContainer = (props) => {
  const [scrolled, setScrolled] = createSignal(false);
  const onScroll = (e2) => {
    setScrolled(e2.target.scrollTop > 0);
  };
  const offset = () => isMobile() ? 150 : 200;
  const maxHeight = () => props.maxHeight !== void 0 ? `${props.maxHeight}px` : `${windowHeight() - offset()}px`;
  return [createComponent(ScrollDivider, {
    get isShown() {
      return scrolled();
    }
  }), createComponent(ScrollContainerStyled, {
    get maxHeight() {
      return maxHeight();
    },
    onScroll,
    get ["class"]() {
      return props.class;
    },
    get children() {
      return props.children;
    }
  })];
};
const AStyled = styled$1.a`
    display: block;
    text-decoration: unset;
`;
const Link = (props) => {
  const attributes = () => props.blank ? {
    rel: "noreferrer noopener"
  } : {};
  return createComponent(AStyled, mergeProps({
    get href() {
      return props.href;
    },
    get target() {
      return props.blank ? "_blank" : "_self";
    },
    get ["class"]() {
      return props.class;
    }
  }, attributes, {
    get children() {
      return props.children;
    }
  }));
};
const TonConnectUiContext = createContext();
const _tmpl$$7 = /* @__PURE__ */ template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M7.76228 2.09998H10.2378C11.0458 2.09997 11.7067 2.09996 12.2438 2.14384C12.7997 2.18926 13.3017 2.28614 13.7706 2.52505C14.5045 2.89896 15.1011 3.49558 15.475 4.22941C15.7139 4.6983 15.8108 5.20038 15.8562 5.75629C15.9001 6.29337 15.9001 6.95422 15.9001 7.76227V8.1H16.2377C17.0457 8.09999 17.7066 8.09998 18.2437 8.14386C18.7996 8.18928 19.3017 8.28616 19.7705 8.52507C20.5044 8.89898 21.101 9.4956 21.4749 10.2294C21.7138 10.6983 21.8107 11.2004 21.8561 11.7563C21.9 12.2934 21.9 12.9542 21.9 13.7623V16.2377C21.9 17.0458 21.9 17.7066 21.8561 18.2437C21.8107 18.7996 21.7138 19.3017 21.4749 19.7706C21.101 20.5044 20.5044 21.101 19.7705 21.4749C19.3017 21.7138 18.7996 21.8107 18.2437 21.8561C17.7066 21.9 17.0458 21.9 16.2378 21.9H13.7623C12.9543 21.9 12.2934 21.9 11.7563 21.8561C11.2004 21.8107 10.6983 21.7138 10.2294 21.4749C9.49561 21.101 8.89898 20.5044 8.52508 19.7706C8.28616 19.3017 8.18928 18.7996 8.14386 18.2437C8.09998 17.7066 8.09999 17.0458 8.1 16.2377V15.9H7.76227C6.95426 15.9 6.29335 15.9 5.75629 15.8561C5.20038 15.8107 4.6983 15.7138 4.22941 15.4749C3.49558 15.101 2.89896 14.5044 2.52505 13.7705C2.28614 13.3017 2.18926 12.7996 2.14384 12.2437C2.09996 11.7066 2.09997 11.0458 2.09998 10.2377V7.76228C2.09997 6.95424 2.09996 6.29336 2.14384 5.75629C2.18926 5.20038 2.28614 4.6983 2.52505 4.22941C2.89896 3.49558 3.49558 2.89896 4.22941 2.52505C4.6983 2.28614 5.20038 2.18926 5.75629 2.14384C6.29336 2.09996 6.95425 2.09997 7.76228 2.09998ZM8.1 14.1V13.7623C8.09999 12.9542 8.09998 12.2934 8.14386 11.7563C8.18928 11.2004 8.28616 10.6983 8.52508 10.2294C8.89898 9.4956 9.49561 8.89898 10.2294 8.52507C10.6983 8.28616 11.2004 8.18928 11.7563 8.14386C12.2934 8.09998 12.9542 8.09999 13.7623 8.1H14.1001V7.79998C14.1001 6.94505 14.0994 6.35798 14.0622 5.90287C14.0259 5.45827 13.9593 5.21944 13.8712 5.0466C13.6699 4.65146 13.3486 4.3302 12.9535 4.12886C12.7806 4.04079 12.5418 3.97419 12.0972 3.93786C11.6421 3.90068 11.055 3.89998 10.2001 3.89998H7.79998C6.94505 3.89998 6.35798 3.90068 5.90287 3.93786C5.45827 3.97419 5.21944 4.04079 5.0466 4.12886C4.65146 4.3302 4.3302 4.65146 4.12886 5.0466C4.04079 5.21944 3.97419 5.45827 3.93786 5.90287C3.90068 6.35798 3.89998 6.94505 3.89998 7.79998V10.2C3.89998 11.0549 3.90068 11.642 3.93786 12.0971C3.97419 12.5417 4.04079 12.7805 4.12886 12.9534C4.3302 13.3485 4.65146 13.6698 5.0466 13.8711C5.21944 13.9592 5.45827 14.0258 5.90287 14.0621C6.35798 14.0993 6.94505 14.1 7.79998 14.1H8.1ZM11.0466 10.1289C11.2195 10.0408 11.4583 9.97421 11.9029 9.93788C12.358 9.9007 12.9451 9.9 13.8 9.9H16.2C17.0549 9.9 17.642 9.9007 18.0971 9.93788C18.5417 9.97421 18.7805 10.0408 18.9534 10.1289C19.3485 10.3302 19.6698 10.6515 19.8711 11.0466C19.9592 11.2195 20.0258 11.4583 20.0621 11.9029C20.0993 12.358 20.1 12.9451 20.1 13.8V16.2C20.1 17.0549 20.0993 17.642 20.0621 18.0971C20.0258 18.5417 19.9592 18.7805 19.8711 18.9534C19.6698 19.3485 19.3485 19.6698 18.9534 19.8711C18.7805 19.9592 18.5417 20.0258 18.0971 20.0621C17.642 20.0993 17.0549 20.1 16.2 20.1H13.8C12.9451 20.1 12.358 20.0993 11.9029 20.0621C11.4583 20.0258 11.2195 19.9592 11.0466 19.8711C10.6515 19.6698 10.3302 19.3485 10.1289 18.9534C10.0408 18.7805 9.97421 18.5417 9.93788 18.0971C9.9007 17.642 9.9 17.0549 9.9 16.2V13.8C9.9 12.9451 9.9007 12.358 9.93788 11.9029C9.97421 11.4583 10.0408 11.2195 10.1289 11.0466C10.3302 10.6515 10.6515 10.3302 11.0466 10.1289Z"></path></svg>`);
const CopyIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.icon.primary;
  return (() => {
    const _el$ = _tmpl$$7.cloneNode(true), _el$2 = _el$.firstChild;
    createRenderEffect((_p$) => {
      const _v$ = props.class, _v$2 = fill();
      _v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0
    });
    return _el$;
  })();
};
const _tmpl$$6 = /* @__PURE__ */ template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8.7624 3.10001C7.95435 3.1 7.29349 3.09999 6.75642 3.14387C6.2005 3.18929 5.69842 3.28617 5.22954 3.52508C4.4957 3.89899 3.89908 4.49561 3.52517 5.22944C3.28626 5.69833 3.18938 6.20041 3.14396 6.75632C3.10008 7.2934 3.10009 7.95424 3.1001 8.76229V15.2377C3.10009 16.0458 3.10008 16.7066 3.14396 17.2437C3.18938 17.7996 3.28626 18.3017 3.52517 18.7706C3.89908 19.5044 4.4957 20.101 5.22954 20.4749C5.69842 20.7138 6.2005 20.8107 6.75642 20.8561C7.29349 20.9 7.95434 20.9 8.76239 20.9H12.0001C12.4972 20.9 12.9001 20.4971 12.9001 20C12.9001 19.503 12.4972 19.1 12.0001 19.1H8.8001C7.94517 19.1 7.3581 19.0993 6.90299 19.0621C6.45839 19.0258 6.21956 18.9592 6.04672 18.8711C5.65158 18.6698 5.33032 18.3485 5.12898 17.9534C5.04092 17.7805 4.97431 17.5417 4.93798 17.0971C4.9008 16.642 4.9001 16.0549 4.9001 15.2V8.80001C4.9001 7.94508 4.9008 7.35801 4.93798 6.9029C4.97431 6.4583 5.04092 6.21947 5.12898 6.04663C5.33032 5.65149 5.65158 5.33023 6.04672 5.12889C6.21956 5.04082 6.45839 4.97422 6.90299 4.93789C7.3581 4.90071 7.94517 4.90001 8.8001 4.90001H12.0001C12.4972 4.90001 12.9001 4.49706 12.9001 4.00001C12.9001 3.50295 12.4972 3.10001 12.0001 3.10001H8.7624Z"></path><path d="M17.6364 7.3636C17.2849 7.01212 16.7151 7.01212 16.3636 7.3636C16.0121 7.71507 16.0121 8.28492 16.3636 8.63639L18.8272 11.1H9.00001C8.50295 11.1 8.10001 11.5029 8.10001 12C8.10001 12.497 8.50295 12.9 9.00001 12.9H18.8272L16.3636 15.3636C16.0121 15.7151 16.0121 16.2849 16.3636 16.6364C16.7151 16.9879 17.2849 16.9879 17.6364 16.6364L21.6364 12.6364C21.9879 12.2849 21.9879 11.7151 21.6364 11.3636L17.6364 7.3636Z"></path></svg>`);
const DisconnectIcon = (props) => {
  const theme = useTheme();
  const fill = () => props.fill || theme.colors.icon.primary;
  return (() => {
    const _el$ = _tmpl$$6.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.nextSibling;
    createRenderEffect((_p$) => {
      const _v$ = fill(), _v$2 = fill();
      _v$ !== _p$._v$ && setAttribute(_el$2, "fill", _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && setAttribute(_el$3, "fill", _p$._v$2 = _v$2);
      return _p$;
    }, {
      _v$: void 0,
      _v$2: void 0
    });
    return _el$;
  })();
};
const hoverBorders$1 = {
  m: "8px",
  s: "4px",
  none: "0"
};
const dropdownBorders = {
  m: "16px",
  s: "8px",
  none: "0"
};
const AccountButtonDropdownStyled = styled$1.div`
    width: 256px;
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.16);
    border-radius: ${(props) => dropdownBorders[props.theme.borderRadius]};

    background-color: ${(props) => props.theme.colors.background.primary}
           
    color: ${(props) => props.theme.colors.text.primary}
`;
const UlStyled$1 = styled$1.ul`
    background-color: ${(props) => props.theme.colors.background.primary};
    padding: 8px;
`;
const MenuButtonStyled = styled$1.button`
    display: flex;
    align-items: center;
    gap: 8px;
    height: 40px;
    padding-left: 8px;
    width: 100%;

    background-color: ${(props) => props.theme.colors.background.primary};
    border: none;
    border-radius: ${(props) => hoverBorders$1[props.theme.borderRadius]};
    cursor: pointer;

    transition: background-color, transform 0.1s ease-in-out;

    &:hover {
        background-color: ${(props) => props.theme.colors.background.secondary};
    }

    &:active {
        transform: scale(0.96);
    }
`;
const _tmpl$$5 = /* @__PURE__ */ template$1(`<li></li>`);
const MenuItemText = (props) => createComponent(Text, {
  get translationKey() {
    return props.translationKey;
  },
  fontSize: "15px",
  fontWeight: "590",
  get children() {
    return props.children;
  }
});
const AccountButtonDropdown = (props) => {
  const tonConnectUi = useContext(TonConnectUiContext);
  const [isCopiedShown, setIsCopiedShown] = createSignal(false);
  const onCopy = () => __async(void 0, null, function* () {
    const userFriendlyAddress = toUserFriendlyAddress(tonConnectUi.account.address, tonConnectUi.account.chain === CHAIN.TESTNET);
    yield copyToClipboard(userFriendlyAddress);
    setIsCopiedShown(true);
    setTimeout(() => setIsCopiedShown(false), 1e3);
  });
  const onDisconnect = () => {
    tonConnectUi.disconnect();
    props.onClose();
  };
  return createComponent(AccountButtonDropdownStyled, {
    ref(r$) {
      const _ref$ = props.ref;
      typeof _ref$ === "function" ? _ref$(r$) : props.ref = r$;
    },
    get ["class"]() {
      return props.class;
    },
    "data-tc-dropdown": "true",
    get children() {
      return createComponent(UlStyled$1, {
        get children() {
          return [(() => {
            const _el$ = _tmpl$$5.cloneNode(true);
            insert(_el$, createComponent(MenuButtonStyled, {
              onClick: () => onCopy(),
              get children() {
                return [createComponent(CopyIcon, {}), createComponent(Show, {
                  get when() {
                    return !isCopiedShown();
                  },
                  get children() {
                    return createComponent(MenuItemText, {
                      translationKey: "button.dropdown.copy",
                      children: "Copy address"
                    });
                  }
                }), createComponent(Show, {
                  get when() {
                    return isCopiedShown();
                  },
                  get children() {
                    return createComponent(MenuItemText, {
                      translationKey: "button.dropdown.copied",
                      children: "Address copied!"
                    });
                  }
                })];
              }
            }));
            return _el$;
          })(), (() => {
            const _el$2 = _tmpl$$5.cloneNode(true);
            insert(_el$2, createComponent(MenuButtonStyled, {
              onClick: () => onDisconnect(),
              get children() {
                return [createComponent(DisconnectIcon, {}), createComponent(MenuItemText, {
                  translationKey: "button.dropdown.disconnect",
                  children: "Disconnect"
                })];
              }
            }));
            return _el$2;
          })()];
        }
      });
    }
  });
};
const borders$2 = {
  m: "16px",
  s: "8px",
  none: "0"
};
const NotificationStyled = styled$1.div`
    width: 256px;
    padding: 12px 16px;
    display: flex;
    gap: 9px;

    background-color: ${(props) => props.theme.colors.background.primary};
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.16);
    border-radius: ${(props) => borders$2[props.theme.borderRadius]};
`;
const NotificationContentStyled = styled$1.div`
    width: 192px;

    > h3 {
        font-size: 15px;
    }
`;
const TextStyled$2 = styled$1(Text)`
    margin-top: 4px;
    color: ${(props) => props.theme.colors.text.secondary};
`;
const Notification = (props) => {
  const dataAttrs = useDataAttributes(props);
  return createComponent(NotificationStyled, mergeProps({
    get ["class"]() {
      return props.class;
    },
    "data-tc-notification": "true"
  }, dataAttrs, {
    get children() {
      return [createComponent(NotificationContentStyled, {
        get children() {
          return [createComponent(H3, {
            get translationKey() {
              return props.header.translationKey;
            },
            get translationValues() {
              return props.header.translationValues;
            },
            get children() {
              return props.children;
            }
          }), createComponent(Show, {
            get when() {
              return props.text;
            },
            get children() {
              return createComponent(TextStyled$2, {
                get translationKey() {
                  return props.text.translationKey;
                },
                get translationValues() {
                  return props.text.translationValues;
                }
              });
            }
          })];
        }
      }), createMemo(() => props.icon)];
    }
  }));
};
const LoaderIconStyled$2 = styled$1(LoaderIcon)`
    align-self: center;
`;
const ConfirmOperationNotification = (props) => {
  const tonConnectUI2 = useContext(TonConnectUiContext);
  const [t2] = useI18n();
  const name2 = () => tonConnectUI2.wallet && "name" in tonConnectUI2.wallet ? tonConnectUI2.wallet.name : t2("common.yourWallet", {}, "Your wallet");
  return createComponent(Notification, {
    get header() {
      return {
        translationKey: "notifications.confirm.header",
        translationValues: {
          name: name2()
        }
      };
    },
    get ["class"]() {
      return props.class;
    },
    get icon() {
      return createComponent(LoaderIconStyled$2, {});
    },
    "data-tc-notification-confirm": "true",
    children: "Confirm operation in your wallet"
  });
};
const ErrorIconStyled$2 = styled$1(ErrorIcon)`
    margin-top: 2px;
`;
const ErrorTransactionNotification = (props) => {
  return createComponent(Notification, {
    header: {
      translationKey: "notifications.transactionCanceled.header"
    },
    text: {
      translationKey: "notifications.transactionCanceled.text"
    },
    get icon() {
      return createComponent(ErrorIconStyled$2, {
        size: "xs"
      });
    },
    get ["class"]() {
      return props.class;
    },
    "data-tc-notification-tx-cancelled": "true",
    children: "Transaction cancelled"
  });
};
const SuccessIconStyled = styled$1(SuccessIcon)`
    margin-top: 2px;
`;
const SuccessTransactionNotification = (props) => {
  return createComponent(Notification, {
    header: {
      translationKey: "notifications.transactionSent.header"
    },
    text: {
      translationKey: "notifications.transactionSent.text"
    },
    get icon() {
      return createComponent(SuccessIconStyled, {});
    },
    get ["class"]() {
      return props.class;
    },
    "data-tc-notification-tx-sent": "true",
    children: "Transaction sent"
  });
};
const NotificationClass = u`
    transform: translateY(-8px);
    margin-bottom: 12px;
`;
const defaultConfig = {
  timeout: 4500
};
const [latestAction, setLatestAction] = createSignal(null);
function useOpenedNotifications(config) {
  const { timeout: timeout2 } = __spreadValues$1(__spreadValues$1({}, defaultConfig), config);
  const [openedNotifications, setOpenedNotifications] = createSignal([]);
  const [timeoutIds, setTimeoutIds] = createSignal([]);
  createEffect(
    on(action, (action2) => {
      var _a2;
      if (!action2 || !action2.showNotification) {
        return;
      }
      if (latestAction() === action2) {
        return;
      }
      if (((_a2 = latestAction()) == null ? void 0 : _a2.name) === "confirm-transaction" && action2.name === "confirm-transaction") {
        return;
      }
      setLatestAction(action2);
      setOpenedNotifications(
        (openedNotifications2) => openedNotifications2.filter((n2) => n2.action !== "confirm-transaction")
      );
      const notification = { action: action2.name };
      setOpenedNotifications((openedNotifications2) => [...openedNotifications2, notification]);
      const timeoutId = setTimeout(() => {
        setOpenedNotifications(
          (openedNotifications2) => openedNotifications2.filter((n2) => n2 !== notification)
        );
        setTimeoutIds((timeoutIds2) => timeoutIds2.filter((id2) => id2 !== timeoutId));
      }, timeout2);
      setTimeoutIds((timeoutIds2) => [...timeoutIds2, timeoutId]);
    })
  );
  onCleanup(() => {
    timeoutIds().forEach((id2) => clearTimeout(id2));
  });
  return openedNotifications;
}
const _tmpl$$4 = /* @__PURE__ */ template$1(`<div data-tc-list-notifications="true"></div>`);
const Notifications = (props) => {
  const openedNotifications = useOpenedNotifications();
  return (() => {
    const _el$ = _tmpl$$4.cloneNode(true);
    insert(_el$, createComponent(TransitionGroup, {
      onBeforeEnter: (el2) => {
        animate(el2, [{
          opacity: 0,
          transform: "translateY(0)"
        }, {
          opacity: 1,
          transform: "translateY(-8px)"
        }], {
          duration: 200
        });
      },
      onExit: (el2, done) => {
        const a2 = animate(el2, [{
          opacity: 1,
          transform: "translateY(-8px)"
        }, {
          opacity: 0,
          transform: "translateY(-30px)"
        }], {
          duration: 200
        });
        a2.finished.then(done);
      },
      get children() {
        return createComponent(For, {
          get each() {
            return openedNotifications();
          },
          children: (openedNotification) => createComponent(Switch, {
            get children() {
              return [createComponent(Match, {
                get when() {
                  return openedNotification.action === "transaction-sent";
                },
                get children() {
                  return createComponent(SuccessTransactionNotification, {
                    "class": NotificationClass
                  });
                }
              }), createComponent(Match, {
                get when() {
                  return openedNotification.action === "transaction-canceled";
                },
                get children() {
                  return createComponent(ErrorTransactionNotification, {
                    "class": NotificationClass
                  });
                }
              }), createComponent(Match, {
                get when() {
                  return openedNotification.action === "confirm-transaction";
                },
                get children() {
                  return createComponent(ConfirmOperationNotification, {
                    "class": NotificationClass
                  });
                }
              })];
            }
          })
        });
      }
    }));
    createRenderEffect(() => className(_el$, props.class));
    return _el$;
  })();
};
const AccountButtonStyled = styled$1(Button$1)`
    background-color: ${(props) => props.theme.colors.connectButton.background};
    color: ${(props) => props.theme.colors.connectButton.foreground};
    box-shadow: ${(props) => `0 4px 24px ${rgba(props.theme.colors.constant.black, 0.16)}`};
    padding: 8px 16px 8px 12px;

    display: flex;
    align-items: center;
    gap: 4px;
    height: 40px;
`;
const DropdownButtonStyled = styled$1(AccountButtonStyled)`
    padding: 12px 16px;
    min-width: 148px;
    justify-content: center;
    background-color: ${(props) => props.theme.colors.background.primary};
`;
const LoaderButtonStyled$1 = styled$1(Button$1)`
    min-width: 148px;
    height: 40px;

    background-color: ${(props) => props.theme.colors.background.primary};
    color: ${(props) => props.theme.colors.connectButton.foreground};
    box-shadow: ${(props) => `0 4px 24px ${rgba(props.theme.colors.constant.black, 0.16)}`};

    display: flex;
    align-items: center;
    justify-content: center;
`;
const LoaderIconStyled$1 = styled$1(LoaderIcon)`
    height: 18px;
    width: 18px;
`;
const DropdownContainerStyled = styled$1.div`
    width: fit-content;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
`;
const DropdownStyled = styled$1(AccountButtonDropdown)`
    box-sizing: border-box;
    overflow: hidden;
    margin-top: 12px;
`;
const NotificationsStyled = styled$1(Notifications)`
    > div:first-child {
        margin-top: 20px;
    }
`;
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "x" : "y";
}
function getLengthFromAxis(axis) {
  return axis === "y" ? "height" : "width";
}
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const mainAxis = getMainAxisFromPlacement(placement);
  const length = getLengthFromAxis(mainAxis);
  const commonAlign = reference[length] / 2 - floating[length] / 2;
  const side = getSide(placement);
  const isVertical = mainAxis === "x";
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
const computePosition$1 = (reference, floating, config) => __async(void 0, null, function* () {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = yield platform2.isRTL == null ? void 0 : platform2.isRTL(floating);
  if ({}.NODE_ENV !== "production") {
    if (platform2 == null) {
      console.error(["Floating UI: `platform` property was not passed to config. If you", "want to use Floating UI on the web, install @floating-ui/dom", "instead of the /core package. Otherwise, you can create your own", "`platform`: https://floating-ui.com/docs/platform"].join(" "));
    }
    if (validMiddleware.filter((_ref) => {
      let {
        name: name2
      } = _ref;
      return name2 === "autoPlacement" || name2 === "flip";
    }).length > 1) {
      throw new Error(["Floating UI: duplicate `flip` and/or `autoPlacement` middleware", "detected. This will lead to an infinite loop. Ensure only one of", "either has been passed to the `middleware` array."].join(" "));
    }
    if (!reference || !floating) {
      console.error(["Floating UI: The reference and/or floating element was not defined", "when `computePosition()` was called. Ensure that both elements have", "been created and can be measured."].join(" "));
    }
  }
  let rects = yield platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x: x2,
    y: y2
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i2 = 0; i2 < validMiddleware.length; i2++) {
    const {
      name: name2,
      fn
    } = validMiddleware[i2];
    const {
      x: nextX,
      y: nextY,
      data: data2,
      reset
    } = yield fn({
      x: x2,
      y: y2,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x2 = nextX != null ? nextX : x2;
    y2 = nextY != null ? nextY : y2;
    middlewareData = __spreadProps(__spreadValues$1({}, middlewareData), {
      [name2]: __spreadValues$1(__spreadValues$1({}, middlewareData[name2]), data2)
    });
    if ({}.NODE_ENV !== "production") {
      if (resetCount > 50) {
        console.warn(["Floating UI: The middleware lifecycle appears to be running in an", "infinite loop. This is usually caused by a `reset` continually", "being returned without a break condition."].join(" "));
      }
    }
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? yield platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x: x2,
          y: y2
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i2 = -1;
      continue;
    }
  }
  return {
    x: x2,
    y: y2,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
});
function rectToClientRect(rect) {
  return __spreadProps(__spreadValues$1({}, rect), {
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}
function getWindow(node2) {
  var _node$ownerDocument;
  return ((_node$ownerDocument = node2.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeName(node2) {
  return isNode(node2) ? (node2.nodeName || "").toLowerCase() : "";
}
let uaString;
function getUAString() {
  if (uaString) {
    return uaString;
  }
  const uaData = navigator.userAgentData;
  if (uaData && Array.isArray(uaData.brands)) {
    uaString = uaData.brands.map((item) => item.brand + "/" + item.version).join(" ");
    return uaString;
  }
  return navigator.userAgent;
}
function isHTMLElement(value) {
  return value instanceof getWindow(value).HTMLElement;
}
function isElement(value) {
  return value instanceof getWindow(value).Element;
}
function isNode(value) {
  return value instanceof getWindow(value).Node;
}
function isShadowRoot(node2) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  const OwnElement = getWindow(node2).ShadowRoot;
  return node2 instanceof OwnElement || node2 instanceof ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle$1(element);
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isContainingBlock(element) {
  const isFirefox = /firefox/i.test(getUAString());
  const css = getComputedStyle$1(element);
  const backdropFilter = css.backdropFilter || css.WebkitBackdropFilter;
  return css.transform !== "none" || css.perspective !== "none" || (backdropFilter ? backdropFilter !== "none" : false) || isFirefox && css.willChange === "filter" || isFirefox && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective"].some((value) => css.willChange.includes(value)) || ["paint", "layout", "strict", "content"].some(
    (value) => {
      const contain = css.contain;
      return contain != null ? contain.includes(value) : false;
    }
  );
}
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}
function isLastTraversableNode(node2) {
  return ["html", "body", "#document"].includes(getNodeName(node2));
}
const min$4 = Math.min;
const max$4 = Math.max;
const round = Math.round;
const FALLBACK_SCALE = {
  x: 1,
  y: 1
};
function getScale(element) {
  const domElement = !isElement(element) && element.contextElement ? element.contextElement : isElement(element) ? element : null;
  if (!domElement) {
    return FALLBACK_SCALE;
  }
  const rect = domElement.getBoundingClientRect();
  const css = getComputedStyle$1(domElement);
  if (css.boxSizing !== "border-box") {
    if (!isHTMLElement(domElement)) {
      return FALLBACK_SCALE;
    }
    return {
      x: domElement.offsetWidth > 0 ? round(rect.width) / domElement.offsetWidth || 1 : 1,
      y: domElement.offsetHeight > 0 ? round(rect.height) / domElement.offsetHeight || 1 : 1
    };
  }
  let x2 = rect.width / parseFloat(css.width);
  let y2 = rect.height / parseFloat(css.height);
  if (!x2 || !Number.isFinite(x2)) {
    x2 = 1;
  }
  if (!y2 || !Number.isFinite(y2)) {
    y2 = 1;
  }
  return {
    x: x2,
    y: y2
  };
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  var _win$visualViewport$o, _win$visualViewport, _win$visualViewport$o2, _win$visualViewport2;
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  let scale = FALLBACK_SCALE;
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const win = isElement(element) ? getWindow(element) : window;
  const addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  const x2 = (clientRect.left + (addVisualOffsets ? (_win$visualViewport$o = (_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) != null ? _win$visualViewport$o : 0 : 0)) / scale.x;
  const y2 = (clientRect.top + (addVisualOffsets ? (_win$visualViewport$o2 = (_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) != null ? _win$visualViewport$o2 : 0 : 0)) / scale.y;
  const width = clientRect.width / scale.x;
  const height = clientRect.height / scale.y;
  return {
    width,
    height,
    top: y2,
    right: x2 + width,
    bottom: y2 + height,
    left: x2,
    x: x2,
    y: y2
  };
}
function getDocumentElement(node2) {
  return ((isNode(node2) ? node2.ownerDocument : node2.document) || window.document).documentElement;
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const rect = getBoundingClientRect(element, true, strategy === "fixed", offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent, true);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function getParentNode(node2) {
  if (getNodeName(node2) === "html") {
    return node2;
  }
  const result = node2.assignedSlot || node2.parentNode || (isShadowRoot(node2) ? node2.host : null) || getDocumentElement(node2);
  return isShadowRoot(result) ? result.host : result;
}
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || getComputedStyle$1(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else {
      currentNode = getParentNode(currentNode);
    }
  }
  return null;
}
function getOffsetParent(element) {
  const window2 = getWindow(element);
  let offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
function getDimensions(element) {
  if (isHTMLElement(element)) {
    return {
      width: element.offsetWidth,
      height: element.offsetHeight
    };
  }
  const rect = getBoundingClientRect(element);
  return {
    width: rect.width,
    height: rect.height
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  if (offsetParent === documentElement) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = {
    x: 1,
    y: 1
  };
  const offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x2 = 0;
  let y2 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x2 = visualViewport.offsetLeft;
      y2 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}
function getDocumentRect(element) {
  var _element$ownerDocumen;
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  const width = max$4(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  const height = max$4(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  let x2 = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y2 = -scroll.scrollTop;
  if (getComputedStyle$1(body || html).direction === "rtl") {
    x2 += max$4(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}
function getNearestOverflowAncestor(node2) {
  const parentNode = getParentNode(node2);
  if (isLastTraversableNode(parentNode)) {
    return node2.ownerDocument.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node2, list) {
  var _node$ownerDocument;
  if (list === void 0) {
    list = [];
  }
  const scrollableAncestor = getNearestOverflowAncestor(node2);
  const isBody = scrollableAncestor === ((_node$ownerDocument = node2.ownerDocument) == null ? void 0 : _node$ownerDocument.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left2 = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : {
    x: 1,
    y: 1
  };
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x2 = left2 * scale.x;
  const y2 = top * scale.y;
  return {
    top: y2,
    left: x2,
    right: x2 + width,
    bottom: y2 + height,
    x: x2,
    y: y2,
    width,
    height
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  if (clippingAncestor === "viewport") {
    return rectToClientRect(getViewportRect(element, strategy));
  }
  if (isElement(clippingAncestor)) {
    return getInnerBoundingClientRect(clippingAncestor, strategy);
  }
  return rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element).filter((el2) => isElement(el2) && getNodeName(el2) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle$1(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle$1(currentNode);
    const containingBlock = isContainingBlock(currentNode);
    const shouldDropCurrentNode = elementIsFixed ? !containingBlock && !currentContainingBlockComputedStyle : !containingBlock && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max$4(rect.top, accRect.top);
    accRect.right = min$4(rect.right, accRect.right);
    accRect.bottom = min$4(rect.bottom, accRect.bottom);
    accRect.left = max$4(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
const platform = {
  getClippingRect,
  convertOffsetParentRelativeRectToViewportRelativeRect,
  isElement,
  getDimensions,
  getOffsetParent,
  getDocumentElement,
  getScale,
  getElementRects(_ref) {
    return __async(this, null, function* () {
      let {
        reference,
        floating,
        strategy
      } = _ref;
      const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
      const getDimensionsFn = this.getDimensions;
      return {
        reference: getRectRelativeToOffsetParent(reference, yield getOffsetParentFn(floating), strategy),
        floating: __spreadValues$1({
          x: 0,
          y: 0
        }, yield getDimensionsFn(floating))
      };
    });
  },
  getClientRects: (element) => Array.from(element.getClientRects()),
  isRTL: (element) => getComputedStyle$1(element).direction === "rtl"
};
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll: _ancestorScroll = true,
    ancestorResize = true,
    elementResize = true,
    animationFrame = false
  } = options;
  const ancestorScroll = _ancestorScroll && !animationFrame;
  const ancestors = ancestorScroll || ancestorResize ? [...isElement(reference) ? getOverflowAncestors(reference) : reference.contextElement ? getOverflowAncestors(reference.contextElement) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  let observer = null;
  if (elementResize) {
    let initialUpdate = true;
    observer = new ResizeObserver(() => {
      if (!initialUpdate) {
        update();
      }
      initialUpdate = false;
    });
    isElement(reference) && !animationFrame && observer.observe(reference);
    if (!isElement(reference) && reference.contextElement && !animationFrame) {
      observer.observe(reference.contextElement);
    }
    observer.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _observer;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    (_observer = observer) == null ? void 0 : _observer.disconnect();
    observer = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
const computePosition = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = __spreadValues$1({
    platform
  }, options);
  const platformWithCache = __spreadProps(__spreadValues$1({}, mergedOptions.platform), {
    _c: cache
  });
  return computePosition$1(reference, floating, __spreadProps(__spreadValues$1({}, mergedOptions), {
    platform: platformWithCache
  }));
};
function P(l2, u2, e2) {
  let c2 = () => {
    var t2;
    return (t2 = e2 == null ? void 0 : e2.placement) != null ? t2 : "bottom";
  }, d2 = () => {
    var t2;
    return (t2 = e2 == null ? void 0 : e2.strategy) != null ? t2 : "absolute";
  }, [n2, o2] = createSignal({ x: null, y: null, placement: c2(), strategy: d2(), middlewareData: {} }), [x2, F2] = createSignal();
  createEffect(() => {
    let t2 = x2();
    if (t2)
      throw t2.value;
  });
  let s2 = createMemo(() => (l2(), u2(), {}));
  function i2() {
    let t2 = l2(), r2 = u2();
    if (t2 && r2) {
      let a2 = s2();
      computePosition(t2, r2, { middleware: e2 == null ? void 0 : e2.middleware, placement: c2(), strategy: d2() }).then((m2) => {
        a2 === s2() && o2(m2);
      }, (m2) => {
        F2(m2);
      });
    }
  }
  return createEffect(() => {
    let t2 = l2(), r2 = u2();
    if (e2 == null || e2.middleware, c2(), d2(), t2 && r2)
      if (e2 != null && e2.whileElementsMounted) {
        let a2 = e2.whileElementsMounted(t2, r2, i2);
        a2 && onCleanup(a2);
      } else
        i2();
  }), { get x() {
    return n2().x;
  }, get y() {
    return n2().y;
  }, get placement() {
    return n2().placement;
  }, get strategy() {
    return n2().strategy;
  }, get middlewareData() {
    return n2().middlewareData;
  }, update: i2 };
}
const _tmpl$$3 = /* @__PURE__ */ template$1(`<tc-root data-tc-dropdown-container="true"></tc-root>`);
const AccountButton = () => {
  const theme = useTheme();
  const connector = useContext(ConnectorContext);
  const tonConnectUI2 = useContext(TonConnectUiContext);
  const [isOpened, setIsOpened] = createSignal(false);
  const [account, setAccount] = createSignal(connector.account);
  const [restoringProcess, setRestoringProcess] = createSignal(!connector.account);
  let dropDownRef;
  const [floating, setFloating] = createSignal();
  const [anchor, setAnchor] = createSignal();
  const position = P(anchor, floating, {
    whileElementsMounted: autoUpdate,
    placement: "bottom-end"
  });
  const normalizedAddress = () => {
    const acc = account();
    if (acc) {
      const userFriendlyAddress = toUserFriendlyAddress(acc.address, acc.chain === CHAIN.TESTNET);
      return userFriendlyAddress.slice(0, 4) + "…" + userFriendlyAddress.slice(-4);
    }
    return "";
  };
  tonConnectUI2.connectionRestored.then(() => setRestoringProcess(false));
  const unsubscribe = connector.onStatusChange((wallet) => {
    if (!wallet) {
      setIsOpened(false);
      setAccount(null);
      setRestoringProcess(false);
      return;
    }
    setAccount(wallet.account);
    setRestoringProcess(false);
  });
  const onClick = (e2) => {
    if (!account() || !isOpened()) {
      return;
    }
    const clickToButton = anchor().contains(e2.target);
    const clickToDropdown = dropDownRef.contains(e2.target);
    if (!clickToButton && !clickToDropdown) {
      setIsOpened(false);
    }
  };
  onMount(() => {
    document.body.addEventListener("click", onClick);
  });
  onCleanup(() => {
    document.body.removeEventListener("click", onClick);
    unsubscribe();
  });
  return createComponent(Dynamic, {
    component: globalStylesTag,
    get children() {
      return [createComponent(Show, {
        get when() {
          return restoringProcess();
        },
        get children() {
          return createComponent(LoaderButtonStyled$1, {
            disabled: true,
            "data-tc-connect-button-loading": "true",
            get children() {
              return createComponent(LoaderIconStyled$1, {});
            }
          });
        }
      }), createComponent(Show, {
        get when() {
          return !restoringProcess();
        },
        get children() {
          return [createComponent(Show, {
            get when() {
              return !account();
            },
            get children() {
              return createComponent(AccountButtonStyled, {
                onClick: () => tonConnectUI2.openModal(),
                "data-tc-connect-button": "true",
                scale: "s",
                get children() {
                  return [createComponent(TonIcon, {
                    get fill() {
                      return theme.colors.connectButton.foreground;
                    }
                  }), createComponent(Text, {
                    translationKey: "button.connectWallet",
                    fontSize: "15px",
                    lineHeight: "18px",
                    fontWeight: "590",
                    get color() {
                      return theme.colors.connectButton.foreground;
                    },
                    children: "Connect wallet"
                  })];
                }
              });
            }
          }), createComponent(Show, {
            get when() {
              return account();
            },
            get children() {
              return createComponent(DropdownContainerStyled, {
                get children() {
                  return [createComponent(DropdownButtonStyled, {
                    onClick: () => setIsOpened((v2) => !v2),
                    ref: setAnchor,
                    "data-tc-dropdown-button": "true",
                    scale: "s",
                    get children() {
                      return [createComponent(Text, {
                        fontSize: "15px",
                        fontWeight: "590",
                        lineHeight: "18px",
                        get children() {
                          return normalizedAddress();
                        }
                      }), createComponent(ArrowIcon, {
                        direction: "bottom"
                      })];
                    }
                  }), createComponent(Portal, {
                    get children() {
                      const _el$ = untrack(() => document.importNode(_tmpl$$3, true));
                      use(setFloating, _el$);
                      _el$.style.setProperty("z-index", "999");
                      _el$._$owner = getOwner();
                      insert(_el$, createComponent(Transition, {
                        onBeforeEnter: (el2) => {
                          animate(el2, [{
                            opacity: 0,
                            transform: "translateY(-8px)"
                          }, {
                            opacity: 1,
                            transform: "translateY(0)"
                          }], {
                            duration: 150
                          });
                        },
                        onExit: (el2, done) => {
                          const a2 = animate(el2, [{
                            opacity: 1,
                            transform: "translateY(0)"
                          }, {
                            opacity: 0,
                            transform: "translateY(-8px)"
                          }], {
                            duration: 150
                          });
                          a2.finished.then(done);
                        },
                        get children() {
                          return createComponent(Show, {
                            get when() {
                              return isOpened();
                            },
                            get children() {
                              return createComponent(DropdownStyled, {
                                get hidden() {
                                  return !isOpened();
                                },
                                onClose: () => setIsOpened(false),
                                ref(r$) {
                                  const _ref$ = dropDownRef;
                                  typeof _ref$ === "function" ? _ref$(r$) : dropDownRef = r$;
                                }
                              });
                            }
                          });
                        }
                      }), null);
                      insert(_el$, createComponent(NotificationsStyled, {}), null);
                      createRenderEffect((_p$) => {
                        var _a2, _b2;
                        const _v$ = position.strategy, _v$2 = `${(_a2 = position.y) != null ? _a2 : 0}px`, _v$3 = `${(_b2 = position.x) != null ? _b2 : 0}px`;
                        _v$ !== _p$._v$ && _el$.style.setProperty("position", _p$._v$ = _v$);
                        _v$2 !== _p$._v$2 && _el$.style.setProperty("top", _p$._v$2 = _v$2);
                        _v$3 !== _p$._v$3 && _el$.style.setProperty("left", _p$._v$3 = _v$3);
                        return _p$;
                      }, {
                        _v$: void 0,
                        _v$2: void 0,
                        _v$3: void 0
                      });
                      return _el$;
                    }
                  })];
                }
              });
            }
          })];
        }
      })];
    }
  });
};
const StyledModal = styled$1(Modal)`
    padding-left: 24px;
    padding-right: 24px;
    padding-top: 18px;
    padding-bottom: 0;

    ${media("mobile")} {
        padding-left: 0;
        padding-right: 0;

        min-height: 364px;
    }
`;
const H1Styled$8 = styled$1(H1)`
    margin-top: 12px;

    ${media("mobile")} {
        padding: 0 10px;
    }
`;
const LoaderContainerStyled = styled$1.div`
    margin: 30px 0;
    width: 100%;
    display: flex;
    justify-content: center;

    ${media("mobile")} {
        height: 160px;
        align-items: center;
    }
`;
styled$1(Text)`
    min-width: 84px;
    text-align: center;
    font-weight: 590;
`;
styled$1(TabBar)`
    margin: 0 auto 22px;
`;
const [appState, setAppState] = createStore({
  buttonRootId: null,
  language: "en",
  returnStrategy: "back",
  twaReturnUrl: void 0,
  walletsListConfiguration: {},
  enableAndroidBackHandler: true
});
function uniq$2(array2) {
  return [...new Set(array2)];
}
function mergeConcat(idKey, array1, array2) {
  return array1.map((item1) => {
    const item2 = array2.find((elem2) => elem2[idKey] === item1[idKey]);
    array2 = array2.filter((elem2) => elem2[idKey] !== item1[idKey]);
    return item2 === void 0 ? item1 : item2;
  }).concat(array2);
}
function uiWalletToWalletInfo(uiWallet) {
  if ("jsBridgeKey" in uiWallet) {
    return __spreadProps(__spreadValues$1({}, uiWallet), {
      injected: TonConnect.isWalletInjected(uiWallet.jsBridgeKey),
      embedded: TonConnect.isInsideWalletBrowser(uiWallet.jsBridgeKey)
    });
  }
  return uiWallet;
}
function applyWalletsListConfiguration(walletsList, configuration) {
  var _a2;
  if (!configuration) {
    return walletsList;
  }
  if ((_a2 = configuration.includeWallets) == null ? void 0 : _a2.length) {
    walletsList = mergeConcat(
      "name",
      walletsList,
      configuration.includeWallets.map(uiWalletToWalletInfo)
    );
  }
  return walletsList;
}
function supportsDesktop(walletInfo) {
  return walletInfo.platforms.some((w2) => ["macos", "linux", "windows"].includes(w2));
}
function supportsMobile(walletInfo) {
  return walletInfo.platforms.some((w2) => ["ios", "android"].includes(w2));
}
function supportsExtension(walletInfo) {
  return walletInfo.platforms.some((w2) => ["chrome", "firefox", "safari"].includes(w2));
}
function eqWalletName(wallet1, name2) {
  if (!name2) {
    return false;
  }
  return wallet1.name.toLowerCase() === name2.toLowerCase() || wallet1.appName.toLowerCase() === name2.toLowerCase();
}
const DesktopSelectWalletModalStyled = styled$1.div`
    display: flex;
    flex-direction: column;
    align-items: center;
`;
const H1Styled$7 = styled$1(H1)`
    margin-bottom: 18px;
`;
styled$1.div`
    height: 1px;
    margin: 0 -24px;
    width: calc(100% + 48px);
    opacity: 0.12;
    background: ${(props) => props.isShown ? props.theme.colors.icon.secondary : "transparent"};
    transition: background 0.15s ease-in-out;

    ${media("mobile")} {
        width: 100%;
    }
`;
const WalletsUl = styled$1.ul`
    display: grid;
    grid-template-columns: repeat(auto-fit, 92px);
    grid-template-rows: auto;
    align-content: flex-start;
    justify-content: center;
    row-gap: 8px;
    width: 100%;
    padding: 0 0 16px;
    align-self: flex-start;
    max-width: 400px;
    margin: 0 auto;

    > li {
        display: block;
        height: fit-content;
    }

    ${media("mobile")} {
        grid-template-columns: repeat(auto-fit, 82px);
    }
`;
styled$1(Button$1)`
    display: block;
    margin: 0 auto 1px;
    font-size: 15px;
`;
const StyledIconButton$3 = styled$1(IconButton)`
    position: absolute;
    top: 16px;
    left: 16px;
`;
const WalletLabeledItemStyled = styled$1(WalletLabeledItem)`
    height: 100%;
`;
const _tmpl$$2 = /* @__PURE__ */ template$1(`<li></li>`);
const AllWalletsListModal = (props) => {
  const maxHeight = () => isMobile() ? void 0 : 510;
  const walletsList = () => isMobile() ? props.walletsList.filter(supportsMobile) : props.walletsList;
  return createComponent(DesktopSelectWalletModalStyled, {
    "data-tc-wallets-modal-list": "true",
    get children() {
      return [createComponent(StyledIconButton$3, {
        icon: "arrow",
        onClick: () => props.onBack()
      }), createComponent(H1Styled$7, {
        translationKey: "walletModal.wallets",
        children: "Wallets"
      }), createComponent(ScrollContainer, {
        get maxHeight() {
          return maxHeight();
        },
        get children() {
          return createComponent(WalletsUl, {
            get children() {
              return createComponent(For, {
                get each() {
                  return walletsList();
                },
                children: (wallet) => (() => {
                  const _el$ = _tmpl$$2.cloneNode(true);
                  insert(_el$, createComponent(WalletLabeledItemStyled, {
                    wallet,
                    onClick: () => props.onSelect(wallet)
                  }));
                  return _el$;
                })()
              });
            }
          });
        }
      })];
    }
  });
};
const tgButtonBorders = {
  m: "16px",
  s: "12px",
  none: "0"
};
const tgIconBorders = {
  m: "6px",
  s: "6px",
  none: "0"
};
const DesktopConnectionModalStyled = styled$1.div`
    display: flex;
    flex-direction: column;
`;
const BodyStyled$1 = styled$1.div`
    flex: 1;
    margin-top: ${(props) => props.qr ? "0" : "18px"};
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 232px;
`;
const QRCodeStyled$1 = styled$1(QRCode)`
    margin-bottom: 24px;
`;
const H1Styled$6 = styled$1(H1)`
    max-width: 288px;
    margin: 0 auto 2px;
`;
const H2Styled$4 = styled$1(H2)`
    max-width: 288px;
    text-align: center;
    margin: 0 auto 20px;
`;
const StyledIconButton$2 = styled$1(IconButton)`
    position: absolute;
    top: 16px;
    left: 16px;
`;
const ButtonsContainerStyled$1 = styled$1.div`
    display: flex;
    justify-content: center;
    gap: 8px;
    padding-bottom: 16px;
`;
const BottomButtonsContainerStyled = styled$1(ButtonsContainerStyled$1)`
    padding-bottom: 0;
`;
const FooterButton$1 = styled$1(Button$1)`
    margin-bottom: 24px;
`;
const LoaderStyled$1 = styled$1(LoaderIcon)`
    margin-bottom: 18px;
    margin-top: 2px;
`;
const ErrorIconStyled$1 = styled$1(ErrorIcon)`
    margin-bottom: 16px;
`;
const BodyTextStyled$1 = styled$1(H2)`
    color: ${(props) => props.theme.colors.text.secondary};
    text-align: center;
    margin-bottom: 20px;
`;
const TgButtonStyled = styled$1(Button$1)`
    margin-top: -8px;
    margin-bottom: 24px;
    width: 100%;
    padding: 12px 12px 12px 20px;
    border-radius: ${(props) => tgButtonBorders[props.theme.borderRadius]};
    font-size: 16px;
    line-height: 20px;
`;
const TgImageStyled = styled$1(Image)`
    width: 32px;
    height: 32px;
    border-radius: ${(props) => tgIconBorders[props.theme.borderRadius]};
`;
const Translation = (props) => {
  const [t2] = useI18n();
  return createMemo(() => {
    var _a2;
    return t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString());
  });
};
function addReturnStrategy(url, strategy) {
  let returnStrategy;
  if (typeof strategy === "string") {
    returnStrategy = strategy;
  } else {
    returnStrategy = isInTMA() ? strategy.twaReturnUrl || strategy.returnStrategy : "none";
  }
  const newUrl = addQueryParameter(url, "ret", returnStrategy);
  if (!isTelegramUrl(url)) {
    return newUrl;
  }
  const lastParam = newUrl.slice(newUrl.lastIndexOf("&") + 1);
  return newUrl.slice(0, newUrl.lastIndexOf("&")) + "-" + encodeTelegramUrlParameters(lastParam);
}
function redirectToTelegram(universalLink, options) {
  options = __spreadValues$1({}, options);
  const directLink = convertToTGDirectLink(universalLink);
  const directLinkUrl = new URL(directLink);
  if (!directLinkUrl.searchParams.has("startapp")) {
    directLinkUrl.searchParams.append("startapp", "tonconnect");
  }
  if (isInTelegramBrowser()) {
    options.returnStrategy = "back";
    const linkWitStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);
    openLinkBlank(linkWitStrategy);
  } else if (isInTMA()) {
    if (isTmaPlatform("ios", "android", "macos", "tdesktop", "web")) {
      options.returnStrategy = "back";
      const linkWitStrategy = addReturnStrategy(
        directLinkUrl.toString(),
        options.returnStrategy
      );
      sendOpenTelegramLink(linkWitStrategy);
    } else if (isTmaPlatform("weba")) {
      sendOpenTelegramLink(addReturnStrategy(directLinkUrl.toString(), options));
    } else {
      openLinkBlank(addReturnStrategy(directLinkUrl.toString(), options));
    }
  } else {
    if (isOS("ios")) {
      if (options.returnStrategy === "back") {
        if (isBrowser("safari")) {
          options.returnStrategy = "back";
        } else if (isBrowser("chrome")) {
          options.returnStrategy = "googlechrome://";
        } else if (isBrowser("firefox")) {
          options.returnStrategy = "firefox://";
        } else if (isBrowser("opera")) {
          options.returnStrategy = "opera-http://";
        } else {
          options.returnStrategy = location.href;
        }
      }
      const isChrome = isBrowser("chrome");
      const isFirefox = isBrowser("firefox");
      const useDeepLink = (isChrome || isFirefox) && !options.forceRedirect;
      if (useDeepLink) {
        const linkWithStrategy = addReturnStrategy(
          directLinkUrl.toString(),
          options.returnStrategy
        );
        const deepLink = convertToTGDeepLink(linkWithStrategy);
        openDeeplinkWithFallback(deepLink, () => openLinkBlank(linkWithStrategy));
      } else {
        const linkWithStrategy = addReturnStrategy(
          directLinkUrl.toString(),
          options.returnStrategy
        );
        openLinkBlank(linkWithStrategy);
      }
    } else if (isOS("android")) {
      options.returnStrategy = "back";
      const isChrome = isBrowser("chrome");
      const isFirefox = isBrowser("firefox");
      const useDeepLink = (isChrome || isFirefox) && !options.forceRedirect;
      if (useDeepLink) {
        const linkWithStrategy = addReturnStrategy(
          directLinkUrl.toString(),
          options.returnStrategy
        );
        const deepLink = convertToTGDeepLink(linkWithStrategy);
        openDeeplinkWithFallback(deepLink, () => openLinkBlank(linkWithStrategy));
      } else {
        const linkWithStrategy = addReturnStrategy(
          directLinkUrl.toString(),
          options.returnStrategy
        );
        openLinkBlank(linkWithStrategy);
      }
    } else if (isOS("ipad")) {
      if (options.returnStrategy === "back") {
        if (isBrowser("safari")) {
          options.returnStrategy = "back";
        } else if (isBrowser("chrome")) {
          options.returnStrategy = "googlechrome://";
        } else if (isBrowser("firefox")) {
          options.returnStrategy = "firefox://";
        } else if (isBrowser("opera")) {
          options.returnStrategy = "opera-http://";
        } else {
          options.returnStrategy = location.href;
        }
      }
      const isChrome = isBrowser("chrome");
      const isFirefox = isBrowser("firefox");
      const useDeepLink = (isChrome || isFirefox) && !options.forceRedirect;
      const linkWithStrategy = addReturnStrategy(
        directLinkUrl.toString(),
        options.returnStrategy
      );
      if (useDeepLink) {
        const deepLink = convertToTGDeepLink(linkWithStrategy);
        openDeeplinkWithFallback(deepLink, () => openLinkBlank(linkWithStrategy));
      } else {
        openLinkBlank(linkWithStrategy);
      }
    } else if (isOS("macos", "windows", "linux")) {
      options.returnStrategy = "back";
      options.twaReturnUrl = void 0;
      const linkWithStrategy = addReturnStrategy(
        directLinkUrl.toString(),
        options.returnStrategy
      );
      if (options.forceRedirect) {
        openLinkBlank(linkWithStrategy);
      } else {
        const deepLink = convertToTGDeepLink(linkWithStrategy);
        openDeeplinkWithFallback(deepLink, () => openLinkBlank(linkWithStrategy));
      }
    } else {
      openLinkBlank(addReturnStrategy(directLinkUrl.toString(), options));
    }
  }
}
function redirectToWallet(universalLink, deepLink, options, setOpenMethod) {
  options = __spreadValues$1({}, options);
  if (isInTelegramBrowser()) {
    if (isOS("ios", "android")) {
      if (options.returnStrategy === "back") {
        options.returnStrategy = "tg://resolve";
      }
      setOpenMethod("universal-link");
      openLink(addReturnStrategy(universalLink, options.returnStrategy), "_self");
    } else {
      setOpenMethod("universal-link");
      const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);
      openLinkBlank(linkWitStrategy);
    }
  } else if (isInTMA()) {
    if (isTmaPlatform("ios", "android")) {
      if (options.returnStrategy === "back") {
        options.returnStrategy = "tg://resolve";
      }
      setOpenMethod("universal-link");
      const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);
      sendOpenTelegramLink(linkWitStrategy, () => {
        setOpenMethod("universal-link");
        openLinkBlank(linkWitStrategy);
      });
    } else if (isTmaPlatform("macos", "tdesktop")) {
      if (options.returnStrategy === "back") {
        options.returnStrategy = "tg://resolve";
      }
      const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);
      const useDeepLink = !!deepLink && !options.forceRedirect;
      if (useDeepLink) {
        setOpenMethod("custom-deeplink");
        openDeeplinkWithFallback(toDeeplink(linkWitStrategy, deepLink), () => {
          setOpenMethod("universal-link");
          openLinkBlank(linkWitStrategy);
        });
      } else {
        setOpenMethod("universal-link");
        openLinkBlank(linkWitStrategy);
      }
    } else if (isTmaPlatform("weba")) {
      if (options.returnStrategy === "back") {
        if (isBrowser("safari")) {
          options.returnStrategy = location.href;
        } else if (isBrowser("chrome")) {
          options.returnStrategy = "googlechrome://";
        } else if (isBrowser("firefox")) {
          options.returnStrategy = "firefox://";
        } else if (isBrowser("opera")) {
          options.returnStrategy = "opera-http://";
        } else {
          options.returnStrategy = location.href;
        }
      }
      const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);
      const useDeepLink = !!deepLink && !options.forceRedirect;
      if (useDeepLink) {
        setOpenMethod("custom-deeplink");
        openDeeplinkWithFallback(toDeeplink(linkWitStrategy, deepLink), () => {
          setOpenMethod("universal-link");
          openLinkBlank(linkWitStrategy);
        });
      } else {
        setOpenMethod("universal-link");
        openLinkBlank(linkWitStrategy);
      }
    } else if (isTmaPlatform("web")) {
      if (options.returnStrategy === "back") {
        if (isBrowser("safari")) {
          options.returnStrategy = location.href;
        } else if (isBrowser("chrome")) {
          options.returnStrategy = "googlechrome://";
        } else if (isBrowser("firefox")) {
          options.returnStrategy = "firefox://";
        } else if (isBrowser("opera")) {
          options.returnStrategy = "opera-http://";
        } else {
          options.returnStrategy = location.href;
        }
      }
      const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);
      const useDeepLink = !!deepLink && !options.forceRedirect;
      if (useDeepLink) {
        setOpenMethod("custom-deeplink");
        openDeeplinkWithFallback(toDeeplink(linkWitStrategy, deepLink), () => {
          setOpenMethod("universal-link");
          openLinkBlank(linkWitStrategy);
        });
      } else {
        setOpenMethod("universal-link");
        openLinkBlank(linkWitStrategy);
      }
    } else {
      setOpenMethod("universal-link");
      const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);
      openLinkBlank(linkWitStrategy);
    }
  } else {
    if (isOS("ios")) {
      if (options.returnStrategy === "back") {
        if (isBrowser("safari")) {
          options.returnStrategy = "none";
        } else if (isBrowser("chrome")) {
          options.returnStrategy = "googlechrome://";
        } else if (isBrowser("firefox")) {
          options.returnStrategy = "firefox://";
        } else if (isBrowser("opera")) {
          options.returnStrategy = "opera-http://";
        } else {
          options.returnStrategy = location.href;
        }
      }
      if (isBrowser("chrome")) {
        setOpenMethod("universal-link");
        openLink(addReturnStrategy(universalLink, options.returnStrategy), "_self");
      } else {
        setOpenMethod("universal-link");
        openLinkBlank(addReturnStrategy(universalLink, options.returnStrategy));
      }
    } else if (isOS("android")) {
      if (options.returnStrategy === "back") {
        if (isBrowser("chrome")) {
          options.returnStrategy = "googlechrome://";
        } else if (isBrowser("firefox")) {
          options.returnStrategy = "firefox://";
        } else if (isBrowser("opera")) {
          options.returnStrategy = "opera-http://";
        } else {
          options.returnStrategy = location.href;
        }
      }
      setOpenMethod("universal-link");
      openLinkBlank(addReturnStrategy(universalLink, options.returnStrategy));
    } else if (isOS("ipad")) {
      if (options.returnStrategy === "back") {
        if (isBrowser("safari")) {
          options.returnStrategy = "none";
        } else if (isBrowser("chrome")) {
          options.returnStrategy = "googlechrome://";
        } else if (isBrowser("firefox")) {
          options.returnStrategy = "firefox://";
        } else if (isBrowser("opera")) {
          options.returnStrategy = "opera-http://";
        } else {
          options.returnStrategy = location.href;
        }
      }
      if (isBrowser("chrome")) {
        setOpenMethod("universal-link");
        openLink(addReturnStrategy(universalLink, options.returnStrategy), "_self");
      } else {
        setOpenMethod("universal-link");
        openLinkBlank(addReturnStrategy(universalLink, options.returnStrategy));
      }
    } else if (isOS("macos", "windows", "linux")) {
      if (options.returnStrategy === "back") {
        if (isBrowser("safari")) {
          options.returnStrategy = "none";
        } else if (isBrowser("chrome")) {
          options.returnStrategy = "googlechrome://";
        } else if (isBrowser("firefox")) {
          options.returnStrategy = "firefox://";
        } else if (isBrowser("opera")) {
          options.returnStrategy = "opera-http://";
        } else {
          options.returnStrategy = "none";
        }
      }
      const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);
      const useDeepLink = !!deepLink && !options.forceRedirect;
      if (useDeepLink) {
        setOpenMethod("custom-deeplink");
        openDeeplinkWithFallback(toDeeplink(linkWitStrategy, deepLink), () => {
          setOpenMethod("universal-link");
          openLinkBlank(linkWitStrategy);
        });
      } else {
        setOpenMethod("universal-link");
        openLinkBlank(linkWitStrategy);
      }
    } else {
      setOpenMethod("universal-link");
      openLinkBlank(addReturnStrategy(universalLink, options.returnStrategy));
    }
  }
}
function addQueryParameter(url, key2, value) {
  const parsed = new URL(url);
  parsed.searchParams.append(key2, value);
  return parsed.toString();
}
function convertToTGDirectLink(universalLink) {
  const url = new URL(universalLink);
  if (url.searchParams.has("attach")) {
    url.searchParams.delete("attach");
    url.pathname += "/start";
  }
  return url.toString();
}
function convertToTGDeepLink(directLink) {
  const parsed = new URL(directLink);
  const [, domain, appname] = parsed.pathname.split("/");
  const startapp = parsed.searchParams.get("startapp");
  return `tg://resolve?domain=${domain}&appname=${appname}&startapp=${startapp}`;
}
const DesktopConnectionModal = (props) => {
  const [mode, setMode] = createSignal("mobile");
  const [connectionErrored, setConnectionErrored] = createSignal(false);
  const [universalLink, setUniversalLink] = createSignal();
  const [firstClick, setFirstClick] = createSignal(true);
  const connector = useContext(ConnectorContext);
  const unsubscribe = connector.onStatusChange(() => {
  }, () => {
    if (props.wallet.appName !== AT_WALLET_APP_NAME) {
      setConnectionErrored(true);
    }
  });
  onCleanup(unsubscribe);
  const generateUniversalLink = () => {
    try {
      const universalLink2 = connector.connect({
        universalLink: props.wallet.universalLink,
        bridgeUrl: props.wallet.bridgeUrl
      }, props.additionalRequest);
      setUniversalLink(universalLink2);
    } catch (e2) {
    }
  };
  createEffect(() => {
    if (untrack(mode) !== "extension" && (supportsMobile(props.wallet) || supportsDesktop(props.wallet))) {
      generateUniversalLink();
    }
  });
  const onClickMobile = () => {
    setConnectionErrored(false);
    if (mode() === "extension") {
      generateUniversalLink();
    }
    setMode("mobile");
    setLastSelectedWalletInfo(__spreadProps(__spreadValues$1({}, props.wallet), {
      openMethod: "qrcode"
    }));
  };
  const onClickDesktop = () => {
    setConnectionErrored(false);
    if (mode() === "extension") {
      generateUniversalLink();
    }
    setMode("desktop");
    if (isTelegramUrl(universalLink())) {
      onClickTelegram();
    } else {
      const forceRedirect = !firstClick();
      setFirstClick(false);
      redirectToWallet(universalLink(), props.wallet.deepLink, {
        returnStrategy: appState.returnStrategy,
        forceRedirect
      }, (method) => {
        setLastSelectedWalletInfo(__spreadProps(__spreadValues$1({}, props.wallet), {
          openMethod: method
        }));
      });
    }
  };
  const onClickTelegram = () => {
    const forceRedirect = !firstClick();
    setFirstClick(false);
    setLastSelectedWalletInfo(__spreadProps(__spreadValues$1({}, props.wallet), {
      openMethod: "universal-link"
    }));
    redirectToTelegram(universalLink(), {
      returnStrategy: appState.returnStrategy,
      twaReturnUrl: appState.twaReturnUrl,
      forceRedirect
    });
  };
  const onClickExtension = () => {
    setConnectionErrored(false);
    setMode("extension");
    if (isWalletInfoCurrentlyInjected(props.wallet)) {
      setLastSelectedWalletInfo(props.wallet);
      connector.connect({
        jsBridgeKey: props.wallet.jsBridgeKey
      }, props.additionalRequest);
    }
  };
  if (supportsMobile(props.wallet)) {
    onClickMobile();
  } else if (supportsExtension(props.wallet)) {
    onClickExtension();
  } else {
    onClickDesktop();
  }
  return createComponent(DesktopConnectionModalStyled, {
    "data-tc-wallets-modal-connection-desktop": "true",
    get children() {
      return [createComponent(Show, {
        get when() {
          return !props.backDisabled;
        },
        get children() {
          return createComponent(StyledIconButton$2, {
            icon: "arrow",
            onClick: () => props.onBackClick()
          });
        }
      }), createComponent(H1Styled$6, {
        get children() {
          return props.wallet.name;
        }
      }), createComponent(Show, {
        get when() {
          return mode() === "mobile";
        },
        get children() {
          return createComponent(H2Styled$4, {
            translationKey: "walletModal.desktopConnectionModal.scanQR",
            get translationValues() {
              return {
                name: props.wallet.name
              };
            },
            get children() {
              return ["Scan the QR code below with your phone’s or ", createMemo(() => props.wallet.name), "’s camera"];
            }
          });
        }
      }), createComponent(BodyStyled$1, {
        get qr() {
          return mode() === "mobile";
        },
        get children() {
          return createComponent(Switch, {
            get children() {
              return [createComponent(Match, {
                get when() {
                  return mode() === "mobile";
                },
                get children() {
                  return createComponent(QRCodeStyled$1, {
                    disableCopy: false,
                    get sourceUrl() {
                      return addReturnStrategy(universalLink(), "none");
                    },
                    get imageUrl() {
                      return props.wallet.imageUrl;
                    }
                  });
                }
              }), createComponent(Match, {
                get when() {
                  return connectionErrored();
                },
                get children() {
                  return [createComponent(ErrorIconStyled$1, {
                    size: "s"
                  }), createComponent(BodyTextStyled$1, {
                    translationKey: "walletModal.desktopConnectionModal.connectionDeclined",
                    children: "Connection declined"
                  }), createComponent(ButtonsContainerStyled$1, {
                    get children() {
                      return createComponent(Button$1, {
                        get leftIcon() {
                          return createComponent(RetryIcon, {});
                        },
                        get onClick() {
                          return mode() === "extension" ? onClickExtension : onClickDesktop;
                        },
                        get children() {
                          return createComponent(Translation, {
                            translationKey: "common.retry",
                            children: "Retry"
                          });
                        }
                      });
                    }
                  })];
                }
              }), createComponent(Match, {
                get when() {
                  return mode() === "extension";
                },
                get children() {
                  return [createComponent(Show, {
                    get when() {
                      return isWalletInfoCurrentlyInjected(props.wallet);
                    },
                    get children() {
                      return [createComponent(LoaderStyled$1, {
                        size: "s"
                      }), createComponent(BodyTextStyled$1, {
                        translationKey: "walletModal.desktopConnectionModal.continueInExtension",
                        get translationValues() {
                          return {
                            name: props.wallet.name
                          };
                        },
                        get children() {
                          return ["Continue in ", createMemo(() => props.wallet.name), " browser extension…"];
                        }
                      }), createComponent(ButtonsContainerStyled$1, {
                        get children() {
                          return createComponent(Button$1, {
                            get leftIcon() {
                              return createComponent(RetryIcon, {});
                            },
                            onClick: onClickExtension,
                            get children() {
                              return createComponent(Translation, {
                                translationKey: "common.retry",
                                children: "Retry"
                              });
                            }
                          });
                        }
                      })];
                    }
                  }), createComponent(Show, {
                    get when() {
                      return !isWalletInfoCurrentlyInjected(props.wallet);
                    },
                    get children() {
                      return [createComponent(BodyTextStyled$1, {
                        translationKey: "walletModal.desktopConnectionModal.dontHaveExtension",
                        get translationValues() {
                          return {
                            name: props.wallet.name
                          };
                        },
                        get children() {
                          return ["Seems you don't have installed ", createMemo(() => props.wallet.name), " browser extension"];
                        }
                      }), createComponent(ButtonsContainerStyled$1, {
                        get children() {
                          return createComponent(Link, {
                            get href() {
                              return props.wallet.aboutUrl;
                            },
                            blank: true,
                            get children() {
                              return createComponent(Button$1, {
                                get rightIcon() {
                                  return createComponent(LinkIcon, {});
                                },
                                onClick: onClickExtension,
                                get children() {
                                  return createComponent(Translation, {
                                    translationKey: "walletModal.desktopConnectionModal.getWallet",
                                    get translationValues() {
                                      return {
                                        name: props.wallet.name
                                      };
                                    },
                                    get children() {
                                      return ["Get ", createMemo(() => props.wallet.name)];
                                    }
                                  });
                                }
                              });
                            }
                          });
                        }
                      })];
                    }
                  })];
                }
              }), createComponent(Match, {
                get when() {
                  return mode() === "desktop";
                },
                get children() {
                  return [createComponent(LoaderIcon, {
                    size: "m"
                  }), createComponent(BodyTextStyled$1, {
                    translationKey: "walletModal.desktopConnectionModal.continueOnDesktop",
                    get translationValues() {
                      return {
                        name: props.wallet.name
                      };
                    },
                    get children() {
                      return ["Continue in ", createMemo(() => props.wallet.name), " on desktop…"];
                    }
                  }), createComponent(ButtonsContainerStyled$1, {
                    get children() {
                      return [createComponent(Button$1, {
                        get leftIcon() {
                          return createComponent(RetryIcon, {});
                        },
                        onClick: onClickDesktop,
                        get children() {
                          return createComponent(Translation, {
                            translationKey: "common.retry",
                            children: "Retry"
                          });
                        }
                      }), createComponent(Link, {
                        get href() {
                          return props.wallet.aboutUrl;
                        },
                        blank: true,
                        get children() {
                          return createComponent(Button$1, {
                            get rightIcon() {
                              return createComponent(LinkIcon, {});
                            },
                            get children() {
                              return createComponent(Translation, {
                                translationKey: "walletModal.desktopConnectionModal.getWallet",
                                get translationValues() {
                                  return {
                                    name: props.wallet.name
                                  };
                                },
                                get children() {
                                  return ["Get ", createMemo(() => props.wallet.name)];
                                }
                              });
                            }
                          });
                        }
                      })];
                    }
                  })];
                }
              })];
            }
          });
        }
      }), createComponent(Show, {
        get when() {
          return props.wallet.appName === AT_WALLET_APP_NAME;
        },
        get children() {
          return createComponent(TgButtonStyled, {
            get rightIcon() {
              return createComponent(TgImageStyled, {
                get src() {
                  return IMG.TG;
                }
              });
            },
            scale: "s",
            onClick: onClickTelegram,
            get children() {
              return createComponent(Translation, {
                translationKey: "walletModal.desktopConnectionModal.openWalletOnTelegram",
                children: "Open Wallet in Telegram on desktop"
              });
            }
          });
        }
      }), createComponent(Show, {
        get when() {
          return props.wallet.appName !== AT_WALLET_APP_NAME;
        },
        get children() {
          return createComponent(BottomButtonsContainerStyled, {
            get children() {
              return [createComponent(Show, {
                get when() {
                  return createMemo(() => mode() !== "mobile")() && supportsMobile(props.wallet);
                },
                get children() {
                  return createComponent(FooterButton$1, {
                    appearance: "secondary",
                    get leftIcon() {
                      return createComponent(MobileIcon, {});
                    },
                    onClick: onClickMobile,
                    get children() {
                      return createComponent(Translation, {
                        translationKey: "common.mobile",
                        children: "Mobile"
                      });
                    }
                  });
                }
              }), createComponent(Show, {
                get when() {
                  return createMemo(() => mode() !== "extension")() && supportsExtension(props.wallet);
                },
                get children() {
                  return createComponent(FooterButton$1, {
                    appearance: "secondary",
                    get leftIcon() {
                      return createComponent(BrowserIcon, {});
                    },
                    onClick: onClickExtension,
                    get children() {
                      return createComponent(Translation, {
                        translationKey: "common.browserExtension",
                        children: "Browser Extension"
                      });
                    }
                  });
                }
              }), createComponent(Show, {
                get when() {
                  return createMemo(() => mode() !== "desktop")() && supportsDesktop(props.wallet);
                },
                get children() {
                  return createComponent(FooterButton$1, {
                    appearance: "secondary",
                    get leftIcon() {
                      return createComponent(DesktopIcon, {});
                    },
                    onClick: onClickDesktop,
                    get children() {
                      return createComponent(Translation, {
                        translationKey: "common.desktop",
                        children: "Desktop"
                      });
                    }
                  });
                }
              })];
            }
          });
        }
      })];
    }
  });
};
const InfoModalStyled = styled$1.div``;
const StyledIconButton$1 = styled$1(IconButton)`
    position: absolute;
    top: 16px;
    left: 16px;
`;
const H1Styled$5 = styled$1(H1)`
    margin-bottom: 18px;
`;
const InfoBlock = styled$1.div`
    padding: 16px 0;
    display: flex;
    flex-direction: column;
    align-items: center;
`;
const InfoBlockIconClass = u`
    margin-bottom: 12px;
`;
const H3Styled = styled$1(H3)`
    text-align: center;
    margin-bottom: 4px;
`;
const TextStyled$1 = styled$1(Text)`
    text-align: center;
    max-width: 352px;
    color: ${(props) => props.theme.colors.text.secondary};
`;
const ButtonsBlock = styled$1.div`
    padding: 16px 24px 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
`;
const LINKS = {
  GET_A_WALLET: "https://ton.org/wallets?filters[wallet_features][slug][$in]=dapp-auth&pagination[limit]=-1"
};
const InfoModal = (props) => {
  return createComponent(InfoModalStyled, {
    "data-tc-wallets-modal-info": "true",
    get children() {
      return [createComponent(StyledIconButton$1, {
        icon: "arrow",
        onClick: () => props.onBackClick()
      }), createComponent(H1Styled$5, {
        translationKey: "walletModal.infoModal.whatIsAWallet",
        children: "What is a wallet"
      }), createComponent(ScrollContainer, {
        get children() {
          return [createComponent(InfoBlock, {
            get children() {
              return [createComponent(SecurityIcon, {
                "class": InfoBlockIconClass
              }), createComponent(H3Styled, {
                translationKey: "walletModal.infoModal.secureDigitalAssets",
                children: "Secure digital assets storage"
              }), createComponent(TextStyled$1, {
                translationKey: "walletModal.infoModal.walletProtects",
                children: "A wallet protects and manages your digital assets including TON, tokens and collectables."
              })];
            }
          }), createComponent(InfoBlock, {
            get children() {
              return [createComponent(PersonalityIcon, {
                "class": InfoBlockIconClass
              }), createComponent(H3Styled, {
                translationKey: "walletModal.infoModal.controlIdentity",
                children: "Control your Web3 identity"
              }), createComponent(TextStyled$1, {
                translationKey: "walletModal.infoModal.manageIdentity",
                children: "Manage your digital identity and access decentralized applications with ease. Maintain control over your data and engage securely in the blockchain ecosystem."
              })];
            }
          }), createComponent(InfoBlock, {
            get children() {
              return [createComponent(SwapIcon, {
                "class": InfoBlockIconClass
              }), createComponent(H3Styled, {
                translationKey: "walletModal.infoModal.effortlessCryptoTransactions",
                children: "Effortless crypto transactions"
              }), createComponent(TextStyled$1, {
                translationKey: "walletModal.infoModal.easilySend",
                children: "Easily send, receive, monitor your cryptocurrencies. Streamline your operations with decentralized applications."
              })];
            }
          }), createComponent(ButtonsBlock, {
            get children() {
              return createComponent(Link, {
                get href() {
                  return LINKS.GET_A_WALLET;
                },
                blank: true,
                get children() {
                  return createComponent(Button$1, {
                    get rightIcon() {
                      return createComponent(WalletIcon, {});
                    },
                    get children() {
                      return createComponent(Translation, {
                        translationKey: "walletModal.infoModal.getAWallet",
                        children: "Get a Wallet"
                      });
                    }
                  });
                }
              });
            }
          })];
        }
      })];
    }
  });
};
const MobileConnectionModalStyled = styled$1.div``;
const BodyStyled = styled$1.div`
    flex: 1;
    margin-top: 18px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 232px;
`;
const H1Styled$4 = styled$1(H1)`
    max-width: 262px;
    margin: 0 auto 8px;
`;
const StyledIconButton = styled$1(IconButton)`
    position: absolute;
    top: 16px;
    left: 16px;
`;
const FooterStyled = styled$1.div`
    padding: 16px;
    display: flex;
    align-items: center;
    gap: 12px;
    border-top: 0.5px solid ${(props) => rgba(props.theme.colors.icon.secondary, 0.2)};
`;
const ImageStyled = styled$1(Image)`
    width: 36px;
    height: 36px;
    border-radius: 10px;
`;
const FooterButton = styled$1(Link)`
    margin-left: auto;
`;
const LoaderStyled = styled$1(LoaderIcon)`
    margin-bottom: 18px;
    margin-top: 2px;
`;
const ErrorIconStyled = styled$1(ErrorIcon)`
    margin-bottom: 16px;
`;
const BodyTextStyled = styled$1(H2)`
    color: ${(props) => props.theme.colors.text.secondary};
    text-align: center;
    margin-bottom: 20px;
`;
const ButtonsContainerStyled = styled$1.div`
    display: flex;
    justify-content: center;
    gap: 8px;
    padding-bottom: 16px;
`;
const H1Styled$3 = styled$1(H1)`
    margin-bottom: 2px;
    padding: 0 64px;
`;
const H2Styled$3 = styled$1(H2)`
    margin-bottom: 20px;
    padding: 0 64px;
    min-height: 44px;
`;
const QrCodeWrapper$1 = styled$1.div`
    padding: 0 24px 24px;
`;
const MobileConnectionQR = (props) => {
  return [createComponent(H1Styled$3, {
    get children() {
      return props.walletInfo.name;
    }
  }), createComponent(H2Styled$3, {
    translationKey: "walletModal.mobileConnectionModal.scanQR",
    get translationValues() {
      return {
        name: props.walletInfo.name
      };
    },
    get children() {
      return ["Scan the QR code below with your phone’s or ", createMemo(() => props.walletInfo.name), "’s camera"];
    }
  }), createComponent(QrCodeWrapper$1, {
    get children() {
      return createComponent(QRCode, {
        get imageUrl() {
          return props.walletInfo.imageUrl;
        },
        get sourceUrl() {
          return addReturnStrategy(props.universalLink, "none");
        },
        disableCopy: true
      });
    }
  })];
};
const MobileConnectionModal = (props) => {
  const theme = useTheme();
  const [firstClick, setFirstClick] = createSignal(true);
  const [showQR, setShowQR] = createSignal(false);
  const [connectionErrored, setConnectionErrored] = createSignal(false);
  const connector = useContext(ConnectorContext);
  const unsubscribe = connector.onStatusChange(() => {
  }, () => {
    setConnectionErrored(true);
  });
  const universalLink = createMemo(() => connector.connect({
    universalLink: props.wallet.universalLink,
    bridgeUrl: props.wallet.bridgeUrl
  }, props.additionalRequest));
  const onClickTelegram = () => {
    const alwaysForceRedirect = true;
    setLastSelectedWalletInfo(__spreadProps(__spreadValues$1({}, props.wallet), {
      openMethod: "universal-link"
    }));
    redirectToTelegram(universalLink(), {
      returnStrategy: appState.returnStrategy,
      twaReturnUrl: appState.twaReturnUrl,
      forceRedirect: alwaysForceRedirect
    });
  };
  const onRetry = () => {
    const currentUniversalLink = universalLink();
    if (isTelegramUrl(currentUniversalLink)) {
      return onClickTelegram();
    }
    setConnectionErrored(false);
    const forceRedirect = !firstClick();
    setFirstClick(false);
    redirectToWallet(universalLink(), props.wallet.deepLink, {
      returnStrategy: appState.returnStrategy,
      forceRedirect
    }, (method) => {
      setLastSelectedWalletInfo(__spreadProps(__spreadValues$1({}, props.wallet), {
        openMethod: method
      }));
    });
  };
  const onOpenQR = () => {
    setConnectionErrored(false);
    setShowQR(true);
    setLastSelectedWalletInfo(__spreadProps(__spreadValues$1({}, props.wallet), {
      openMethod: "qrcode"
    }));
  };
  const onCloseQR = () => {
    setShowQR(false);
    setLastSelectedWalletInfo(__spreadProps(__spreadValues$1({}, props.wallet), {
      openMethod: "universal-link"
    }));
  };
  const onBack = () => {
    if (showQR()) {
      onCloseQR();
    } else {
      props.onBackClick();
    }
  };
  onCleanup(unsubscribe);
  onRetry();
  return createComponent(MobileConnectionModalStyled, {
    "data-tc-wallets-modal-connection-mobile": "true",
    get children() {
      return [createComponent(Show, {
        get when() {
          return !props.backDisabled || showQR();
        },
        get children() {
          return createComponent(StyledIconButton, {
            icon: "arrow",
            onClick: onBack
          });
        }
      }), createComponent(Show, {
        get when() {
          return showQR();
        },
        get children() {
          return createComponent(MobileConnectionQR, {
            get universalLink() {
              return universalLink();
            },
            get walletInfo() {
              return props.wallet;
            }
          });
        }
      }), createComponent(Show, {
        get when() {
          return !showQR();
        },
        get children() {
          return [createComponent(H1Styled$4, {
            get children() {
              return props.wallet.name;
            }
          }), createComponent(BodyStyled, {
            get children() {
              return [createComponent(Show, {
                get when() {
                  return connectionErrored();
                },
                get children() {
                  return [createComponent(ErrorIconStyled, {
                    size: "s"
                  }), createComponent(BodyTextStyled, {
                    translationKey: "walletModal.mobileConnectionModal.connectionDeclined",
                    children: "Connection declined"
                  }), createComponent(ButtonsContainerStyled, {
                    get children() {
                      return [createComponent(Button$1, {
                        get leftIcon() {
                          return createComponent(RetryIcon, {});
                        },
                        onClick: onRetry,
                        get children() {
                          return createComponent(Translation, {
                            translationKey: "common.retry",
                            children: "Retry"
                          });
                        }
                      }), createComponent(Button$1, {
                        get leftIcon() {
                          return createComponent(QRIcon, {
                            get fill() {
                              return theme.colors.accent;
                            }
                          });
                        },
                        onClick: onOpenQR,
                        get children() {
                          return createComponent(Translation, {
                            translationKey: "walletModal.mobileConnectionModal.showQR",
                            children: "Show QR Code"
                          });
                        }
                      })];
                    }
                  })];
                }
              }), createComponent(Show, {
                get when() {
                  return !connectionErrored();
                },
                get children() {
                  return [createComponent(LoaderStyled, {
                    size: "s"
                  }), createComponent(BodyTextStyled, {
                    translationKey: "walletModal.mobileConnectionModal.continueIn",
                    get translationValues() {
                      return {
                        name: props.wallet.name
                      };
                    },
                    get children() {
                      return ["Continue in ", createMemo(() => props.wallet.name), "…"];
                    }
                  }), createComponent(ButtonsContainerStyled, {
                    get children() {
                      return [createComponent(Button$1, {
                        get leftIcon() {
                          return createComponent(RetryIcon, {});
                        },
                        onClick: onRetry,
                        get children() {
                          return createComponent(Translation, {
                            translationKey: "common.retry",
                            children: "Retry"
                          });
                        }
                      }), createComponent(Button$1, {
                        get leftIcon() {
                          return createComponent(QRIcon, {
                            get fill() {
                              return theme.colors.accent;
                            }
                          });
                        },
                        onClick: onOpenQR,
                        get children() {
                          return createComponent(Translation, {
                            translationKey: "walletModal.mobileConnectionModal.showQR",
                            children: "Show QR Code"
                          });
                        }
                      })];
                    }
                  })];
                }
              })];
            }
          }), createComponent(FooterStyled, {
            get children() {
              return [createComponent(ImageStyled, {
                get src() {
                  return props.wallet.imageUrl;
                }
              }), createComponent(H3, {
                get children() {
                  return props.wallet.name;
                }
              }), createComponent(FooterButton, {
                get href() {
                  return props.wallet.aboutUrl;
                },
                blank: true,
                get children() {
                  return createComponent(Button$1, {
                    get children() {
                      return createComponent(Translation, {
                        translationKey: "common.get",
                        children: "GET"
                      });
                    }
                  });
                }
              })];
            }
          })];
        }
      })];
    }
  });
};
const borders$1 = {
  m: "16px",
  s: "12px",
  none: "0"
};
const tgBorders = {
  m: "6px",
  s: "6px",
  none: "0"
};
const UlStyled = styled$1.ul`
    display: flex;
    justify-content: space-between;
    margin: 0 auto;
    width: fit-content;
    max-width: 100%;
    min-width: 100%;
    height: fit-content;
    overflow-x: auto;
    overflow-y: hidden;
    padding: 0 13px 24px;

    &&::-webkit-scrollbar {
        display: none;
    }

    -ms-overflow-style: none;
    scrollbar-width: none;

    > li {
        height: fit-content;
    }
`;
const OtherOptionButton = styled$1.li`
    width: 82px;
    min-width: 82px;
    height: 124px;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 8px 4px;

    text-align: center;
    cursor: pointer;

    transition: transform 0.1s ease-in-out;

    ${mediaNotTouch} {
        &:hover {
            transform: scale(1.04);
        }
    }

    &:active {
        transform: scale(0.96);
    }

    ${mediaTouch} {
        &:active {
            transform: scale(0.92);
        }
    }
`;
const Divider = styled$1.div`
    width: 1px;
    margin: 0 10px;
    height: 24px;
    position: relative;
    top: 26px;

    background-color: ${(props) => props.theme.colors.icon.secondary};
    opacity: 0.2;
`;
const IconContainer = styled$1.div`
    width: 60px;
    height: 60px;
    border-radius: ${(props) => borders$1[props.theme.borderRadius]};
    display: flex;
    align-items: center;
    justify-content: center;

    background-color: ${(props) => props.theme.colors.background.tint};
    margin-bottom: 8px;
`;
const H1Styled$2 = styled$1(H1)`
    margin-top: 38px;
    margin-bottom: 4px;
    padding: 0 24px;
`;
const H2Styled$2 = styled$1(H2)`
    margin-bottom: 24px;
    padding: 0 24px;
    min-height: 44px;
    max-width: ${(props) => props.maxWidth}px;
    margin-left: ${(props) => props.maxWidth ? "auto" : "0px"};
    margin-right: ${(props) => props.maxWidth ? "auto" : "0px"};
`;
styled$1(Button$1)`
    display: block;
    margin: 0 auto;
`;
const TelegramButtonStyled = styled$1(Button$1)`
    margin: 0 24px 24px;
    width: calc(100% - 48px);
    border-radius: ${(props) => borders$1[props.theme.borderRadius]};
    padding: 14px 16px 14px 14px;
    background-color: ${(props) => props.theme.colors.telegramButton};

    color: ${(props) => props.theme.colors.constant.white};
    font-weight: 510;
    font-size: 16px;
    line-height: 20px;
`;
const TGImageStyled = styled$1(Image)`
    background-color: transparent;
    border-radius: ${(props) => tgBorders[props.theme.borderRadius]};
    width: 24px;
    height: 24px;
`;
const StyledLeftActionButton = styled$1(IconButton)`
    position: absolute;
    top: 16px;
    left: 16px;
`;
const H1Styled$1 = styled$1(H1)`
    margin-bottom: 2px;
    padding: 0 64px;
`;
const H2Styled$1 = styled$1(H2)`
    margin-bottom: 20px;
    padding: 0 64px;
`;
const QrCodeWrapper = styled$1.div`
    padding: 0 24px 24px;
`;
const MobileUniversalQR = (props) => {
  return [createComponent(H1Styled$1, {
    translationKey: "walletModal.mobileUniversalModal.connectYourWallet",
    children: "Connect your wallet"
  }), createComponent(H2Styled$1, {
    translationKey: "walletModal.mobileUniversalModal.scan",
    children: "Scan with your mobile wallet"
  }), createComponent(QrCodeWrapper, {
    get children() {
      return createComponent(QRCode, {
        get imageUrl() {
          return IMG.TON;
        },
        get sourceUrl() {
          return addReturnStrategy(props.universalLink, "none");
        },
        disableCopy: true
      });
    }
  })];
};
function getUniqueBridges(walletsList) {
  const uniqueBridges = new Set(
    walletsList.filter(isWalletInfoRemote).map((item) => item.bridgeUrl)
  );
  return Array.from(uniqueBridges).map((bridgeUrl) => ({ bridgeUrl }));
}
function bridgesIsEqual(left2, right2) {
  const leftSet = new Set(left2 == null ? void 0 : left2.map((i2) => i2.bridgeUrl));
  const rightSet = new Set(right2 == null ? void 0 : right2.map((i2) => i2.bridgeUrl));
  return leftSet.size === rightSet.size && [...leftSet].every((value) => rightSet.has(value));
}
const _tmpl$$1 = /* @__PURE__ */ template$1(`<li></li>`), _tmpl$2 = /* @__PURE__ */ template$1(`<div data-tc-wallets-modal-universal-mobile="true"></div>`);
const MobileUniversalModal = (props) => {
  const [showQR, setShowQR] = createSignal(false);
  const [firstClick, setFirstClick] = createSignal(true);
  const [universalLink, setUniversalLink] = createSignal(null);
  const connector = appState.connector;
  const walletsList = () => props.walletsList.filter((w2) => supportsMobile(w2) && w2.appName !== AT_WALLET_APP_NAME);
  const shouldShowMoreButton = () => walletsList().length > 7;
  const walletsBridges = createMemo(() => getUniqueBridges(props.walletsList), null, {
    equals: bridgesIsEqual
  });
  const getUniversalLink = () => {
    if (!universalLink()) {
      setUniversalLink(connector.connect(walletsBridges(), props.additionalRequest));
    }
    return universalLink();
  };
  setLastSelectedWalletInfo({
    openMethod: "universal-link"
  });
  const [isCopiedShown, setIsCopiedShown] = createSignal(void 0);
  const onCopy = () => __async(void 0, null, function* () {
    if (isCopiedShown() !== void 0) {
      clearTimeout(isCopiedShown());
    }
    yield copyToClipboard(getUniversalLink());
    const timeoutId = setTimeout(() => setIsCopiedShown(void 0), 1500);
    setIsCopiedShown(timeoutId);
  });
  const onSelectUniversal = () => {
    const forceRedirect = !firstClick();
    setFirstClick(false);
    redirectToWallet(getUniversalLink(), void 0, {
      returnStrategy: appState.returnStrategy,
      forceRedirect
    }, (method) => {
      setLastSelectedWalletInfo({
        openMethod: method
      });
    });
  };
  const onSelectTelegram = () => {
    setUniversalLink(null);
    const atWallet = props.walletsList.find((wallet) => wallet.appName === AT_WALLET_APP_NAME);
    if (!atWallet || !isWalletInfoRemote(atWallet)) {
      throw new TonConnectUIError("@wallet bot not found in the wallets list");
    }
    const walletLink = connector.connect({
      bridgeUrl: atWallet.bridgeUrl,
      universalLink: atWallet.universalLink
    }, props.additionalRequest);
    const forceRedirect = !firstClick();
    setFirstClick(false);
    redirectToTelegram(walletLink, {
      returnStrategy: appState.returnStrategy,
      twaReturnUrl: appState.twaReturnUrl,
      forceRedirect
    });
  };
  const onOpenQR = () => {
    setShowQR(true);
    setLastSelectedWalletInfo({
      openMethod: "qrcode"
    });
  };
  const onCloseQR = () => {
    setShowQR(false);
    setLastSelectedWalletInfo({
      openMethod: "universal-link"
    });
  };
  return (() => {
    const _el$ = _tmpl$2.cloneNode(true);
    insert(_el$, createComponent(Show, {
      get when() {
        return showQR();
      },
      get children() {
        return [createComponent(StyledLeftActionButton, {
          icon: "arrow",
          onClick: onCloseQR
        }), createComponent(MobileUniversalQR, {
          get universalLink() {
            return getUniversalLink();
          }
        })];
      }
    }), null);
    insert(_el$, createComponent(Show, {
      get when() {
        return !showQR();
      },
      get children() {
        return [createComponent(StyledLeftActionButton, {
          get icon() {
            return createComponent(QRIcon, {});
          },
          onClick: onOpenQR
        }), createComponent(H1Styled$2, {
          translationKey: "walletModal.mobileUniversalModal.connectYourWallet",
          children: "Connect your wallet"
        }), createComponent(H2Styled$2, {
          translationKey: "walletModal.mobileUniversalModal.openWalletOnTelegramOrSelect",
          maxWidth: 342,
          children: "Open Wallet in Telegram or select your wallet to connect"
        }), createComponent(TelegramButtonStyled, {
          get leftIcon() {
            return createComponent(AtWalletIcon, {});
          },
          get rightIcon() {
            return createComponent(TGImageStyled, {
              get src() {
                return IMG.TG;
              }
            });
          },
          onClick: onSelectTelegram,
          scale: "s",
          get children() {
            return createComponent(Translation, {
              translationKey: "walletModal.mobileUniversalModal.openWalletOnTelegram",
              children: "Open Wallet in Telegram"
            });
          }
        }), createComponent(UlStyled, {
          get children() {
            return [createComponent(For, {
              get each() {
                return createMemo(() => !!shouldShowMoreButton())() ? walletsList().slice(0, 4) : walletsList();
              },
              children: (wallet) => (() => {
                const _el$3 = _tmpl$$1.cloneNode(true);
                insert(_el$3, createComponent(WalletItem, {
                  get icon() {
                    return wallet.imageUrl;
                  },
                  get name() {
                    return wallet.name;
                  },
                  onClick: () => props.onSelect(wallet)
                }));
                return _el$3;
              })()
            }), createComponent(Show, {
              get when() {
                return shouldShowMoreButton();
              },
              get children() {
                const _el$2 = _tmpl$$1.cloneNode(true);
                insert(_el$2, createComponent(FourWalletsItem, {
                  labelLine1: "View all",
                  labelLine2: "wallets",
                  get images() {
                    return walletsList().slice(3, 7).map((i2) => i2.imageUrl);
                  },
                  onClick: () => props.onSelectAllWallets()
                }));
                return _el$2;
              }
            }), createComponent(Divider, {
              children: " "
            }), createComponent(OtherOptionButton, {
              onClick: onSelectUniversal,
              get children() {
                return [createComponent(IconContainer, {
                  get children() {
                    return createComponent(LongArrowIcon, {});
                  }
                }), createComponent(Text, {
                  fontWeight: 590,
                  translationKey: "walletModal.mobileUniversalModal.openLink",
                  children: "Open Link"
                })];
              }
            }), createComponent(OtherOptionButton, {
              onClick: onCopy,
              get children() {
                return [createComponent(IconContainer, {
                  get children() {
                    return createMemo(() => isCopiedShown() !== void 0)() ? createComponent(DoneIcon, {}) : createComponent(CopyLightIcon, {});
                  }
                }), createComponent(Text, {
                  fontWeight: 590,
                  get translationKey() {
                    return isCopiedShown() !== void 0 ? "common.copied" : "common.copyLink";
                  },
                  get children() {
                    return isCopiedShown() !== void 0 ? "Copied" : "Copy Link";
                  }
                })];
              }
            })];
          }
        })];
      }
    }), null);
    return _el$;
  })();
};
const borders = {
  m: "16px",
  s: "8px",
  none: "0"
};
const hoverBorders = {
  m: "8px",
  s: "4px",
  none: "0"
};
const DesktopUniversalModalStyled = styled$1.div`
    display: flex;
    flex-direction: column;
    align-items: center;
    padding-bottom: 16px;
`;
const H2Styled = styled$1(H2)`
    max-width: 320px;
    margin-top: 2px;
    margin-bottom: 20px;
`;
const H2AvailableWalletsStyled = styled$1(H2)`
    margin-bottom: 16px;
`;
const QRCodeStyled = styled$1(QRCode)`
    margin-bottom: 24px;
`;
const WalletsContainerStyled = styled$1.ul`
    display: flex;
`;
styled$1.div`
    display: flex;
    gap: 16px;
    width: 100%;
`;
styled$1(Button$1)`
    position: relative;
    font-size: 16px;
    line-height: 20px;
    width: 100%;
    padding: 0 16px;
    height: 56px;
    border-radius: ${(props) => borders[props.theme.borderRadius]};

    &:hover {
        ${(props) => props.disableEventsAnimation ? "transform: unset;" : ""}
    }

    &:active {
        ${(props) => props.disableEventsAnimation ? "transform: unset;" : ""}
    }
`;
styled$1.ul`
    position: absolute;
    bottom: 100%;
    left: 0;
    margin: 0;
    padding: 8px;
    width: 188px;
    transform: translateY(-16px);

    background-color: ${(props) => props.theme.colors.background.primary};
    border-radius: ${(props) => borders[props.theme.borderRadius]};
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.16);
`;
styled$1.li`
    padding: 8px;

    display: flex;
    align-items: center;
    gap: 8px;

    cursor: pointer;
    border-radius: ${(props) => hoverBorders[props.theme.borderRadius]};

    transition: background-color, transform 0.1s ease-in-out;

    &:hover {
        background-color: ${(props) => props.theme.colors.background.secondary};
    }

    &:active {
        transform: scale(0.96);
    }
`;
styled$1(Image)`
    width: 24px;
    height: 24px;

    border-radius: 6px;
`;
styled$1.div`
    margin-top: 23px;
    margin-bottom: 1px;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
`;
styled$1(Text)`
    color: ${(props) => props.theme.colors.text.secondary};
    font-size: 16px;
`;
const _tmpl$ = /* @__PURE__ */ template$1(`<li></li>`);
const DesktopUniversalModal = (props) => {
  const [popupOpened, setPopupOpened] = createSignal(false);
  const connector = appState.connector;
  const walletsBridges = createMemo(() => getUniqueBridges(props.walletsList), null, {
    equals: bridgesIsEqual
  });
  setLastSelectedWalletInfo({
    openMethod: "qrcode"
  });
  const request2 = createMemo(() => connector.connect(walletsBridges(), props.additionalRequest));
  return createComponent(DesktopUniversalModalStyled, {
    onClick: () => setPopupOpened(false),
    "data-tc-wallets-modal-universal-desktop": "true",
    get children() {
      return [createComponent(H1, {
        translationKey: "walletModal.desktopUniversalModal.connectYourWallet",
        children: "Connect your wallet"
      }), createComponent(H2Styled, {
        translationKey: "walletModal.desktopUniversalModal.scan",
        children: "Scan with your mobile wallet"
      }), createComponent(QRCodeStyled, {
        get sourceUrl() {
          return addReturnStrategy(request2(), "none");
        },
        get disableCopy() {
          return popupOpened();
        },
        get imageUrl() {
          return IMG.TON;
        }
      }), createComponent(H2AvailableWalletsStyled, {
        translationKey: "walletModal.desktopUniversalModal.availableWallets",
        children: "Available wallets"
      }), createComponent(WalletsContainerStyled, {
        get children() {
          return [createComponent(For, {
            get each() {
              return props.walletsList.slice(0, 3);
            },
            children: (wallet) => (() => {
              const _el$ = _tmpl$.cloneNode(true);
              insert(_el$, createComponent(WalletLabeledItem, {
                wallet,
                onClick: () => props.onSelect(wallet)
              }));
              return _el$;
            })()
          }), createComponent(FourWalletsItem, {
            labelLine1: "View all",
            labelLine2: "wallets",
            get images() {
              return props.walletsList.slice(3, 7).map((i2) => i2.imageUrl);
            },
            onClick: () => props.onSelectAllWallets()
          })];
        }
      })];
    }
  });
};
const WalletsModal = () => {
  const {
    locale
  } = useI18n()[1];
  createEffect(() => locale(appState.language));
  createEffect(() => {
    if (getWalletsModalIsOpened()) {
      updateIsMobile();
    } else {
      setSelectedWalletInfo(null);
      setSelectedTab("universal");
      setInfoTab(false);
    }
  });
  const connector = useContext(ConnectorContext);
  const tonConnectUI2 = useContext(TonConnectUiContext);
  const [fetchedWalletsList] = createResource(() => tonConnectUI2.getWallets());
  const [selectedWalletInfo, setSelectedWalletInfo] = createSignal(null);
  const [selectedTab, setSelectedTab] = createSignal("universal");
  const [infoTab, setInfoTab] = createSignal(false);
  const walletsList = createMemo(() => {
    if (fetchedWalletsList.state !== "ready") {
      return null;
    }
    let walletsList2 = applyWalletsListConfiguration(fetchedWalletsList(), appState.walletsListConfiguration);
    const injectedWallets = walletsList2.filter(isWalletInfoCurrentlyInjected);
    const notInjectedWallets = walletsList2.filter((w2) => !isWalletInfoCurrentlyInjected(w2));
    walletsList2 = (injectedWallets || []).concat(notInjectedWallets);
    const preferredWalletAppName = appState.preferredWalletAppName;
    const preferredWallet = walletsList2.find((item) => eqWalletName(item, preferredWalletAppName));
    const someWalletsWithSameName = walletsList2.filter((item) => eqWalletName(item, preferredWalletAppName)).length >= 2;
    if (preferredWalletAppName && preferredWallet && !someWalletsWithSameName) {
      walletsList2 = [__spreadProps(__spreadValues$1({}, preferredWallet), {
        isPreferred: true
      })].concat(walletsList2.filter((item) => !eqWalletName(item, preferredWalletAppName)));
    }
    const atWallet = walletsList2.find((item) => eqWalletName(item, AT_WALLET_APP_NAME));
    if (atWallet) {
      walletsList2 = [atWallet].concat(walletsList2.filter((item) => !eqWalletName(item, AT_WALLET_APP_NAME)));
    }
    return walletsList2;
  });
  const additionalRequestLoading = () => {
    var _a2;
    return ((_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.state) === "loading";
  };
  const additionalRequest = createMemo(() => {
    var _a2;
    if (additionalRequestLoading()) {
      return void 0;
    }
    return (_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.value;
  });
  const onClose = (closeReason) => {
    tonConnectUI2.closeModal(closeReason);
  };
  const unsubscribe = connector.onStatusChange((wallet) => {
    if (wallet) {
      onClose("wallet-selected");
    }
  });
  const onSelectAllWallets = () => {
    setSelectedTab("all-wallets");
  };
  const onSelectUniversal = () => {
    setSelectedTab("universal");
  };
  const clearSelectedWalletInfo = () => {
    setSelectedWalletInfo(null);
  };
  onCleanup(() => {
    setSelectedWalletInfo(null);
    setInfoTab(false);
  });
  onCleanup(unsubscribe);
  return createComponent(StyledModal, {
    get opened() {
      return getWalletsModalIsOpened();
    },
    get enableAndroidBackHandler() {
      return appState.enableAndroidBackHandler;
    },
    onClose: () => onClose("action-cancelled"),
    onClickQuestion: () => setInfoTab((v2) => !v2),
    "data-tc-wallets-modal-container": "true",
    get children() {
      return [createComponent(Show, {
        get when() {
          return infoTab();
        },
        get children() {
          return createComponent(InfoModal, {
            onBackClick: () => setInfoTab(false)
          });
        }
      }), createComponent(Show, {
        get when() {
          return !infoTab();
        },
        get children() {
          return [createComponent(Show, {
            get when() {
              return additionalRequestLoading() || !walletsList();
            },
            get children() {
              return [createComponent(H1Styled$8, {
                translationKey: "walletModal.loading",
                children: "Wallets list is loading"
              }), createComponent(LoaderContainerStyled, {
                get children() {
                  return createComponent(LoaderIcon, {
                    size: "m"
                  });
                }
              })];
            }
          }), createComponent(Show, {
            get when() {
              return createMemo(() => !!!additionalRequestLoading())() && walletsList();
            },
            get children() {
              return createComponent(Switch, {
                get children() {
                  return [createComponent(Match, {
                    get when() {
                      return selectedWalletInfo();
                    },
                    get children() {
                      return createComponent(Dynamic, {
                        get component() {
                          return isMobile() ? MobileConnectionModal : DesktopConnectionModal;
                        },
                        get wallet() {
                          return selectedWalletInfo();
                        },
                        get additionalRequest() {
                          return additionalRequest();
                        },
                        onBackClick: clearSelectedWalletInfo
                      });
                    }
                  }), createComponent(Match, {
                    get when() {
                      return selectedTab() === "universal";
                    },
                    get children() {
                      return createComponent(Dynamic, {
                        get component() {
                          return isMobile() ? MobileUniversalModal : DesktopUniversalModal;
                        },
                        onSelect: setSelectedWalletInfo,
                        get walletsList() {
                          return walletsList();
                        },
                        get additionalRequest() {
                          return additionalRequest();
                        },
                        onSelectAllWallets
                      });
                    }
                  }), createComponent(Match, {
                    get when() {
                      return selectedTab() === "all-wallets";
                    },
                    get children() {
                      return createComponent(AllWalletsListModal, {
                        get walletsList() {
                          return walletsList();
                        },
                        onBack: onSelectUniversal,
                        onSelect: setSelectedWalletInfo
                      });
                    }
                  })];
                }
              });
            }
          })];
        }
      })];
    }
  });
};
const ActionModalStyled = styled$1.div`
    display: flex;
    flex-direction: column;
    align-items: center;
    padding-bottom: 8px;
`;
const H1Styled = styled$1(H1)`
    margin-top: 16px;
`;
const TextStyled = styled$1(Text)`
    font-weight: 510;
    font-size: 16px;
    line-height: 20px;
    text-align: center;
    max-width: 250px;

    color: ${(props) => props.theme.colors.text.secondary};
`;
const LoaderButtonStyled = styled$1(Button$1)`
    min-width: 112px;
    margin-top: 32px;
`;
const LoaderIconStyled = styled$1(LoaderIcon)`
    height: 16px;
    width: 16px;
`;
const ButtonStyled = styled$1(Button$1)`
    margin-top: 32px;
`;
const ActionModal = (props) => {
  const dataAttrs = useDataAttributes(props);
  const tonConnectUI2 = useContext(TonConnectUiContext);
  const [firstClick, setFirstClick] = createSignal(true);
  const [sent, setSent] = createSignal(false);
  createEffect(() => {
    const currentAction = action();
    setSent(!!currentAction && "sent" in currentAction && currentAction.sent);
  });
  let universalLink;
  if ((tonConnectUI2 == null ? void 0 : tonConnectUI2.wallet) && "universalLink" in tonConnectUI2.wallet && (tonConnectUI2.wallet.openMethod === "universal-link" || isTelegramUrl(tonConnectUI2.wallet.universalLink) && isInTMA())) {
    universalLink = tonConnectUI2.wallet.universalLink;
  }
  let deepLink;
  if ((tonConnectUI2 == null ? void 0 : tonConnectUI2.wallet) && "deepLink" in tonConnectUI2.wallet && (tonConnectUI2.wallet.openMethod === "custom-deeplink" || isTelegramUrl(tonConnectUI2.wallet.deepLink) && isInTMA())) {
    deepLink = tonConnectUI2.wallet.deepLink;
  }
  const onOpenWallet = () => {
    const currentAction = action();
    const returnStrategy = "returnStrategy" in currentAction ? currentAction.returnStrategy : appState.returnStrategy;
    const forceRedirect = !firstClick();
    setFirstClick(false);
    if (isTelegramUrl(universalLink)) {
      redirectToTelegram(universalLink, {
        returnStrategy,
        twaReturnUrl: "twaReturnUrl" in currentAction ? currentAction.twaReturnUrl : appState.twaReturnUrl,
        forceRedirect
      });
    } else {
      redirectToWallet(universalLink, deepLink, {
        returnStrategy,
        forceRedirect
      }, () => {
      });
    }
  };
  return createComponent(ActionModalStyled, mergeProps(dataAttrs, {
    get children() {
      return [createMemo(() => props.icon), createComponent(H1Styled, {
        get translationKey() {
          return props.headerTranslationKey;
        },
        get translationValues() {
          return props.headerTranslationValues;
        }
      }), createComponent(TextStyled, {
        get translationKey() {
          return props.textTranslationKey;
        },
        get translationValues() {
          return props.textTranslationValues;
        }
      }), createComponent(Show, {
        get when() {
          return !sent() && (props.showButton === "open-wallet" && universalLink || props.showButton !== "open-wallet");
        },
        get children() {
          return createComponent(LoaderButtonStyled, {
            disabled: true,
            "data-tc-connect-button-loading": "true",
            get children() {
              return createComponent(LoaderIconStyled, {});
            }
          });
        }
      }), createComponent(Show, {
        get when() {
          return sent();
        },
        get children() {
          return [createComponent(Show, {
            get when() {
              return props.showButton !== "open-wallet";
            },
            get children() {
              return createComponent(ButtonStyled, {
                onClick: () => props.onClose(),
                get children() {
                  return createComponent(Translation, {
                    translationKey: "common.close",
                    children: "Close"
                  });
                }
              });
            }
          }), createComponent(Show, {
            get when() {
              return props.showButton === "open-wallet" && universalLink;
            },
            get children() {
              return createComponent(ButtonStyled, {
                onClick: onOpenWallet,
                get children() {
                  return createComponent(Translation, {
                    translationKey: "common.openWallet",
                    children: "Open wallet"
                  });
                }
              });
            }
          })];
        }
      })];
    }
  }));
};
const ConfirmTransactionModal = (props) => {
  const tonConnectUI2 = useContext(TonConnectUiContext);
  const [t2] = useI18n();
  const name2 = () => tonConnectUI2.wallet && "name" in tonConnectUI2.wallet ? tonConnectUI2.wallet.name : t2("common.yourWallet", {}, "Your wallet");
  return createComponent(ActionModal, {
    headerTranslationKey: "actionModal.confirmTransaction.header",
    get headerTranslationValues() {
      return {
        name: name2()
      };
    },
    textTranslationKey: "actionModal.confirmTransaction.text",
    get icon() {
      return createComponent(LoaderIcon, {
        size: "m"
      });
    },
    onClose: () => props.onClose(),
    showButton: "open-wallet",
    "data-tc-confirm-modal": "true"
  });
};
const TransactionCanceledModal = (props) => {
  return createComponent(ActionModal, {
    headerTranslationKey: "actionModal.transactionCanceled.header",
    textTranslationKey: "actionModal.transactionCanceled.text",
    get icon() {
      return createComponent(ErrorIcon, {
        size: "m"
      });
    },
    onClose: () => props.onClose(),
    "data-tc-transaction-canceled-modal": "true"
  });
};
const TransactionSentModal = (props) => {
  return createComponent(ActionModal, {
    headerTranslationKey: "actionModal.transactionSent.header",
    textTranslationKey: "actionModal.transactionSent.text",
    get icon() {
      return createComponent(SuccessIcon, {
        size: "m"
      });
    },
    onClose: () => props.onClose(),
    "data-tc-transaction-sent-modal": "true"
  });
};
const ActionsModal = () => {
  return createComponent(Modal, {
    get opened() {
      var _a2;
      return createMemo(() => action() !== null)() && ((_a2 = action()) == null ? void 0 : _a2.openModal) === true;
    },
    get enableAndroidBackHandler() {
      return appState.enableAndroidBackHandler;
    },
    onClose: () => setAction(null),
    "data-tc-actions-modal-container": "true",
    get children() {
      return createComponent(Switch, {
        get children() {
          return [createComponent(Match, {
            get when() {
              return action().name === "transaction-sent";
            },
            get children() {
              return createComponent(TransactionSentModal, {
                onClose: () => setAction(null)
              });
            }
          }), createComponent(Match, {
            get when() {
              return action().name === "transaction-canceled";
            },
            get children() {
              return createComponent(TransactionCanceledModal, {
                onClose: () => setAction(null)
              });
            }
          }), createComponent(Match, {
            get when() {
              return action().name === "confirm-transaction";
            },
            get children() {
              return createComponent(ConfirmTransactionModal, {
                onClose: () => setAction(null)
              });
            }
          })];
        }
      });
    }
  });
};
const SingleWalletModal = () => {
  const {
    locale
  } = useI18n()[1];
  createEffect(() => locale(appState.language));
  createEffect(() => {
    if (getSingleWalletModalIsOpened()) {
      updateIsMobile();
    }
  });
  const connector = useContext(ConnectorContext);
  const tonConnectUI2 = useContext(TonConnectUiContext);
  const [infoTab, setInfoTab] = createSignal(false);
  const additionalRequestLoading = () => {
    var _a2;
    return ((_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.state) === "loading";
  };
  const additionalRequest = createMemo(() => {
    var _a2;
    if (additionalRequestLoading()) {
      return void 0;
    }
    return (_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.value;
  });
  const onClose = (closeReason) => {
    tonConnectUI2.closeSingleWalletModal(closeReason);
  };
  const unsubscribe = connector.onStatusChange((wallet) => {
    if (wallet) {
      onClose("wallet-selected");
    }
  });
  onCleanup(unsubscribe);
  onCleanup(() => {
    setInfoTab(false);
  });
  return createComponent(StyledModal, {
    get opened() {
      return getSingleWalletModalIsOpened();
    },
    get enableAndroidBackHandler() {
      return appState.enableAndroidBackHandler;
    },
    onClose: () => onClose("action-cancelled"),
    onClickQuestion: () => setInfoTab((v2) => !v2),
    "data-tc-wallets-modal-container": "true",
    get children() {
      return [createComponent(Show, {
        get when() {
          return infoTab();
        },
        get children() {
          return createComponent(InfoModal, {
            onBackClick: () => setInfoTab(false)
          });
        }
      }), createComponent(Show, {
        get when() {
          return !infoTab();
        },
        get children() {
          return [createComponent(Show, {
            get when() {
              return additionalRequestLoading();
            },
            get children() {
              return [createComponent(H1Styled$8, {
                translationKey: "walletModal.loading",
                children: "Wallets list is loading"
              }), createComponent(LoaderContainerStyled, {
                get children() {
                  return createComponent(LoaderIcon, {
                    size: "m"
                  });
                }
              })];
            }
          }), createComponent(Show, {
            get when() {
              return !additionalRequestLoading();
            },
            get children() {
              return createComponent(Dynamic, {
                get component() {
                  return isMobile() ? MobileConnectionModal : DesktopConnectionModal;
                },
                get wallet() {
                  return getSingleWalletModalWalletInfo();
                },
                get additionalRequest() {
                  return additionalRequest();
                },
                onBackClick: () => {
                },
                backDisabled: true
              });
            }
          })];
        }
      })];
    }
  });
};
const App$2 = (props) => {
  const translations = createI18nContext(i18nDictionary, appState.language);
  defineStylesRoot();
  fixMobileSafariActiveTransition();
  return createComponent(I18nContext.Provider, {
    value: translations,
    get children() {
      return createComponent(TonConnectUiContext.Provider, {
        get value() {
          return props.tonConnectUI;
        },
        get children() {
          return createComponent(ConnectorContext.Provider, {
            get value() {
              return appState.connector;
            },
            get children() {
              return [createComponent(GlobalStyles, {}), createComponent(ThemeProvider, {
                theme: themeState,
                get children() {
                  return [createComponent(Show, {
                    get when() {
                      return appState.buttonRootId;
                    },
                    get children() {
                      return createComponent(Portal, {
                        get mount() {
                          return document.getElementById(appState.buttonRootId);
                        },
                        get children() {
                          return createComponent(AccountButton, {});
                        }
                      });
                    }
                  }), createComponent(Dynamic, {
                    component: globalStylesTag,
                    get children() {
                      return [createComponent(WalletsModal, {}), createComponent(SingleWalletModal, {}), createComponent(ActionsModal, {})];
                    }
                  })];
                }
              })];
            }
          });
        }
      });
    }
  });
};
const widgetController = {
  openWalletsModal: () => void setTimeout(() => setWalletsModalState({
    status: "opened",
    closeReason: null
  })),
  closeWalletsModal: (reason) => void setTimeout(() => setWalletsModalState({
    status: "closed",
    closeReason: reason
  })),
  openSingleWalletModal: (walletInfo) => {
    void setTimeout(() => setSingleWalletModalState({
      status: "opened",
      closeReason: null,
      walletInfo
    }));
  },
  closeSingleWalletModal: (reason) => void setTimeout(() => setSingleWalletModalState({
    status: "closed",
    closeReason: reason
  })),
  setAction: (action2) => void setTimeout(() => setAction(action2)),
  clearAction: () => void setTimeout(() => setAction(null)),
  getSelectedWalletInfo: () => lastSelectedWalletInfo(),
  removeSelectedWalletInfo: () => setLastSelectedWalletInfo(null),
  renderApp: (root, tonConnectUI2) => render(() => createComponent(App$2, {
    tonConnectUI: tonConnectUI2
  }), document.getElementById(root))
};
class WalletsModalManager {
  constructor(options) {
    __publicField(this, "connector");
    __publicField(this, "setConnectRequestParametersCallback");
    __publicField(this, "consumers", []);
    __publicField(this, "tracker");
    __publicField(this, "state", walletsModalState());
    this.connector = options.connector;
    this.tracker = options.tracker;
    this.setConnectRequestParametersCallback = options.setConnectRequestParametersCallback;
    createEffect(() => {
      const state2 = walletsModalState();
      this.state = state2;
      this.consumers.forEach((consumer) => consumer(state2));
    });
  }
  open() {
    return __async(this, null, function* () {
      this.tracker.trackConnectionStarted();
      const walletsList = yield this.connector.getWallets();
      const embeddedWallet = walletsList.find(isWalletInfoCurrentlyEmbedded);
      if (embeddedWallet) {
        return this.connectEmbeddedWallet(embeddedWallet);
      } else {
        return this.openWalletsModal();
      }
    });
  }
  close(reason = "action-cancelled") {
    if (reason === "action-cancelled") {
      this.tracker.trackConnectionError("Connection was cancelled");
    }
    widgetController.closeWalletsModal(reason);
  }
  onStateChange(onChange) {
    this.consumers.push(onChange);
    return () => {
      this.consumers = this.consumers.filter((consumer) => consumer !== onChange);
    };
  }
  connectEmbeddedWallet(embeddedWallet) {
    const connect = (parameters) => {
      setLastSelectedWalletInfo(embeddedWallet);
      this.connector.connect({ jsBridgeKey: embeddedWallet.jsBridgeKey }, parameters);
    };
    const additionalRequest = appState.connectRequestParameters;
    if ((additionalRequest == null ? void 0 : additionalRequest.state) === "loading") {
      this.setConnectRequestParametersCallback(connect);
    } else {
      connect(additionalRequest == null ? void 0 : additionalRequest.value);
    }
  }
  openWalletsModal() {
    return __async(this, null, function* () {
      if (isInTMA()) {
        sendExpand();
      }
      widgetController.openWalletsModal();
      return new Promise((resolve) => {
        const unsubscribe = this.onStateChange((state2) => {
          const { status } = state2;
          if (status === "opened") {
            unsubscribe();
            resolve();
          }
        });
      });
    });
  }
}
class TransactionModalManager {
  constructor(options) {
    __publicField(this, "connector");
    __publicField(this, "consumers", []);
    this.connector = options.connector;
    createEffect(() => {
      const currentAction = action();
      this.consumers.forEach((consumer) => consumer(currentAction));
    });
  }
  onStateChange(consumer) {
    this.consumers.push(consumer);
    return () => {
      this.consumers = this.consumers.filter((c2) => c2 !== consumer);
    };
  }
}
class SingleWalletModalManager {
  constructor(options) {
    __publicField(this, "connector");
    __publicField(this, "setConnectRequestParametersCallback");
    __publicField(this, "consumers", []);
    __publicField(this, "tracker");
    __publicField(this, "state", singleWalletModalState());
    this.connector = options.connector;
    this.tracker = options.tracker;
    this.setConnectRequestParametersCallback = options.setConnectRequestParametersCallback;
    createEffect(() => {
      const state2 = singleWalletModalState();
      this.state = state2;
      this.consumers.forEach((consumer) => consumer(state2));
    });
  }
  open(wallet) {
    return __async(this, null, function* () {
      this.tracker.trackConnectionStarted();
      const fetchedWalletsList = yield this.connector.getWallets();
      const walletsList = applyWalletsListConfiguration(
        fetchedWalletsList,
        appState.walletsListConfiguration
      );
      const embeddedWallet = walletsList.find(isWalletInfoCurrentlyEmbedded);
      const isEmbeddedWalletExist = !!embeddedWallet;
      if (isEmbeddedWalletExist) {
        return this.connectEmbeddedWallet(embeddedWallet);
      }
      const externalWallets = walletsList.filter(isWalletInfoRemote);
      const externalWallet = externalWallets.find((walletInfo) => eqWalletName(walletInfo, wallet));
      const isExternalWalletExist = !!externalWallet;
      if (isExternalWalletExist) {
        return this.openSingleWalletModal(externalWallet);
      }
      const error = `Trying to open modal window with unknown wallet "${wallet}".`;
      this.tracker.trackConnectionError(error);
      throw new TonConnectUIError(error);
    });
  }
  close(reason = "action-cancelled") {
    if (reason === "action-cancelled") {
      this.tracker.trackConnectionError("Connection was cancelled");
    }
    widgetController.closeSingleWalletModal("action-cancelled");
  }
  onStateChange(onChange) {
    this.consumers.push(onChange);
    return () => {
      this.consumers = this.consumers.filter((consumer) => consumer !== onChange);
    };
  }
  connectEmbeddedWallet(embeddedWallet) {
    const connect = (parameters) => {
      setLastSelectedWalletInfo(embeddedWallet);
      this.connector.connect({ jsBridgeKey: embeddedWallet.jsBridgeKey }, parameters);
    };
    const additionalRequest = appState.connectRequestParameters;
    if ((additionalRequest == null ? void 0 : additionalRequest.state) === "loading") {
      this.setConnectRequestParametersCallback(connect);
    } else {
      connect(additionalRequest == null ? void 0 : additionalRequest.value);
    }
  }
  openSingleWalletModal(wallet) {
    return __async(this, null, function* () {
      if (isInTMA()) {
        sendExpand();
      }
      widgetController.openSingleWalletModal(wallet);
      return new Promise((resolve) => {
        const unsubscribe = this.onStateChange((state2) => {
          const { status } = state2;
          if (status === "opened") {
            unsubscribe();
            resolve();
          }
        });
      });
    });
  }
}
class TonConnectUITracker {
  constructor(options) {
    __publicField(this, "eventPrefix", "ton-connect-ui-");
    __publicField(this, "tonConnectUiVersion");
    __publicField(this, "tonConnectSdkVersion", null);
    __publicField(this, "eventDispatcher");
    var _a2;
    this.eventDispatcher = (_a2 = options == null ? void 0 : options.eventDispatcher) != null ? _a2 : new BrowserEventDispatcher();
    this.tonConnectUiVersion = options.tonConnectUiVersion;
    this.init().catch();
  }
  get version() {
    return createVersionInfo({
      ton_connect_sdk_lib: this.tonConnectSdkVersion,
      ton_connect_ui_lib: this.tonConnectUiVersion
    });
  }
  init() {
    return __async(this, null, function* () {
      try {
        yield this.setRequestVersionHandler();
        this.tonConnectSdkVersion = yield this.requestTonConnectSdkVersion();
      } catch (e2) {
      }
    });
  }
  setRequestVersionHandler() {
    return __async(this, null, function* () {
      yield this.eventDispatcher.addEventListener("ton-connect-ui-request-version", () => __async(this, null, function* () {
        yield this.eventDispatcher.dispatchEvent(
          "ton-connect-ui-response-version",
          createResponseVersionEvent(this.tonConnectUiVersion)
        );
      }));
    });
  }
  requestTonConnectSdkVersion() {
    return __async(this, null, function* () {
      return new Promise((resolve, reject) => __async(this, null, function* () {
        try {
          yield this.eventDispatcher.addEventListener(
            "ton-connect-response-version",
            (event) => {
              resolve(event.detail.version);
            },
            { once: true }
          );
          yield this.eventDispatcher.dispatchEvent(
            "ton-connect-request-version",
            createRequestVersionEvent()
          );
        } catch (e2) {
          reject(e2);
        }
      }));
    });
  }
  dispatchUserActionEvent(eventDetails) {
    var _a2;
    try {
      (_a2 = this.eventDispatcher) == null ? void 0 : _a2.dispatchEvent(`${this.eventPrefix}${eventDetails.type}`, eventDetails).catch();
    } catch (e2) {
    }
  }
  trackConnectionStarted(...args) {
    try {
      const event = createConnectionStartedEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
  trackConnectionCompleted(...args) {
    try {
      const event = createConnectionCompletedEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
  trackConnectionError(...args) {
    try {
      const event = createConnectionErrorEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
  trackConnectionRestoringStarted(...args) {
    try {
      const event = createConnectionRestoringStartedEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
  trackConnectionRestoringCompleted(...args) {
    try {
      const event = createConnectionRestoringCompletedEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
  trackConnectionRestoringError(...args) {
    try {
      const event = createConnectionRestoringErrorEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
  trackDisconnection(...args) {
    try {
      const event = createDisconnectionEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
  trackTransactionSentForSignature(...args) {
    try {
      const event = createTransactionSentForSignatureEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
  trackTransactionSigned(...args) {
    try {
      const event = createTransactionSignedEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
  trackTransactionSigningFailed(...args) {
    try {
      const event = createTransactionSigningFailedEvent(this.version, ...args);
      this.dispatchUserActionEvent(event);
    } catch (e2) {
    }
  }
}
const tonConnectUiVersion = "2.0.9";
class TonConnectUI {
  constructor(options) {
    __publicField(this, "walletInfoStorage", new WalletInfoStorage());
    __publicField(this, "preferredWalletStorage", new PreferredWalletStorage());
    __publicField(this, "tracker");
    __publicField(this, "walletInfo", null);
    __publicField(this, "systemThemeChangeUnsubscribe", null);
    __publicField(this, "actionsConfiguration");
    __publicField(this, "walletsList");
    __publicField(this, "connectRequestParametersCallback");
    __publicField(this, "connector");
    __publicField(this, "modal");
    __publicField(this, "singleWalletModal");
    __publicField(this, "transactionModal");
    __publicField(this, "connectionRestored", Promise.resolve(false));
    if (options && "connector" in options && options.connector) {
      this.connector = options.connector;
    } else if (options && "manifestUrl" in options && options.manifestUrl) {
      this.connector = new TonConnect({
        manifestUrl: options.manifestUrl,
        eventDispatcher: options == null ? void 0 : options.eventDispatcher
      });
    } else {
      throw new TonConnectUIError(
        "You have to specify a `manifestUrl` or a `connector` in the options."
      );
    }
    this.tracker = new TonConnectUITracker({
      eventDispatcher: options == null ? void 0 : options.eventDispatcher,
      tonConnectUiVersion
    });
    this.modal = new WalletsModalManager({
      connector: this.connector,
      tracker: this.tracker,
      setConnectRequestParametersCallback: (callback) => {
        this.connectRequestParametersCallback = callback;
      }
    });
    this.singleWalletModal = new SingleWalletModalManager({
      connector: this.connector,
      tracker: this.tracker,
      setConnectRequestParametersCallback: (callback) => {
        this.connectRequestParametersCallback = callback;
      }
    });
    this.transactionModal = new TransactionModalManager({
      connector: this.connector
    });
    this.walletsList = this.getWallets();
    this.walletsList.then((list) => preloadImages(uniq$2(list.map((item) => item.imageUrl))));
    const rootId = this.normalizeWidgetRoot(options == null ? void 0 : options.widgetRootId);
    this.subscribeToWalletChange();
    if ((options == null ? void 0 : options.restoreConnection) !== false) {
      this.connectionRestored = createMacrotaskAsync(() => __async(this, null, function* () {
        this.tracker.trackConnectionRestoringStarted();
        yield this.connector.restoreConnection();
        if (!this.connector.connected) {
          this.tracker.trackConnectionRestoringError("Connection was not restored");
          this.walletInfoStorage.removeWalletInfo();
        } else {
          this.tracker.trackConnectionRestoringCompleted(this.wallet);
        }
        return this.connector.connected;
      }));
    }
    this.uiOptions = mergeOptions(options, { uiPreferences: { theme: "SYSTEM" } });
    const preferredWalletName = this.preferredWalletStorage.getPreferredWalletAppName();
    setAppState({
      connector: this.connector,
      preferredWalletAppName: preferredWalletName
    });
    widgetController.renderApp(rootId, this);
  }
  static getWallets() {
    return TonConnect.getWallets();
  }
  get connected() {
    return this.connector.connected;
  }
  get account() {
    return this.connector.account;
  }
  get wallet() {
    if (!this.connector.wallet) {
      return null;
    }
    return __spreadValues$1(__spreadValues$1({}, this.connector.wallet), this.walletInfo);
  }
  set uiOptions(options) {
    var _a2, _b2, _c2, _d2, _e2;
    this.checkButtonRootExist(options.buttonRootId);
    this.actionsConfiguration = options.actionsConfiguration;
    if ((_a2 = options.uiPreferences) == null ? void 0 : _a2.theme) {
      if (((_b2 = options.uiPreferences) == null ? void 0 : _b2.theme) !== "SYSTEM") {
        (_c2 = this.systemThemeChangeUnsubscribe) == null ? void 0 : _c2.call(this);
        setTheme(options.uiPreferences.theme, options.uiPreferences.colorsSet);
      } else {
        setTheme(getSystemTheme(), options.uiPreferences.colorsSet);
        if (!this.systemThemeChangeUnsubscribe) {
          this.systemThemeChangeUnsubscribe = subscribeToThemeChange(setTheme);
        }
      }
    } else {
      if ((_d2 = options.uiPreferences) == null ? void 0 : _d2.colorsSet) {
        setColors(options.uiPreferences.colorsSet);
      }
    }
    if ((_e2 = options.uiPreferences) == null ? void 0 : _e2.borderRadius) {
      setBorderRadius(options.uiPreferences.borderRadius);
    }
    setAppState((state2) => {
      var _a3, _b3;
      const merged = mergeOptions(
        __spreadValues$1(__spreadValues$1(__spreadValues$1(__spreadValues$1({}, options.language && { language: options.language }), !!((_a3 = options.actionsConfiguration) == null ? void 0 : _a3.returnStrategy) && {
          returnStrategy: options.actionsConfiguration.returnStrategy
        }), !!((_b3 = options.actionsConfiguration) == null ? void 0 : _b3.twaReturnUrl) && {
          twaReturnUrl: options.actionsConfiguration.twaReturnUrl
        }), !!options.walletsListConfiguration && {
          walletsListConfiguration: options.walletsListConfiguration
        }),
        unwrap(state2)
      );
      if (options.buttonRootId !== void 0) {
        merged.buttonRootId = options.buttonRootId;
      }
      if (options.enableAndroidBackHandler !== void 0) {
        merged.enableAndroidBackHandler = options.enableAndroidBackHandler;
      }
      return merged;
    });
  }
  setConnectRequestParameters(connectRequestParameters) {
    var _a2;
    setAppState({ connectRequestParameters });
    if ((connectRequestParameters == null ? void 0 : connectRequestParameters.state) === "ready" || !connectRequestParameters) {
      (_a2 = this.connectRequestParametersCallback) == null ? void 0 : _a2.call(this, connectRequestParameters == null ? void 0 : connectRequestParameters.value);
    }
  }
  getWallets() {
    return __async(this, null, function* () {
      return this.connector.getWallets();
    });
  }
  onStatusChange(callback, errorsHandler) {
    return this.connector.onStatusChange((wallet) => __async(this, null, function* () {
      if (wallet) {
        const lastSelectedWalletInfo2 = yield this.getSelectedWalletInfo(wallet);
        callback(__spreadValues$1(__spreadValues$1({}, wallet), lastSelectedWalletInfo2 || this.walletInfoStorage.getWalletInfo()));
      } else {
        callback(wallet);
      }
    }), errorsHandler);
  }
  openModal() {
    return __async(this, null, function* () {
      return this.modal.open();
    });
  }
  closeModal(reason) {
    this.modal.close(reason);
  }
  onModalStateChange(onChange) {
    return this.modal.onStateChange(onChange);
  }
  get modalState() {
    return this.modal.state;
  }
  openSingleWalletModal(wallet) {
    return __async(this, null, function* () {
      return this.singleWalletModal.open(wallet);
    });
  }
  closeSingleWalletModal(closeReason) {
    this.singleWalletModal.close(closeReason);
  }
  onSingleWalletModalStateChange(onChange) {
    return this.singleWalletModal.onStateChange(onChange);
  }
  get singleWalletModalState() {
    return this.singleWalletModal.state;
  }
  connectWallet() {
    return __async(this, null, function* () {
      const walletsList = yield this.getWallets();
      const embeddedWallet = walletsList.find(isWalletInfoCurrentlyEmbedded);
      if (embeddedWallet) {
        return yield this.connectEmbeddedWallet(embeddedWallet);
      } else {
        return yield this.connectExternalWallet();
      }
    });
  }
  disconnect() {
    this.tracker.trackDisconnection(this.wallet, "dapp");
    widgetController.clearAction();
    widgetController.removeSelectedWalletInfo();
    this.walletInfoStorage.removeWalletInfo();
    return this.connector.disconnect();
  }
  sendTransaction(tx, options) {
    return __async(this, null, function* () {
      this.tracker.trackTransactionSentForSignature(this.wallet, tx);
      if (!this.connected) {
        this.tracker.trackTransactionSigningFailed(this.wallet, tx, "Wallet was not connected");
        throw new TonConnectUIError("Connect wallet to send a transaction.");
      }
      if (isInTMA()) {
        sendExpand();
      }
      const { notifications: notifications2, modals, returnStrategy, twaReturnUrl, skipRedirectToWallet } = this.getModalsAndNotificationsConfiguration(options);
      widgetController.setAction({
        name: "confirm-transaction",
        showNotification: notifications2.includes("before"),
        openModal: modals.includes("before"),
        sent: false
      });
      const onRequestSent = () => {
        if (abortController.signal.aborted) {
          return;
        }
        widgetController.setAction({
          name: "confirm-transaction",
          showNotification: notifications2.includes("before"),
          openModal: modals.includes("before"),
          sent: true
        });
        if (this.walletInfo && "universalLink" in this.walletInfo && (this.walletInfo.openMethod === "universal-link" || this.walletInfo.openMethod === "custom-deeplink")) {
          if (isTelegramUrl(this.walletInfo.universalLink)) {
            redirectToTelegram(this.walletInfo.universalLink, {
              returnStrategy,
              twaReturnUrl: twaReturnUrl || appState.twaReturnUrl,
              forceRedirect: false
            });
          } else {
            redirectToWallet(
              this.walletInfo.universalLink,
              this.walletInfo.deepLink,
              {
                returnStrategy,
                forceRedirect: false
              },
              () => {
              }
            );
          }
        }
      };
      const abortController = new AbortController();
      const unsubscribe = this.onTransactionModalStateChange((action2) => {
        if (action2 == null ? void 0 : action2.openModal) {
          return;
        }
        unsubscribe();
        if (!action2) {
          abortController.abort();
        }
      });
      try {
        const result = yield this.waitForSendTransaction(
          {
            transaction: tx,
            signal: abortController.signal
          },
          onRequestSent
        );
        this.tracker.trackTransactionSigned(this.wallet, tx, result);
        widgetController.setAction({
          name: "transaction-sent",
          showNotification: notifications2.includes("success"),
          openModal: modals.includes("success")
        });
        return result;
      } catch (e2) {
        widgetController.setAction({
          name: "transaction-canceled",
          showNotification: notifications2.includes("error"),
          openModal: modals.includes("error")
        });
        if (e2 instanceof TonConnectError) {
          throw e2;
        } else {
          console.error(e2);
          throw new TonConnectUIError("Unhandled error:" + e2);
        }
      } finally {
        unsubscribe();
      }
    });
  }
  connectEmbeddedWallet(embeddedWallet) {
    return __async(this, null, function* () {
      const connect = (parameters) => {
        setLastSelectedWalletInfo(embeddedWallet);
        this.connector.connect({ jsBridgeKey: embeddedWallet.jsBridgeKey }, parameters);
      };
      const additionalRequest = appState.connectRequestParameters;
      if ((additionalRequest == null ? void 0 : additionalRequest.state) === "loading") {
        this.connectRequestParametersCallback = connect;
      } else {
        connect(additionalRequest == null ? void 0 : additionalRequest.value);
      }
      return yield this.waitForWalletConnection({
        ignoreErrors: false
      });
    });
  }
  connectExternalWallet() {
    return __async(this, null, function* () {
      const abortController = new AbortController();
      widgetController.openWalletsModal();
      const unsubscribe = this.onModalStateChange((state2) => {
        const { status, closeReason } = state2;
        if (status === "opened") {
          return;
        }
        unsubscribe();
        if (closeReason === "action-cancelled") {
          abortController.abort();
        }
      });
      return yield this.waitForWalletConnection({
        ignoreErrors: true,
        signal: abortController.signal
      });
    });
  }
  waitForWalletConnection(options) {
    return __async(this, null, function* () {
      return new Promise((resolve, reject) => {
        this.tracker.trackConnectionStarted();
        const { ignoreErrors = false, signal = null } = options;
        if (signal && signal.aborted) {
          this.tracker.trackConnectionError("Connection was cancelled");
          return reject(new TonConnectUIError("Wallet was not connected"));
        }
        const onStatusChangeHandler = (wallet) => __async(this, null, function* () {
          if (!wallet) {
            this.tracker.trackConnectionError("Connection was cancelled");
            if (ignoreErrors) {
              return;
            }
            unsubscribe();
            reject(new TonConnectUIError("Wallet was not connected"));
          } else {
            this.tracker.trackConnectionCompleted(wallet);
            unsubscribe();
            resolve(wallet);
          }
        });
        const onErrorsHandler = (reason) => {
          this.tracker.trackConnectionError(reason.message);
          if (ignoreErrors) {
            return;
          }
          unsubscribe();
          reject(reason);
        };
        const unsubscribe = this.onStatusChange(
          (wallet) => onStatusChangeHandler(wallet),
          (reason) => onErrorsHandler(reason)
        );
        if (signal) {
          signal.addEventListener(
            "abort",
            () => {
              unsubscribe();
              reject(new TonConnectUIError("Wallet was not connected"));
            },
            { once: true }
          );
        }
      });
    });
  }
  waitForSendTransaction(options, onRequestSent) {
    return __async(this, null, function* () {
      return new Promise((resolve, reject) => {
        const { transaction: transaction2, signal } = options;
        if (signal.aborted) {
          this.tracker.trackTransactionSigningFailed(
            this.wallet,
            transaction2,
            "Transaction was cancelled"
          );
          return reject(new TonConnectUIError("Transaction was not sent"));
        }
        const onTransactionHandler = (transaction22) => __async(this, null, function* () {
          resolve(transaction22);
        });
        const onErrorsHandler = (reason) => {
          reject(reason);
        };
        const onCanceledHandler = () => {
          this.tracker.trackTransactionSigningFailed(
            this.wallet,
            transaction2,
            "Transaction was cancelled"
          );
          reject(new TonConnectUIError("Transaction was not sent"));
        };
        signal.addEventListener("abort", onCanceledHandler, { once: true });
        this.connector.sendTransaction(transaction2, { onRequestSent, signal }).then((result) => {
          signal.removeEventListener("abort", onCanceledHandler);
          return onTransactionHandler(result);
        }).catch((reason) => {
          signal.removeEventListener("abort", onCanceledHandler);
          return onErrorsHandler(reason);
        });
      });
    });
  }
  onTransactionModalStateChange(onChange) {
    return this.transactionModal.onStateChange(onChange);
  }
  subscribeToWalletChange() {
    this.connector.onStatusChange((wallet) => __async(this, null, function* () {
      var _a2;
      if (wallet) {
        yield this.updateWalletInfo(wallet);
        this.setPreferredWalletAppName(((_a2 = this.walletInfo) == null ? void 0 : _a2.appName) || wallet.device.appName);
      } else {
        this.walletInfoStorage.removeWalletInfo();
      }
    }));
  }
  setPreferredWalletAppName(value) {
    this.preferredWalletStorage.setPreferredWalletAppName(value);
    setAppState({ preferredWalletAppName: value });
  }
  getSelectedWalletInfo(wallet) {
    return __async(this, null, function* () {
      let lastSelectedWalletInfo2 = widgetController.getSelectedWalletInfo();
      if (!lastSelectedWalletInfo2) {
        return null;
      }
      let fullLastSelectedWalletInfo;
      if (!("name" in lastSelectedWalletInfo2)) {
        const walletsList = applyWalletsListConfiguration(
          yield this.walletsList,
          appState.walletsListConfiguration
        );
        const walletInfo = walletsList.find((item) => eqWalletName(item, wallet.device.appName));
        if (!walletInfo) {
          throw new TonConnectUIError(
            `Cannot find WalletInfo for the '${wallet.device.appName}' wallet`
          );
        }
        fullLastSelectedWalletInfo = __spreadValues$1(__spreadValues$1({}, walletInfo), lastSelectedWalletInfo2);
      } else {
        fullLastSelectedWalletInfo = lastSelectedWalletInfo2;
      }
      return fullLastSelectedWalletInfo;
    });
  }
  updateWalletInfo(wallet) {
    return __async(this, null, function* () {
      const selectedWalletInfo = yield this.getSelectedWalletInfo(wallet);
      if (selectedWalletInfo) {
        this.walletInfo = selectedWalletInfo;
        this.walletInfoStorage.setWalletInfo(selectedWalletInfo);
        return;
      }
      const storedWalletInfo = this.walletInfoStorage.getWalletInfo();
      if (storedWalletInfo) {
        this.walletInfo = storedWalletInfo;
        return;
      }
      this.walletInfo = (yield this.walletsList).find(
        (walletInfo) => eqWalletName(walletInfo, wallet.device.appName)
      ) || null;
    });
  }
  normalizeWidgetRoot(rootId) {
    if (!rootId || !document.getElementById(rootId)) {
      rootId = "tc-widget-root";
      const rootElement = document.createElement("div");
      rootElement.id = rootId;
      document.body.appendChild(rootElement);
    }
    return rootId;
  }
  checkButtonRootExist(buttonRootId2) {
    if (buttonRootId2 == null) {
      return;
    }
    if (!document.getElementById(buttonRootId2)) {
      throw new TonConnectUIError(`${buttonRootId2} element not found in the document.`);
    }
  }
  getModalsAndNotificationsConfiguration(options) {
    var _a2, _b2, _c2, _d2, _e2, _f2;
    const allActions = [
      "before",
      "success",
      "error"
    ];
    let notifications2 = allActions;
    if (((_a2 = this.actionsConfiguration) == null ? void 0 : _a2.notifications) && ((_b2 = this.actionsConfiguration) == null ? void 0 : _b2.notifications) !== "all") {
      notifications2 = this.actionsConfiguration.notifications;
    }
    if (options == null ? void 0 : options.notifications) {
      if (options.notifications === "all") {
        notifications2 = allActions;
      } else {
        notifications2 = options.notifications;
      }
    }
    let modals = ["before"];
    if ((_c2 = this.actionsConfiguration) == null ? void 0 : _c2.modals) {
      if (this.actionsConfiguration.modals === "all") {
        modals = allActions;
      } else {
        modals = this.actionsConfiguration.modals;
      }
    }
    if (options == null ? void 0 : options.modals) {
      if (options.modals === "all") {
        modals = allActions;
      } else {
        modals = options.modals;
      }
    }
    const returnStrategy = (options == null ? void 0 : options.returnStrategy) || ((_d2 = this.actionsConfiguration) == null ? void 0 : _d2.returnStrategy) || "back";
    const twaReturnUrl = (options == null ? void 0 : options.twaReturnUrl) || ((_e2 = this.actionsConfiguration) == null ? void 0 : _e2.twaReturnUrl);
    let skipRedirectToWallet = (options == null ? void 0 : options.skipRedirectToWallet) || ((_f2 = this.actionsConfiguration) == null ? void 0 : _f2.skipRedirectToWallet) || "ios";
    if (isInTMA()) {
      skipRedirectToWallet = "never";
    }
    return {
      notifications: notifications2,
      modals,
      returnStrategy,
      twaReturnUrl,
      skipRedirectToWallet
    };
  }
}
var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key2, value) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp.call(b2, prop))
      __defNormalProp(a2, prop, b2[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b2)) {
      if (__propIsEnum.call(b2, prop))
        __defNormalProp(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactJsxRuntime_production_min;
function requireReactJsxRuntime_production_min() {
  if (hasRequiredReactJsxRuntime_production_min)
    return reactJsxRuntime_production_min;
  hasRequiredReactJsxRuntime_production_min = 1;
  var f2 = r$1, k2 = Symbol.for("react.element"), l2 = Symbol.for("react.fragment"), m2 = Object.prototype.hasOwnProperty, n2 = f2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p2 = { key: true, ref: true, __self: true, __source: true };
  function q2(c2, a2, g2) {
    var b2, d2 = {}, e2 = null, h2 = null;
    void 0 !== g2 && (e2 = "" + g2);
    void 0 !== a2.key && (e2 = "" + a2.key);
    void 0 !== a2.ref && (h2 = a2.ref);
    for (b2 in a2)
      m2.call(a2, b2) && !p2.hasOwnProperty(b2) && (d2[b2] = a2[b2]);
    if (c2 && c2.defaultProps)
      for (b2 in a2 = c2.defaultProps, a2)
        void 0 === d2[b2] && (d2[b2] = a2[b2]);
    return { $$typeof: k2, type: c2, key: e2, ref: h2, props: d2, _owner: n2.current };
  }
  reactJsxRuntime_production_min.Fragment = l2;
  reactJsxRuntime_production_min.jsx = q2;
  reactJsxRuntime_production_min.jsxs = q2;
  return reactJsxRuntime_production_min;
}
(function(module) {
  {
    module.exports = requireReactJsxRuntime_production_min();
  }
})(jsxRuntime);
const jsx = jsxRuntime.exports.jsx;
function isClientSide() {
  return typeof window !== "undefined";
}
function isServerSide() {
  return !isClientSide();
}
const TonConnectUIContext = reactExports.createContext(null);
let tonConnectUI = null;
const TonConnectUIProvider = (_a2) => {
  var _b2 = _a2, {
    children: children2
  } = _b2, options = __objRest(_b2, [
    "children"
  ]);
  if (isClientSide() && !tonConnectUI) {
    tonConnectUI = new TonConnectUI(options);
  }
  return /* @__PURE__ */ jsx(TonConnectUIContext.Provider, { value: tonConnectUI, children: children2 });
};
const TonConnectUIProvider$1 = reactExports.memo(TonConnectUIProvider);
class TonConnectUIReactError extends TonConnectUIError {
  constructor(...args) {
    super(...args);
    Object.setPrototypeOf(this, TonConnectUIReactError.prototype);
  }
}
class TonConnectProviderNotSetError extends TonConnectUIReactError {
  constructor(...args) {
    super(...args);
    Object.setPrototypeOf(this, TonConnectProviderNotSetError.prototype);
  }
}
function checkProvider(provider) {
  if (!provider) {
    throw new TonConnectProviderNotSetError(
      "You should add <TonConnectUIProvider> on the top of the app to use TonConnect"
    );
  }
  return true;
}
function useTonConnectUI() {
  const tonConnectUI2 = reactExports.useContext(TonConnectUIContext);
  const setOptions = reactExports.useCallback(
    (options) => {
      if (tonConnectUI2) {
        tonConnectUI2.uiOptions = options;
      }
    },
    [tonConnectUI2]
  );
  if (isServerSide()) {
    return [null, () => {
    }];
  }
  checkProvider(tonConnectUI2);
  return [tonConnectUI2, setOptions];
}
const buttonRootId = "ton-connect-button";
const TonConnectButton = ({ className: className2, style: style2 }) => {
  const [_2, setOptions] = useTonConnectUI();
  reactExports.useEffect(() => {
    setOptions({ buttonRootId });
    return () => setOptions({ buttonRootId: null });
  }, [setOptions]);
  return /* @__PURE__ */ jsx(
    "div",
    {
      id: buttonRootId,
      className: className2,
      style: __spreadValues({ width: "fit-content" }, style2)
    }
  );
};
const TonConnectButton$1 = reactExports.memo(TonConnectButton);
function useTonWallet() {
  const [tonConnectUI2] = useTonConnectUI();
  const [wallet, setWallet] = reactExports.useState(
    (tonConnectUI2 == null ? void 0 : tonConnectUI2.wallet) || null
  );
  reactExports.useEffect(() => {
    if (tonConnectUI2) {
      setWallet(tonConnectUI2.wallet);
      return tonConnectUI2.onStatusChange((value) => {
        setWallet(value);
      });
    }
  }, [tonConnectUI2]);
  return wallet;
}
var client = {};
var m$2 = reactDomExports;
{
  client.createRoot = m$2.createRoot;
  client.hydrateRoot = m$2.hydrateRoot;
}
const App$1 = "";
var reactIs$1 = { exports: {} };
var reactIs_production_min = {};
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b$1 = "function" === typeof Symbol && Symbol.for, c = b$1 ? Symbol.for("react.element") : 60103, d = b$1 ? Symbol.for("react.portal") : 60106, e = b$1 ? Symbol.for("react.fragment") : 60107, f = b$1 ? Symbol.for("react.strict_mode") : 60108, g$1 = b$1 ? Symbol.for("react.profiler") : 60114, h = b$1 ? Symbol.for("react.provider") : 60109, k$1 = b$1 ? Symbol.for("react.context") : 60110, l = b$1 ? Symbol.for("react.async_mode") : 60111, m$1 = b$1 ? Symbol.for("react.concurrent_mode") : 60111, n = b$1 ? Symbol.for("react.forward_ref") : 60112, p = b$1 ? Symbol.for("react.suspense") : 60113, q$1 = b$1 ? Symbol.for("react.suspense_list") : 60120, r = b$1 ? Symbol.for("react.memo") : 60115, t$2 = b$1 ? Symbol.for("react.lazy") : 60116, v$1 = b$1 ? Symbol.for("react.block") : 60121, w$1 = b$1 ? Symbol.for("react.fundamental") : 60117, x$1 = b$1 ? Symbol.for("react.responder") : 60118, y$1 = b$1 ? Symbol.for("react.scope") : 60119;
function z$1(a2) {
  if ("object" === typeof a2 && null !== a2) {
    var u2 = a2.$$typeof;
    switch (u2) {
      case c:
        switch (a2 = a2.type, a2) {
          case l:
          case m$1:
          case e:
          case g$1:
          case f:
          case p:
            return a2;
          default:
            switch (a2 = a2 && a2.$$typeof, a2) {
              case k$1:
              case n:
              case t$2:
              case r:
              case h:
                return a2;
              default:
                return u2;
            }
        }
      case d:
        return u2;
    }
  }
}
function A(a2) {
  return z$1(a2) === m$1;
}
reactIs_production_min.AsyncMode = l;
reactIs_production_min.ConcurrentMode = m$1;
reactIs_production_min.ContextConsumer = k$1;
reactIs_production_min.ContextProvider = h;
reactIs_production_min.Element = c;
reactIs_production_min.ForwardRef = n;
reactIs_production_min.Fragment = e;
reactIs_production_min.Lazy = t$2;
reactIs_production_min.Memo = r;
reactIs_production_min.Portal = d;
reactIs_production_min.Profiler = g$1;
reactIs_production_min.StrictMode = f;
reactIs_production_min.Suspense = p;
reactIs_production_min.isAsyncMode = function(a2) {
  return A(a2) || z$1(a2) === l;
};
reactIs_production_min.isConcurrentMode = A;
reactIs_production_min.isContextConsumer = function(a2) {
  return z$1(a2) === k$1;
};
reactIs_production_min.isContextProvider = function(a2) {
  return z$1(a2) === h;
};
reactIs_production_min.isElement = function(a2) {
  return "object" === typeof a2 && null !== a2 && a2.$$typeof === c;
};
reactIs_production_min.isForwardRef = function(a2) {
  return z$1(a2) === n;
};
reactIs_production_min.isFragment = function(a2) {
  return z$1(a2) === e;
};
reactIs_production_min.isLazy = function(a2) {
  return z$1(a2) === t$2;
};
reactIs_production_min.isMemo = function(a2) {
  return z$1(a2) === r;
};
reactIs_production_min.isPortal = function(a2) {
  return z$1(a2) === d;
};
reactIs_production_min.isProfiler = function(a2) {
  return z$1(a2) === g$1;
};
reactIs_production_min.isStrictMode = function(a2) {
  return z$1(a2) === f;
};
reactIs_production_min.isSuspense = function(a2) {
  return z$1(a2) === p;
};
reactIs_production_min.isValidElementType = function(a2) {
  return "string" === typeof a2 || "function" === typeof a2 || a2 === e || a2 === m$1 || a2 === g$1 || a2 === f || a2 === p || a2 === q$1 || "object" === typeof a2 && null !== a2 && (a2.$$typeof === t$2 || a2.$$typeof === r || a2.$$typeof === h || a2.$$typeof === k$1 || a2.$$typeof === n || a2.$$typeof === w$1 || a2.$$typeof === x$1 || a2.$$typeof === y$1 || a2.$$typeof === v$1);
};
reactIs_production_min.typeOf = z$1;
{
  reactIs$1.exports = reactIs_production_min;
}
var reactIsExports = reactIs$1.exports;
function stylis_min(W2) {
  function M2(d2, c2, e2, h2, a2) {
    for (var m2 = 0, b2 = 0, v2 = 0, n2 = 0, q2, g2, x2 = 0, K2 = 0, k2, u2 = k2 = q2 = 0, l2 = 0, r2 = 0, I2 = 0, t2 = 0, B3 = e2.length, J2 = B3 - 1, y2, f2 = "", p2 = "", F3 = "", G3 = "", C2; l2 < B3; ) {
      g2 = e2.charCodeAt(l2);
      l2 === J2 && 0 !== b2 + n2 + v2 + m2 && (0 !== b2 && (g2 = 47 === b2 ? 10 : 47), n2 = v2 = m2 = 0, B3++, J2++);
      if (0 === b2 + n2 + v2 + m2) {
        if (l2 === J2 && (0 < r2 && (f2 = f2.replace(N2, "")), 0 < f2.trim().length)) {
          switch (g2) {
            case 32:
            case 9:
            case 59:
            case 13:
            case 10:
              break;
            default:
              f2 += e2.charAt(l2);
          }
          g2 = 59;
        }
        switch (g2) {
          case 123:
            f2 = f2.trim();
            q2 = f2.charCodeAt(0);
            k2 = 1;
            for (t2 = ++l2; l2 < B3; ) {
              switch (g2 = e2.charCodeAt(l2)) {
                case 123:
                  k2++;
                  break;
                case 125:
                  k2--;
                  break;
                case 47:
                  switch (g2 = e2.charCodeAt(l2 + 1)) {
                    case 42:
                    case 47:
                      a: {
                        for (u2 = l2 + 1; u2 < J2; ++u2) {
                          switch (e2.charCodeAt(u2)) {
                            case 47:
                              if (42 === g2 && 42 === e2.charCodeAt(u2 - 1) && l2 + 2 !== u2) {
                                l2 = u2 + 1;
                                break a;
                              }
                              break;
                            case 10:
                              if (47 === g2) {
                                l2 = u2 + 1;
                                break a;
                              }
                          }
                        }
                        l2 = u2;
                      }
                  }
                  break;
                case 91:
                  g2++;
                case 40:
                  g2++;
                case 34:
                case 39:
                  for (; l2++ < J2 && e2.charCodeAt(l2) !== g2; ) {
                  }
              }
              if (0 === k2)
                break;
              l2++;
            }
            k2 = e2.substring(t2, l2);
            0 === q2 && (q2 = (f2 = f2.replace(ca2, "").trim()).charCodeAt(0));
            switch (q2) {
              case 64:
                0 < r2 && (f2 = f2.replace(N2, ""));
                g2 = f2.charCodeAt(1);
                switch (g2) {
                  case 100:
                  case 109:
                  case 115:
                  case 45:
                    r2 = c2;
                    break;
                  default:
                    r2 = O2;
                }
                k2 = M2(c2, r2, k2, g2, a2 + 1);
                t2 = k2.length;
                0 < A2 && (r2 = X2(O2, f2, I2), C2 = H4(3, k2, r2, c2, D2, z2, t2, g2, a2, h2), f2 = r2.join(""), void 0 !== C2 && 0 === (t2 = (k2 = C2.trim()).length) && (g2 = 0, k2 = ""));
                if (0 < t2)
                  switch (g2) {
                    case 115:
                      f2 = f2.replace(da2, ea2);
                    case 100:
                    case 109:
                    case 45:
                      k2 = f2 + "{" + k2 + "}";
                      break;
                    case 107:
                      f2 = f2.replace(fa2, "$1 $2");
                      k2 = f2 + "{" + k2 + "}";
                      k2 = 1 === w2 || 2 === w2 && L2("@" + k2, 3) ? "@-webkit-" + k2 + "@" + k2 : "@" + k2;
                      break;
                    default:
                      k2 = f2 + k2, 112 === h2 && (k2 = (p2 += k2, ""));
                  }
                else
                  k2 = "";
                break;
              default:
                k2 = M2(c2, X2(c2, f2, I2), k2, h2, a2 + 1);
            }
            F3 += k2;
            k2 = I2 = r2 = u2 = q2 = 0;
            f2 = "";
            g2 = e2.charCodeAt(++l2);
            break;
          case 125:
          case 59:
            f2 = (0 < r2 ? f2.replace(N2, "") : f2).trim();
            if (1 < (t2 = f2.length))
              switch (0 === u2 && (q2 = f2.charCodeAt(0), 45 === q2 || 96 < q2 && 123 > q2) && (t2 = (f2 = f2.replace(" ", ":")).length), 0 < A2 && void 0 !== (C2 = H4(1, f2, c2, d2, D2, z2, p2.length, h2, a2, h2)) && 0 === (t2 = (f2 = C2.trim()).length) && (f2 = "\0\0"), q2 = f2.charCodeAt(0), g2 = f2.charCodeAt(1), q2) {
                case 0:
                  break;
                case 64:
                  if (105 === g2 || 99 === g2) {
                    G3 += f2 + e2.charAt(l2);
                    break;
                  }
                default:
                  58 !== f2.charCodeAt(t2 - 1) && (p2 += P2(f2, q2, g2, f2.charCodeAt(2)));
              }
            I2 = r2 = u2 = q2 = 0;
            f2 = "";
            g2 = e2.charCodeAt(++l2);
        }
      }
      switch (g2) {
        case 13:
        case 10:
          47 === b2 ? b2 = 0 : 0 === 1 + q2 && 107 !== h2 && 0 < f2.length && (r2 = 1, f2 += "\0");
          0 < A2 * Y2 && H4(0, f2, c2, d2, D2, z2, p2.length, h2, a2, h2);
          z2 = 1;
          D2++;
          break;
        case 59:
        case 125:
          if (0 === b2 + n2 + v2 + m2) {
            z2++;
            break;
          }
        default:
          z2++;
          y2 = e2.charAt(l2);
          switch (g2) {
            case 9:
            case 32:
              if (0 === n2 + m2 + b2)
                switch (x2) {
                  case 44:
                  case 58:
                  case 9:
                  case 32:
                    y2 = "";
                    break;
                  default:
                    32 !== g2 && (y2 = " ");
                }
              break;
            case 0:
              y2 = "\\0";
              break;
            case 12:
              y2 = "\\f";
              break;
            case 11:
              y2 = "\\v";
              break;
            case 38:
              0 === n2 + b2 + m2 && (r2 = I2 = 1, y2 = "\f" + y2);
              break;
            case 108:
              if (0 === n2 + b2 + m2 + E2 && 0 < u2)
                switch (l2 - u2) {
                  case 2:
                    112 === x2 && 58 === e2.charCodeAt(l2 - 3) && (E2 = x2);
                  case 8:
                    111 === K2 && (E2 = K2);
                }
              break;
            case 58:
              0 === n2 + b2 + m2 && (u2 = l2);
              break;
            case 44:
              0 === b2 + v2 + n2 + m2 && (r2 = 1, y2 += "\r");
              break;
            case 34:
            case 39:
              0 === b2 && (n2 = n2 === g2 ? 0 : 0 === n2 ? g2 : n2);
              break;
            case 91:
              0 === n2 + b2 + v2 && m2++;
              break;
            case 93:
              0 === n2 + b2 + v2 && m2--;
              break;
            case 41:
              0 === n2 + b2 + m2 && v2--;
              break;
            case 40:
              if (0 === n2 + b2 + m2) {
                if (0 === q2)
                  switch (2 * x2 + 3 * K2) {
                    case 533:
                      break;
                    default:
                      q2 = 1;
                  }
                v2++;
              }
              break;
            case 64:
              0 === b2 + v2 + n2 + m2 + u2 + k2 && (k2 = 1);
              break;
            case 42:
            case 47:
              if (!(0 < n2 + m2 + v2))
                switch (b2) {
                  case 0:
                    switch (2 * g2 + 3 * e2.charCodeAt(l2 + 1)) {
                      case 235:
                        b2 = 47;
                        break;
                      case 220:
                        t2 = l2, b2 = 42;
                    }
                    break;
                  case 42:
                    47 === g2 && 42 === x2 && t2 + 2 !== l2 && (33 === e2.charCodeAt(t2 + 2) && (p2 += e2.substring(t2, l2 + 1)), y2 = "", b2 = 0);
                }
          }
          0 === b2 && (f2 += y2);
      }
      K2 = x2;
      x2 = g2;
      l2++;
    }
    t2 = p2.length;
    if (0 < t2) {
      r2 = c2;
      if (0 < A2 && (C2 = H4(2, p2, r2, d2, D2, z2, t2, h2, a2, h2), void 0 !== C2 && 0 === (p2 = C2).length))
        return G3 + p2 + F3;
      p2 = r2.join(",") + "{" + p2 + "}";
      if (0 !== w2 * E2) {
        2 !== w2 || L2(p2, 2) || (E2 = 0);
        switch (E2) {
          case 111:
            p2 = p2.replace(ha2, ":-moz-$1") + p2;
            break;
          case 112:
            p2 = p2.replace(Q2, "::-webkit-input-$1") + p2.replace(Q2, "::-moz-$1") + p2.replace(Q2, ":-ms-input-$1") + p2;
        }
        E2 = 0;
      }
    }
    return G3 + p2 + F3;
  }
  function X2(d2, c2, e2) {
    var h2 = c2.trim().split(ia2);
    c2 = h2;
    var a2 = h2.length, m2 = d2.length;
    switch (m2) {
      case 0:
      case 1:
        var b2 = 0;
        for (d2 = 0 === m2 ? "" : d2[0] + " "; b2 < a2; ++b2) {
          c2[b2] = Z2(d2, c2[b2], e2).trim();
        }
        break;
      default:
        var v2 = b2 = 0;
        for (c2 = []; b2 < a2; ++b2) {
          for (var n2 = 0; n2 < m2; ++n2) {
            c2[v2++] = Z2(d2[n2] + " ", h2[b2], e2).trim();
          }
        }
    }
    return c2;
  }
  function Z2(d2, c2, e2) {
    var h2 = c2.charCodeAt(0);
    33 > h2 && (h2 = (c2 = c2.trim()).charCodeAt(0));
    switch (h2) {
      case 38:
        return c2.replace(F2, "$1" + d2.trim());
      case 58:
        return d2.trim() + c2.replace(F2, "$1" + d2.trim());
      default:
        if (0 < 1 * e2 && 0 < c2.indexOf("\f"))
          return c2.replace(F2, (58 === d2.charCodeAt(0) ? "" : "$1") + d2.trim());
    }
    return d2 + c2;
  }
  function P2(d2, c2, e2, h2) {
    var a2 = d2 + ";", m2 = 2 * c2 + 3 * e2 + 4 * h2;
    if (944 === m2) {
      d2 = a2.indexOf(":", 9) + 1;
      var b2 = a2.substring(d2, a2.length - 1).trim();
      b2 = a2.substring(0, d2).trim() + b2 + ";";
      return 1 === w2 || 2 === w2 && L2(b2, 1) ? "-webkit-" + b2 + b2 : b2;
    }
    if (0 === w2 || 2 === w2 && !L2(a2, 1))
      return a2;
    switch (m2) {
      case 1015:
        return 97 === a2.charCodeAt(10) ? "-webkit-" + a2 + a2 : a2;
      case 951:
        return 116 === a2.charCodeAt(3) ? "-webkit-" + a2 + a2 : a2;
      case 963:
        return 110 === a2.charCodeAt(5) ? "-webkit-" + a2 + a2 : a2;
      case 1009:
        if (100 !== a2.charCodeAt(4))
          break;
      case 969:
      case 942:
        return "-webkit-" + a2 + a2;
      case 978:
        return "-webkit-" + a2 + "-moz-" + a2 + a2;
      case 1019:
      case 983:
        return "-webkit-" + a2 + "-moz-" + a2 + "-ms-" + a2 + a2;
      case 883:
        if (45 === a2.charCodeAt(8))
          return "-webkit-" + a2 + a2;
        if (0 < a2.indexOf("image-set(", 11))
          return a2.replace(ja2, "$1-webkit-$2") + a2;
        break;
      case 932:
        if (45 === a2.charCodeAt(4))
          switch (a2.charCodeAt(5)) {
            case 103:
              return "-webkit-box-" + a2.replace("-grow", "") + "-webkit-" + a2 + "-ms-" + a2.replace("grow", "positive") + a2;
            case 115:
              return "-webkit-" + a2 + "-ms-" + a2.replace("shrink", "negative") + a2;
            case 98:
              return "-webkit-" + a2 + "-ms-" + a2.replace("basis", "preferred-size") + a2;
          }
        return "-webkit-" + a2 + "-ms-" + a2 + a2;
      case 964:
        return "-webkit-" + a2 + "-ms-flex-" + a2 + a2;
      case 1023:
        if (99 !== a2.charCodeAt(8))
          break;
        b2 = a2.substring(a2.indexOf(":", 15)).replace("flex-", "").replace("space-between", "justify");
        return "-webkit-box-pack" + b2 + "-webkit-" + a2 + "-ms-flex-pack" + b2 + a2;
      case 1005:
        return ka2.test(a2) ? a2.replace(aa2, ":-webkit-") + a2.replace(aa2, ":-moz-") + a2 : a2;
      case 1e3:
        b2 = a2.substring(13).trim();
        c2 = b2.indexOf("-") + 1;
        switch (b2.charCodeAt(0) + b2.charCodeAt(c2)) {
          case 226:
            b2 = a2.replace(G2, "tb");
            break;
          case 232:
            b2 = a2.replace(G2, "tb-rl");
            break;
          case 220:
            b2 = a2.replace(G2, "lr");
            break;
          default:
            return a2;
        }
        return "-webkit-" + a2 + "-ms-" + b2 + a2;
      case 1017:
        if (-1 === a2.indexOf("sticky", 9))
          break;
      case 975:
        c2 = (a2 = d2).length - 10;
        b2 = (33 === a2.charCodeAt(c2) ? a2.substring(0, c2) : a2).substring(d2.indexOf(":", 7) + 1).trim();
        switch (m2 = b2.charCodeAt(0) + (b2.charCodeAt(7) | 0)) {
          case 203:
            if (111 > b2.charCodeAt(8))
              break;
          case 115:
            a2 = a2.replace(b2, "-webkit-" + b2) + ";" + a2;
            break;
          case 207:
          case 102:
            a2 = a2.replace(b2, "-webkit-" + (102 < m2 ? "inline-" : "") + "box") + ";" + a2.replace(b2, "-webkit-" + b2) + ";" + a2.replace(b2, "-ms-" + b2 + "box") + ";" + a2;
        }
        return a2 + ";";
      case 938:
        if (45 === a2.charCodeAt(5))
          switch (a2.charCodeAt(6)) {
            case 105:
              return b2 = a2.replace("-items", ""), "-webkit-" + a2 + "-webkit-box-" + b2 + "-ms-flex-" + b2 + a2;
            case 115:
              return "-webkit-" + a2 + "-ms-flex-item-" + a2.replace(ba, "") + a2;
            default:
              return "-webkit-" + a2 + "-ms-flex-line-pack" + a2.replace("align-content", "").replace(ba, "") + a2;
          }
        break;
      case 973:
      case 989:
        if (45 !== a2.charCodeAt(3) || 122 === a2.charCodeAt(4))
          break;
      case 931:
      case 953:
        if (true === la2.test(d2))
          return 115 === (b2 = d2.substring(d2.indexOf(":") + 1)).charCodeAt(0) ? P2(d2.replace("stretch", "fill-available"), c2, e2, h2).replace(":fill-available", ":stretch") : a2.replace(b2, "-webkit-" + b2) + a2.replace(b2, "-moz-" + b2.replace("fill-", "")) + a2;
        break;
      case 962:
        if (a2 = "-webkit-" + a2 + (102 === a2.charCodeAt(5) ? "-ms-" + a2 : "") + a2, 211 === e2 + h2 && 105 === a2.charCodeAt(13) && 0 < a2.indexOf("transform", 10))
          return a2.substring(0, a2.indexOf(";", 27) + 1).replace(ma2, "$1-webkit-$2") + a2;
    }
    return a2;
  }
  function L2(d2, c2) {
    var e2 = d2.indexOf(1 === c2 ? ":" : "{"), h2 = d2.substring(0, 3 !== c2 ? e2 : 10);
    e2 = d2.substring(e2 + 1, d2.length - 1);
    return R2(2 !== c2 ? h2 : h2.replace(na, "$1"), e2, c2);
  }
  function ea2(d2, c2) {
    var e2 = P2(c2, c2.charCodeAt(0), c2.charCodeAt(1), c2.charCodeAt(2));
    return e2 !== c2 + ";" ? e2.replace(oa2, " or ($1)").substring(4) : "(" + c2 + ")";
  }
  function H4(d2, c2, e2, h2, a2, m2, b2, v2, n2, q2) {
    for (var g2 = 0, x2 = c2, w3; g2 < A2; ++g2) {
      switch (w3 = S2[g2].call(B2, d2, x2, e2, h2, a2, m2, b2, v2, n2, q2)) {
        case void 0:
        case false:
        case true:
        case null:
          break;
        default:
          x2 = w3;
      }
    }
    if (x2 !== c2)
      return x2;
  }
  function T2(d2) {
    switch (d2) {
      case void 0:
      case null:
        A2 = S2.length = 0;
        break;
      default:
        if ("function" === typeof d2)
          S2[A2++] = d2;
        else if ("object" === typeof d2)
          for (var c2 = 0, e2 = d2.length; c2 < e2; ++c2) {
            T2(d2[c2]);
          }
        else
          Y2 = !!d2 | 0;
    }
    return T2;
  }
  function U2(d2) {
    d2 = d2.prefix;
    void 0 !== d2 && (R2 = null, d2 ? "function" !== typeof d2 ? w2 = 1 : (w2 = 2, R2 = d2) : w2 = 0);
    return U2;
  }
  function B2(d2, c2) {
    var e2 = d2;
    33 > e2.charCodeAt(0) && (e2 = e2.trim());
    V2 = e2;
    e2 = [V2];
    if (0 < A2) {
      var h2 = H4(-1, c2, e2, e2, D2, z2, 0, 0, 0, 0);
      void 0 !== h2 && "string" === typeof h2 && (c2 = h2);
    }
    var a2 = M2(O2, e2, c2, 0, 0);
    0 < A2 && (h2 = H4(-2, a2, e2, e2, D2, z2, a2.length, 0, 0, 0), void 0 !== h2 && (a2 = h2));
    V2 = "";
    E2 = 0;
    z2 = D2 = 1;
    return a2;
  }
  var ca2 = /^\0+/g, N2 = /[\0\r\f]/g, aa2 = /: */g, ka2 = /zoo|gra/, ma2 = /([,: ])(transform)/g, ia2 = /,\r+?/g, F2 = /([\t\r\n ])*\f?&/g, fa2 = /@(k\w+)\s*(\S*)\s*/, Q2 = /::(place)/g, ha2 = /:(read-only)/g, G2 = /[svh]\w+-[tblr]{2}/, da2 = /\(\s*(.*)\s*\)/g, oa2 = /([\s\S]*?);/g, ba = /-self|flex-/g, na = /[^]*?(:[rp][el]a[\w-]+)[^]*/, la2 = /stretch|:\s*\w+\-(?:conte|avail)/, ja2 = /([^-])(image-set\()/, z2 = 1, D2 = 1, E2 = 0, w2 = 1, O2 = [], S2 = [], A2 = 0, R2 = null, Y2 = 0, V2 = "";
  B2.use = T2;
  B2.set = U2;
  void 0 !== W2 && U2(W2);
  return B2;
}
var unitlessKeys = {
  animationIterationCount: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};
function memoize(fn) {
  var cache = /* @__PURE__ */ Object.create(null);
  return function(arg) {
    if (cache[arg] === void 0)
      cache[arg] = fn(arg);
    return cache[arg];
  };
}
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
var isPropValid = /* @__PURE__ */ memoize(
  function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
  }
  /* Z+1 */
);
var reactIs = reactIsExports;
var REACT_STATICS = {
  childContextTypes: true,
  contextType: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromError: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var FORWARD_REF_STATICS = {
  "$$typeof": true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  "$$typeof": true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
function getStatics(component) {
  if (reactIs.isMemo(component)) {
    return MEMO_STATICS;
  }
  return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
}
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== "string") {
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);
      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }
    var keys2 = getOwnPropertyNames(sourceComponent);
    if (getOwnPropertySymbols) {
      keys2 = keys2.concat(getOwnPropertySymbols(sourceComponent));
    }
    var targetStatics = getStatics(targetComponent);
    var sourceStatics = getStatics(sourceComponent);
    for (var i2 = 0; i2 < keys2.length; ++i2) {
      var key2 = keys2[i2];
      if (!KNOWN_STATICS[key2] && !(blacklist && blacklist[key2]) && !(sourceStatics && sourceStatics[key2]) && !(targetStatics && targetStatics[key2])) {
        var descriptor2 = getOwnPropertyDescriptor(sourceComponent, key2);
        try {
          defineProperty(targetComponent, key2, descriptor2);
        } catch (e2) {
        }
      }
    }
  }
  return targetComponent;
}
var hoistNonReactStatics_cjs = hoistNonReactStatics;
const m = /* @__PURE__ */ getDefaultExportFromCjs(hoistNonReactStatics_cjs);
function y() {
  return (y = Object.assign || function(e2) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var n2 = arguments[t2];
      for (var r2 in n2)
        Object.prototype.hasOwnProperty.call(n2, r2) && (e2[r2] = n2[r2]);
    }
    return e2;
  }).apply(this, arguments);
}
var v = function(e2, t2) {
  for (var n2 = [e2[0]], r2 = 0, o2 = t2.length; r2 < o2; r2 += 1)
    n2.push(t2[r2], e2[r2 + 1]);
  return n2;
}, g = function(t2) {
  return null !== t2 && "object" == typeof t2 && "[object Object]" === (t2.toString ? t2.toString() : Object.prototype.toString.call(t2)) && !reactIsExports.typeOf(t2);
}, S = Object.freeze([]), w = Object.freeze({});
function E(e2) {
  return "function" == typeof e2;
}
function b(e2) {
  return e2.displayName || e2.name || "Component";
}
function _$3(e2) {
  return e2 && "string" == typeof e2.styledComponentId;
}
var N = "undefined" != typeof process$1 && void 0 !== process$1.env && ({}.REACT_APP_SC_ATTR || {}.SC_ATTR) || "data-styled", C = "undefined" != typeof window && "HTMLElement" in window, I = Boolean("boolean" == typeof SC_DISABLE_SPEEDY ? SC_DISABLE_SPEEDY : "undefined" != typeof process$1 && void 0 !== process$1.env && (void 0 !== {}.REACT_APP_SC_DISABLE_SPEEDY && "" !== {}.REACT_APP_SC_DISABLE_SPEEDY ? "false" !== {}.REACT_APP_SC_DISABLE_SPEEDY && {}.REACT_APP_SC_DISABLE_SPEEDY : void 0 !== {}.SC_DISABLE_SPEEDY && "" !== {}.SC_DISABLE_SPEEDY ? "false" !== {}.SC_DISABLE_SPEEDY && {}.SC_DISABLE_SPEEDY : false));
function D(e2) {
  for (var t2 = arguments.length, n2 = new Array(t2 > 1 ? t2 - 1 : 0), r2 = 1; r2 < t2; r2++)
    n2[r2 - 1] = arguments[r2];
  throw new Error("An error occurred. See https://git.io/JUIaE#" + e2 + " for more information." + (n2.length > 0 ? " Args: " + n2.join(", ") : ""));
}
var j = function() {
  function e2(e3) {
    this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = e3;
  }
  var t2 = e2.prototype;
  return t2.indexOfGroup = function(e3) {
    for (var t3 = 0, n2 = 0; n2 < e3; n2++)
      t3 += this.groupSizes[n2];
    return t3;
  }, t2.insertRules = function(e3, t3) {
    if (e3 >= this.groupSizes.length) {
      for (var n2 = this.groupSizes, r2 = n2.length, o2 = r2; e3 >= o2; )
        (o2 <<= 1) < 0 && D(16, "" + e3);
      this.groupSizes = new Uint32Array(o2), this.groupSizes.set(n2), this.length = o2;
      for (var s2 = r2; s2 < o2; s2++)
        this.groupSizes[s2] = 0;
    }
    for (var i2 = this.indexOfGroup(e3 + 1), a2 = 0, c2 = t3.length; a2 < c2; a2++)
      this.tag.insertRule(i2, t3[a2]) && (this.groupSizes[e3]++, i2++);
  }, t2.clearGroup = function(e3) {
    if (e3 < this.length) {
      var t3 = this.groupSizes[e3], n2 = this.indexOfGroup(e3), r2 = n2 + t3;
      this.groupSizes[e3] = 0;
      for (var o2 = n2; o2 < r2; o2++)
        this.tag.deleteRule(n2);
    }
  }, t2.getGroup = function(e3) {
    var t3 = "";
    if (e3 >= this.length || 0 === this.groupSizes[e3])
      return t3;
    for (var n2 = this.groupSizes[e3], r2 = this.indexOfGroup(e3), o2 = r2 + n2, s2 = r2; s2 < o2; s2++)
      t3 += this.tag.getRule(s2) + "/*!sc*/\n";
    return t3;
  }, e2;
}(), T = /* @__PURE__ */ new Map(), x = /* @__PURE__ */ new Map(), k = 1, V = function(e2) {
  if (T.has(e2))
    return T.get(e2);
  for (; x.has(k); )
    k++;
  var t2 = k++;
  return T.set(e2, t2), x.set(t2, e2), t2;
}, B = function(e2) {
  return x.get(e2);
}, z = function(e2, t2) {
  t2 >= k && (k = t2 + 1), T.set(e2, t2), x.set(t2, e2);
}, M = "style[" + N + '][data-styled-version="5.3.11"]', G = new RegExp("^" + N + '\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'), L = function(e2, t2, n2) {
  for (var r2, o2 = n2.split(","), s2 = 0, i2 = o2.length; s2 < i2; s2++)
    (r2 = o2[s2]) && e2.registerName(t2, r2);
}, F = function(e2, t2) {
  for (var n2 = (t2.textContent || "").split("/*!sc*/\n"), r2 = [], o2 = 0, s2 = n2.length; o2 < s2; o2++) {
    var i2 = n2[o2].trim();
    if (i2) {
      var a2 = i2.match(G);
      if (a2) {
        var c2 = 0 | parseInt(a2[1], 10), u2 = a2[2];
        0 !== c2 && (z(u2, c2), L(e2, u2, a2[3]), e2.getTag().insertRules(c2, r2)), r2.length = 0;
      } else
        r2.push(i2);
    }
  }
}, Y = function() {
  return "undefined" != typeof __webpack_nonce__ ? __webpack_nonce__ : null;
}, q = function(e2) {
  var t2 = document.head, n2 = e2 || t2, r2 = document.createElement("style"), o2 = function(e3) {
    for (var t3 = e3.childNodes, n3 = t3.length; n3 >= 0; n3--) {
      var r3 = t3[n3];
      if (r3 && 1 === r3.nodeType && r3.hasAttribute(N))
        return r3;
    }
  }(n2), s2 = void 0 !== o2 ? o2.nextSibling : null;
  r2.setAttribute(N, "active"), r2.setAttribute("data-styled-version", "5.3.11");
  var i2 = Y();
  return i2 && r2.setAttribute("nonce", i2), n2.insertBefore(r2, s2), r2;
}, H = function() {
  function e2(e3) {
    var t3 = this.element = q(e3);
    t3.appendChild(document.createTextNode("")), this.sheet = function(e4) {
      if (e4.sheet)
        return e4.sheet;
      for (var t4 = document.styleSheets, n2 = 0, r2 = t4.length; n2 < r2; n2++) {
        var o2 = t4[n2];
        if (o2.ownerNode === e4)
          return o2;
      }
      D(17);
    }(t3), this.length = 0;
  }
  var t2 = e2.prototype;
  return t2.insertRule = function(e3, t3) {
    try {
      return this.sheet.insertRule(t3, e3), this.length++, true;
    } catch (e4) {
      return false;
    }
  }, t2.deleteRule = function(e3) {
    this.sheet.deleteRule(e3), this.length--;
  }, t2.getRule = function(e3) {
    var t3 = this.sheet.cssRules[e3];
    return void 0 !== t3 && "string" == typeof t3.cssText ? t3.cssText : "";
  }, e2;
}(), $ = function() {
  function e2(e3) {
    var t3 = this.element = q(e3);
    this.nodes = t3.childNodes, this.length = 0;
  }
  var t2 = e2.prototype;
  return t2.insertRule = function(e3, t3) {
    if (e3 <= this.length && e3 >= 0) {
      var n2 = document.createTextNode(t3), r2 = this.nodes[e3];
      return this.element.insertBefore(n2, r2 || null), this.length++, true;
    }
    return false;
  }, t2.deleteRule = function(e3) {
    this.element.removeChild(this.nodes[e3]), this.length--;
  }, t2.getRule = function(e3) {
    return e3 < this.length ? this.nodes[e3].textContent : "";
  }, e2;
}(), W = function() {
  function e2(e3) {
    this.rules = [], this.length = 0;
  }
  var t2 = e2.prototype;
  return t2.insertRule = function(e3, t3) {
    return e3 <= this.length && (this.rules.splice(e3, 0, t3), this.length++, true);
  }, t2.deleteRule = function(e3) {
    this.rules.splice(e3, 1), this.length--;
  }, t2.getRule = function(e3) {
    return e3 < this.length ? this.rules[e3] : "";
  }, e2;
}(), U = C, J = { isServer: !C, useCSSOMInjection: !I }, X = function() {
  function e2(e3, t3, n2) {
    void 0 === e3 && (e3 = w), void 0 === t3 && (t3 = {}), this.options = y({}, J, {}, e3), this.gs = t3, this.names = new Map(n2), this.server = !!e3.isServer, !this.server && C && U && (U = false, function(e4) {
      for (var t4 = document.querySelectorAll(M), n3 = 0, r2 = t4.length; n3 < r2; n3++) {
        var o2 = t4[n3];
        o2 && "active" !== o2.getAttribute(N) && (F(e4, o2), o2.parentNode && o2.parentNode.removeChild(o2));
      }
    }(this));
  }
  e2.registerId = function(e3) {
    return V(e3);
  };
  var t2 = e2.prototype;
  return t2.reconstructWithOptions = function(t3, n2) {
    return void 0 === n2 && (n2 = true), new e2(y({}, this.options, {}, t3), this.gs, n2 && this.names || void 0);
  }, t2.allocateGSInstance = function(e3) {
    return this.gs[e3] = (this.gs[e3] || 0) + 1;
  }, t2.getTag = function() {
    return this.tag || (this.tag = (n2 = (t3 = this.options).isServer, r2 = t3.useCSSOMInjection, o2 = t3.target, e3 = n2 ? new W(o2) : r2 ? new H(o2) : new $(o2), new j(e3)));
    var e3, t3, n2, r2, o2;
  }, t2.hasNameForId = function(e3, t3) {
    return this.names.has(e3) && this.names.get(e3).has(t3);
  }, t2.registerName = function(e3, t3) {
    if (V(e3), this.names.has(e3))
      this.names.get(e3).add(t3);
    else {
      var n2 = /* @__PURE__ */ new Set();
      n2.add(t3), this.names.set(e3, n2);
    }
  }, t2.insertRules = function(e3, t3, n2) {
    this.registerName(e3, t3), this.getTag().insertRules(V(e3), n2);
  }, t2.clearNames = function(e3) {
    this.names.has(e3) && this.names.get(e3).clear();
  }, t2.clearRules = function(e3) {
    this.getTag().clearGroup(V(e3)), this.clearNames(e3);
  }, t2.clearTag = function() {
    this.tag = void 0;
  }, t2.toString = function() {
    return function(e3) {
      for (var t3 = e3.getTag(), n2 = t3.length, r2 = "", o2 = 0; o2 < n2; o2++) {
        var s2 = B(o2);
        if (void 0 !== s2) {
          var i2 = e3.names.get(s2), a2 = t3.getGroup(o2);
          if (i2 && a2 && i2.size) {
            var c2 = N + ".g" + o2 + '[id="' + s2 + '"]', u2 = "";
            void 0 !== i2 && i2.forEach(function(e4) {
              e4.length > 0 && (u2 += e4 + ",");
            }), r2 += "" + a2 + c2 + '{content:"' + u2 + '"}/*!sc*/\n';
          }
        }
      }
      return r2;
    }(this);
  }, e2;
}(), Z = /(a)(d)/gi, K = function(e2) {
  return String.fromCharCode(e2 + (e2 > 25 ? 39 : 97));
};
function Q(e2) {
  var t2, n2 = "";
  for (t2 = Math.abs(e2); t2 > 52; t2 = t2 / 52 | 0)
    n2 = K(t2 % 52) + n2;
  return (K(t2 % 52) + n2).replace(Z, "$1-$2");
}
var ee = function(e2, t2) {
  for (var n2 = t2.length; n2; )
    e2 = 33 * e2 ^ t2.charCodeAt(--n2);
  return e2;
}, te = function(e2) {
  return ee(5381, e2);
};
function ne(e2) {
  for (var t2 = 0; t2 < e2.length; t2 += 1) {
    var n2 = e2[t2];
    if (E(n2) && !_$3(n2))
      return false;
  }
  return true;
}
var re = te("5.3.11"), oe = function() {
  function e2(e3, t2, n2) {
    this.rules = e3, this.staticRulesId = "", this.isStatic = (void 0 === n2 || n2.isStatic) && ne(e3), this.componentId = t2, this.baseHash = ee(re, t2), this.baseStyle = n2, X.registerId(t2);
  }
  return e2.prototype.generateAndInjectStyles = function(e3, t2, n2) {
    var r2 = this.componentId, o2 = [];
    if (this.baseStyle && o2.push(this.baseStyle.generateAndInjectStyles(e3, t2, n2)), this.isStatic && !n2.hash)
      if (this.staticRulesId && t2.hasNameForId(r2, this.staticRulesId))
        o2.push(this.staticRulesId);
      else {
        var s2 = _e(this.rules, e3, t2, n2).join(""), i2 = Q(ee(this.baseHash, s2) >>> 0);
        if (!t2.hasNameForId(r2, i2)) {
          var a2 = n2(s2, "." + i2, void 0, r2);
          t2.insertRules(r2, i2, a2);
        }
        o2.push(i2), this.staticRulesId = i2;
      }
    else {
      for (var c2 = this.rules.length, u2 = ee(this.baseHash, n2.hash), l2 = "", d2 = 0; d2 < c2; d2++) {
        var h2 = this.rules[d2];
        if ("string" == typeof h2)
          l2 += h2;
        else if (h2) {
          var p2 = _e(h2, e3, t2, n2), f2 = Array.isArray(p2) ? p2.join("") : p2;
          u2 = ee(u2, f2 + d2), l2 += f2;
        }
      }
      if (l2) {
        var m2 = Q(u2 >>> 0);
        if (!t2.hasNameForId(r2, m2)) {
          var y2 = n2(l2, "." + m2, void 0, r2);
          t2.insertRules(r2, m2, y2);
        }
        o2.push(m2);
      }
    }
    return o2.join(" ");
  }, e2;
}(), se = /^\s*\/\/.*$/gm, ie = [":", "[", ".", "#"];
function ae(e2) {
  var t2, n2, r2, o2, s2 = void 0 === e2 ? w : e2, i2 = s2.options, a2 = void 0 === i2 ? w : i2, c2 = s2.plugins, u2 = void 0 === c2 ? S : c2, l2 = new stylis_min(a2), d2 = [], p2 = function(e3) {
    function t3(t4) {
      if (t4)
        try {
          e3(t4 + "}");
        } catch (e4) {
        }
    }
    return function(n3, r3, o3, s3, i3, a3, c3, u3, l3, d3) {
      switch (n3) {
        case 1:
          if (0 === l3 && 64 === r3.charCodeAt(0))
            return e3(r3 + ";"), "";
          break;
        case 2:
          if (0 === u3)
            return r3 + "/*|*/";
          break;
        case 3:
          switch (u3) {
            case 102:
            case 112:
              return e3(o3[0] + r3), "";
            default:
              return r3 + (0 === d3 ? "/*|*/" : "");
          }
        case -2:
          r3.split("/*|*/}").forEach(t3);
      }
    };
  }(function(e3) {
    d2.push(e3);
  }), f2 = function(e3, r3, s3) {
    return 0 === r3 && -1 !== ie.indexOf(s3[n2.length]) || s3.match(o2) ? e3 : "." + t2;
  };
  function m2(e3, s3, i3, a3) {
    void 0 === a3 && (a3 = "&");
    var c3 = e3.replace(se, ""), u3 = s3 && i3 ? i3 + " " + s3 + " { " + c3 + " }" : c3;
    return t2 = a3, n2 = s3, r2 = new RegExp("\\" + n2 + "\\b", "g"), o2 = new RegExp("(\\" + n2 + "\\b){2,}"), l2(i3 || !s3 ? "" : s3, u3);
  }
  return l2.use([].concat(u2, [function(e3, t3, o3) {
    2 === e3 && o3.length && o3[0].lastIndexOf(n2) > 0 && (o3[0] = o3[0].replace(r2, f2));
  }, p2, function(e3) {
    if (-2 === e3) {
      var t3 = d2;
      return d2 = [], t3;
    }
  }])), m2.hash = u2.length ? u2.reduce(function(e3, t3) {
    return t3.name || D(15), ee(e3, t3.name);
  }, 5381).toString() : "", m2;
}
var ce = r$1.createContext();
ce.Consumer;
var le = r$1.createContext(), de = (le.Consumer, new X()), he = ae();
function pe() {
  return reactExports.useContext(ce) || de;
}
function fe() {
  return reactExports.useContext(le) || he;
}
var ye = function() {
  function e2(e3, t2) {
    var n2 = this;
    this.inject = function(e4, t3) {
      void 0 === t3 && (t3 = he);
      var r2 = n2.name + t3.hash;
      e4.hasNameForId(n2.id, r2) || e4.insertRules(n2.id, r2, t3(n2.rules, r2, "@keyframes"));
    }, this.toString = function() {
      return D(12, String(n2.name));
    }, this.name = e3, this.id = "sc-keyframes-" + e3, this.rules = t2;
  }
  return e2.prototype.getName = function(e3) {
    return void 0 === e3 && (e3 = he), this.name + e3.hash;
  }, e2;
}(), ve = /([A-Z])/, ge = /([A-Z])/g, Se = /^ms-/, we = function(e2) {
  return "-" + e2.toLowerCase();
};
function Ee(e2) {
  return ve.test(e2) ? e2.replace(ge, we).replace(Se, "-ms-") : e2;
}
var be = function(e2) {
  return null == e2 || false === e2 || "" === e2;
};
function _e(e2, n2, r2, o2) {
  if (Array.isArray(e2)) {
    for (var s2, i2 = [], a2 = 0, c2 = e2.length; a2 < c2; a2 += 1)
      "" !== (s2 = _e(e2[a2], n2, r2, o2)) && (Array.isArray(s2) ? i2.push.apply(i2, s2) : i2.push(s2));
    return i2;
  }
  if (be(e2))
    return "";
  if (_$3(e2))
    return "." + e2.styledComponentId;
  if (E(e2)) {
    if ("function" != typeof (l2 = e2) || l2.prototype && l2.prototype.isReactComponent || !n2)
      return e2;
    var u2 = e2(n2);
    return _e(u2, n2, r2, o2);
  }
  var l2;
  return e2 instanceof ye ? r2 ? (e2.inject(r2, o2), e2.getName(o2)) : e2 : g(e2) ? function e3(t2, n3) {
    var r3, o3, s3 = [];
    for (var i3 in t2)
      t2.hasOwnProperty(i3) && !be(t2[i3]) && (Array.isArray(t2[i3]) && t2[i3].isCss || E(t2[i3]) ? s3.push(Ee(i3) + ":", t2[i3], ";") : g(t2[i3]) ? s3.push.apply(s3, e3(t2[i3], i3)) : s3.push(Ee(i3) + ": " + (r3 = i3, null == (o3 = t2[i3]) || "boolean" == typeof o3 || "" === o3 ? "" : "number" != typeof o3 || 0 === o3 || r3 in unitlessKeys || r3.startsWith("--") ? String(o3).trim() : o3 + "px") + ";"));
    return n3 ? [n3 + " {"].concat(s3, ["}"]) : s3;
  }(e2) : e2.toString();
}
var Ne = function(e2) {
  return Array.isArray(e2) && (e2.isCss = true), e2;
};
function Ae(e2) {
  for (var t2 = arguments.length, n2 = new Array(t2 > 1 ? t2 - 1 : 0), r2 = 1; r2 < t2; r2++)
    n2[r2 - 1] = arguments[r2];
  return E(e2) || g(e2) ? Ne(_e(v(S, [e2].concat(n2)))) : 0 === n2.length && 1 === e2.length && "string" == typeof e2[0] ? e2 : Ne(_e(v(e2, n2)));
}
var Oe = function(e2, t2, n2) {
  return void 0 === n2 && (n2 = w), e2.theme !== n2.theme && e2.theme || t2 || n2.theme;
}, Re = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g, De = /(^-|-$)/g;
function je(e2) {
  return e2.replace(Re, "-").replace(De, "");
}
var Te = function(e2) {
  return Q(te(e2) >>> 0);
};
function xe(e2) {
  return "string" == typeof e2 && true;
}
var ke = function(e2) {
  return "function" == typeof e2 || "object" == typeof e2 && null !== e2 && !Array.isArray(e2);
}, Ve = function(e2) {
  return "__proto__" !== e2 && "constructor" !== e2 && "prototype" !== e2;
};
function Be(e2, t2, n2) {
  var r2 = e2[n2];
  ke(t2) && ke(r2) ? ze(r2, t2) : e2[n2] = t2;
}
function ze(e2) {
  for (var t2 = arguments.length, n2 = new Array(t2 > 1 ? t2 - 1 : 0), r2 = 1; r2 < t2; r2++)
    n2[r2 - 1] = arguments[r2];
  for (var o2 = 0, s2 = n2; o2 < s2.length; o2++) {
    var i2 = s2[o2];
    if (ke(i2))
      for (var a2 in i2)
        Ve(a2) && Be(e2, i2[a2], a2);
  }
  return e2;
}
var Me = r$1.createContext();
Me.Consumer;
var Fe = {};
function Ye(e2, t2, n2) {
  var o2 = _$3(e2), i2 = !xe(e2), a2 = t2.attrs, c2 = void 0 === a2 ? S : a2, l2 = t2.componentId, d2 = void 0 === l2 ? function(e3, t3) {
    var n3 = "string" != typeof e3 ? "sc" : je(e3);
    Fe[n3] = (Fe[n3] || 0) + 1;
    var r2 = n3 + "-" + Te("5.3.11" + n3 + Fe[n3]);
    return t3 ? t3 + "-" + r2 : r2;
  }(t2.displayName, t2.parentComponentId) : l2, h2 = t2.displayName, p2 = void 0 === h2 ? function(e3) {
    return xe(e3) ? "styled." + e3 : "Styled(" + b(e3) + ")";
  }(e2) : h2, v2 = t2.displayName && t2.componentId ? je(t2.displayName) + "-" + t2.componentId : t2.componentId || d2, g2 = o2 && e2.attrs ? Array.prototype.concat(e2.attrs, c2).filter(Boolean) : c2, N2 = t2.shouldForwardProp;
  o2 && e2.shouldForwardProp && (N2 = t2.shouldForwardProp ? function(n3, r2, o3) {
    return e2.shouldForwardProp(n3, r2, o3) && t2.shouldForwardProp(n3, r2, o3);
  } : e2.shouldForwardProp);
  var A2, C2 = new oe(n2, v2, o2 ? e2.componentStyle : void 0), I2 = C2.isStatic && 0 === c2.length, P2 = function(e3, t3) {
    return function(e4, t4, n3, r2) {
      var o3 = e4.attrs, i3 = e4.componentStyle, a3 = e4.defaultProps, c3 = e4.foldedComponentIds, l3 = e4.shouldForwardProp, d3 = e4.styledComponentId, h3 = e4.target, p3 = function(e5, t5, n4) {
        void 0 === e5 && (e5 = w);
        var r3 = y({}, t5, { theme: e5 }), o4 = {};
        return n4.forEach(function(e6) {
          var t6, n5, s2, i4 = e6;
          for (t6 in E(i4) && (i4 = i4(r3)), i4)
            r3[t6] = o4[t6] = "className" === t6 ? (n5 = o4[t6], s2 = i4[t6], n5 && s2 ? n5 + " " + s2 : n5 || s2) : i4[t6];
        }), [r3, o4];
      }(Oe(t4, reactExports.useContext(Me), a3) || w, t4, o3), m2 = p3[0], v3 = p3[1], g3 = function(e5, t5, n4, r3) {
        var o4 = pe(), s2 = fe(), i4 = t5 ? e5.generateAndInjectStyles(w, o4, s2) : e5.generateAndInjectStyles(n4, o4, s2);
        return i4;
      }(i3, r2, m2), S2 = n3, b2 = v3.$as || t4.$as || v3.as || t4.as || h3, _2 = xe(b2), N3 = v3 !== t4 ? y({}, t4, {}, v3) : t4, A3 = {};
      for (var C3 in N3)
        "$" !== C3[0] && "as" !== C3 && ("forwardedAs" === C3 ? A3.as = N3[C3] : (l3 ? l3(C3, isPropValid, b2) : !_2 || isPropValid(C3)) && (A3[C3] = N3[C3]));
      return t4.style && v3.style !== t4.style && (A3.style = y({}, t4.style, {}, v3.style)), A3.className = Array.prototype.concat(c3, d3, g3 !== d3 ? g3 : null, t4.className, v3.className).filter(Boolean).join(" "), A3.ref = S2, reactExports.createElement(b2, A3);
    }(A2, e3, t3, I2);
  };
  return P2.displayName = p2, (A2 = r$1.forwardRef(P2)).attrs = g2, A2.componentStyle = C2, A2.displayName = p2, A2.shouldForwardProp = N2, A2.foldedComponentIds = o2 ? Array.prototype.concat(e2.foldedComponentIds, e2.styledComponentId) : S, A2.styledComponentId = v2, A2.target = o2 ? e2.target : e2, A2.withComponent = function(e3) {
    var r2 = t2.componentId, o3 = function(e4, t3) {
      if (null == e4)
        return {};
      var n3, r3, o4 = {}, s3 = Object.keys(e4);
      for (r3 = 0; r3 < s3.length; r3++)
        n3 = s3[r3], t3.indexOf(n3) >= 0 || (o4[n3] = e4[n3]);
      return o4;
    }(t2, ["componentId"]), s2 = r2 && r2 + "-" + (xe(e3) ? e3 : je(b(e3)));
    return Ye(e3, y({}, o3, { attrs: g2, componentId: s2 }), n2);
  }, Object.defineProperty(A2, "defaultProps", { get: function() {
    return this._foldedDefaultProps;
  }, set: function(t3) {
    this._foldedDefaultProps = o2 ? ze({}, e2.defaultProps, t3) : t3;
  } }), Object.defineProperty(A2, "toString", { value: function() {
    return "." + A2.styledComponentId;
  } }), i2 && m(A2, e2, { attrs: true, componentStyle: true, displayName: true, foldedComponentIds: true, shouldForwardProp: true, styledComponentId: true, target: true, withComponent: true }), A2;
}
var qe = function(e2) {
  return function e3(t2, r2, o2) {
    if (void 0 === o2 && (o2 = w), !reactIsExports.isValidElementType(r2))
      return D(1, String(r2));
    var s2 = function() {
      return t2(r2, o2, Ae.apply(void 0, arguments));
    };
    return s2.withConfig = function(n2) {
      return e3(t2, r2, y({}, o2, {}, n2));
    }, s2.attrs = function(n2) {
      return e3(t2, r2, y({}, o2, { attrs: Array.prototype.concat(o2.attrs, n2).filter(Boolean) }));
    }, s2;
  }(Ye, e2);
};
["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "textPath", "tspan"].forEach(function(e2) {
  qe[e2] = qe(e2);
});
const styled = qe;
styled.div`
  padding: 18px 20px;
  border-radius: 8px;
  background-color: white;

  @media (prefers-color-scheme: dark) {
    background-color: #111;
  }
`;
const FlexBoxRow = styled.div`
  display: flex;
  flex-direction: row;
  gap: 10px;
  align-items: center;
`;
const FlexBoxCol = styled.div`
  display: flex;
  flex-direction: column;
  gap: 10px;
`;
const Button = styled.button`
  background-color: ${(props) => props.disabled ? "#6e6e6e" : "var(--tg-theme-button-color)"};
  border: 0;
  border-radius: 8px;
  padding: 10px 20px;
  color: var(--tg-theme-button-text-color);
  font-weight: 700;
  cursor: pointer;
  pointer-events: ${(props) => props.disabled ? "none" : "inherit"};
`;
styled.div`
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
`;
styled("input")`
  padding: 10px 20px;
  border-radius: 10px;
  width: 100%;
  border: 1px solid #c2c2c2;

  @media (prefers-color-scheme: dark) {
    border: 1px solid #fefefe;
  }
`;
function useTonConnect() {
  const [tonConnectUI2] = useTonConnectUI();
  const wallet = useTonWallet();
  return {
    sender: {
      send: async (args) => {
        var _a2;
        await tonConnectUI2.sendTransaction({
          messages: [
            {
              address: args.to.toString(),
              amount: args.value.toString(),
              payload: (_a2 = args.body) == null ? void 0 : _a2.toBoc().toString("base64")
            }
          ],
          validUntil: Date.now() + 5 * 60 * 1e3
          // 5 минут для одобрения пользователем
        });
      }
    },
    connected: !!(wallet == null ? void 0 : wallet.account.address),
    // Проверяем, подключен ли кошелек
    wallet: (wallet == null ? void 0 : wallet.account.address) ?? null,
    // Если кошелек подключен, возвращаем его адрес, иначе null
    network: (wallet == null ? void 0 : wallet.account.chain) ?? null
    // Если кошелек подключен, возвращаем сеть, иначе null
  };
}
var axios$3 = { exports: {} };
var bind$8 = function bind2(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i2 = 0; i2 < args.length; i2++) {
      args[i2] = arguments[i2];
    }
    return fn.apply(thisArg, args);
  };
};
var bind$7 = bind$8;
var toString = Object.prototype.toString;
function isArray(val) {
  return Array.isArray(val);
}
function isUndefined(val) {
  return typeof val === "undefined";
}
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
}
function isArrayBuffer(val) {
  return toString.call(val) === "[object ArrayBuffer]";
}
function isFormData(val) {
  return toString.call(val) === "[object FormData]";
}
function isArrayBufferView(val) {
  var result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
function isString(val) {
  return typeof val === "string";
}
function isNumber(val) {
  return typeof val === "number";
}
function isObject(val) {
  return val !== null && typeof val === "object";
}
function isPlainObject(val) {
  if (toString.call(val) !== "[object Object]") {
    return false;
  }
  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}
function isDate(val) {
  return toString.call(val) === "[object Date]";
}
function isFile(val) {
  return toString.call(val) === "[object File]";
}
function isBlob(val) {
  return toString.call(val) === "[object Blob]";
}
function isFunction(val) {
  return toString.call(val) === "[object Function]";
}
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}
function isURLSearchParams(val) {
  return toString.call(val) === "[object URLSearchParams]";
}
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
}
function isStandardBrowserEnv() {
  if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
    return false;
  }
  return typeof window !== "undefined" && typeof document !== "undefined";
}
function forEach(obj, fn) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (var i2 = 0, l2 = obj.length; i2 < l2; i2++) {
      fn.call(null, obj[i2], i2, obj);
    }
  } else {
    for (var key2 in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key2)) {
        fn.call(null, obj[key2], key2, obj);
      }
    }
  }
}
function merge() {
  var result = {};
  function assignValue(val, key2) {
    if (isPlainObject(result[key2]) && isPlainObject(val)) {
      result[key2] = merge(result[key2], val);
    } else if (isPlainObject(val)) {
      result[key2] = merge({}, val);
    } else if (isArray(val)) {
      result[key2] = val.slice();
    } else {
      result[key2] = val;
    }
  }
  for (var i2 = 0, l2 = arguments.length; i2 < l2; i2++) {
    forEach(arguments[i2], assignValue);
  }
  return result;
}
function extend$5(a2, b2, thisArg) {
  forEach(b2, function assignValue(val, key2) {
    if (thisArg && typeof val === "function") {
      a2[key2] = bind$7(val, thisArg);
    } else {
      a2[key2] = val;
    }
  });
  return a2;
}
function stripBOM(content) {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
}
var utils$9 = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isFunction,
  isStream,
  isURLSearchParams,
  isStandardBrowserEnv,
  forEach,
  merge,
  extend: extend$5,
  trim,
  stripBOM
};
var utils$8 = utils$9;
function encode(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
var buildURL$1 = function buildURL2(url, params, paramsSerializer) {
  if (!params) {
    return url;
  }
  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils$8.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    utils$8.forEach(params, function serialize(val, key2) {
      if (val === null || typeof val === "undefined") {
        return;
      }
      if (utils$8.isArray(val)) {
        key2 = key2 + "[]";
      } else {
        val = [val];
      }
      utils$8.forEach(val, function parseValue(v2) {
        if (utils$8.isDate(v2)) {
          v2 = v2.toISOString();
        } else if (utils$8.isObject(v2)) {
          v2 = JSON.stringify(v2);
        }
        parts.push(encode(key2) + "=" + encode(v2));
      });
    });
    serializedParams = parts.join("&");
  }
  if (serializedParams) {
    var hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
};
var utils$7 = utils$9;
function InterceptorManager$1() {
  this.handlers = [];
}
InterceptorManager$1.prototype.use = function use2(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled,
    rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};
InterceptorManager$1.prototype.eject = function eject(id2) {
  if (this.handlers[id2]) {
    this.handlers[id2] = null;
  }
};
InterceptorManager$1.prototype.forEach = function forEach2(fn) {
  utils$7.forEach(this.handlers, function forEachHandler(h2) {
    if (h2 !== null) {
      fn(h2);
    }
  });
};
var InterceptorManager_1 = InterceptorManager$1;
var utils$6 = utils$9;
var normalizeHeaderName = function normalizeHeaderName2(headers, normalizedName) {
  utils$6.forEach(headers, function processHeader(value, name2) {
    if (name2 !== normalizedName && name2.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name2];
    }
  });
};
var enhanceError = function enhanceError2(error, config, code2, request2, response) {
  error.config = config;
  if (code2) {
    error.code = code2;
  }
  error.request = request2;
  error.response = response;
  error.isAxiosError = true;
  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };
  return error;
};
var createError;
var hasRequiredCreateError;
function requireCreateError() {
  if (hasRequiredCreateError)
    return createError;
  hasRequiredCreateError = 1;
  var enhanceError$1 = enhanceError;
  createError = function createError2(message2, config, code2, request2, response) {
    var error = new Error(message2);
    return enhanceError$1(error, config, code2, request2, response);
  };
  return createError;
}
var settle;
var hasRequiredSettle;
function requireSettle() {
  if (hasRequiredSettle)
    return settle;
  hasRequiredSettle = 1;
  var createError2 = requireCreateError();
  settle = function settle2(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) {
      resolve(response);
    } else {
      reject(createError2(
        "Request failed with status code " + response.status,
        response.config,
        null,
        response.request,
        response
      ));
    }
  };
  return settle;
}
var cookies;
var hasRequiredCookies;
function requireCookies() {
  if (hasRequiredCookies)
    return cookies;
  hasRequiredCookies = 1;
  var utils2 = utils$9;
  cookies = utils2.isStandardBrowserEnv() ? (
    // Standard browser envs support document.cookie
    function standardBrowserEnv() {
      return {
        write: function write(name2, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name2 + "=" + encodeURIComponent(value));
          if (utils2.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils2.isString(path)) {
            cookie.push("path=" + path);
          }
          if (utils2.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name2) {
          var match2 = document.cookie.match(new RegExp("(^|;\\s*)(" + name2 + ")=([^;]*)"));
          return match2 ? decodeURIComponent(match2[3]) : null;
        },
        remove: function remove(name2) {
          this.write(name2, "", Date.now() - 864e5);
        }
      };
    }()
  ) : (
    // Non standard browser env (web workers, react-native) lack needed support.
    function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }()
  );
  return cookies;
}
var isAbsoluteURL;
var hasRequiredIsAbsoluteURL;
function requireIsAbsoluteURL() {
  if (hasRequiredIsAbsoluteURL)
    return isAbsoluteURL;
  hasRequiredIsAbsoluteURL = 1;
  isAbsoluteURL = function isAbsoluteURL2(url) {
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
  };
  return isAbsoluteURL;
}
var combineURLs;
var hasRequiredCombineURLs;
function requireCombineURLs() {
  if (hasRequiredCombineURLs)
    return combineURLs;
  hasRequiredCombineURLs = 1;
  combineURLs = function combineURLs2(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
  };
  return combineURLs;
}
var buildFullPath;
var hasRequiredBuildFullPath;
function requireBuildFullPath() {
  if (hasRequiredBuildFullPath)
    return buildFullPath;
  hasRequiredBuildFullPath = 1;
  var isAbsoluteURL2 = requireIsAbsoluteURL();
  var combineURLs2 = requireCombineURLs();
  buildFullPath = function buildFullPath2(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL2(requestedURL)) {
      return combineURLs2(baseURL, requestedURL);
    }
    return requestedURL;
  };
  return buildFullPath;
}
var parseHeaders;
var hasRequiredParseHeaders;
function requireParseHeaders() {
  if (hasRequiredParseHeaders)
    return parseHeaders;
  hasRequiredParseHeaders = 1;
  var utils2 = utils$9;
  var ignoreDuplicateOf = [
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
  ];
  parseHeaders = function parseHeaders2(headers) {
    var parsed = {};
    var key2;
    var val;
    var i2;
    if (!headers) {
      return parsed;
    }
    utils2.forEach(headers.split("\n"), function parser(line) {
      i2 = line.indexOf(":");
      key2 = utils2.trim(line.substr(0, i2)).toLowerCase();
      val = utils2.trim(line.substr(i2 + 1));
      if (key2) {
        if (parsed[key2] && ignoreDuplicateOf.indexOf(key2) >= 0) {
          return;
        }
        if (key2 === "set-cookie") {
          parsed[key2] = (parsed[key2] ? parsed[key2] : []).concat([val]);
        } else {
          parsed[key2] = parsed[key2] ? parsed[key2] + ", " + val : val;
        }
      }
    });
    return parsed;
  };
  return parseHeaders;
}
var isURLSameOrigin;
var hasRequiredIsURLSameOrigin;
function requireIsURLSameOrigin() {
  if (hasRequiredIsURLSameOrigin)
    return isURLSameOrigin;
  hasRequiredIsURLSameOrigin = 1;
  var utils2 = utils$9;
  isURLSameOrigin = utils2.isStandardBrowserEnv() ? (
    // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
    function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement("a");
      var originURL;
      function resolveURL(url) {
        var href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin2(requestURL) {
        var parsed = utils2.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }()
  ) : (
    // Non standard browser envs (web workers, react-native) lack needed support.
    function nonStandardBrowserEnv() {
      return function isURLSameOrigin2() {
        return true;
      };
    }()
  );
  return isURLSameOrigin;
}
var Cancel_1;
var hasRequiredCancel;
function requireCancel() {
  if (hasRequiredCancel)
    return Cancel_1;
  hasRequiredCancel = 1;
  function Cancel2(message2) {
    this.message = message2;
  }
  Cancel2.prototype.toString = function toString2() {
    return "Cancel" + (this.message ? ": " + this.message : "");
  };
  Cancel2.prototype.__CANCEL__ = true;
  Cancel_1 = Cancel2;
  return Cancel_1;
}
var xhr;
var hasRequiredXhr;
function requireXhr() {
  if (hasRequiredXhr)
    return xhr;
  hasRequiredXhr = 1;
  var utils2 = utils$9;
  var settle2 = requireSettle();
  var cookies2 = requireCookies();
  var buildURL3 = buildURL$1;
  var buildFullPath2 = requireBuildFullPath();
  var parseHeaders2 = requireParseHeaders();
  var isURLSameOrigin2 = requireIsURLSameOrigin();
  var createError2 = requireCreateError();
  var defaults2 = requireDefaults();
  var Cancel2 = requireCancel();
  xhr = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      var requestData = config.data;
      var requestHeaders = config.headers;
      var responseType = config.responseType;
      var onCanceled;
      function done() {
        if (config.cancelToken) {
          config.cancelToken.unsubscribe(onCanceled);
        }
        if (config.signal) {
          config.signal.removeEventListener("abort", onCanceled);
        }
      }
      if (utils2.isFormData(requestData)) {
        delete requestHeaders["Content-Type"];
      }
      var request2 = new XMLHttpRequest();
      if (config.auth) {
        var username = config.auth.username || "";
        var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
        requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
      }
      var fullPath = buildFullPath2(config.baseURL, config.url);
      request2.open(config.method.toUpperCase(), buildURL3(fullPath, config.params, config.paramsSerializer), true);
      request2.timeout = config.timeout;
      function onloadend() {
        if (!request2) {
          return;
        }
        var responseHeaders = "getAllResponseHeaders" in request2 ? parseHeaders2(request2.getAllResponseHeaders()) : null;
        var responseData = !responseType || responseType === "text" || responseType === "json" ? request2.responseText : request2.response;
        var response = {
          data: responseData,
          status: request2.status,
          statusText: request2.statusText,
          headers: responseHeaders,
          config,
          request: request2
        };
        settle2(function _resolve(value) {
          resolve(value);
          done();
        }, function _reject(err) {
          reject(err);
          done();
        }, response);
        request2 = null;
      }
      if ("onloadend" in request2) {
        request2.onloadend = onloadend;
      } else {
        request2.onreadystatechange = function handleLoad() {
          if (!request2 || request2.readyState !== 4) {
            return;
          }
          if (request2.status === 0 && !(request2.responseURL && request2.responseURL.indexOf("file:") === 0)) {
            return;
          }
          setTimeout(onloadend);
        };
      }
      request2.onabort = function handleAbort() {
        if (!request2) {
          return;
        }
        reject(createError2("Request aborted", config, "ECONNABORTED", request2));
        request2 = null;
      };
      request2.onerror = function handleError2() {
        reject(createError2("Network Error", config, null, request2));
        request2 = null;
      };
      request2.ontimeout = function handleTimeout() {
        var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
        var transitional2 = config.transitional || defaults2.transitional;
        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }
        reject(createError2(
          timeoutErrorMessage,
          config,
          transitional2.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
          request2
        ));
        request2 = null;
      };
      if (utils2.isStandardBrowserEnv()) {
        var xsrfValue = (config.withCredentials || isURLSameOrigin2(fullPath)) && config.xsrfCookieName ? cookies2.read(config.xsrfCookieName) : void 0;
        if (xsrfValue) {
          requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
      }
      if ("setRequestHeader" in request2) {
        utils2.forEach(requestHeaders, function setRequestHeader(val, key2) {
          if (typeof requestData === "undefined" && key2.toLowerCase() === "content-type") {
            delete requestHeaders[key2];
          } else {
            request2.setRequestHeader(key2, val);
          }
        });
      }
      if (!utils2.isUndefined(config.withCredentials)) {
        request2.withCredentials = !!config.withCredentials;
      }
      if (responseType && responseType !== "json") {
        request2.responseType = config.responseType;
      }
      if (typeof config.onDownloadProgress === "function") {
        request2.addEventListener("progress", config.onDownloadProgress);
      }
      if (typeof config.onUploadProgress === "function" && request2.upload) {
        request2.upload.addEventListener("progress", config.onUploadProgress);
      }
      if (config.cancelToken || config.signal) {
        onCanceled = function(cancel) {
          if (!request2) {
            return;
          }
          reject(!cancel || cancel && cancel.type ? new Cancel2("canceled") : cancel);
          request2.abort();
          request2 = null;
        };
        config.cancelToken && config.cancelToken.subscribe(onCanceled);
        if (config.signal) {
          config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
        }
      }
      if (!requestData) {
        requestData = null;
      }
      request2.send(requestData);
    });
  };
  return xhr;
}
var defaults_1;
var hasRequiredDefaults;
function requireDefaults() {
  if (hasRequiredDefaults)
    return defaults_1;
  hasRequiredDefaults = 1;
  var utils2 = utils$9;
  var normalizeHeaderName$1 = normalizeHeaderName;
  var enhanceError$1 = enhanceError;
  var DEFAULT_CONTENT_TYPE = {
    "Content-Type": "application/x-www-form-urlencoded"
  };
  function setContentTypeIfUnset(headers, value) {
    if (!utils2.isUndefined(headers) && utils2.isUndefined(headers["Content-Type"])) {
      headers["Content-Type"] = value;
    }
  }
  function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== "undefined") {
      adapter = requireXhr();
    } else if (typeof process$1 !== "undefined" && Object.prototype.toString.call(process$1) === "[object process]") {
      adapter = requireXhr();
    }
    return adapter;
  }
  function stringifySafely(rawValue, parser, encoder) {
    if (utils2.isString(rawValue)) {
      try {
        (parser || JSON.parse)(rawValue);
        return utils2.trim(rawValue);
      } catch (e2) {
        if (e2.name !== "SyntaxError") {
          throw e2;
        }
      }
    }
    return (encoder || JSON.stringify)(rawValue);
  }
  var defaults2 = {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: getDefaultAdapter(),
    transformRequest: [function transformRequest(data2, headers) {
      normalizeHeaderName$1(headers, "Accept");
      normalizeHeaderName$1(headers, "Content-Type");
      if (utils2.isFormData(data2) || utils2.isArrayBuffer(data2) || utils2.isBuffer(data2) || utils2.isStream(data2) || utils2.isFile(data2) || utils2.isBlob(data2)) {
        return data2;
      }
      if (utils2.isArrayBufferView(data2)) {
        return data2.buffer;
      }
      if (utils2.isURLSearchParams(data2)) {
        setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
        return data2.toString();
      }
      if (utils2.isObject(data2) || headers && headers["Content-Type"] === "application/json") {
        setContentTypeIfUnset(headers, "application/json");
        return stringifySafely(data2);
      }
      return data2;
    }],
    transformResponse: [function transformResponse(data2) {
      var transitional2 = this.transitional || defaults2.transitional;
      var silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      var forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
      var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
      if (strictJSONParsing || forcedJSONParsing && utils2.isString(data2) && data2.length) {
        try {
          return JSON.parse(data2);
        } catch (e2) {
          if (strictJSONParsing) {
            if (e2.name === "SyntaxError") {
              throw enhanceError$1(e2, this, "E_JSON_PARSE");
            }
            throw e2;
          }
        }
      }
      return data2;
    }],
    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },
    headers: {
      common: {
        "Accept": "application/json, text/plain, */*"
      }
    }
  };
  utils2.forEach(["delete", "get", "head"], function forEachMethodNoData2(method) {
    defaults2.headers[method] = {};
  });
  utils2.forEach(["post", "put", "patch"], function forEachMethodWithData2(method) {
    defaults2.headers[method] = utils2.merge(DEFAULT_CONTENT_TYPE);
  });
  defaults_1 = defaults2;
  return defaults_1;
}
var utils$5 = utils$9;
var defaults$2 = requireDefaults();
var transformData$1 = function transformData2(data2, headers, fns) {
  var context = this || defaults$2;
  utils$5.forEach(fns, function transform(fn) {
    data2 = fn.call(context, data2, headers);
  });
  return data2;
};
var isCancel$1;
var hasRequiredIsCancel;
function requireIsCancel() {
  if (hasRequiredIsCancel)
    return isCancel$1;
  hasRequiredIsCancel = 1;
  isCancel$1 = function isCancel2(value) {
    return !!(value && value.__CANCEL__);
  };
  return isCancel$1;
}
var utils$4 = utils$9;
var transformData = transformData$1;
var isCancel = requireIsCancel();
var defaults$1 = requireDefaults();
var Cancel = requireCancel();
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new Cancel("canceled");
  }
}
var dispatchRequest$1 = function dispatchRequest2(config) {
  throwIfCancellationRequested(config);
  config.headers = config.headers || {};
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );
  config.headers = utils$4.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );
  utils$4.forEach(
    ["delete", "get", "head", "post", "put", "patch", "common"],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );
  var adapter = config.adapter || defaults$1.adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }
    return Promise.reject(reason);
  });
};
var utils$3 = utils$9;
var mergeConfig$2 = function mergeConfig2(config1, config2) {
  config2 = config2 || {};
  var config = {};
  function getMergedValue(target, source) {
    if (utils$3.isPlainObject(target) && utils$3.isPlainObject(source)) {
      return utils$3.merge(target, source);
    } else if (utils$3.isPlainObject(source)) {
      return utils$3.merge({}, source);
    } else if (utils$3.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(prop) {
    if (!utils$3.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils$3.isUndefined(config1[prop])) {
      return getMergedValue(void 0, config1[prop]);
    }
  }
  function valueFromConfig2(prop) {
    if (!utils$3.isUndefined(config2[prop])) {
      return getMergedValue(void 0, config2[prop]);
    }
  }
  function defaultToConfig2(prop) {
    if (!utils$3.isUndefined(config2[prop])) {
      return getMergedValue(void 0, config2[prop]);
    } else if (!utils$3.isUndefined(config1[prop])) {
      return getMergedValue(void 0, config1[prop]);
    }
  }
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(void 0, config1[prop]);
    }
  }
  var mergeMap = {
    "url": valueFromConfig2,
    "method": valueFromConfig2,
    "data": valueFromConfig2,
    "baseURL": defaultToConfig2,
    "transformRequest": defaultToConfig2,
    "transformResponse": defaultToConfig2,
    "paramsSerializer": defaultToConfig2,
    "timeout": defaultToConfig2,
    "timeoutMessage": defaultToConfig2,
    "withCredentials": defaultToConfig2,
    "adapter": defaultToConfig2,
    "responseType": defaultToConfig2,
    "xsrfCookieName": defaultToConfig2,
    "xsrfHeaderName": defaultToConfig2,
    "onUploadProgress": defaultToConfig2,
    "onDownloadProgress": defaultToConfig2,
    "decompress": defaultToConfig2,
    "maxContentLength": defaultToConfig2,
    "maxBodyLength": defaultToConfig2,
    "transport": defaultToConfig2,
    "httpAgent": defaultToConfig2,
    "httpsAgent": defaultToConfig2,
    "cancelToken": defaultToConfig2,
    "socketPath": defaultToConfig2,
    "responseEncoding": defaultToConfig2,
    "validateStatus": mergeDirectKeys
  };
  utils$3.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge2 = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge2(prop);
    utils$3.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
};
var data;
var hasRequiredData;
function requireData() {
  if (hasRequiredData)
    return data;
  hasRequiredData = 1;
  data = {
    "version": "0.25.0"
  };
  return data;
}
var VERSION = requireData().version;
var validators$1 = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type2, i2) {
  validators$1[type2] = function validator2(thing) {
    return typeof thing === type2 || "a" + (i2 < 1 ? "n " : " ") + type2;
  };
});
var deprecatedWarnings = {};
validators$1.transitional = function transitional(validator2, version2, message2) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message2 ? ". " + message2 : "");
  }
  return function(value, opt, opts) {
    if (validator2 === false) {
      throw new Error(formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")));
    }
    if (version2 && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version2 + " and will be removed in the near future"
        )
      );
    }
    return validator2 ? validator2(value, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new TypeError("options must be an object");
  }
  var keys2 = Object.keys(options);
  var i2 = keys2.length;
  while (i2-- > 0) {
    var opt = keys2[i2];
    var validator2 = schema[opt];
    if (validator2) {
      var value = options[opt];
      var result = value === void 0 || validator2(value, opt, options);
      if (result !== true) {
        throw new TypeError("option " + opt + " must be " + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error("Unknown option " + opt);
    }
  }
}
var validator$1 = {
  assertOptions,
  validators: validators$1
};
var utils$2 = utils$9;
var buildURL = buildURL$1;
var InterceptorManager = InterceptorManager_1;
var dispatchRequest = dispatchRequest$1;
var mergeConfig$1 = mergeConfig$2;
var validator = validator$1;
var validators = validator.validators;
function Axios$1(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}
Axios$1.prototype.request = function request(configOrUrl, config) {
  if (typeof configOrUrl === "string") {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }
  if (!config.url) {
    throw new Error("Provided config url is not valid");
  }
  config = mergeConfig$1(this.defaults, config);
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = "get";
  }
  var transitional2 = config.transitional;
  if (transitional2 !== void 0) {
    validator.assertOptions(transitional2, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
      return;
    }
    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });
  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });
  var promise;
  if (!synchronousRequestInterceptors) {
    var chain2 = [dispatchRequest, void 0];
    Array.prototype.unshift.apply(chain2, requestInterceptorChain);
    chain2 = chain2.concat(responseInterceptorChain);
    promise = Promise.resolve(config);
    while (chain2.length) {
      promise = promise.then(chain2.shift(), chain2.shift());
    }
    return promise;
  }
  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }
  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }
  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }
  return promise;
};
Axios$1.prototype.getUri = function getUri(config) {
  if (!config.url) {
    throw new Error("Provided config url is not valid");
  }
  config = mergeConfig$1(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
};
utils$2.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
  Axios$1.prototype[method] = function(url, config) {
    return this.request(mergeConfig$1(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils$2.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  Axios$1.prototype[method] = function(url, data2, config) {
    return this.request(mergeConfig$1(config || {}, {
      method,
      url,
      data: data2
    }));
  };
});
var Axios_1 = Axios$1;
var CancelToken_1;
var hasRequiredCancelToken;
function requireCancelToken() {
  if (hasRequiredCancelToken)
    return CancelToken_1;
  hasRequiredCancelToken = 1;
  var Cancel2 = requireCancel();
  function CancelToken(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    var token = this;
    this.promise.then(function(cancel) {
      if (!token._listeners)
        return;
      var i2;
      var l2 = token._listeners.length;
      for (i2 = 0; i2 < l2; i2++) {
        token._listeners[i2](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = function(onfulfilled) {
      var _resolve;
      var promise = new Promise(function(resolve) {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message2) {
      if (token.reason) {
        return;
      }
      token.reason = new Cancel2(message2);
      resolvePromise(token.reason);
    });
  }
  CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  };
  CancelToken.prototype.subscribe = function subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  };
  CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    var index2 = this._listeners.indexOf(listener);
    if (index2 !== -1) {
      this._listeners.splice(index2, 1);
    }
  };
  CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c2) {
      cancel = c2;
    });
    return {
      token,
      cancel
    };
  };
  CancelToken_1 = CancelToken;
  return CancelToken_1;
}
var spread;
var hasRequiredSpread;
function requireSpread() {
  if (hasRequiredSpread)
    return spread;
  hasRequiredSpread = 1;
  spread = function spread2(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  };
  return spread;
}
var isAxiosError;
var hasRequiredIsAxiosError;
function requireIsAxiosError() {
  if (hasRequiredIsAxiosError)
    return isAxiosError;
  hasRequiredIsAxiosError = 1;
  var utils2 = utils$9;
  isAxiosError = function isAxiosError2(payload) {
    return utils2.isObject(payload) && payload.isAxiosError === true;
  };
  return isAxiosError;
}
var utils$1 = utils$9;
var bind$6 = bind$8;
var Axios = Axios_1;
var mergeConfig = mergeConfig$2;
var defaults = requireDefaults();
function createInstance(defaultConfig2) {
  var context = new Axios(defaultConfig2);
  var instance = bind$6(Axios.prototype.request, context);
  utils$1.extend(instance, Axios.prototype, context);
  utils$1.extend(instance, context);
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig2, instanceConfig));
  };
  return instance;
}
var axios$2 = createInstance(defaults);
axios$2.Axios = Axios;
axios$2.Cancel = requireCancel();
axios$2.CancelToken = requireCancelToken();
axios$2.isCancel = requireIsCancel();
axios$2.VERSION = requireData().version;
axios$2.all = function all(promises) {
  return Promise.all(promises);
};
axios$2.spread = requireSpread();
axios$2.isAxiosError = requireIsAxiosError();
axios$3.exports = axios$2;
axios$3.exports.default = axios$2;
var axiosExports = axios$3.exports;
var axios = axiosExports;
const axios$1 = /* @__PURE__ */ getDefaultExportFromCjs(axios);
const UserProfile$1 = "";
const UserProfile = ({ botToken, userId }) => {
  const [userName, setUserName] = reactExports.useState("");
  const [userAvatar, setUserAvatar] = reactExports.useState("");
  reactExports.useEffect(() => {
    const fetchUserData = async () => {
      try {
        const userResponse = await axios$1.get(
          `https://api.telegram.org/bot${botToken}/getChat?chat_id=${userId}`
        );
        setUserName(userResponse.data.result.first_name || "Unknown User");
        const photosResponse = await axios$1.get(
          `https://api.telegram.org/bot${botToken}/getUserProfilePhotos?user_id=${userId}&limit=1`
        );
        if (photosResponse.data.result.photos && photosResponse.data.result.photos.length > 0) {
          const fileId = photosResponse.data.result.photos[0][0].file_id;
          const fileResponse = await axios$1.get(
            `https://api.telegram.org/bot${botToken}/getFile?file_id=${fileId}`
          );
          const avatarUrl = `https://api.telegram.org/file/bot${botToken}/${fileResponse.data.result.file_path}`;
          setUserAvatar(avatarUrl);
        } else {
          setUserAvatar("");
        }
      } catch (error) {
        console.error("Error fetching user data:", error);
      }
    };
    fetchUserData();
  }, [botToken, userId]);
  return /* @__PURE__ */ jsx$1("div", { className: "user-profile", children: userAvatar ? /* @__PURE__ */ jsx$1("img", { src: userAvatar, alt: "User Avatar", width: "50", height: "50" }) : /* @__PURE__ */ jsx$1("p", { children: "No Avatar" }) });
};
var dist$2 = {};
var dist$1 = {};
var Address$1 = {};
const SymbolInspect = Symbol.for("nodejs.util.inspect.custom");
var symbol_inspect = SymbolInspect;
var crc16$2 = {};
Object.defineProperty(crc16$2, "__esModule", { value: true });
crc16$2.crc16 = void 0;
function crc16$1(data2) {
  const poly = 4129;
  let reg = 0;
  const message2 = buffer$1.Buffer.alloc(data2.length + 2);
  message2.set(data2);
  for (let byte of message2) {
    let mask = 128;
    while (mask > 0) {
      reg <<= 1;
      if (byte & mask) {
        reg += 1;
      }
      mask >>= 1;
      if (reg > 65535) {
        reg &= 65535;
        reg ^= poly;
      }
    }
  }
  return buffer$1.Buffer.from([Math.floor(reg / 256), reg % 256]);
}
crc16$2.crc16 = crc16$1;
var __importDefault$9 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
var _a$2;
Object.defineProperty(Address$1, "__esModule", { value: true });
Address$1.Address = void 0;
const symbol_inspect_1$2 = __importDefault$9(symbol_inspect);
const crc16_1$1 = crc16$2;
const bounceable_tag = 17;
const non_bounceable_tag = 81;
const test_flag = 128;
function parseFriendlyAddress(src2) {
  const data2 = buffer$1.Buffer.isBuffer(src2) ? src2 : buffer$1.Buffer.from(src2, "base64");
  if (data2.length !== 36) {
    throw new Error("Unknown address type: byte length is not equal to 36");
  }
  const addr = data2.subarray(0, 34);
  const crc = data2.subarray(34, 36);
  const calcedCrc = (0, crc16_1$1.crc16)(addr);
  if (!(calcedCrc[0] === crc[0] && calcedCrc[1] === crc[1])) {
    throw new Error("Invalid checksum: " + src2);
  }
  let tag = addr[0];
  let isTestOnly = false;
  let isBounceable = false;
  if (tag & test_flag) {
    isTestOnly = true;
    tag = tag ^ test_flag;
  }
  if (tag !== bounceable_tag && tag !== non_bounceable_tag)
    throw "Unknown address tag";
  isBounceable = tag === bounceable_tag;
  let workchain = null;
  if (addr[1] === 255) {
    workchain = -1;
  } else {
    workchain = addr[1];
  }
  const hashPart = addr.subarray(2, 34);
  return { isTestOnly, isBounceable, workchain, hashPart };
}
class Address {
  static isAddress(src2) {
    return src2 instanceof Address;
  }
  static isFriendly(source) {
    return source.indexOf(":") < 0;
  }
  static normalize(source) {
    if (typeof source === "string") {
      return Address.parse(source).toString();
    } else {
      return source.toString();
    }
  }
  static parse(source) {
    if (Address.isFriendly(source)) {
      return this.parseFriendly(source).address;
    } else {
      return this.parseRaw(source);
    }
  }
  static parseRaw(source) {
    let workChain = parseInt(source.split(":")[0]);
    let hash2 = buffer$1.Buffer.from(source.split(":")[1], "hex");
    return new Address(workChain, hash2);
  }
  static parseFriendly(source) {
    if (buffer$1.Buffer.isBuffer(source)) {
      let r2 = parseFriendlyAddress(source);
      return {
        isBounceable: r2.isBounceable,
        isTestOnly: r2.isTestOnly,
        address: new Address(r2.workchain, r2.hashPart)
      };
    } else {
      let addr = source.replace(/\-/g, "+").replace(/_/g, "/");
      let r2 = parseFriendlyAddress(addr);
      return {
        isBounceable: r2.isBounceable,
        isTestOnly: r2.isTestOnly,
        address: new Address(r2.workchain, r2.hashPart)
      };
    }
  }
  constructor(workChain, hash2) {
    this.toRawString = () => {
      return this.workChain + ":" + this.hash.toString("hex");
    };
    this.toRaw = () => {
      const addressWithChecksum = buffer$1.Buffer.alloc(36);
      addressWithChecksum.set(this.hash);
      addressWithChecksum.set([this.workChain, this.workChain, this.workChain, this.workChain], 32);
      return addressWithChecksum;
    };
    this.toStringBuffer = (args) => {
      let testOnly = args && args.testOnly !== void 0 ? args.testOnly : false;
      let bounceable = args && args.bounceable !== void 0 ? args.bounceable : true;
      let tag = bounceable ? bounceable_tag : non_bounceable_tag;
      if (testOnly) {
        tag |= test_flag;
      }
      const addr = buffer$1.Buffer.alloc(34);
      addr[0] = tag;
      addr[1] = this.workChain;
      addr.set(this.hash, 2);
      const addressWithChecksum = buffer$1.Buffer.alloc(36);
      addressWithChecksum.set(addr);
      addressWithChecksum.set((0, crc16_1$1.crc16)(addr), 34);
      return addressWithChecksum;
    };
    this.toString = (args) => {
      let urlSafe = args && args.urlSafe !== void 0 ? args.urlSafe : true;
      let buffer2 = this.toStringBuffer(args);
      if (urlSafe) {
        return buffer2.toString("base64").replace(/\+/g, "-").replace(/\//g, "_");
      } else {
        return buffer2.toString("base64");
      }
    };
    this[_a$2] = () => this.toString();
    this.workChain = workChain;
    this.hash = hash2;
    Object.freeze(this);
  }
  equals(src2) {
    if (src2.workChain !== this.workChain) {
      return false;
    }
    return src2.hash.equals(this.hash);
  }
}
Address$1.Address = Address;
_a$2 = symbol_inspect_1$2.default;
var ExternalAddress$1 = {};
var __importDefault$8 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
var _a$1;
Object.defineProperty(ExternalAddress$1, "__esModule", { value: true });
ExternalAddress$1.ExternalAddress = void 0;
const symbol_inspect_1$1 = __importDefault$8(symbol_inspect);
class ExternalAddress {
  static isAddress(src2) {
    return src2 instanceof ExternalAddress;
  }
  constructor(value, bits) {
    this[_a$1] = () => this.toString();
    this.value = value;
    this.bits = bits;
  }
  toString() {
    return `External<${this.bits}:${this.value}>`;
  }
}
ExternalAddress$1.ExternalAddress = ExternalAddress;
_a$1 = symbol_inspect_1$1.default;
var ADNLAddress$1 = {};
var base32 = {};
Object.defineProperty(base32, "__esModule", { value: true });
base32.base32Decode = base32.base32Encode = void 0;
const alphabet = "abcdefghijklmnopqrstuvwxyz234567";
function base32Encode(buffer2) {
  const length = buffer2.byteLength;
  let bits = 0;
  let value = 0;
  let output = "";
  for (let i2 = 0; i2 < length; i2++) {
    value = value << 8 | buffer2[i2];
    bits += 8;
    while (bits >= 5) {
      output += alphabet[value >>> bits - 5 & 31];
      bits -= 5;
    }
  }
  if (bits > 0) {
    output += alphabet[value << 5 - bits & 31];
  }
  return output;
}
base32.base32Encode = base32Encode;
function readChar(alphabet2, char) {
  const idx = alphabet2.indexOf(char);
  if (idx === -1) {
    throw new Error("Invalid character found: " + char);
  }
  return idx;
}
function base32Decode(input) {
  let cleanedInput;
  cleanedInput = input.toLowerCase();
  const { length } = cleanedInput;
  let bits = 0;
  let value = 0;
  let index2 = 0;
  const output = buffer$1.Buffer.alloc(length * 5 / 8 | 0);
  for (let i2 = 0; i2 < length; i2++) {
    value = value << 5 | readChar(alphabet, cleanedInput[i2]);
    bits += 5;
    if (bits >= 8) {
      output[index2++] = value >>> bits - 8 & 255;
      bits -= 8;
    }
  }
  return output;
}
base32.base32Decode = base32Decode;
var __importDefault$7 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
var _a;
Object.defineProperty(ADNLAddress$1, "__esModule", { value: true });
ADNLAddress$1.ADNLAddress = void 0;
const symbol_inspect_1 = __importDefault$7(symbol_inspect);
const base32_1 = base32;
const crc16_1 = crc16$2;
class ADNLAddress {
  static parseFriendly(src2) {
    if (src2.length !== 55) {
      throw Error("Invalid address");
    }
    src2 = "f" + src2;
    let decoded = (0, base32_1.base32Decode)(src2);
    if (decoded[0] !== 45) {
      throw Error("Invalid address");
    }
    let gotHash = decoded.slice(33);
    let hash2 = (0, crc16_1.crc16)(decoded.slice(0, 33));
    if (!hash2.equals(gotHash)) {
      throw Error("Invalid address");
    }
    return new ADNLAddress(decoded.slice(1, 33));
  }
  static parseRaw(src2) {
    const data2 = buffer$1.Buffer.from(src2, "base64");
    return new ADNLAddress(data2);
  }
  constructor(address) {
    this.toRaw = () => {
      return this.address.toString("hex").toUpperCase();
    };
    this.toString = () => {
      let data2 = buffer$1.Buffer.concat([buffer$1.Buffer.from([45]), this.address]);
      let hash2 = (0, crc16_1.crc16)(data2);
      data2 = buffer$1.Buffer.concat([data2, hash2]);
      return (0, base32_1.base32Encode)(data2).slice(1);
    };
    this[_a] = () => this.toString();
    if (address.length !== 32) {
      throw Error("Invalid address");
    }
    this.address = address;
  }
  equals(b2) {
    return this.address.equals(b2.address);
  }
}
ADNLAddress$1.ADNLAddress = ADNLAddress;
_a = symbol_inspect_1.default;
var contractAddress$1 = {};
var Builder = {};
var BitBuilder = {};
var BitString = {};
var paddedBits = {};
var hasRequiredPaddedBits;
function requirePaddedBits() {
  if (hasRequiredPaddedBits)
    return paddedBits;
  hasRequiredPaddedBits = 1;
  Object.defineProperty(paddedBits, "__esModule", { value: true });
  paddedBits.bitsToPaddedBuffer = void 0;
  const BitBuilder_1 = requireBitBuilder();
  function bitsToPaddedBuffer(bits) {
    let builder2 = new BitBuilder_1.BitBuilder(Math.ceil(bits.length / 8) * 8);
    builder2.writeBits(bits);
    let padding = Math.ceil(bits.length / 8) * 8 - bits.length;
    for (let i2 = 0; i2 < padding; i2++) {
      if (i2 === 0) {
        builder2.writeBit(1);
      } else {
        builder2.writeBit(0);
      }
    }
    return builder2.buffer();
  }
  paddedBits.bitsToPaddedBuffer = bitsToPaddedBuffer;
  return paddedBits;
}
var hasRequiredBitString;
function requireBitString() {
  if (hasRequiredBitString)
    return BitString;
  hasRequiredBitString = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  var _a2;
  Object.defineProperty(BitString, "__esModule", { value: true });
  BitString.BitString = void 0;
  const paddedBits_12 = requirePaddedBits();
  const symbol_inspect_12 = __importDefault2(symbol_inspect);
  let BitString$1 = class BitString2 {
    /**
     * Constructing BitString from a buffer
     * @param data data that contains the bitstring data. NOTE: We are expecting this buffer to be NOT modified
     * @param offset offset in bits from the start of the buffer
     * @param length length of the bitstring in bits
     */
    constructor(data2, offset, length) {
      this[_a2] = () => this.toString();
      if (length < 0) {
        throw new Error(`Length ${length} is out of bounds`);
      }
      this._length = length;
      this._data = data2;
      this._offset = offset;
    }
    /**
     * Returns the length of the bitstring
     */
    get length() {
      return this._length;
    }
    /**
     * Returns the bit at the specified index
     * @param index index of the bit
     * @throws Error if index is out of bounds
     * @returns true if the bit is set, false otherwise
     */
    at(index2) {
      if (index2 >= this._length) {
        throw new Error(`Index ${index2} > ${this._length} is out of bounds`);
      }
      if (index2 < 0) {
        throw new Error(`Index ${index2} < 0 is out of bounds`);
      }
      let byteIndex = this._offset + index2 >> 3;
      let bitIndex = 7 - (this._offset + index2) % 8;
      return (this._data[byteIndex] & 1 << bitIndex) !== 0;
    }
    /**
     * Get a subscring of the bitstring
     * @param offset
     * @param length
     * @returns
     */
    substring(offset, length) {
      if (length === 0 && offset === this._length) {
        return BitString2.EMPTY;
      }
      if (offset >= this._length) {
        throw new Error(`Offset(${offset}) > ${this._length} is out of bounds`);
      }
      if (offset < 0) {
        throw new Error(`Offset(${offset}) < 0 is out of bounds`);
      }
      if (offset + length > this._length) {
        throw new Error(`Offset ${offset} + Length ${length} > ${this._length} is out of bounds`);
      }
      return new BitString2(this._data, this._offset + offset, length);
    }
    /**
     * Try to get a buffer from the bitstring without allocations
     * @param offset offset in bits
     * @param length length in bits
     * @returns buffer if the bitstring is aligned to bytes, null otherwise
     */
    subbuffer(offset, length) {
      if (offset >= this._length) {
        throw new Error(`Offset ${offset} is out of bounds`);
      }
      if (offset < 0) {
        throw new Error(`Offset ${offset} is out of bounds`);
      }
      if (offset + length > this._length) {
        throw new Error(`Offset + Lenght = ${offset + length} is out of bounds`);
      }
      if (length % 8 !== 0) {
        return null;
      }
      if ((this._offset + offset) % 8 !== 0) {
        return null;
      }
      let start = this._offset + offset >> 3;
      let end = start + (length >> 3);
      return this._data.subarray(start, end);
    }
    /**
     * Checks for equality
     * @param b other bitstring
     * @returns true if the bitstrings are equal, false otherwise
     */
    equals(b2) {
      if (this._length !== b2._length) {
        return false;
      }
      for (let i2 = 0; i2 < this._length; i2++) {
        if (this.at(i2) !== b2.at(i2)) {
          return false;
        }
      }
      return true;
    }
    /**
     * Format to canonical string
     * @returns formatted bits as a string
     */
    toString() {
      const padded = (0, paddedBits_12.bitsToPaddedBuffer)(this);
      if (this._length % 4 === 0) {
        const s2 = padded.subarray(0, Math.ceil(this._length / 8)).toString("hex").toUpperCase();
        if (this._length % 8 === 0) {
          return s2;
        } else {
          return s2.substring(0, s2.length - 1);
        }
      } else {
        const hex = padded.toString("hex").toUpperCase();
        if (this._length % 8 <= 4) {
          return hex.substring(0, hex.length - 1) + "_";
        } else {
          return hex + "_";
        }
      }
    }
  };
  BitString.BitString = BitString$1;
  _a2 = symbol_inspect_12.default;
  BitString$1.EMPTY = new BitString$1(buffer$1.Buffer.alloc(0), 0, 0);
  return BitString;
}
var hasRequiredBitBuilder;
function requireBitBuilder() {
  if (hasRequiredBitBuilder)
    return BitBuilder;
  hasRequiredBitBuilder = 1;
  Object.defineProperty(BitBuilder, "__esModule", { value: true });
  BitBuilder.BitBuilder = void 0;
  const Address_12 = Address$1;
  const ExternalAddress_12 = ExternalAddress$1;
  const BitString_12 = requireBitString();
  let BitBuilder$1 = class BitBuilder {
    constructor(size2 = 1023) {
      this._buffer = buffer$1.Buffer.alloc(Math.ceil(size2 / 8));
      this._length = 0;
    }
    /**
     * Current number of bits written
     */
    get length() {
      return this._length;
    }
    /**
     * Write a single bit
     * @param value bit to write, true or positive number for 1, false or zero or negative for 0
     */
    writeBit(value) {
      let n2 = this._length;
      if (n2 > this._buffer.length * 8) {
        throw new Error("BitBuilder overflow");
      }
      if (value === true || value > 0) {
        this._buffer[n2 / 8 | 0] |= 1 << 7 - n2 % 8;
      }
      this._length++;
    }
    /**
     * Copy bits from BitString
     * @param src source bits
     */
    writeBits(src2) {
      for (let i2 = 0; i2 < src2.length; i2++) {
        this.writeBit(src2.at(i2));
      }
    }
    /**
     * Write bits from buffer
     * @param src source buffer
     */
    writeBuffer(src2) {
      if (this._length % 8 === 0) {
        if (this._length + src2.length * 8 > this._buffer.length * 8) {
          throw new Error("BitBuilder overflow");
        }
        src2.copy(this._buffer, this._length / 8);
        this._length += src2.length * 8;
      } else {
        for (let i2 = 0; i2 < src2.length; i2++) {
          this.writeUint(src2[i2], 8);
        }
      }
    }
    /**
     * Write uint value
     * @param value value as bigint or number
     * @param bits number of bits to write
     */
    writeUint(value, bits) {
      if (bits === 8 && this._length % 8 === 0) {
        let v3 = Number(value);
        if (v3 < 0 || v3 > 255 || !Number.isSafeInteger(v3)) {
          throw Error(`value is out of range for ${bits} bits. Got ${value}`);
        }
        this._buffer[this._length / 8] = Number(value);
        this._length += 8;
        return;
      }
      if (bits === 16 && this._length % 8 === 0) {
        let v3 = Number(value);
        if (v3 < 0 || v3 > 65536 || !Number.isSafeInteger(v3)) {
          throw Error(`value is out of range for ${bits} bits. Got ${value}`);
        }
        this._buffer[this._length / 8] = v3 >> 8;
        this._buffer[this._length / 8 + 1] = v3 & 255;
        this._length += 16;
        return;
      }
      let v2 = BigInt(value);
      if (bits < 0 || !Number.isSafeInteger(bits)) {
        throw Error(`invalid bit length. Got ${bits}`);
      }
      if (bits === 0) {
        if (value !== 0n) {
          throw Error(`value is not zero for ${bits} bits. Got ${value}`);
        } else {
          return;
        }
      }
      let vBits = 1n << BigInt(bits);
      if (v2 < 0 || v2 >= vBits) {
        throw Error(`bitLength is too small for a value ${value}. Got ${bits}`);
      }
      let b2 = [];
      while (v2 > 0) {
        b2.push(v2 % 2n === 1n);
        v2 /= 2n;
      }
      for (let i2 = 0; i2 < bits; i2++) {
        let off = bits - i2 - 1;
        if (off < b2.length) {
          this.writeBit(b2[off]);
        } else {
          this.writeBit(false);
        }
      }
    }
    /**
     * Write int value
     * @param value value as bigint or number
     * @param bits number of bits to write
     */
    writeInt(value, bits) {
      let v2 = BigInt(value);
      if (bits < 0 || !Number.isSafeInteger(bits)) {
        throw Error(`invalid bit length. Got ${bits}`);
      }
      if (bits === 0) {
        if (value !== 0n) {
          throw Error(`value is not zero for ${bits} bits. Got ${value}`);
        } else {
          return;
        }
      }
      if (bits === 1) {
        if (value !== -1n && value !== 0n) {
          throw Error(`value is not zero or -1 for ${bits} bits. Got ${value}`);
        } else {
          this.writeBit(value === -1n);
          return;
        }
      }
      let vBits = 1n << BigInt(bits) - 1n;
      if (v2 < -vBits || v2 >= vBits) {
        throw Error(`value is out of range for ${bits} bits. Got ${value}`);
      }
      if (v2 < 0) {
        this.writeBit(true);
        v2 = (1n << BigInt(bits) - 1n) + v2;
      } else {
        this.writeBit(false);
      }
      this.writeUint(v2, bits - 1);
    }
    /**
     * Wrtie var uint value, used for serializing coins
     * @param value value to write as bigint or number
     * @param bits header bits to write size
     */
    writeVarUint(value, bits) {
      let v2 = BigInt(value);
      if (bits < 0 || !Number.isSafeInteger(bits)) {
        throw Error(`invalid bit length. Got ${bits}`);
      }
      if (v2 < 0) {
        throw Error(`value is negative. Got ${value}`);
      }
      if (v2 === 0n) {
        this.writeUint(0, bits);
        return;
      }
      const sizeBytes = Math.ceil(v2.toString(2).length / 8);
      const sizeBits = sizeBytes * 8;
      this.writeUint(sizeBytes, bits);
      this.writeUint(v2, sizeBits);
    }
    /**
     * Wrtie var int value, used for serializing coins
     * @param value value to write as bigint or number
     * @param bits header bits to write size
     */
    writeVarInt(value, bits) {
      let v2 = BigInt(value);
      if (bits < 0 || !Number.isSafeInteger(bits)) {
        throw Error(`invalid bit length. Got ${bits}`);
      }
      if (v2 === 0n) {
        this.writeUint(0, bits);
        return;
      }
      let v22 = v2 > 0 ? v2 : -v2;
      const sizeBytes = 1 + Math.ceil(v22.toString(2).length / 8);
      const sizeBits = sizeBytes * 8;
      this.writeUint(sizeBytes, bits);
      this.writeInt(v2, sizeBits);
    }
    /**
     * Write coins in var uint format
     * @param amount amount to write
     */
    writeCoins(amount) {
      this.writeVarUint(amount, 4);
    }
    /**
     * Write address
     * @param address write address or address external
     */
    writeAddress(address) {
      if (address === null || address === void 0) {
        this.writeUint(0, 2);
        return;
      }
      if (Address_12.Address.isAddress(address)) {
        this.writeUint(2, 2);
        this.writeUint(0, 1);
        this.writeInt(address.workChain, 8);
        this.writeBuffer(address.hash);
        return;
      }
      if (ExternalAddress_12.ExternalAddress.isAddress(address)) {
        this.writeUint(1, 2);
        this.writeUint(address.bits, 9);
        this.writeUint(address.value, address.bits);
        return;
      }
      throw Error(`Invalid address. Got ${address}`);
    }
    /**
     * Build BitString
     * @returns result bit string
     */
    build() {
      return new BitString_12.BitString(this._buffer, 0, this._length);
    }
    /**
     * Build into Buffer
     * @returns result buffer
     */
    buffer() {
      if (this._length % 8 !== 0) {
        throw new Error("BitBuilder buffer is not byte aligned");
      }
      return this._buffer.subarray(0, this._length / 8);
    }
  };
  BitBuilder.BitBuilder = BitBuilder$1;
  return BitBuilder;
}
var Cell = {};
var CellType = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.CellType = void 0;
  (function(CellType2) {
    CellType2[CellType2["Ordinary"] = -1] = "Ordinary";
    CellType2[CellType2["PrunedBranch"] = 1] = "PrunedBranch";
    CellType2[CellType2["MerkleProof"] = 3] = "MerkleProof";
    CellType2[CellType2["MerkleUpdate"] = 4] = "MerkleUpdate";
  })(exports2.CellType || (exports2.CellType = {}));
})(CellType);
var Slice = {};
var Dictionary$1 = {};
var parseDict$1 = {};
Object.defineProperty(parseDict$1, "__esModule", { value: true });
parseDict$1.parseDict = void 0;
function readUnaryLength(slice) {
  let res = 0;
  while (slice.loadBit()) {
    res++;
  }
  return res;
}
function doParse(prefix, slice, n2, res, extractor) {
  let lb0 = slice.loadBit() ? 1 : 0;
  let prefixLength = 0;
  let pp = prefix;
  if (lb0 === 0) {
    prefixLength = readUnaryLength(slice);
    for (let i2 = 0; i2 < prefixLength; i2++) {
      pp += slice.loadBit() ? "1" : "0";
    }
  } else {
    let lb1 = slice.loadBit() ? 1 : 0;
    if (lb1 === 0) {
      prefixLength = slice.loadUint(Math.ceil(Math.log2(n2 + 1)));
      for (let i2 = 0; i2 < prefixLength; i2++) {
        pp += slice.loadBit() ? "1" : "0";
      }
    } else {
      let bit = slice.loadBit() ? "1" : "0";
      prefixLength = slice.loadUint(Math.ceil(Math.log2(n2 + 1)));
      for (let i2 = 0; i2 < prefixLength; i2++) {
        pp += bit;
      }
    }
  }
  if (n2 - prefixLength === 0) {
    res.set(BigInt("0b" + pp), extractor(slice));
  } else {
    let left2 = slice.loadRef();
    let right2 = slice.loadRef();
    if (!left2.isExotic) {
      doParse(pp + "0", left2.beginParse(), n2 - prefixLength - 1, res, extractor);
    }
    if (!right2.isExotic) {
      doParse(pp + "1", right2.beginParse(), n2 - prefixLength - 1, res, extractor);
    }
  }
}
function parseDict(sc2, keySize, extractor) {
  let res = /* @__PURE__ */ new Map();
  if (sc2) {
    doParse("", sc2, keySize, res, extractor);
  }
  return res;
}
parseDict$1.parseDict = parseDict;
var serializeDict = {};
var findCommonPrefix$1 = {};
Object.defineProperty(findCommonPrefix$1, "__esModule", { value: true });
findCommonPrefix$1.findCommonPrefix = void 0;
function findCommonPrefix(src2) {
  if (src2.length === 0) {
    return "";
  }
  if (src2.length === 1) {
    return src2[0];
  }
  const sorted = [...src2].sort();
  let size2 = 0;
  for (let i2 = 0; i2 < sorted[0].length; i2++) {
    if (sorted[0][i2] !== sorted[sorted.length - 1][i2]) {
      break;
    }
    size2++;
  }
  return src2[0].slice(0, size2);
}
findCommonPrefix$1.findCommonPrefix = findCommonPrefix;
var hasRequiredSerializeDict;
function requireSerializeDict() {
  if (hasRequiredSerializeDict)
    return serializeDict;
  hasRequiredSerializeDict = 1;
  Object.defineProperty(serializeDict, "__esModule", { value: true });
  serializeDict.serializeDict = serializeDict.detectLabelType = serializeDict.writeLabelSame = serializeDict.writeLabelLong = serializeDict.writeLabelShort = serializeDict.buildTree = void 0;
  const Builder_12 = requireBuilder();
  const findCommonPrefix_1 = findCommonPrefix$1;
  function pad(src2, size2) {
    while (src2.length < size2) {
      src2 = "0" + src2;
    }
    return src2;
  }
  function removePrefixMap(src2, length) {
    if (length === 0) {
      return src2;
    } else {
      let res = /* @__PURE__ */ new Map();
      for (let k2 of src2.keys()) {
        let d2 = src2.get(k2);
        res.set(k2.slice(length), d2);
      }
      return res;
    }
  }
  function forkMap(src2) {
    if (src2.size === 0) {
      throw Error("Internal inconsistency");
    }
    let left2 = /* @__PURE__ */ new Map();
    let right2 = /* @__PURE__ */ new Map();
    for (let k2 of src2.keys()) {
      let d2 = src2.get(k2);
      if (k2.startsWith("0")) {
        left2.set(k2.substr(1), d2);
      } else {
        right2.set(k2.substr(1), d2);
      }
    }
    if (left2.size === 0) {
      throw Error("Internal inconsistency. Left emtpy.");
    }
    if (right2.size === 0) {
      throw Error("Internal inconsistency. Right emtpy.");
    }
    return { left: left2, right: right2 };
  }
  function buildNode(src2) {
    if (src2.size === 0) {
      throw Error("Internal inconsistency");
    }
    if (src2.size === 1) {
      return { type: "leaf", value: Array.from(src2.values())[0] };
    }
    let { left: left2, right: right2 } = forkMap(src2);
    return {
      type: "fork",
      left: buildEdge(left2),
      right: buildEdge(right2)
    };
  }
  function buildEdge(src2) {
    if (src2.size === 0) {
      throw Error("Internal inconsistency");
    }
    const label = (0, findCommonPrefix_1.findCommonPrefix)(Array.from(src2.keys()));
    return { label, node: buildNode(removePrefixMap(src2, label.length)) };
  }
  function buildTree(src2, keyLength) {
    let converted = /* @__PURE__ */ new Map();
    for (let k2 of Array.from(src2.keys())) {
      const padded = pad(k2.toString(2), keyLength);
      converted.set(padded, src2.get(k2));
    }
    return buildEdge(converted);
  }
  serializeDict.buildTree = buildTree;
  function writeLabelShort(src2, to) {
    to.storeBit(0);
    for (let i2 = 0; i2 < src2.length; i2++) {
      to.storeBit(1);
    }
    to.storeBit(0);
    for (let i2 = 0; i2 < src2.length; i2++) {
      to.storeBit(src2[i2] === "1");
    }
    return to;
  }
  serializeDict.writeLabelShort = writeLabelShort;
  function labelShortLength(src2) {
    return 1 + src2.length + 1 + src2.length;
  }
  function writeLabelLong(src2, keyLength, to) {
    to.storeBit(1);
    to.storeBit(0);
    let length = Math.ceil(Math.log2(keyLength + 1));
    to.storeUint(src2.length, length);
    for (let i2 = 0; i2 < src2.length; i2++) {
      to.storeBit(src2[i2] === "1");
    }
    return to;
  }
  serializeDict.writeLabelLong = writeLabelLong;
  function labelLongLength(src2, keyLength) {
    return 1 + 1 + Math.ceil(Math.log2(keyLength + 1)) + src2.length;
  }
  function writeLabelSame(value, length, keyLength, to) {
    to.storeBit(1);
    to.storeBit(1);
    to.storeBit(value);
    let lenLen = Math.ceil(Math.log2(keyLength + 1));
    to.storeUint(length, lenLen);
  }
  serializeDict.writeLabelSame = writeLabelSame;
  function labelSameLength(keyLength) {
    return 1 + 1 + 1 + Math.ceil(Math.log2(keyLength + 1));
  }
  function isSame(src2) {
    if (src2.length === 0 || src2.length === 1) {
      return true;
    }
    for (let i2 = 1; i2 < src2.length; i2++) {
      if (src2[i2] !== src2[0]) {
        return false;
      }
    }
    return true;
  }
  function detectLabelType(src2, keyLength) {
    let kind = "short";
    let kindLength = labelShortLength(src2);
    let longLength = labelLongLength(src2, keyLength);
    if (longLength < kindLength) {
      kindLength = longLength;
      kind = "long";
    }
    if (isSame(src2)) {
      let sameLength = labelSameLength(keyLength);
      if (sameLength < kindLength) {
        kindLength = sameLength;
        kind = "same";
      }
    }
    return kind;
  }
  serializeDict.detectLabelType = detectLabelType;
  function writeLabel(src2, keyLength, to) {
    let type2 = detectLabelType(src2, keyLength);
    if (type2 === "short") {
      writeLabelShort(src2, to);
    }
    if (type2 === "long") {
      writeLabelLong(src2, keyLength, to);
    }
    if (type2 === "same") {
      writeLabelSame(src2[0] === "1", src2.length, keyLength, to);
    }
  }
  function writeNode(src2, keyLength, serializer, to) {
    if (src2.type === "leaf") {
      serializer(src2.value, to);
    }
    if (src2.type === "fork") {
      const leftCell = (0, Builder_12.beginCell)();
      const rightCell = (0, Builder_12.beginCell)();
      writeEdge(src2.left, keyLength - 1, serializer, leftCell);
      writeEdge(src2.right, keyLength - 1, serializer, rightCell);
      to.storeRef(leftCell);
      to.storeRef(rightCell);
    }
  }
  function writeEdge(src2, keyLength, serializer, to) {
    writeLabel(src2.label, keyLength, to);
    writeNode(src2.node, keyLength - src2.label.length, serializer, to);
  }
  function serializeDict$1(src2, keyLength, serializer, to) {
    const tree = buildTree(src2, keyLength);
    writeEdge(tree, keyLength, serializer, to);
  }
  serializeDict.serializeDict = serializeDict$1;
  return serializeDict;
}
var internalKeySerializer = {};
Object.defineProperty(internalKeySerializer, "__esModule", { value: true });
internalKeySerializer.deserializeInternalKey = internalKeySerializer.serializeInternalKey = void 0;
const Address_1$4 = Address$1;
function serializeInternalKey(value) {
  if (typeof value === "number") {
    if (!Number.isSafeInteger(value)) {
      throw Error("Invalid key type: not a safe integer: " + value);
    }
    return "n:" + value.toString(10);
  } else if (typeof value === "bigint") {
    return "b:" + value.toString(10);
  } else if (Address_1$4.Address.isAddress(value)) {
    return "a:" + value.toString();
  } else if (buffer$1.Buffer.isBuffer(value)) {
    return "f:" + value.toString("hex");
  } else {
    throw Error("Invalid key type");
  }
}
internalKeySerializer.serializeInternalKey = serializeInternalKey;
function deserializeInternalKey(value) {
  let k2 = value.slice(0, 2);
  let v2 = value.slice(2);
  if (k2 === "n:") {
    return parseInt(v2, 10);
  } else if (k2 === "b:") {
    return BigInt(v2);
  } else if (k2 === "a:") {
    return Address_1$4.Address.parse(v2);
  } else if (k2 === "f:") {
    return buffer$1.Buffer.from(v2, "hex");
  }
  throw Error("Invalid key type: " + k2);
}
internalKeySerializer.deserializeInternalKey = deserializeInternalKey;
var hasRequiredDictionary;
function requireDictionary() {
  if (hasRequiredDictionary)
    return Dictionary$1;
  hasRequiredDictionary = 1;
  Object.defineProperty(Dictionary$1, "__esModule", { value: true });
  Dictionary$1.Dictionary = void 0;
  const Address_12 = Address$1;
  const Builder_12 = requireBuilder();
  const Cell_12 = requireCell();
  const parseDict_1 = parseDict$1;
  const serializeDict_1 = requireSerializeDict();
  const internalKeySerializer_1 = internalKeySerializer;
  class Dictionary2 {
    /**
     * Create an empty map
     * @param key key type
     * @param value value type
     * @returns Dictionary<K, V>
     */
    static empty(key2, value) {
      if (key2 && value) {
        return new Dictionary2(/* @__PURE__ */ new Map(), key2, value);
      } else {
        return new Dictionary2(/* @__PURE__ */ new Map(), null, null);
      }
    }
    /**
     * Load dictionary from slice
     * @param key key description
     * @param value value description
     * @param src slice
     * @returns Dictionary<K, V>
     */
    static load(key2, value, sc2) {
      let slice;
      if (sc2 instanceof Cell_12.Cell) {
        if (sc2.isExotic) {
          return Dictionary2.empty(key2, value);
        }
        slice = sc2.beginParse();
      } else {
        slice = sc2;
      }
      let cell = slice.loadMaybeRef();
      if (cell && !cell.isExotic) {
        return Dictionary2.loadDirect(key2, value, cell.beginParse());
      } else {
        return Dictionary2.empty(key2, value);
      }
    }
    /**
     * Low level method for rare dictionaries from system contracts.
     * Loads dictionary from slice directly without going to the ref.
     *
     * @param key key description
     * @param value value description
     * @param sc slice
     * @returns Dictionary<K, V>
     */
    static loadDirect(key2, value, sc2) {
      if (!sc2) {
        return Dictionary2.empty(key2, value);
      }
      let slice;
      if (sc2 instanceof Cell_12.Cell) {
        slice = sc2.beginParse();
      } else {
        slice = sc2;
      }
      let values = (0, parseDict_1.parseDict)(slice, key2.bits, value.parse);
      let prepare = /* @__PURE__ */ new Map();
      for (let [k2, v2] of values) {
        prepare.set((0, internalKeySerializer_1.serializeInternalKey)(key2.parse(k2)), v2);
      }
      return new Dictionary2(prepare, key2, value);
    }
    constructor(values, key2, value) {
      this._key = key2;
      this._value = value;
      this._map = values;
    }
    get size() {
      return this._map.size;
    }
    get(key2) {
      return this._map.get((0, internalKeySerializer_1.serializeInternalKey)(key2));
    }
    has(key2) {
      return this._map.has((0, internalKeySerializer_1.serializeInternalKey)(key2));
    }
    set(key2, value) {
      this._map.set((0, internalKeySerializer_1.serializeInternalKey)(key2), value);
      return this;
    }
    delete(key2) {
      const k2 = (0, internalKeySerializer_1.serializeInternalKey)(key2);
      return this._map.delete(k2);
    }
    clear() {
      this._map.clear();
    }
    *[Symbol.iterator]() {
      for (const [k2, v2] of this._map) {
        const key2 = (0, internalKeySerializer_1.deserializeInternalKey)(k2);
        yield [key2, v2];
      }
    }
    keys() {
      return Array.from(this._map.keys()).map((v2) => (0, internalKeySerializer_1.deserializeInternalKey)(v2));
    }
    values() {
      return Array.from(this._map.values());
    }
    store(builder2, key2, value) {
      if (this._map.size === 0) {
        builder2.storeBit(0);
      } else {
        let resolvedKey = this._key;
        if (key2 !== null && key2 !== void 0) {
          resolvedKey = key2;
        }
        let resolvedValue = this._value;
        if (value !== null && value !== void 0) {
          resolvedValue = value;
        }
        if (!resolvedKey) {
          throw Error("Key serializer is not defined");
        }
        if (!resolvedValue) {
          throw Error("Value serializer is not defined");
        }
        let prepared = /* @__PURE__ */ new Map();
        for (const [k2, v2] of this._map) {
          prepared.set(resolvedKey.serialize((0, internalKeySerializer_1.deserializeInternalKey)(k2)), v2);
        }
        builder2.storeBit(1);
        let dd2 = (0, Builder_12.beginCell)();
        (0, serializeDict_1.serializeDict)(prepared, resolvedKey.bits, resolvedValue.serialize, dd2);
        builder2.storeRef(dd2.endCell());
      }
    }
    storeDirect(builder2, key2, value) {
      if (this._map.size === 0) {
        throw Error("Cannot store empty dictionary directly");
      }
      let resolvedKey = this._key;
      if (key2 !== null && key2 !== void 0) {
        resolvedKey = key2;
      }
      let resolvedValue = this._value;
      if (value !== null && value !== void 0) {
        resolvedValue = value;
      }
      if (!resolvedKey) {
        throw Error("Key serializer is not defined");
      }
      if (!resolvedValue) {
        throw Error("Value serializer is not defined");
      }
      let prepared = /* @__PURE__ */ new Map();
      for (const [k2, v2] of this._map) {
        prepared.set(resolvedKey.serialize((0, internalKeySerializer_1.deserializeInternalKey)(k2)), v2);
      }
      (0, serializeDict_1.serializeDict)(prepared, resolvedKey.bits, resolvedValue.serialize, builder2);
    }
  }
  Dictionary$1.Dictionary = Dictionary2;
  Dictionary2.Keys = {
    /**
     * Standard address key
     * @returns DictionaryKey<Address>
     */
    Address: () => {
      return createAddressKey();
    },
    /**
     * Create standard big integer key
     * @param bits number of bits
     * @returns DictionaryKey<bigint>
     */
    BigInt: (bits) => {
      return createBigIntKey(bits);
    },
    /**
     * Create integer key
     * @param bits bits of integer
     * @returns DictionaryKey<number>
     */
    Int: (bits) => {
      return createIntKey(bits);
    },
    /**
     * Create standard unsigned big integer key
     * @param bits number of bits
     * @returns DictionaryKey<bigint>
     */
    BigUint: (bits) => {
      return createBigUintKey(bits);
    },
    /**
     * Create standard unsigned integer key
     * @param bits number of bits
     * @returns DictionaryKey<number>
     */
    Uint: (bits) => {
      return createUintKey(bits);
    },
    /**
     * Create standard buffer key
     * @param bytes number of bytes of a buffer
     * @returns DictionaryKey<Buffer>
     */
    Buffer: (bytes) => {
      return createBufferKey(bytes);
    }
  };
  Dictionary2.Values = {
    /**
     * Create standard integer value
     * @returns DictionaryValue<bigint>
     */
    BigInt: (bits) => {
      return createBigIntValue(bits);
    },
    /**
     * Create standard integer value
     * @returns DictionaryValue<number>
     */
    Int: (bits) => {
      return createIntValue(bits);
    },
    /**
     * Create big var int
     * @param bits nubmer of header bits
     * @returns DictionaryValue<bigint>
     */
    BigVarInt: (bits) => {
      return createBigVarIntValue(bits);
    },
    /**
     * Create standard unsigned integer value
     * @param bits number of bits
     * @returns DictionaryValue<bigint>
     */
    BigUint: (bits) => {
      return createBigUintValue(bits);
    },
    /**
     * Create standard unsigned integer value
     * @param bits number of bits
     * @returns DictionaryValue<bigint>
     */
    Uint: (bits) => {
      return createUintValue(bits);
    },
    /**
     * Create big var int
     * @param bits nubmer of header bits
     * @returns DictionaryValue<bigint>
     */
    BigVarUint: (bits) => {
      return createBigVarUintValue(bits);
    },
    /**
     * Create standard boolean value
     * @returns DictionaryValue<boolean>
     */
    Bool: () => {
      return createBooleanValue();
    },
    /**
     * Create standard address value
     * @returns DictionaryValue<Address>
     */
    Address: () => {
      return createAddressValue();
    },
    /**
     * Create standard cell value
     * @returns DictionaryValue<Cell>
     */
    Cell: () => {
      return createCellValue();
    },
    /**
     * Create Builder value
     * @param bytes number of bytes of a buffer
     * @returns DictionaryValue<Builder>
     */
    Buffer: (bytes) => {
      return createBufferValue(bytes);
    },
    /**
     * Create dictionary value
     * @param key
     * @param value
     */
    Dictionary: (key2, value) => {
      return createDictionaryValue(key2, value);
    }
  };
  function createAddressKey() {
    return {
      bits: 267,
      serialize: (src2) => {
        if (!Address_12.Address.isAddress(src2)) {
          throw Error("Key is not an address");
        }
        return (0, Builder_12.beginCell)().storeAddress(src2).endCell().beginParse().preloadUintBig(267);
      },
      parse: (src2) => {
        return (0, Builder_12.beginCell)().storeUint(src2, 267).endCell().beginParse().loadAddress();
      }
    };
  }
  function createBigIntKey(bits) {
    return {
      bits,
      serialize: (src2) => {
        if (typeof src2 !== "bigint") {
          throw Error("Key is not a bigint");
        }
        return (0, Builder_12.beginCell)().storeInt(src2, bits).endCell().beginParse().loadUintBig(bits);
      },
      parse: (src2) => {
        return (0, Builder_12.beginCell)().storeUint(src2, bits).endCell().beginParse().loadIntBig(bits);
      }
    };
  }
  function createIntKey(bits) {
    return {
      bits,
      serialize: (src2) => {
        if (typeof src2 !== "number") {
          throw Error("Key is not a number");
        }
        if (!Number.isSafeInteger(src2)) {
          throw Error("Key is not a safe integer: " + src2);
        }
        return (0, Builder_12.beginCell)().storeInt(src2, bits).endCell().beginParse().loadUintBig(bits);
      },
      parse: (src2) => {
        return (0, Builder_12.beginCell)().storeUint(src2, bits).endCell().beginParse().loadInt(bits);
      }
    };
  }
  function createBigUintKey(bits) {
    return {
      bits,
      serialize: (src2) => {
        if (typeof src2 !== "bigint") {
          throw Error("Key is not a bigint");
        }
        if (src2 < 0) {
          throw Error("Key is negative: " + src2);
        }
        return (0, Builder_12.beginCell)().storeUint(src2, bits).endCell().beginParse().loadUintBig(bits);
      },
      parse: (src2) => {
        return (0, Builder_12.beginCell)().storeUint(src2, bits).endCell().beginParse().loadUintBig(bits);
      }
    };
  }
  function createUintKey(bits) {
    return {
      bits,
      serialize: (src2) => {
        if (typeof src2 !== "number") {
          throw Error("Key is not a number");
        }
        if (!Number.isSafeInteger(src2)) {
          throw Error("Key is not a safe integer: " + src2);
        }
        if (src2 < 0) {
          throw Error("Key is negative: " + src2);
        }
        return (0, Builder_12.beginCell)().storeUint(src2, bits).endCell().beginParse().loadUintBig(bits);
      },
      parse: (src2) => {
        return Number((0, Builder_12.beginCell)().storeUint(src2, bits).endCell().beginParse().loadUint(bits));
      }
    };
  }
  function createBufferKey(bytes) {
    return {
      bits: bytes * 8,
      serialize: (src2) => {
        if (!buffer$1.Buffer.isBuffer(src2)) {
          throw Error("Key is not a buffer");
        }
        return (0, Builder_12.beginCell)().storeBuffer(src2).endCell().beginParse().loadUintBig(bytes * 8);
      },
      parse: (src2) => {
        return (0, Builder_12.beginCell)().storeUint(src2, bytes * 8).endCell().beginParse().loadBuffer(bytes);
      }
    };
  }
  function createIntValue(bits) {
    return {
      serialize: (src2, buidler) => {
        buidler.storeInt(src2, bits);
      },
      parse: (src2) => {
        return src2.loadInt(bits);
      }
    };
  }
  function createBigIntValue(bits) {
    return {
      serialize: (src2, buidler) => {
        buidler.storeInt(src2, bits);
      },
      parse: (src2) => {
        return src2.loadIntBig(bits);
      }
    };
  }
  function createBigVarIntValue(bits) {
    return {
      serialize: (src2, buidler) => {
        buidler.storeVarInt(src2, bits);
      },
      parse: (src2) => {
        return src2.loadVarIntBig(bits);
      }
    };
  }
  function createBigVarUintValue(bits) {
    return {
      serialize: (src2, buidler) => {
        buidler.storeVarUint(src2, bits);
      },
      parse: (src2) => {
        return src2.loadVarUintBig(bits);
      }
    };
  }
  function createUintValue(bits) {
    return {
      serialize: (src2, buidler) => {
        buidler.storeUint(src2, bits);
      },
      parse: (src2) => {
        return src2.loadUint(bits);
      }
    };
  }
  function createBigUintValue(bits) {
    return {
      serialize: (src2, buidler) => {
        buidler.storeUint(src2, bits);
      },
      parse: (src2) => {
        return src2.loadUintBig(bits);
      }
    };
  }
  function createBooleanValue() {
    return {
      serialize: (src2, buidler) => {
        buidler.storeBit(src2);
      },
      parse: (src2) => {
        return src2.loadBit();
      }
    };
  }
  function createAddressValue() {
    return {
      serialize: (src2, buidler) => {
        buidler.storeAddress(src2);
      },
      parse: (src2) => {
        return src2.loadAddress();
      }
    };
  }
  function createCellValue() {
    return {
      serialize: (src2, buidler) => {
        buidler.storeRef(src2);
      },
      parse: (src2) => {
        return src2.loadRef();
      }
    };
  }
  function createDictionaryValue(key2, value) {
    return {
      serialize: (src2, buidler) => {
        src2.store(buidler);
      },
      parse: (src2) => {
        return Dictionary2.load(key2, value, src2);
      }
    };
  }
  function createBufferValue(size2) {
    return {
      serialize: (src2, buidler) => {
        if (src2.length !== size2) {
          throw Error("Invalid buffer size");
        }
        buidler.storeBuffer(src2);
      },
      parse: (src2) => {
        return src2.loadBuffer(size2);
      }
    };
  }
  return Dictionary$1;
}
var strings = {};
var hasRequiredStrings;
function requireStrings() {
  if (hasRequiredStrings)
    return strings;
  hasRequiredStrings = 1;
  Object.defineProperty(strings, "__esModule", { value: true });
  strings.writeString = strings.stringToCell = strings.readString = void 0;
  const Builder_12 = requireBuilder();
  function readBuffer(slice) {
    if (slice.remainingBits % 8 !== 0) {
      throw new Error(`Invalid string length: ${slice.remainingBits}`);
    }
    if (slice.remainingRefs !== 0 && slice.remainingRefs !== 1) {
      throw new Error(`invalid number of refs: ${slice.remainingRefs}`);
    }
    if (slice.remainingRefs === 1 && 1023 - slice.remainingBits > 7) {
      throw new Error(`invalid string length: ${slice.remainingBits / 8}`);
    }
    let res;
    if (slice.remainingBits === 0) {
      res = buffer$1.Buffer.alloc(0);
    } else {
      res = slice.loadBuffer(slice.remainingBits / 8);
    }
    if (slice.remainingRefs === 1) {
      res = buffer$1.Buffer.concat([res, readBuffer(slice.loadRef().beginParse())]);
    }
    return res;
  }
  function readString(slice) {
    return readBuffer(slice).toString();
  }
  strings.readString = readString;
  function writeBuffer(src2, builder2) {
    if (src2.length > 0) {
      let bytes = Math.floor(builder2.availableBits / 8);
      if (src2.length > bytes) {
        let a2 = src2.subarray(0, bytes);
        let t2 = src2.subarray(bytes);
        builder2 = builder2.storeBuffer(a2);
        let bb2 = (0, Builder_12.beginCell)();
        writeBuffer(t2, bb2);
        builder2 = builder2.storeRef(bb2.endCell());
      } else {
        builder2 = builder2.storeBuffer(src2);
      }
    }
  }
  function stringToCell(src2) {
    let builder2 = (0, Builder_12.beginCell)();
    writeBuffer(buffer$1.Buffer.from(src2), builder2);
    return builder2.endCell();
  }
  strings.stringToCell = stringToCell;
  function writeString(src2, builder2) {
    writeBuffer(buffer$1.Buffer.from(src2), builder2);
  }
  strings.writeString = writeString;
  return strings;
}
var hasRequiredSlice;
function requireSlice() {
  if (hasRequiredSlice)
    return Slice;
  hasRequiredSlice = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  var _a2;
  Object.defineProperty(Slice, "__esModule", { value: true });
  Slice.Slice = void 0;
  const symbol_inspect_12 = __importDefault2(symbol_inspect);
  const Dictionary_12 = requireDictionary();
  const Builder_12 = requireBuilder();
  const strings_1 = requireStrings();
  let Slice$1 = class Slice2 {
    constructor(reader2, refs) {
      this[_a2] = () => this.toString();
      this._reader = reader2.clone();
      this._refs = [...refs];
    }
    /**
     * Get remaining bits
     */
    get remainingBits() {
      return this._reader.remaining;
    }
    /**
     * Get remaining refs
     */
    get remainingRefs() {
      return this._refs.length;
    }
    /**
     * Skip bits
     * @param bits
     */
    skip(bits) {
      this._reader.skip(bits);
      return this;
    }
    /**
     * Load a single bit
     * @returns true or false depending on the bit value
     */
    loadBit() {
      return this._reader.loadBit();
    }
    /**
     * Preload a signle bit
     * @returns true or false depending on the bit value
     */
    preloadBit() {
      return this._reader.preloadBit();
    }
    /**
     * Load a boolean
     * @returns true or false depending on the bit value
     */
    loadBoolean() {
      return this.loadBit();
    }
    /**
     * Load maybe boolean
     * @returns true or false depending on the bit value or null
     */
    loadMaybeBoolean() {
      if (this.loadBit()) {
        return this.loadBoolean();
      } else {
        return null;
      }
    }
    /**
     * Load bits as a new BitString
     * @param bits number of bits to read
     * @returns new BitString
     */
    loadBits(bits) {
      return this._reader.loadBits(bits);
    }
    /**
     * Preload bits as a new BitString
     * @param bits number of bits to read
     * @returns new BitString
     */
    preloadBits(bits) {
      return this._reader.preloadBits(bits);
    }
    /**
     * Load uint
     * @param bits number of bits to read
     * @returns uint value
     */
    loadUint(bits) {
      return this._reader.loadUint(bits);
    }
    /**
     * Load uint
     * @param bits number of bits to read
     * @returns uint value
     */
    loadUintBig(bits) {
      return this._reader.loadUintBig(bits);
    }
    /**
     * Preload uint
     * @param bits number of bits to read
     * @returns uint value
     */
    preloadUint(bits) {
      return this._reader.preloadUint(bits);
    }
    /**
     * Preload uint
     * @param bits number of bits to read
     * @returns uint value
     */
    preloadUintBig(bits) {
      return this._reader.preloadUintBig(bits);
    }
    /**
     * Load maybe uint
     * @param bits number of bits to read
     * @returns uint value or null
     */
    loadMaybeUint(bits) {
      if (this.loadBit()) {
        return this.loadUint(bits);
      } else {
        return null;
      }
    }
    /**
     * Load maybe uint
     * @param bits number of bits to read
     * @returns uint value or null
     */
    loadMaybeUintBig(bits) {
      if (this.loadBit()) {
        return this.loadUintBig(bits);
      } else {
        return null;
      }
    }
    /**
     * Load int
     * @param bits number of bits to read
     * @returns int value
     */
    loadInt(bits) {
      return this._reader.loadInt(bits);
    }
    /**
     * Load int
     * @param bits number of bits to read
     * @returns int value
     */
    loadIntBig(bits) {
      return this._reader.loadIntBig(bits);
    }
    /**
     * Preload int
     * @param bits number of bits to read
     * @returns int value
     */
    preloadInt(bits) {
      return this._reader.preloadInt(bits);
    }
    /**
     * Preload int
     * @param bits number of bits to read
     * @returns int value
     */
    preloadIntBig(bits) {
      return this._reader.preloadIntBig(bits);
    }
    /**
     * Load maybe uint
     * @param bits number of bits to read
     * @returns uint value or null
     */
    loadMaybeInt(bits) {
      if (this.loadBit()) {
        return this.loadInt(bits);
      } else {
        return null;
      }
    }
    /**
     * Load maybe uint
     * @param bits number of bits to read
     * @returns uint value or null
     */
    loadMaybeIntBig(bits) {
      if (this.loadBit()) {
        return this.loadIntBig(bits);
      } else {
        return null;
      }
    }
    /**
     * Load varuint
     * @param bits number of bits to read in header
     * @returns varuint value
     */
    loadVarUint(bits) {
      return this._reader.loadVarUint(bits);
    }
    /**
     * Load varuint
     * @param bits number of bits to read in header
     * @returns varuint value
     */
    loadVarUintBig(bits) {
      return this._reader.loadVarUintBig(bits);
    }
    /**
     * Preload varuint
     * @param bits number of bits to read in header
     * @returns varuint value
     */
    preloadVarUint(bits) {
      return this._reader.preloadVarUint(bits);
    }
    /**
     * Preload varuint
     * @param bits number of bits to read in header
     * @returns varuint value
     */
    preloadVarUintBig(bits) {
      return this._reader.preloadVarUintBig(bits);
    }
    /**
     * Load varint
     * @param bits number of bits to read in header
     * @returns varint value
     */
    loadVarInt(bits) {
      return this._reader.loadVarInt(bits);
    }
    /**
     * Load varint
     * @param bits number of bits to read in header
     * @returns varint value
     */
    loadVarIntBig(bits) {
      return this._reader.loadVarIntBig(bits);
    }
    /**
     * Preload varint
     * @param bits number of bits to read in header
     * @returns varint value
     */
    preloadVarInt(bits) {
      return this._reader.preloadVarInt(bits);
    }
    /**
     * Preload varint
     * @param bits number of bits to read in header
     * @returns varint value
     */
    preloadVarIntBig(bits) {
      return this._reader.preloadVarIntBig(bits);
    }
    /**
     * Load coins
     * @returns coins value
     */
    loadCoins() {
      return this._reader.loadCoins();
    }
    /**
     * Preload coins
     * @returns coins value
     */
    preloadCoins() {
      return this._reader.preloadCoins();
    }
    /**
     * Load maybe coins
     * @returns coins value or null
     */
    loadMaybeCoins() {
      if (this._reader.loadBit()) {
        return this._reader.loadCoins();
      } else {
        return null;
      }
    }
    /**
     * Load internal Address
     * @returns Address
     */
    loadAddress() {
      return this._reader.loadAddress();
    }
    /**
     * Load optional internal Address
     * @returns Address or null
     */
    loadMaybeAddress() {
      return this._reader.loadMaybeAddress();
    }
    /**
     * Load external address
     * @returns ExternalAddress
     */
    loadExternalAddress() {
      return this._reader.loadExternalAddress();
    }
    /**
     * Load optional external address
     * @returns ExternalAddress or null
     */
    loadMaybeExternalAddress() {
      return this._reader.loadMaybeExternalAddress();
    }
    /**
     * Load address
     * @returns Address, ExternalAddress or null
     */
    loadAddressAny() {
      return this._reader.loadAddressAny();
    }
    /**
     * Load reference
     * @returns Cell
     */
    loadRef() {
      if (this._refs.length === 0) {
        throw new Error("No more references");
      }
      return this._refs.shift();
    }
    /**
     * Preload reference
     * @returns Cell
     */
    preloadRef() {
      if (this._refs.length === 0) {
        throw new Error("No more references");
      }
      return this._refs[0];
    }
    /**
     * Load optional reference
     * @returns Cell or null
     */
    loadMaybeRef() {
      if (this.loadBit()) {
        return this.loadRef();
      } else {
        return null;
      }
    }
    /**
     * Preload optional reference
     * @returns Cell or null
     */
    preloadMaybeRef() {
      if (this.preloadBit()) {
        return this.preloadRef();
      } else {
        return null;
      }
    }
    /**
     * Load byte buffer
     * @param bytes number of bytes to load
     * @returns Buffer
     */
    loadBuffer(bytes) {
      return this._reader.loadBuffer(bytes);
    }
    /**
     * Load byte buffer
     * @param bytes number of bytes to load
     * @returns Buffer
     */
    preloadBuffer(bytes) {
      return this._reader.preloadBuffer(bytes);
    }
    /**
     * Load string tail
     */
    loadStringTail() {
      return (0, strings_1.readString)(this);
    }
    /**
     * Load maybe string tail
     * @returns string or null
     */
    loadMaybeStringTail() {
      if (this.loadBit()) {
        return (0, strings_1.readString)(this);
      } else {
        return null;
      }
    }
    /**
     * Load string tail from ref
     * @returns string
     */
    loadStringRefTail() {
      return (0, strings_1.readString)(this.loadRef().beginParse());
    }
    /**
     * Load maybe string tail from ref
     * @returns string or null
     */
    loadMaybeStringRefTail() {
      const ref2 = this.loadMaybeRef();
      if (ref2) {
        return (0, strings_1.readString)(ref2.beginParse());
      } else {
        return null;
      }
    }
    /**
     * Loads dictionary
     * @param key key description
     * @param value value description
     * @returns Dictionary<K, V>
     */
    loadDict(key2, value) {
      return Dictionary_12.Dictionary.load(key2, value, this);
    }
    /**
     * Loads dictionary directly from current slice
     * @param key key description
     * @param value value description
     * @returns Dictionary<K, V>
     */
    loadDictDirect(key2, value) {
      return Dictionary_12.Dictionary.loadDirect(key2, value, this);
    }
    /**
     * Checks if slice is empty
     */
    endParse() {
      if (this.remainingBits > 0 || this.remainingRefs > 0) {
        throw new Error("Slice is not empty");
      }
    }
    /**
     * Convert slice to cell
     */
    asCell() {
      return (0, Builder_12.beginCell)().storeSlice(this).endCell();
    }
    /**
     *
     * @returns
     */
    asBuilder() {
      return (0, Builder_12.beginCell)().storeSlice(this);
    }
    /**
     * Clone slice
     * @returns cloned slice
     */
    clone() {
      return new Slice2(this._reader, this._refs);
    }
    /**
     * Print slice as string by converting it to cell
     * @returns string
     */
    toString() {
      return this.asCell().toString();
    }
  };
  Slice.Slice = Slice$1;
  _a2 = symbol_inspect_12.default;
  return Slice;
}
var resolveExotic$1 = {};
var BitReader$1 = {};
Object.defineProperty(BitReader$1, "__esModule", { value: true });
BitReader$1.BitReader = void 0;
const Address_1$3 = Address$1;
const ExternalAddress_1 = ExternalAddress$1;
class BitReader {
  constructor(bits, offset = 0) {
    this._checkpoints = [];
    this._bits = bits;
    this._offset = offset;
  }
  /**
   * Number of bits remaining
   */
  get remaining() {
    return this._bits.length - this._offset;
  }
  /**
   * Skip bits
   * @param bits number of bits to skip
   */
  skip(bits) {
    if (bits < 0 || this._offset + bits > this._bits.length) {
      throw new Error(`Index ${this._offset + bits} is out of bounds`);
    }
    this._offset += bits;
  }
  /**
   * Reset to the beginning or latest checkpoint
   */
  reset() {
    if (this._checkpoints.length > 0) {
      this._offset = this._checkpoints.pop();
    } else {
      this._offset = 0;
    }
  }
  /**
   * Save checkpoint
   */
  save() {
    this._checkpoints.push(this._offset);
  }
  /**
   * Load a single bit
   * @returns true if the bit is set, false otherwise
   */
  loadBit() {
    let r2 = this._bits.at(this._offset);
    this._offset++;
    return r2;
  }
  /**
   * Preload bit
   * @returns true if the bit is set, false otherwise
   */
  preloadBit() {
    return this._bits.at(this._offset);
  }
  /**
   * Load bit string
   * @param bits number of bits to read
   * @returns new bitstring
   */
  loadBits(bits) {
    let r2 = this._bits.substring(this._offset, bits);
    this._offset += bits;
    return r2;
  }
  /**
   * Preload bit string
   * @param bits number of bits to read
   * @returns new bitstring
   */
  preloadBits(bits) {
    return this._bits.substring(this._offset, bits);
  }
  /**
   * Load buffer
   * @param bytes number of bytes
   * @returns new buffer
   */
  loadBuffer(bytes) {
    let buf = this._preloadBuffer(bytes, this._offset);
    this._offset += bytes * 8;
    return buf;
  }
  /**
   * Preload buffer
   * @param bytes number of bytes
   * @returns new buffer
   */
  preloadBuffer(bytes) {
    return this._preloadBuffer(bytes, this._offset);
  }
  /**
   * Load uint value
   * @param bits uint bits
   * @returns read value as number
   */
  loadUint(bits) {
    return Number(this.loadUintBig(bits));
  }
  /**
   * Load uint value as bigint
   * @param bits uint bits
   * @returns read value as bigint
   */
  loadUintBig(bits) {
    let loaded = this.preloadUintBig(bits);
    this._offset += bits;
    return loaded;
  }
  /**
   * Preload uint value
   * @param bits uint bits
   * @returns read value as number
   */
  preloadUint(bits) {
    return Number(this._preloadUint(bits, this._offset));
  }
  /**
   * Preload uint value as bigint
   * @param bits uint bits
   * @returns read value as bigint
   */
  preloadUintBig(bits) {
    return this._preloadUint(bits, this._offset);
  }
  /**
   * Load int value
   * @param bits int bits
   * @returns read value as bigint
   */
  loadInt(bits) {
    let res = this._preloadInt(bits, this._offset);
    this._offset += bits;
    return Number(res);
  }
  /**
   * Load int value as bigint
   * @param bits int bits
   * @returns read value as bigint
   */
  loadIntBig(bits) {
    let res = this._preloadInt(bits, this._offset);
    this._offset += bits;
    return res;
  }
  /**
   * Preload int value
   * @param bits int bits
   * @returns read value as bigint
   */
  preloadInt(bits) {
    return Number(this._preloadInt(bits, this._offset));
  }
  /**
   * Preload int value
   * @param bits int bits
   * @returns read value as bigint
   */
  preloadIntBig(bits) {
    return this._preloadInt(bits, this._offset);
  }
  /**
   * Load varuint value
   * @param bits number of bits to read the size
   * @returns read value as bigint
   */
  loadVarUint(bits) {
    let size2 = Number(this.loadUint(bits));
    return Number(this.loadUintBig(size2 * 8));
  }
  /**
   * Load varuint value
   * @param bits number of bits to read the size
   * @returns read value as bigint
   */
  loadVarUintBig(bits) {
    let size2 = Number(this.loadUint(bits));
    return this.loadUintBig(size2 * 8);
  }
  /**
   * Preload varuint value
   * @param bits number of bits to read the size
   * @returns read value as bigint
   */
  preloadVarUint(bits) {
    let size2 = Number(this._preloadUint(bits, this._offset));
    return Number(this._preloadUint(size2 * 8, this._offset + bits));
  }
  /**
   * Preload varuint value
   * @param bits number of bits to read the size
   * @returns read value as bigint
   */
  preloadVarUintBig(bits) {
    let size2 = Number(this._preloadUint(bits, this._offset));
    return this._preloadUint(size2 * 8, this._offset + bits);
  }
  /**
   * Load varint value
   * @param bits number of bits to read the size
   * @returns read value as bigint
   */
  loadVarInt(bits) {
    let size2 = Number(this.loadUint(bits));
    return Number(this.loadIntBig(size2 * 8));
  }
  /**
   * Load varint value
   * @param bits number of bits to read the size
   * @returns read value as bigint
   */
  loadVarIntBig(bits) {
    let size2 = Number(this.loadUint(bits));
    return this.loadIntBig(size2 * 8);
  }
  /**
   * Preload varint value
   * @param bits number of bits to read the size
   * @returns read value as bigint
   */
  preloadVarInt(bits) {
    let size2 = Number(this._preloadUint(bits, this._offset));
    return Number(this._preloadInt(size2 * 8, this._offset + bits));
  }
  /**
   * Preload varint value
   * @param bits number of bits to read the size
   * @returns read value as bigint
   */
  preloadVarIntBig(bits) {
    let size2 = Number(this._preloadUint(bits, this._offset));
    return this._preloadInt(size2 * 8, this._offset + bits);
  }
  /**
   * Load coins value
   * @returns read value as bigint
   */
  loadCoins() {
    return this.loadVarUintBig(4);
  }
  /**
   * Preload coins value
   * @returns read value as bigint
   */
  preloadCoins() {
    return this.preloadVarUintBig(4);
  }
  /**
   * Load Address
   * @returns Address
   */
  loadAddress() {
    let type2 = Number(this._preloadUint(2, this._offset));
    if (type2 === 2) {
      return this._loadInternalAddress();
    } else {
      throw new Error("Invalid address: " + type2);
    }
  }
  /**
   * Load internal address
   * @returns Address or null
   */
  loadMaybeAddress() {
    let type2 = Number(this._preloadUint(2, this._offset));
    if (type2 === 0) {
      this._offset += 2;
      return null;
    } else if (type2 === 2) {
      return this._loadInternalAddress();
    } else {
      throw new Error("Invalid address");
    }
  }
  /**
   * Load external address
   * @returns ExternalAddress
   */
  loadExternalAddress() {
    let type2 = Number(this._preloadUint(2, this._offset));
    if (type2 === 1) {
      return this._loadExternalAddress();
    } else {
      throw new Error("Invalid address");
    }
  }
  /**
   * Load external address
   * @returns ExternalAddress or null
   */
  loadMaybeExternalAddress() {
    let type2 = Number(this._preloadUint(2, this._offset));
    if (type2 === 0) {
      this._offset += 2;
      return null;
    } else if (type2 === 1) {
      return this._loadExternalAddress();
    } else {
      throw new Error("Invalid address");
    }
  }
  /**
   * Read address of any type
   * @returns Address or ExternalAddress or null
   */
  loadAddressAny() {
    let type2 = Number(this._preloadUint(2, this._offset));
    if (type2 === 0) {
      this._offset += 2;
      return null;
    } else if (type2 === 2) {
      return this._loadInternalAddress();
    } else if (type2 === 1) {
      return this._loadExternalAddress();
    } else if (type2 === 3) {
      throw Error("Unsupported");
    } else {
      throw Error("Unreachable");
    }
  }
  /**
   * Load bit string that was padded to make it byte alligned. Used in BOC serialization
   * @param bytes number of bytes to read
   */
  loadPaddedBits(bits) {
    if (bits % 8 !== 0) {
      throw new Error("Invalid number of bits");
    }
    let length = bits;
    while (true) {
      if (this._bits.at(this._offset + length - 1)) {
        length--;
        break;
      } else {
        length--;
      }
    }
    let r2 = this._bits.substring(this._offset, length);
    this._offset += bits;
    return r2;
  }
  /**
   * Clone BitReader
   */
  clone() {
    return new BitReader(this._bits, this._offset);
  }
  /**
   * Preload int from specific offset
   * @param bits bits to preload
   * @param offset offset to start from
   * @returns read value as bigint
   */
  _preloadInt(bits, offset) {
    if (bits == 0) {
      return 0n;
    }
    let sign2 = this._bits.at(offset);
    let res = 0n;
    for (let i2 = 0; i2 < bits - 1; i2++) {
      if (this._bits.at(offset + 1 + i2)) {
        res += 1n << BigInt(bits - i2 - 1 - 1);
      }
    }
    if (sign2) {
      res = res - (1n << BigInt(bits - 1));
    }
    return res;
  }
  /**
   * Preload uint from specific offset
   * @param bits bits to preload
   * @param offset offset to start from
   * @returns read value as bigint
   */
  _preloadUint(bits, offset) {
    if (bits == 0) {
      return 0n;
    }
    let res = 0n;
    for (let i2 = 0; i2 < bits; i2++) {
      if (this._bits.at(offset + i2)) {
        res += 1n << BigInt(bits - i2 - 1);
      }
    }
    return res;
  }
  _preloadBuffer(bytes, offset) {
    let fastBuffer = this._bits.subbuffer(offset, bytes * 8);
    if (fastBuffer) {
      return fastBuffer;
    }
    let buf = buffer$1.Buffer.alloc(bytes);
    for (let i2 = 0; i2 < bytes; i2++) {
      buf[i2] = Number(this._preloadUint(8, offset + i2 * 8));
    }
    return buf;
  }
  _loadInternalAddress() {
    let type2 = Number(this._preloadUint(2, this._offset));
    if (type2 !== 2) {
      throw Error("Invalid address");
    }
    if (this._preloadUint(1, this._offset + 2) !== 0n) {
      throw Error("Invalid address");
    }
    let wc2 = Number(this._preloadInt(8, this._offset + 3));
    let hash2 = this._preloadBuffer(32, this._offset + 11);
    this._offset += 267;
    return new Address_1$3.Address(wc2, hash2);
  }
  _loadExternalAddress() {
    let type2 = Number(this._preloadUint(2, this._offset));
    if (type2 !== 1) {
      throw Error("Invalid address");
    }
    let bits = Number(this._preloadUint(9, this._offset + 2));
    let value = this._preloadUint(bits, this._offset + 11);
    this._offset += 11 + bits;
    return new ExternalAddress_1.ExternalAddress(value, bits);
  }
}
BitReader$1.BitReader = BitReader;
var exoticMerkleProof$1 = {};
Object.defineProperty(exoticMerkleProof$1, "__esModule", { value: true });
exoticMerkleProof$1.exoticMerkleProof = void 0;
const BitReader_1$3 = BitReader$1;
function exoticMerkleProof(bits, refs) {
  const reader2 = new BitReader_1$3.BitReader(bits);
  const size2 = 8 + 256 + 16;
  if (bits.length !== size2) {
    throw new Error(`Merkle Proof cell must have exactly (8 + 256 + 16) bits, got "${bits.length}"`);
  }
  if (refs.length !== 1) {
    throw new Error(`Merkle Proof cell must have exactly 1 ref, got "${refs.length}"`);
  }
  let type2 = reader2.loadUint(8);
  if (type2 !== 3) {
    throw new Error(`Merkle Proof cell must have type 3, got "${type2}"`);
  }
  const proofHash = reader2.loadBuffer(32);
  const proofDepth = reader2.loadUint(16);
  const refHash = refs[0].hash(0);
  const refDepth = refs[0].depth(0);
  if (proofDepth !== refDepth) {
    throw new Error(`Merkle Proof cell ref depth must be exactly "${proofDepth}", got "${refDepth}"`);
  }
  if (!proofHash.equals(refHash)) {
    throw new Error(`Merkle Proof cell ref hash must be exactly "${proofHash.toString("hex")}", got "${refHash.toString("hex")}"`);
  }
  return {
    proofDepth,
    proofHash
  };
}
exoticMerkleProof$1.exoticMerkleProof = exoticMerkleProof;
var exoticMerkleUpdate$1 = {};
Object.defineProperty(exoticMerkleUpdate$1, "__esModule", { value: true });
exoticMerkleUpdate$1.exoticMerkleUpdate = void 0;
const BitReader_1$2 = BitReader$1;
function exoticMerkleUpdate(bits, refs) {
  const reader2 = new BitReader_1$2.BitReader(bits);
  const size2 = 8 + 2 * (256 + 16);
  if (bits.length !== size2) {
    throw new Error(`Merkle Update cell must have exactly (8 + (2 * (256 + 16))) bits, got "${bits.length}"`);
  }
  if (refs.length !== 2) {
    throw new Error(`Merkle Update cell must have exactly 2 refs, got "${refs.length}"`);
  }
  let type2 = reader2.loadUint(8);
  if (type2 !== 4) {
    throw new Error(`Merkle Update cell type must be exactly 4, got "${type2}"`);
  }
  const proofHash1 = reader2.loadBuffer(32);
  const proofHash2 = reader2.loadBuffer(32);
  const proofDepth1 = reader2.loadUint(16);
  const proofDepth2 = reader2.loadUint(16);
  if (proofDepth1 !== refs[0].depth(0)) {
    throw new Error(`Merkle Update cell ref depth must be exactly "${proofDepth1}", got "${refs[0].depth(0)}"`);
  }
  if (!proofHash1.equals(refs[0].hash(0))) {
    throw new Error(`Merkle Update cell ref hash must be exactly "${proofHash1.toString("hex")}", got "${refs[0].hash(0).toString("hex")}"`);
  }
  if (proofDepth2 !== refs[1].depth(0)) {
    throw new Error(`Merkle Update cell ref depth must be exactly "${proofDepth2}", got "${refs[1].depth(0)}"`);
  }
  if (!proofHash2.equals(refs[1].hash(0))) {
    throw new Error(`Merkle Update cell ref hash must be exactly "${proofHash2.toString("hex")}", got "${refs[1].hash(0).toString("hex")}"`);
  }
  return {
    proofDepth1,
    proofDepth2,
    proofHash1,
    proofHash2
  };
}
exoticMerkleUpdate$1.exoticMerkleUpdate = exoticMerkleUpdate;
var exoticPruned$1 = {};
var LevelMask$1 = {};
Object.defineProperty(LevelMask$1, "__esModule", { value: true });
LevelMask$1.LevelMask = void 0;
class LevelMask {
  constructor(mask = 0) {
    this._mask = 0;
    this._mask = mask;
    this._hashIndex = countSetBits(this._mask);
    this._hashCount = this._hashIndex + 1;
  }
  get value() {
    return this._mask;
  }
  get level() {
    return 32 - Math.clz32(this._mask);
  }
  get hashIndex() {
    return this._hashIndex;
  }
  get hashCount() {
    return this._hashCount;
  }
  apply(level) {
    return new LevelMask(this._mask & (1 << level) - 1);
  }
  isSignificant(level) {
    let res = level === 0 || (this._mask >> level - 1) % 2 !== 0;
    return res;
  }
}
LevelMask$1.LevelMask = LevelMask;
function countSetBits(n2) {
  n2 = n2 - (n2 >> 1 & 1431655765);
  n2 = (n2 & 858993459) + (n2 >> 2 & 858993459);
  return (n2 + (n2 >> 4) & 252645135) * 16843009 >> 24;
}
Object.defineProperty(exoticPruned$1, "__esModule", { value: true });
exoticPruned$1.exoticPruned = void 0;
const BitReader_1$1 = BitReader$1;
const LevelMask_1$2 = LevelMask$1;
function exoticPruned(bits, refs) {
  let reader2 = new BitReader_1$1.BitReader(bits);
  let type2 = reader2.loadUint(8);
  if (type2 !== 1) {
    throw new Error(`Pruned branch cell must have type 1, got "${type2}"`);
  }
  if (refs.length !== 0) {
    throw new Error(`Pruned Branch cell can't has refs, got "${refs.length}"`);
  }
  let mask;
  if (bits.length === 280) {
    mask = new LevelMask_1$2.LevelMask(1);
  } else {
    mask = new LevelMask_1$2.LevelMask(reader2.loadUint(8));
    if (mask.level < 1 || mask.level > 3) {
      throw new Error(`Pruned Branch cell level must be >= 1 and <= 3, got "${mask.level}/${mask.value}"`);
    }
    const size2 = 8 + 8 + mask.apply(mask.level - 1).hashCount * (256 + 16);
    if (bits.length !== size2) {
      throw new Error(`Pruned branch cell must have exactly ${size2} bits, got "${bits.length}"`);
    }
  }
  let pruned = [];
  let hashes = [];
  let depths = [];
  for (let i2 = 0; i2 < mask.level; i2++) {
    hashes.push(reader2.loadBuffer(32));
  }
  for (let i2 = 0; i2 < mask.level; i2++) {
    depths.push(reader2.loadUint(16));
  }
  for (let i2 = 0; i2 < mask.level; i2++) {
    pruned.push({
      depth: depths[i2],
      hash: hashes[i2]
    });
  }
  return {
    mask: mask.value,
    pruned
  };
}
exoticPruned$1.exoticPruned = exoticPruned;
Object.defineProperty(resolveExotic$1, "__esModule", { value: true });
resolveExotic$1.resolveExotic = void 0;
const BitReader_1 = BitReader$1;
const CellType_1$2 = CellType;
const exoticMerkleProof_1$1 = exoticMerkleProof$1;
const exoticMerkleUpdate_1$1 = exoticMerkleUpdate$1;
const exoticPruned_1$1 = exoticPruned$1;
const LevelMask_1$1 = LevelMask$1;
function resolvePruned(bits, refs) {
  let pruned = (0, exoticPruned_1$1.exoticPruned)(bits, refs);
  let depths = [];
  let hashes = [];
  let mask = new LevelMask_1$1.LevelMask(pruned.mask);
  for (let i2 = 0; i2 < pruned.pruned.length; i2++) {
    depths.push(pruned.pruned[i2].depth);
    hashes.push(pruned.pruned[i2].hash);
  }
  return {
    type: CellType_1$2.CellType.PrunedBranch,
    depths,
    hashes,
    mask
  };
}
function resolveMerkleProof(bits, refs) {
  (0, exoticMerkleProof_1$1.exoticMerkleProof)(bits, refs);
  let depths = [];
  let hashes = [];
  let mask = new LevelMask_1$1.LevelMask(refs[0].level() >> 1);
  return {
    type: CellType_1$2.CellType.MerkleProof,
    depths,
    hashes,
    mask
  };
}
function resolveMerkleUpdate(bits, refs) {
  (0, exoticMerkleUpdate_1$1.exoticMerkleUpdate)(bits, refs);
  let depths = [];
  let hashes = [];
  let mask = new LevelMask_1$1.LevelMask((refs[0].level() | refs[1].level()) >> 1);
  return {
    type: CellType_1$2.CellType.MerkleUpdate,
    depths,
    hashes,
    mask
  };
}
function resolveExotic(bits, refs) {
  let reader2 = new BitReader_1.BitReader(bits);
  let type2 = reader2.preloadUint(8);
  if (type2 === 1) {
    return resolvePruned(bits, refs);
  }
  if (type2 === 2) {
    throw new Error("Library cell must be loaded automatically");
  }
  if (type2 === 3) {
    return resolveMerkleProof(bits, refs);
  }
  if (type2 === 4) {
    return resolveMerkleUpdate(bits, refs);
  }
  throw Error("Invalid exotic cell type: " + type2);
}
resolveExotic$1.resolveExotic = resolveExotic;
var wonderCalculator$1 = {};
var descriptor = {};
Object.defineProperty(descriptor, "__esModule", { value: true });
descriptor.getRepr = descriptor.getBitsDescriptor = descriptor.getRefsDescriptor = void 0;
const CellType_1$1 = CellType;
const paddedBits_1 = requirePaddedBits();
function getRefsDescriptor(refs, level, type2) {
  return refs.length + (type2 !== CellType_1$1.CellType.Ordinary ? 1 : 0) * 8 + level * 32;
}
descriptor.getRefsDescriptor = getRefsDescriptor;
function getBitsDescriptor(bits) {
  let len2 = bits.length;
  return Math.ceil(len2 / 8) + Math.floor(len2 / 8);
}
descriptor.getBitsDescriptor = getBitsDescriptor;
function getRepr(bits, refs, level, type2) {
  const bitsLen = Math.ceil(bits.length / 8);
  const repr = buffer$1.Buffer.alloc(2 + bitsLen + (2 + 32) * refs.length);
  let reprCursor = 0;
  repr[reprCursor++] = getRefsDescriptor(refs, level, type2);
  repr[reprCursor++] = getBitsDescriptor(bits);
  (0, paddedBits_1.bitsToPaddedBuffer)(bits).copy(repr, reprCursor);
  reprCursor += bitsLen;
  for (const c2 of refs) {
    let childDepth;
    if (type2 == CellType_1$1.CellType.MerkleProof || type2 == CellType_1$1.CellType.MerkleUpdate) {
      childDepth = c2.depth(level + 1);
    } else {
      childDepth = c2.depth(level);
    }
    repr[reprCursor++] = Math.floor(childDepth / 256);
    repr[reprCursor++] = childDepth % 256;
  }
  for (const c2 of refs) {
    let childHash;
    if (type2 == CellType_1$1.CellType.MerkleProof || type2 == CellType_1$1.CellType.MerkleUpdate) {
      childHash = c2.hash(level + 1);
    } else {
      childHash = c2.hash(level);
    }
    childHash.copy(repr, reprCursor);
    reprCursor += 32;
  }
  return repr;
}
descriptor.getRepr = getRepr;
var dist = {};
var sha256$3 = {};
var sha = { exports: {} };
(function(module, exports2) {
  !function(n2, r2) {
    module.exports = r2();
  }(commonjsGlobal, function() {
    var n2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    function r2(n3, r3, t3, e3) {
      var i3, o3, u3, f3 = r3 || [0], w3 = (t3 = t3 || 0) >>> 3, s3 = -1 === e3 ? 3 : 0;
      for (i3 = 0; i3 < n3.length; i3 += 1)
        o3 = (u3 = i3 + w3) >>> 2, f3.length <= o3 && f3.push(0), f3[o3] |= n3[i3] << 8 * (s3 + e3 * (u3 % 4));
      return { value: f3, binLen: 8 * n3.length + t3 };
    }
    function t2(t3, e3, i3) {
      switch (e3) {
        case "UTF8":
        case "UTF16BE":
        case "UTF16LE":
          break;
        default:
          throw new Error("encoding must be UTF8, UTF16BE, or UTF16LE");
      }
      switch (t3) {
        case "HEX":
          return function(n3, r3, t4) {
            return function(n4, r4, t5, e4) {
              var i4, o3, u3, f3;
              if (0 != n4.length % 2)
                throw new Error("String of HEX type must be in byte increments");
              var w3 = r4 || [0], s3 = (t5 = t5 || 0) >>> 3, a3 = -1 === e4 ? 3 : 0;
              for (i4 = 0; i4 < n4.length; i4 += 2) {
                if (o3 = parseInt(n4.substr(i4, 2), 16), isNaN(o3))
                  throw new Error("String of HEX type contains invalid characters");
                for (u3 = (f3 = (i4 >>> 1) + s3) >>> 2; w3.length <= u3; )
                  w3.push(0);
                w3[u3] |= o3 << 8 * (a3 + e4 * (f3 % 4));
              }
              return { value: w3, binLen: 4 * n4.length + t5 };
            }(n3, r3, t4, i3);
          };
        case "TEXT":
          return function(n3, r3, t4) {
            return function(n4, r4, t5, e4, i4) {
              var o3, u3, f3, w3, s3, a3, h3, c3, v3 = 0, A3 = t5 || [0], E3 = (e4 = e4 || 0) >>> 3;
              if ("UTF8" === r4)
                for (h3 = -1 === i4 ? 3 : 0, f3 = 0; f3 < n4.length; f3 += 1)
                  for (u3 = [], 128 > (o3 = n4.charCodeAt(f3)) ? u3.push(o3) : 2048 > o3 ? (u3.push(192 | o3 >>> 6), u3.push(128 | 63 & o3)) : 55296 > o3 || 57344 <= o3 ? u3.push(224 | o3 >>> 12, 128 | o3 >>> 6 & 63, 128 | 63 & o3) : (f3 += 1, o3 = 65536 + ((1023 & o3) << 10 | 1023 & n4.charCodeAt(f3)), u3.push(240 | o3 >>> 18, 128 | o3 >>> 12 & 63, 128 | o3 >>> 6 & 63, 128 | 63 & o3)), w3 = 0; w3 < u3.length; w3 += 1) {
                    for (s3 = (a3 = v3 + E3) >>> 2; A3.length <= s3; )
                      A3.push(0);
                    A3[s3] |= u3[w3] << 8 * (h3 + i4 * (a3 % 4)), v3 += 1;
                  }
              else
                for (h3 = -1 === i4 ? 2 : 0, c3 = "UTF16LE" === r4 && 1 !== i4 || "UTF16LE" !== r4 && 1 === i4, f3 = 0; f3 < n4.length; f3 += 1) {
                  for (o3 = n4.charCodeAt(f3), true === c3 && (o3 = (w3 = 255 & o3) << 8 | o3 >>> 8), s3 = (a3 = v3 + E3) >>> 2; A3.length <= s3; )
                    A3.push(0);
                  A3[s3] |= o3 << 8 * (h3 + i4 * (a3 % 4)), v3 += 2;
                }
              return { value: A3, binLen: 8 * v3 + e4 };
            }(n3, e3, r3, t4, i3);
          };
        case "B64":
          return function(r3, t4, e4) {
            return function(r4, t5, e5, i4) {
              var o3, u3, f3, w3, s3, a3, h3 = 0, c3 = t5 || [0], v3 = (e5 = e5 || 0) >>> 3, A3 = -1 === i4 ? 3 : 0, E3 = r4.indexOf("=");
              if (-1 === r4.search(/^[a-zA-Z0-9=+/]+$/))
                throw new Error("Invalid character in base-64 string");
              if (r4 = r4.replace(/=/g, ""), -1 !== E3 && E3 < r4.length)
                throw new Error("Invalid '=' found in base-64 string");
              for (o3 = 0; o3 < r4.length; o3 += 4) {
                for (w3 = r4.substr(o3, 4), f3 = 0, u3 = 0; u3 < w3.length; u3 += 1)
                  f3 |= n2.indexOf(w3.charAt(u3)) << 18 - 6 * u3;
                for (u3 = 0; u3 < w3.length - 1; u3 += 1) {
                  for (s3 = (a3 = h3 + v3) >>> 2; c3.length <= s3; )
                    c3.push(0);
                  c3[s3] |= (f3 >>> 16 - 8 * u3 & 255) << 8 * (A3 + i4 * (a3 % 4)), h3 += 1;
                }
              }
              return { value: c3, binLen: 8 * h3 + e5 };
            }(r3, t4, e4, i3);
          };
        case "BYTES":
          return function(n3, r3, t4) {
            return function(n4, r4, t5, e4) {
              var i4, o3, u3, f3, w3 = r4 || [0], s3 = (t5 = t5 || 0) >>> 3, a3 = -1 === e4 ? 3 : 0;
              for (o3 = 0; o3 < n4.length; o3 += 1)
                i4 = n4.charCodeAt(o3), u3 = (f3 = o3 + s3) >>> 2, w3.length <= u3 && w3.push(0), w3[u3] |= i4 << 8 * (a3 + e4 * (f3 % 4));
              return { value: w3, binLen: 8 * n4.length + t5 };
            }(n3, r3, t4, i3);
          };
        case "ARRAYBUFFER":
          try {
            new ArrayBuffer(0);
          } catch (n3) {
            throw new Error("ARRAYBUFFER not supported by this environment");
          }
          return function(n3, t4, e4) {
            return function(n4, t5, e5, i4) {
              return r2(new Uint8Array(n4), t5, e5, i4);
            }(n3, t4, e4, i3);
          };
        case "UINT8ARRAY":
          try {
            new Uint8Array(0);
          } catch (n3) {
            throw new Error("UINT8ARRAY not supported by this environment");
          }
          return function(n3, t4, e4) {
            return r2(n3, t4, e4, i3);
          };
        default:
          throw new Error("format must be HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY");
      }
    }
    function e2(r3, t3, e3, i3) {
      switch (r3) {
        case "HEX":
          return function(n3) {
            return function(n4, r4, t4, e4) {
              var i4, o3, u3 = "", f3 = r4 / 8, w3 = -1 === t4 ? 3 : 0;
              for (i4 = 0; i4 < f3; i4 += 1)
                o3 = n4[i4 >>> 2] >>> 8 * (w3 + t4 * (i4 % 4)), u3 += "0123456789abcdef".charAt(o3 >>> 4 & 15) + "0123456789abcdef".charAt(15 & o3);
              return e4.outputUpper ? u3.toUpperCase() : u3;
            }(n3, t3, e3, i3);
          };
        case "B64":
          return function(r4) {
            return function(r5, t4, e4, i4) {
              var o3, u3, f3, w3, s3, a3 = "", h3 = t4 / 8, c3 = -1 === e4 ? 3 : 0;
              for (o3 = 0; o3 < h3; o3 += 3)
                for (w3 = o3 + 1 < h3 ? r5[o3 + 1 >>> 2] : 0, s3 = o3 + 2 < h3 ? r5[o3 + 2 >>> 2] : 0, f3 = (r5[o3 >>> 2] >>> 8 * (c3 + e4 * (o3 % 4)) & 255) << 16 | (w3 >>> 8 * (c3 + e4 * ((o3 + 1) % 4)) & 255) << 8 | s3 >>> 8 * (c3 + e4 * ((o3 + 2) % 4)) & 255, u3 = 0; u3 < 4; u3 += 1)
                  a3 += 8 * o3 + 6 * u3 <= t4 ? n2.charAt(f3 >>> 6 * (3 - u3) & 63) : i4.b64Pad;
              return a3;
            }(r4, t3, e3, i3);
          };
        case "BYTES":
          return function(n3) {
            return function(n4, r4, t4) {
              var e4, i4, o3 = "", u3 = r4 / 8, f3 = -1 === t4 ? 3 : 0;
              for (e4 = 0; e4 < u3; e4 += 1)
                i4 = n4[e4 >>> 2] >>> 8 * (f3 + t4 * (e4 % 4)) & 255, o3 += String.fromCharCode(i4);
              return o3;
            }(n3, t3, e3);
          };
        case "ARRAYBUFFER":
          try {
            new ArrayBuffer(0);
          } catch (n3) {
            throw new Error("ARRAYBUFFER not supported by this environment");
          }
          return function(n3) {
            return function(n4, r4, t4) {
              var e4, i4 = r4 / 8, o3 = new ArrayBuffer(i4), u3 = new Uint8Array(o3), f3 = -1 === t4 ? 3 : 0;
              for (e4 = 0; e4 < i4; e4 += 1)
                u3[e4] = n4[e4 >>> 2] >>> 8 * (f3 + t4 * (e4 % 4)) & 255;
              return o3;
            }(n3, t3, e3);
          };
        case "UINT8ARRAY":
          try {
            new Uint8Array(0);
          } catch (n3) {
            throw new Error("UINT8ARRAY not supported by this environment");
          }
          return function(n3) {
            return function(n4, r4, t4) {
              var e4, i4 = r4 / 8, o3 = -1 === t4 ? 3 : 0, u3 = new Uint8Array(i4);
              for (e4 = 0; e4 < i4; e4 += 1)
                u3[e4] = n4[e4 >>> 2] >>> 8 * (o3 + t4 * (e4 % 4)) & 255;
              return u3;
            }(n3, t3, e3);
          };
        default:
          throw new Error("format must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY");
      }
    }
    var i2 = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298], o2 = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428], u2 = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225], f2 = "Chosen SHA variant is not supported";
    function w2(n3, r3) {
      var t3, e3, i3 = n3.binLen >>> 3, o3 = r3.binLen >>> 3, u3 = i3 << 3, f3 = 4 - i3 << 3;
      if (i3 % 4 != 0) {
        for (t3 = 0; t3 < o3; t3 += 4)
          e3 = i3 + t3 >>> 2, n3.value[e3] |= r3.value[t3 >>> 2] << u3, n3.value.push(0), n3.value[e3 + 1] |= r3.value[t3 >>> 2] >>> f3;
        return (n3.value.length << 2) - 4 >= o3 + i3 && n3.value.pop(), { value: n3.value, binLen: n3.binLen + r3.binLen };
      }
      return { value: n3.value.concat(r3.value), binLen: n3.binLen + r3.binLen };
    }
    function s2(n3) {
      var r3 = { outputUpper: false, b64Pad: "=", outputLen: -1 }, t3 = n3 || {}, e3 = "Output length must be a multiple of 8";
      if (r3.outputUpper = t3.outputUpper || false, t3.b64Pad && (r3.b64Pad = t3.b64Pad), t3.outputLen) {
        if (t3.outputLen % 8 != 0)
          throw new Error(e3);
        r3.outputLen = t3.outputLen;
      } else if (t3.shakeLen) {
        if (t3.shakeLen % 8 != 0)
          throw new Error(e3);
        r3.outputLen = t3.shakeLen;
      }
      if ("boolean" != typeof r3.outputUpper)
        throw new Error("Invalid outputUpper formatting option");
      if ("string" != typeof r3.b64Pad)
        throw new Error("Invalid b64Pad formatting option");
      return r3;
    }
    function a2(n3, r3, e3, i3) {
      var o3 = n3 + " must include a value and format";
      if (!r3) {
        if (!i3)
          throw new Error(o3);
        return i3;
      }
      if (void 0 === r3.value || !r3.format)
        throw new Error(o3);
      return t2(r3.format, r3.encoding || "UTF8", e3)(r3.value);
    }
    var h2 = function() {
      function n3(n4, r3, t3) {
        var e3 = t3 || {};
        if (this.t = r3, this.i = e3.encoding || "UTF8", this.numRounds = e3.numRounds || 1, isNaN(this.numRounds) || this.numRounds !== parseInt(this.numRounds, 10) || 1 > this.numRounds)
          throw new Error("numRounds must a integer >= 1");
        this.o = n4, this.u = [], this.s = 0, this.h = false, this.v = 0, this.A = false, this.l = [], this.H = [];
      }
      return n3.prototype.update = function(n4) {
        var r3, t3 = 0, e3 = this.S >>> 5, i3 = this.p(n4, this.u, this.s), o3 = i3.binLen, u3 = i3.value, f3 = o3 >>> 5;
        for (r3 = 0; r3 < f3; r3 += e3)
          t3 + this.S <= o3 && (this.m = this.R(u3.slice(r3, r3 + e3), this.m), t3 += this.S);
        this.v += t3, this.u = u3.slice(t3 >>> 5), this.s = o3 % this.S, this.h = true;
      }, n3.prototype.getHash = function(n4, r3) {
        var t3, i3, o3 = this.U, u3 = s2(r3);
        if (this.T) {
          if (-1 === u3.outputLen)
            throw new Error("Output length must be specified in options");
          o3 = u3.outputLen;
        }
        var f3 = e2(n4, o3, this.C, u3);
        if (this.A && this.F)
          return f3(this.F(u3));
        for (i3 = this.K(this.u.slice(), this.s, this.v, this.B(this.m), o3), t3 = 1; t3 < this.numRounds; t3 += 1)
          this.T && o3 % 32 != 0 && (i3[i3.length - 1] &= 16777215 >>> 24 - o3 % 32), i3 = this.K(i3, o3, 0, this.L(this.o), o3);
        return f3(i3);
      }, n3.prototype.setHMACKey = function(n4, r3, e3) {
        if (!this.g)
          throw new Error("Variant does not support HMAC");
        if (this.h)
          throw new Error("Cannot set MAC key after calling update");
        var i3 = t2(r3, (e3 || {}).encoding || "UTF8", this.C);
        this.k(i3(n4));
      }, n3.prototype.k = function(n4) {
        var r3, t3 = this.S >>> 3, e3 = t3 / 4 - 1;
        if (1 !== this.numRounds)
          throw new Error("Cannot set numRounds with MAC");
        if (this.A)
          throw new Error("MAC key already set");
        for (t3 < n4.binLen / 8 && (n4.value = this.K(n4.value, n4.binLen, 0, this.L(this.o), this.U)); n4.value.length <= e3; )
          n4.value.push(0);
        for (r3 = 0; r3 <= e3; r3 += 1)
          this.l[r3] = 909522486 ^ n4.value[r3], this.H[r3] = 1549556828 ^ n4.value[r3];
        this.m = this.R(this.l, this.m), this.v = this.S, this.A = true;
      }, n3.prototype.getHMAC = function(n4, r3) {
        var t3 = s2(r3);
        return e2(n4, this.U, this.C, t3)(this.Y());
      }, n3.prototype.Y = function() {
        var n4;
        if (!this.A)
          throw new Error("Cannot call getHMAC without first setting MAC key");
        var r3 = this.K(this.u.slice(), this.s, this.v, this.B(this.m), this.U);
        return n4 = this.R(this.H, this.L(this.o)), n4 = this.K(r3, this.U, this.S, n4, this.U);
      }, n3;
    }(), c2 = function(n3, r3) {
      return (c2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(n4, r4) {
        n4.__proto__ = r4;
      } || function(n4, r4) {
        for (var t3 in r4)
          Object.prototype.hasOwnProperty.call(r4, t3) && (n4[t3] = r4[t3]);
      })(n3, r3);
    };
    function v2(n3, r3) {
      function t3() {
        this.constructor = n3;
      }
      c2(n3, r3), n3.prototype = null === r3 ? Object.create(r3) : (t3.prototype = r3.prototype, new t3());
    }
    function A2(n3, r3) {
      return n3 << r3 | n3 >>> 32 - r3;
    }
    function E2(n3, r3) {
      return n3 >>> r3 | n3 << 32 - r3;
    }
    function l2(n3, r3) {
      return n3 >>> r3;
    }
    function b2(n3, r3, t3) {
      return n3 ^ r3 ^ t3;
    }
    function H4(n3, r3, t3) {
      return n3 & r3 ^ ~n3 & t3;
    }
    function d2(n3, r3, t3) {
      return n3 & r3 ^ n3 & t3 ^ r3 & t3;
    }
    function S2(n3) {
      return E2(n3, 2) ^ E2(n3, 13) ^ E2(n3, 22);
    }
    function p2(n3, r3) {
      var t3 = (65535 & n3) + (65535 & r3);
      return (65535 & (n3 >>> 16) + (r3 >>> 16) + (t3 >>> 16)) << 16 | 65535 & t3;
    }
    function m2(n3, r3, t3, e3) {
      var i3 = (65535 & n3) + (65535 & r3) + (65535 & t3) + (65535 & e3);
      return (65535 & (n3 >>> 16) + (r3 >>> 16) + (t3 >>> 16) + (e3 >>> 16) + (i3 >>> 16)) << 16 | 65535 & i3;
    }
    function y2(n3, r3, t3, e3, i3) {
      var o3 = (65535 & n3) + (65535 & r3) + (65535 & t3) + (65535 & e3) + (65535 & i3);
      return (65535 & (n3 >>> 16) + (r3 >>> 16) + (t3 >>> 16) + (e3 >>> 16) + (i3 >>> 16) + (o3 >>> 16)) << 16 | 65535 & o3;
    }
    function R2(n3) {
      return E2(n3, 7) ^ E2(n3, 18) ^ l2(n3, 3);
    }
    function U2(n3) {
      return E2(n3, 6) ^ E2(n3, 11) ^ E2(n3, 25);
    }
    function T2(n3) {
      return [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
    }
    function C2(n3, r3) {
      var t3, e3, i3, o3, u3, f3, w3, s3 = [];
      for (t3 = r3[0], e3 = r3[1], i3 = r3[2], o3 = r3[3], u3 = r3[4], w3 = 0; w3 < 80; w3 += 1)
        s3[w3] = w3 < 16 ? n3[w3] : A2(s3[w3 - 3] ^ s3[w3 - 8] ^ s3[w3 - 14] ^ s3[w3 - 16], 1), f3 = w3 < 20 ? y2(A2(t3, 5), H4(e3, i3, o3), u3, 1518500249, s3[w3]) : w3 < 40 ? y2(A2(t3, 5), b2(e3, i3, o3), u3, 1859775393, s3[w3]) : w3 < 60 ? y2(A2(t3, 5), d2(e3, i3, o3), u3, 2400959708, s3[w3]) : y2(A2(t3, 5), b2(e3, i3, o3), u3, 3395469782, s3[w3]), u3 = o3, o3 = i3, i3 = A2(e3, 30), e3 = t3, t3 = f3;
      return r3[0] = p2(t3, r3[0]), r3[1] = p2(e3, r3[1]), r3[2] = p2(i3, r3[2]), r3[3] = p2(o3, r3[3]), r3[4] = p2(u3, r3[4]), r3;
    }
    function F2(n3, r3, t3, e3) {
      for (var i3, o3 = 15 + (r3 + 65 >>> 9 << 4), u3 = r3 + t3; n3.length <= o3; )
        n3.push(0);
      for (n3[r3 >>> 5] |= 128 << 24 - r3 % 32, n3[o3] = 4294967295 & u3, n3[o3 - 1] = u3 / 4294967296 | 0, i3 = 0; i3 < n3.length; i3 += 16)
        e3 = C2(n3.slice(i3, i3 + 16), e3);
      return e3;
    }
    var K2 = function(n3) {
      function r3(r4, e3, i3) {
        var o3 = this;
        if ("SHA-1" !== r4)
          throw new Error(f2);
        var u3 = i3 || {};
        return (o3 = n3.call(this, r4, e3, i3) || this).g = true, o3.F = o3.Y, o3.C = -1, o3.p = t2(o3.t, o3.i, o3.C), o3.R = C2, o3.B = function(n4) {
          return n4.slice();
        }, o3.L = T2, o3.K = F2, o3.m = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], o3.S = 512, o3.U = 160, o3.T = false, u3.hmacKey && o3.k(a2("hmacKey", u3.hmacKey, o3.C)), o3;
      }
      return v2(r3, n3), r3;
    }(h2);
    function B2(n3) {
      return "SHA-224" == n3 ? o2.slice() : u2.slice();
    }
    function L2(n3, r3) {
      var t3, e3, o3, u3, f3, w3, s3, a3, h3, c3, v3, A3, b3 = [];
      for (t3 = r3[0], e3 = r3[1], o3 = r3[2], u3 = r3[3], f3 = r3[4], w3 = r3[5], s3 = r3[6], a3 = r3[7], v3 = 0; v3 < 64; v3 += 1)
        b3[v3] = v3 < 16 ? n3[v3] : m2(E2(A3 = b3[v3 - 2], 17) ^ E2(A3, 19) ^ l2(A3, 10), b3[v3 - 7], R2(b3[v3 - 15]), b3[v3 - 16]), h3 = y2(a3, U2(f3), H4(f3, w3, s3), i2[v3], b3[v3]), c3 = p2(S2(t3), d2(t3, e3, o3)), a3 = s3, s3 = w3, w3 = f3, f3 = p2(u3, h3), u3 = o3, o3 = e3, e3 = t3, t3 = p2(h3, c3);
      return r3[0] = p2(t3, r3[0]), r3[1] = p2(e3, r3[1]), r3[2] = p2(o3, r3[2]), r3[3] = p2(u3, r3[3]), r3[4] = p2(f3, r3[4]), r3[5] = p2(w3, r3[5]), r3[6] = p2(s3, r3[6]), r3[7] = p2(a3, r3[7]), r3;
    }
    var g2 = function(n3) {
      function r3(r4, e3, i3) {
        var o3 = this;
        if ("SHA-224" !== r4 && "SHA-256" !== r4)
          throw new Error(f2);
        var u3 = i3 || {};
        return (o3 = n3.call(this, r4, e3, i3) || this).F = o3.Y, o3.g = true, o3.C = -1, o3.p = t2(o3.t, o3.i, o3.C), o3.R = L2, o3.B = function(n4) {
          return n4.slice();
        }, o3.L = B2, o3.K = function(n4, t3, e4, i4) {
          return function(n5, r5, t4, e5, i5) {
            for (var o4, u4 = 15 + (r5 + 65 >>> 9 << 4), f3 = r5 + t4; n5.length <= u4; )
              n5.push(0);
            for (n5[r5 >>> 5] |= 128 << 24 - r5 % 32, n5[u4] = 4294967295 & f3, n5[u4 - 1] = f3 / 4294967296 | 0, o4 = 0; o4 < n5.length; o4 += 16)
              e5 = L2(n5.slice(o4, o4 + 16), e5);
            return "SHA-224" === i5 ? [e5[0], e5[1], e5[2], e5[3], e5[4], e5[5], e5[6]] : e5;
          }(n4, t3, e4, i4, r4);
        }, o3.m = B2(r4), o3.S = 512, o3.U = "SHA-224" === r4 ? 224 : 256, o3.T = false, u3.hmacKey && o3.k(a2("hmacKey", u3.hmacKey, o3.C)), o3;
      }
      return v2(r3, n3), r3;
    }(h2), k2 = function(n3, r3) {
      this.N = n3, this.I = r3;
    };
    function Y2(n3, r3) {
      var t3;
      return r3 > 32 ? (t3 = 64 - r3, new k2(n3.I << r3 | n3.N >>> t3, n3.N << r3 | n3.I >>> t3)) : 0 !== r3 ? (t3 = 32 - r3, new k2(n3.N << r3 | n3.I >>> t3, n3.I << r3 | n3.N >>> t3)) : n3;
    }
    function N2(n3, r3) {
      var t3;
      return r3 < 32 ? (t3 = 32 - r3, new k2(n3.N >>> r3 | n3.I << t3, n3.I >>> r3 | n3.N << t3)) : (t3 = 64 - r3, new k2(n3.I >>> r3 | n3.N << t3, n3.N >>> r3 | n3.I << t3));
    }
    function I2(n3, r3) {
      return new k2(n3.N >>> r3, n3.I >>> r3 | n3.N << 32 - r3);
    }
    function M2(n3, r3, t3) {
      return new k2(n3.N & r3.N ^ ~n3.N & t3.N, n3.I & r3.I ^ ~n3.I & t3.I);
    }
    function X2(n3, r3, t3) {
      return new k2(n3.N & r3.N ^ n3.N & t3.N ^ r3.N & t3.N, n3.I & r3.I ^ n3.I & t3.I ^ r3.I & t3.I);
    }
    function z2(n3) {
      var r3 = N2(n3, 28), t3 = N2(n3, 34), e3 = N2(n3, 39);
      return new k2(r3.N ^ t3.N ^ e3.N, r3.I ^ t3.I ^ e3.I);
    }
    function O2(n3, r3) {
      var t3, e3;
      t3 = (65535 & n3.I) + (65535 & r3.I);
      var i3 = (65535 & (e3 = (n3.I >>> 16) + (r3.I >>> 16) + (t3 >>> 16))) << 16 | 65535 & t3;
      return t3 = (65535 & n3.N) + (65535 & r3.N) + (e3 >>> 16), e3 = (n3.N >>> 16) + (r3.N >>> 16) + (t3 >>> 16), new k2((65535 & e3) << 16 | 65535 & t3, i3);
    }
    function j2(n3, r3, t3, e3) {
      var i3, o3;
      i3 = (65535 & n3.I) + (65535 & r3.I) + (65535 & t3.I) + (65535 & e3.I);
      var u3 = (65535 & (o3 = (n3.I >>> 16) + (r3.I >>> 16) + (t3.I >>> 16) + (e3.I >>> 16) + (i3 >>> 16))) << 16 | 65535 & i3;
      return i3 = (65535 & n3.N) + (65535 & r3.N) + (65535 & t3.N) + (65535 & e3.N) + (o3 >>> 16), o3 = (n3.N >>> 16) + (r3.N >>> 16) + (t3.N >>> 16) + (e3.N >>> 16) + (i3 >>> 16), new k2((65535 & o3) << 16 | 65535 & i3, u3);
    }
    function _2(n3, r3, t3, e3, i3) {
      var o3, u3;
      o3 = (65535 & n3.I) + (65535 & r3.I) + (65535 & t3.I) + (65535 & e3.I) + (65535 & i3.I);
      var f3 = (65535 & (u3 = (n3.I >>> 16) + (r3.I >>> 16) + (t3.I >>> 16) + (e3.I >>> 16) + (i3.I >>> 16) + (o3 >>> 16))) << 16 | 65535 & o3;
      return o3 = (65535 & n3.N) + (65535 & r3.N) + (65535 & t3.N) + (65535 & e3.N) + (65535 & i3.N) + (u3 >>> 16), u3 = (n3.N >>> 16) + (r3.N >>> 16) + (t3.N >>> 16) + (e3.N >>> 16) + (i3.N >>> 16) + (o3 >>> 16), new k2((65535 & u3) << 16 | 65535 & o3, f3);
    }
    function P2(n3, r3) {
      return new k2(n3.N ^ r3.N, n3.I ^ r3.I);
    }
    function x2(n3) {
      var r3 = N2(n3, 1), t3 = N2(n3, 8), e3 = I2(n3, 7);
      return new k2(r3.N ^ t3.N ^ e3.N, r3.I ^ t3.I ^ e3.I);
    }
    function V2(n3) {
      var r3 = N2(n3, 14), t3 = N2(n3, 18), e3 = N2(n3, 41);
      return new k2(r3.N ^ t3.N ^ e3.N, r3.I ^ t3.I ^ e3.I);
    }
    var Z2 = [new k2(i2[0], 3609767458), new k2(i2[1], 602891725), new k2(i2[2], 3964484399), new k2(i2[3], 2173295548), new k2(i2[4], 4081628472), new k2(i2[5], 3053834265), new k2(i2[6], 2937671579), new k2(i2[7], 3664609560), new k2(i2[8], 2734883394), new k2(i2[9], 1164996542), new k2(i2[10], 1323610764), new k2(i2[11], 3590304994), new k2(i2[12], 4068182383), new k2(i2[13], 991336113), new k2(i2[14], 633803317), new k2(i2[15], 3479774868), new k2(i2[16], 2666613458), new k2(i2[17], 944711139), new k2(i2[18], 2341262773), new k2(i2[19], 2007800933), new k2(i2[20], 1495990901), new k2(i2[21], 1856431235), new k2(i2[22], 3175218132), new k2(i2[23], 2198950837), new k2(i2[24], 3999719339), new k2(i2[25], 766784016), new k2(i2[26], 2566594879), new k2(i2[27], 3203337956), new k2(i2[28], 1034457026), new k2(i2[29], 2466948901), new k2(i2[30], 3758326383), new k2(i2[31], 168717936), new k2(i2[32], 1188179964), new k2(i2[33], 1546045734), new k2(i2[34], 1522805485), new k2(i2[35], 2643833823), new k2(i2[36], 2343527390), new k2(i2[37], 1014477480), new k2(i2[38], 1206759142), new k2(i2[39], 344077627), new k2(i2[40], 1290863460), new k2(i2[41], 3158454273), new k2(i2[42], 3505952657), new k2(i2[43], 106217008), new k2(i2[44], 3606008344), new k2(i2[45], 1432725776), new k2(i2[46], 1467031594), new k2(i2[47], 851169720), new k2(i2[48], 3100823752), new k2(i2[49], 1363258195), new k2(i2[50], 3750685593), new k2(i2[51], 3785050280), new k2(i2[52], 3318307427), new k2(i2[53], 3812723403), new k2(i2[54], 2003034995), new k2(i2[55], 3602036899), new k2(i2[56], 1575990012), new k2(i2[57], 1125592928), new k2(i2[58], 2716904306), new k2(i2[59], 442776044), new k2(i2[60], 593698344), new k2(i2[61], 3733110249), new k2(i2[62], 2999351573), new k2(i2[63], 3815920427), new k2(3391569614, 3928383900), new k2(3515267271, 566280711), new k2(3940187606, 3454069534), new k2(4118630271, 4000239992), new k2(116418474, 1914138554), new k2(174292421, 2731055270), new k2(289380356, 3203993006), new k2(460393269, 320620315), new k2(685471733, 587496836), new k2(852142971, 1086792851), new k2(1017036298, 365543100), new k2(1126000580, 2618297676), new k2(1288033470, 3409855158), new k2(1501505948, 4234509866), new k2(1607167915, 987167468), new k2(1816402316, 1246189591)];
    function q2(n3) {
      return "SHA-384" === n3 ? [new k2(3418070365, o2[0]), new k2(1654270250, o2[1]), new k2(2438529370, o2[2]), new k2(355462360, o2[3]), new k2(1731405415, o2[4]), new k2(41048885895, o2[5]), new k2(3675008525, o2[6]), new k2(1203062813, o2[7])] : [new k2(u2[0], 4089235720), new k2(u2[1], 2227873595), new k2(u2[2], 4271175723), new k2(u2[3], 1595750129), new k2(u2[4], 2917565137), new k2(u2[5], 725511199), new k2(u2[6], 4215389547), new k2(u2[7], 327033209)];
    }
    function D2(n3, r3) {
      var t3, e3, i3, o3, u3, f3, w3, s3, a3, h3, c3, v3, A3, E3, l3, b3, H5 = [];
      for (t3 = r3[0], e3 = r3[1], i3 = r3[2], o3 = r3[3], u3 = r3[4], f3 = r3[5], w3 = r3[6], s3 = r3[7], c3 = 0; c3 < 80; c3 += 1)
        c3 < 16 ? (v3 = 2 * c3, H5[c3] = new k2(n3[v3], n3[v3 + 1])) : H5[c3] = j2((A3 = H5[c3 - 2], E3 = void 0, l3 = void 0, b3 = void 0, E3 = N2(A3, 19), l3 = N2(A3, 61), b3 = I2(A3, 6), new k2(E3.N ^ l3.N ^ b3.N, E3.I ^ l3.I ^ b3.I)), H5[c3 - 7], x2(H5[c3 - 15]), H5[c3 - 16]), a3 = _2(s3, V2(u3), M2(u3, f3, w3), Z2[c3], H5[c3]), h3 = O2(z2(t3), X2(t3, e3, i3)), s3 = w3, w3 = f3, f3 = u3, u3 = O2(o3, a3), o3 = i3, i3 = e3, e3 = t3, t3 = O2(a3, h3);
      return r3[0] = O2(t3, r3[0]), r3[1] = O2(e3, r3[1]), r3[2] = O2(i3, r3[2]), r3[3] = O2(o3, r3[3]), r3[4] = O2(u3, r3[4]), r3[5] = O2(f3, r3[5]), r3[6] = O2(w3, r3[6]), r3[7] = O2(s3, r3[7]), r3;
    }
    var G2 = function(n3) {
      function r3(r4, e3, i3) {
        var o3 = this;
        if ("SHA-384" !== r4 && "SHA-512" !== r4)
          throw new Error(f2);
        var u3 = i3 || {};
        return (o3 = n3.call(this, r4, e3, i3) || this).F = o3.Y, o3.g = true, o3.C = -1, o3.p = t2(o3.t, o3.i, o3.C), o3.R = D2, o3.B = function(n4) {
          return n4.slice();
        }, o3.L = q2, o3.K = function(n4, t3, e4, i4) {
          return function(n5, r5, t4, e5, i5) {
            for (var o4, u4 = 31 + (r5 + 129 >>> 10 << 5), f3 = r5 + t4; n5.length <= u4; )
              n5.push(0);
            for (n5[r5 >>> 5] |= 128 << 24 - r5 % 32, n5[u4] = 4294967295 & f3, n5[u4 - 1] = f3 / 4294967296 | 0, o4 = 0; o4 < n5.length; o4 += 32)
              e5 = D2(n5.slice(o4, o4 + 32), e5);
            return "SHA-384" === i5 ? [(e5 = e5)[0].N, e5[0].I, e5[1].N, e5[1].I, e5[2].N, e5[2].I, e5[3].N, e5[3].I, e5[4].N, e5[4].I, e5[5].N, e5[5].I] : [e5[0].N, e5[0].I, e5[1].N, e5[1].I, e5[2].N, e5[2].I, e5[3].N, e5[3].I, e5[4].N, e5[4].I, e5[5].N, e5[5].I, e5[6].N, e5[6].I, e5[7].N, e5[7].I];
          }(n4, t3, e4, i4, r4);
        }, o3.m = q2(r4), o3.S = 1024, o3.U = "SHA-384" === r4 ? 384 : 512, o3.T = false, u3.hmacKey && o3.k(a2("hmacKey", u3.hmacKey, o3.C)), o3;
      }
      return v2(r3, n3), r3;
    }(h2), J2 = [new k2(0, 1), new k2(0, 32898), new k2(2147483648, 32906), new k2(2147483648, 2147516416), new k2(0, 32907), new k2(0, 2147483649), new k2(2147483648, 2147516545), new k2(2147483648, 32777), new k2(0, 138), new k2(0, 136), new k2(0, 2147516425), new k2(0, 2147483658), new k2(0, 2147516555), new k2(2147483648, 139), new k2(2147483648, 32905), new k2(2147483648, 32771), new k2(2147483648, 32770), new k2(2147483648, 128), new k2(0, 32778), new k2(2147483648, 2147483658), new k2(2147483648, 2147516545), new k2(2147483648, 32896), new k2(0, 2147483649), new k2(2147483648, 2147516424)], Q2 = [[0, 36, 3, 41, 18], [1, 44, 10, 45, 2], [62, 6, 43, 15, 61], [28, 55, 25, 21, 56], [27, 20, 39, 8, 14]];
    function W2(n3) {
      var r3, t3 = [];
      for (r3 = 0; r3 < 5; r3 += 1)
        t3[r3] = [new k2(0, 0), new k2(0, 0), new k2(0, 0), new k2(0, 0), new k2(0, 0)];
      return t3;
    }
    function $2(n3) {
      var r3, t3 = [];
      for (r3 = 0; r3 < 5; r3 += 1)
        t3[r3] = n3[r3].slice();
      return t3;
    }
    function nn(n3, r3) {
      var t3, e3, i3, o3, u3, f3, w3, s3, a3, h3 = [], c3 = [];
      if (null !== n3)
        for (e3 = 0; e3 < n3.length; e3 += 2)
          r3[(e3 >>> 1) % 5][(e3 >>> 1) / 5 | 0] = P2(r3[(e3 >>> 1) % 5][(e3 >>> 1) / 5 | 0], new k2(n3[e3 + 1], n3[e3]));
      for (t3 = 0; t3 < 24; t3 += 1) {
        for (o3 = W2(), e3 = 0; e3 < 5; e3 += 1)
          h3[e3] = (u3 = r3[e3][0], f3 = r3[e3][1], w3 = r3[e3][2], s3 = r3[e3][3], a3 = r3[e3][4], new k2(u3.N ^ f3.N ^ w3.N ^ s3.N ^ a3.N, u3.I ^ f3.I ^ w3.I ^ s3.I ^ a3.I));
        for (e3 = 0; e3 < 5; e3 += 1)
          c3[e3] = P2(h3[(e3 + 4) % 5], Y2(h3[(e3 + 1) % 5], 1));
        for (e3 = 0; e3 < 5; e3 += 1)
          for (i3 = 0; i3 < 5; i3 += 1)
            r3[e3][i3] = P2(r3[e3][i3], c3[e3]);
        for (e3 = 0; e3 < 5; e3 += 1)
          for (i3 = 0; i3 < 5; i3 += 1)
            o3[i3][(2 * e3 + 3 * i3) % 5] = Y2(r3[e3][i3], Q2[e3][i3]);
        for (e3 = 0; e3 < 5; e3 += 1)
          for (i3 = 0; i3 < 5; i3 += 1)
            r3[e3][i3] = P2(o3[e3][i3], new k2(~o3[(e3 + 1) % 5][i3].N & o3[(e3 + 2) % 5][i3].N, ~o3[(e3 + 1) % 5][i3].I & o3[(e3 + 2) % 5][i3].I));
        r3[0][0] = P2(r3[0][0], J2[t3]);
      }
      return r3;
    }
    function rn(n3) {
      var r3, t3, e3 = 0, i3 = [0, 0], o3 = [4294967295 & n3, n3 / 4294967296 & 2097151];
      for (r3 = 6; r3 >= 0; r3--)
        0 === (t3 = o3[r3 >> 2] >>> 8 * r3 & 255) && 0 === e3 || (i3[e3 + 1 >> 2] |= t3 << 8 * (e3 + 1), e3 += 1);
      return e3 = 0 !== e3 ? e3 : 1, i3[0] |= e3, { value: e3 + 1 > 4 ? i3 : [i3[0]], binLen: 8 + 8 * e3 };
    }
    function tn(n3) {
      return w2(rn(n3.binLen), n3);
    }
    function en2(n3, r3) {
      var t3, e3 = rn(r3), i3 = r3 >>> 2, o3 = (i3 - (e3 = w2(e3, n3)).value.length % i3) % i3;
      for (t3 = 0; t3 < o3; t3++)
        e3.value.push(0);
      return e3.value;
    }
    var on2 = function(n3) {
      function r3(r4, e3, i3) {
        var o3 = this, u3 = 6, w3 = 0, s3 = i3 || {};
        if (1 !== (o3 = n3.call(this, r4, e3, i3) || this).numRounds) {
          if (s3.kmacKey || s3.hmacKey)
            throw new Error("Cannot set numRounds with MAC");
          if ("CSHAKE128" === o3.o || "CSHAKE256" === o3.o)
            throw new Error("Cannot set numRounds for CSHAKE variants");
        }
        switch (o3.C = 1, o3.p = t2(o3.t, o3.i, o3.C), o3.R = nn, o3.B = $2, o3.L = W2, o3.m = W2(), o3.T = false, r4) {
          case "SHA3-224":
            o3.S = w3 = 1152, o3.U = 224, o3.g = true, o3.F = o3.Y;
            break;
          case "SHA3-256":
            o3.S = w3 = 1088, o3.U = 256, o3.g = true, o3.F = o3.Y;
            break;
          case "SHA3-384":
            o3.S = w3 = 832, o3.U = 384, o3.g = true, o3.F = o3.Y;
            break;
          case "SHA3-512":
            o3.S = w3 = 576, o3.U = 512, o3.g = true, o3.F = o3.Y;
            break;
          case "SHAKE128":
            u3 = 31, o3.S = w3 = 1344, o3.U = -1, o3.T = true, o3.g = false, o3.F = null;
            break;
          case "SHAKE256":
            u3 = 31, o3.S = w3 = 1088, o3.U = -1, o3.T = true, o3.g = false, o3.F = null;
            break;
          case "KMAC128":
            u3 = 4, o3.S = w3 = 1344, o3.M(i3), o3.U = -1, o3.T = true, o3.g = false, o3.F = o3.X;
            break;
          case "KMAC256":
            u3 = 4, o3.S = w3 = 1088, o3.M(i3), o3.U = -1, o3.T = true, o3.g = false, o3.F = o3.X;
            break;
          case "CSHAKE128":
            o3.S = w3 = 1344, u3 = o3.O(i3), o3.U = -1, o3.T = true, o3.g = false, o3.F = null;
            break;
          case "CSHAKE256":
            o3.S = w3 = 1088, u3 = o3.O(i3), o3.U = -1, o3.T = true, o3.g = false, o3.F = null;
            break;
          default:
            throw new Error(f2);
        }
        return o3.K = function(n4, r5, t3, e4, i4) {
          return function(n5, r6, t4, e5, i5, o4, u4) {
            var f3, w4, s4 = 0, a3 = [], h3 = i5 >>> 5, c3 = r6 >>> 5;
            for (f3 = 0; f3 < c3 && r6 >= i5; f3 += h3)
              e5 = nn(n5.slice(f3, f3 + h3), e5), r6 -= i5;
            for (n5 = n5.slice(f3), r6 %= i5; n5.length < h3; )
              n5.push(0);
            for (n5[(f3 = r6 >>> 3) >> 2] ^= o4 << f3 % 4 * 8, n5[h3 - 1] ^= 2147483648, e5 = nn(n5, e5); 32 * a3.length < u4 && (w4 = e5[s4 % 5][s4 / 5 | 0], a3.push(w4.I), !(32 * a3.length >= u4)); )
              a3.push(w4.N), 0 == 64 * (s4 += 1) % i5 && (nn(null, e5), s4 = 0);
            return a3;
          }(n4, r5, 0, e4, w3, u3, i4);
        }, s3.hmacKey && o3.k(a2("hmacKey", s3.hmacKey, o3.C)), o3;
      }
      return v2(r3, n3), r3.prototype.O = function(n4, r4) {
        var t3 = function(n5) {
          var r5 = n5 || {};
          return { funcName: a2("funcName", r5.funcName, 1, { value: [], binLen: 0 }), customization: a2("Customization", r5.customization, 1, { value: [], binLen: 0 }) };
        }(n4 || {});
        r4 && (t3.funcName = r4);
        var e3 = w2(tn(t3.funcName), tn(t3.customization));
        if (0 !== t3.customization.binLen || 0 !== t3.funcName.binLen) {
          for (var i3 = en2(e3, this.S >>> 3), o3 = 0; o3 < i3.length; o3 += this.S >>> 5)
            this.m = this.R(i3.slice(o3, o3 + (this.S >>> 5)), this.m), this.v += this.S;
          return 4;
        }
        return 31;
      }, r3.prototype.M = function(n4) {
        var r4 = function(n5) {
          var r5 = n5 || {};
          return { kmacKey: a2("kmacKey", r5.kmacKey, 1), funcName: { value: [1128353099], binLen: 32 }, customization: a2("Customization", r5.customization, 1, { value: [], binLen: 0 }) };
        }(n4 || {});
        this.O(n4, r4.funcName);
        for (var t3 = en2(tn(r4.kmacKey), this.S >>> 3), e3 = 0; e3 < t3.length; e3 += this.S >>> 5)
          this.m = this.R(t3.slice(e3, e3 + (this.S >>> 5)), this.m), this.v += this.S;
        this.A = true;
      }, r3.prototype.X = function(n4) {
        var r4 = w2({ value: this.u.slice(), binLen: this.s }, function(n5) {
          var r5, t3, e3 = 0, i3 = [0, 0], o3 = [4294967295 & n5, n5 / 4294967296 & 2097151];
          for (r5 = 6; r5 >= 0; r5--)
            0 == (t3 = o3[r5 >> 2] >>> 8 * r5 & 255) && 0 === e3 || (i3[e3 >> 2] |= t3 << 8 * e3, e3 += 1);
          return i3[(e3 = 0 !== e3 ? e3 : 1) >> 2] |= e3 << 8 * e3, { value: e3 + 1 > 4 ? i3 : [i3[0]], binLen: 8 + 8 * e3 };
        }(n4.outputLen));
        return this.K(r4.value, r4.binLen, this.v, this.B(this.m), n4.outputLen);
      }, r3;
    }(h2);
    return function() {
      function n3(n4, r3, t3) {
        if ("SHA-1" == n4)
          this.j = new K2(n4, r3, t3);
        else if ("SHA-224" == n4 || "SHA-256" == n4)
          this.j = new g2(n4, r3, t3);
        else if ("SHA-384" == n4 || "SHA-512" == n4)
          this.j = new G2(n4, r3, t3);
        else {
          if ("SHA3-224" != n4 && "SHA3-256" != n4 && "SHA3-384" != n4 && "SHA3-512" != n4 && "SHAKE128" != n4 && "SHAKE256" != n4 && "CSHAKE128" != n4 && "CSHAKE256" != n4 && "KMAC128" != n4 && "KMAC256" != n4)
            throw new Error(f2);
          this.j = new on2(n4, r3, t3);
        }
      }
      return n3.prototype.update = function(n4) {
        this.j.update(n4);
      }, n3.prototype.getHash = function(n4, r3) {
        return this.j.getHash(n4, r3);
      }, n3.prototype.setHMACKey = function(n4, r3, t3) {
        this.j.setHMACKey(n4, r3, t3);
      }, n3.prototype.getHMAC = function(n4, r3) {
        return this.j.getHMAC(n4, r3);
      }, n3;
    }();
  });
})(sha);
var shaExports = sha.exports;
var browser = {};
var getSecureRandom$1 = {};
Object.defineProperty(getSecureRandom$1, "__esModule", { value: true });
getSecureRandom$1.getSecureRandomWords = getSecureRandom$1.getSecureRandomBytes = void 0;
function getSecureRandomBytes$1(size2) {
  return buffer$1.Buffer.from(window.crypto.getRandomValues(new Uint8Array(size2)));
}
getSecureRandom$1.getSecureRandomBytes = getSecureRandomBytes$1;
function getSecureRandomWords$1(size2) {
  return window.crypto.getRandomValues(new Uint16Array(size2));
}
getSecureRandom$1.getSecureRandomWords = getSecureRandomWords$1;
var hmac_sha512$3 = {};
Object.defineProperty(hmac_sha512$3, "__esModule", { value: true });
hmac_sha512$3.hmac_sha512 = void 0;
async function hmac_sha512$2(key2, data2) {
  let keyBuffer = typeof key2 === "string" ? buffer$1.Buffer.from(key2, "utf-8") : key2;
  let dataBuffer = typeof data2 === "string" ? buffer$1.Buffer.from(data2, "utf-8") : data2;
  const hmacAlgo = { name: "HMAC", hash: "SHA-512" };
  const hmacKey = await window.crypto.subtle.importKey("raw", keyBuffer, hmacAlgo, false, ["sign"]);
  return buffer$1.Buffer.from(await crypto.subtle.sign(hmacAlgo, hmacKey, dataBuffer));
}
hmac_sha512$3.hmac_sha512 = hmac_sha512$2;
var pbkdf2_sha512$3 = {};
Object.defineProperty(pbkdf2_sha512$3, "__esModule", { value: true });
pbkdf2_sha512$3.pbkdf2_sha512 = void 0;
async function pbkdf2_sha512$2(key2, salt, iterations, keyLen) {
  const keyBuffer = typeof key2 === "string" ? buffer$1.Buffer.from(key2, "utf-8") : key2;
  const saltBuffer = typeof salt === "string" ? buffer$1.Buffer.from(salt, "utf-8") : salt;
  const pbkdf2_key = await window.crypto.subtle.importKey("raw", keyBuffer, { name: "PBKDF2" }, false, ["deriveBits"]);
  const derivedBits = await window.crypto.subtle.deriveBits({ name: "PBKDF2", hash: "SHA-512", salt: saltBuffer, iterations }, pbkdf2_key, keyLen * 8);
  return buffer$1.Buffer.from(derivedBits);
}
pbkdf2_sha512$3.pbkdf2_sha512 = pbkdf2_sha512$2;
var sha256$2 = {};
Object.defineProperty(sha256$2, "__esModule", { value: true });
sha256$2.sha256 = void 0;
async function sha256$1(source) {
  if (typeof source === "string") {
    return buffer$1.Buffer.from(await crypto.subtle.digest("SHA-256", buffer$1.Buffer.from(source, "utf-8")));
  }
  return buffer$1.Buffer.from(await crypto.subtle.digest("SHA-256", source));
}
sha256$2.sha256 = sha256$1;
var sha512$3 = {};
Object.defineProperty(sha512$3, "__esModule", { value: true });
sha512$3.sha512 = void 0;
async function sha512$2(source) {
  if (typeof source === "string") {
    return buffer$1.Buffer.from(await crypto.subtle.digest("SHA-512", buffer$1.Buffer.from(source, "utf-8")));
  }
  return buffer$1.Buffer.from(await crypto.subtle.digest("SHA-512", source));
}
sha512$3.sha512 = sha512$2;
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.sha512 = exports2.sha256 = exports2.pbkdf2_sha512 = exports2.hmac_sha512 = exports2.getSecureRandomWords = exports2.getSecureRandomBytes = void 0;
  var getSecureRandom_12 = getSecureRandom$1;
  Object.defineProperty(exports2, "getSecureRandomBytes", { enumerable: true, get: function() {
    return getSecureRandom_12.getSecureRandomBytes;
  } });
  Object.defineProperty(exports2, "getSecureRandomWords", { enumerable: true, get: function() {
    return getSecureRandom_12.getSecureRandomWords;
  } });
  var hmac_sha512_12 = hmac_sha512$3;
  Object.defineProperty(exports2, "hmac_sha512", { enumerable: true, get: function() {
    return hmac_sha512_12.hmac_sha512;
  } });
  var pbkdf2_sha512_12 = pbkdf2_sha512$3;
  Object.defineProperty(exports2, "pbkdf2_sha512", { enumerable: true, get: function() {
    return pbkdf2_sha512_12.pbkdf2_sha512;
  } });
  var sha256_1 = sha256$2;
  Object.defineProperty(exports2, "sha256", { enumerable: true, get: function() {
    return sha256_1.sha256;
  } });
  var sha512_1 = sha512$3;
  Object.defineProperty(exports2, "sha512", { enumerable: true, get: function() {
    return sha512_1.sha512;
  } });
})(browser);
var __importDefault$6 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(sha256$3, "__esModule", { value: true });
sha256$3.sha256 = sha256$3.sha256_fallback = sha256$3.sha256_sync = void 0;
const jssha_1$2 = __importDefault$6(shaExports);
const ton_crypto_primitives_1$4 = browser;
function sha256_sync(source) {
  let src2;
  if (typeof source === "string") {
    src2 = buffer$1.Buffer.from(source, "utf-8").toString("hex");
  } else {
    src2 = source.toString("hex");
  }
  let hasher = new jssha_1$2.default("SHA-256", "HEX");
  hasher.update(src2);
  let res = hasher.getHash("HEX");
  return buffer$1.Buffer.from(res, "hex");
}
sha256$3.sha256_sync = sha256_sync;
async function sha256_fallback(source) {
  return sha256_sync(source);
}
sha256$3.sha256_fallback = sha256_fallback;
function sha256(source) {
  return (0, ton_crypto_primitives_1$4.sha256)(source);
}
sha256$3.sha256 = sha256;
var sha512$1 = {};
var __importDefault$5 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(sha512$1, "__esModule", { value: true });
sha512$1.sha512 = sha512$1.sha512_fallback = sha512$1.sha512_sync = void 0;
const jssha_1$1 = __importDefault$5(shaExports);
const ton_crypto_primitives_1$3 = browser;
function sha512_sync(source) {
  let src2;
  if (typeof source === "string") {
    src2 = buffer$1.Buffer.from(source, "utf-8").toString("hex");
  } else {
    src2 = source.toString("hex");
  }
  let hasher = new jssha_1$1.default("SHA-512", "HEX");
  hasher.update(src2);
  let res = hasher.getHash("HEX");
  return buffer$1.Buffer.from(res, "hex");
}
sha512$1.sha512_sync = sha512_sync;
async function sha512_fallback(source) {
  return sha512_sync(source);
}
sha512$1.sha512_fallback = sha512_fallback;
async function sha512(source) {
  return (0, ton_crypto_primitives_1$3.sha512)(source);
}
sha512$1.sha512 = sha512;
var pbkdf2_sha512$1 = {};
Object.defineProperty(pbkdf2_sha512$1, "__esModule", { value: true });
pbkdf2_sha512$1.pbkdf2_sha512 = void 0;
const ton_crypto_primitives_1$2 = browser;
function pbkdf2_sha512(key2, salt, iterations, keyLen) {
  return (0, ton_crypto_primitives_1$2.pbkdf2_sha512)(key2, salt, iterations, keyLen);
}
pbkdf2_sha512$1.pbkdf2_sha512 = pbkdf2_sha512;
var hmac_sha512$1 = {};
var __importDefault$4 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(hmac_sha512$1, "__esModule", { value: true });
hmac_sha512$1.hmac_sha512 = hmac_sha512$1.hmac_sha512_fallback = void 0;
const jssha_1 = __importDefault$4(shaExports);
const ton_crypto_primitives_1$1 = browser;
async function hmac_sha512_fallback(key2, data2) {
  let keyBuffer = typeof key2 === "string" ? buffer$1.Buffer.from(key2, "utf-8") : key2;
  let dataBuffer = typeof data2 === "string" ? buffer$1.Buffer.from(data2, "utf-8") : data2;
  const shaObj = new jssha_1.default("SHA-512", "HEX", {
    hmacKey: { value: keyBuffer.toString("hex"), format: "HEX" }
  });
  shaObj.update(dataBuffer.toString("hex"));
  const hmac2 = shaObj.getHash("HEX");
  return buffer$1.Buffer.from(hmac2, "hex");
}
hmac_sha512$1.hmac_sha512_fallback = hmac_sha512_fallback;
function hmac_sha512(key2, data2) {
  return (0, ton_crypto_primitives_1$1.hmac_sha512)(key2, data2);
}
hmac_sha512$1.hmac_sha512 = hmac_sha512;
var getSecureRandom = {};
Object.defineProperty(getSecureRandom, "__esModule", { value: true });
getSecureRandom.getSecureRandomNumber = getSecureRandom.getSecureRandomWords = getSecureRandom.getSecureRandomBytes = void 0;
const ton_crypto_primitives_1 = browser;
async function getSecureRandomBytes(size2) {
  return (0, ton_crypto_primitives_1.getSecureRandomBytes)(size2);
}
getSecureRandom.getSecureRandomBytes = getSecureRandomBytes;
async function getSecureRandomWords(size2) {
  return getSecureRandomWords();
}
getSecureRandom.getSecureRandomWords = getSecureRandomWords;
async function getSecureRandomNumber(min2, max2) {
  let range2 = max2 - min2;
  var bitsNeeded = Math.ceil(Math.log2(range2));
  if (bitsNeeded > 53) {
    throw new Error("Range is too large");
  }
  var bytesNeeded = Math.ceil(bitsNeeded / 8);
  var mask = Math.pow(2, bitsNeeded) - 1;
  while (true) {
    let res = await getSecureRandomBytes(bitsNeeded);
    let power = (bytesNeeded - 1) * 8;
    let numberValue = 0;
    for (var i2 = 0; i2 < bytesNeeded; i2++) {
      numberValue += res[i2] * Math.pow(2, power);
      power -= 8;
    }
    numberValue = numberValue & mask;
    if (numberValue >= range2) {
      continue;
    }
    return min2 + numberValue;
  }
}
getSecureRandom.getSecureRandomNumber = getSecureRandomNumber;
var newSecureWords$1 = {};
var wordlist$1 = {};
Object.defineProperty(wordlist$1, "__esModule", { value: true });
wordlist$1.wordlist = void 0;
wordlist$1.wordlist = [
  "abacus",
  "abdomen",
  "abdominal",
  "abide",
  "abiding",
  "ability",
  "ablaze",
  "able",
  "abnormal",
  "abrasion",
  "abrasive",
  "abreast",
  "abridge",
  "abroad",
  "abruptly",
  "absence",
  "absentee",
  "absently",
  "absinthe",
  "absolute",
  "absolve",
  "abstain",
  "abstract",
  "absurd",
  "accent",
  "acclaim",
  "acclimate",
  "accompany",
  "account",
  "accuracy",
  "accurate",
  "accustom",
  "acetone",
  "achiness",
  "aching",
  "acid",
  "acorn",
  "acquaint",
  "acquire",
  "acre",
  "acrobat",
  "acronym",
  "acting",
  "action",
  "activate",
  "activator",
  "active",
  "activism",
  "activist",
  "activity",
  "actress",
  "acts",
  "acutely",
  "acuteness",
  "aeration",
  "aerobics",
  "aerosol",
  "aerospace",
  "afar",
  "affair",
  "affected",
  "affecting",
  "affection",
  "affidavit",
  "affiliate",
  "affirm",
  "affix",
  "afflicted",
  "affluent",
  "afford",
  "affront",
  "aflame",
  "afloat",
  "aflutter",
  "afoot",
  "afraid",
  "afterglow",
  "afterlife",
  "aftermath",
  "aftermost",
  "afternoon",
  "aged",
  "ageless",
  "agency",
  "agenda",
  "agent",
  "aggregate",
  "aghast",
  "agile",
  "agility",
  "aging",
  "agnostic",
  "agonize",
  "agonizing",
  "agony",
  "agreeable",
  "agreeably",
  "agreed",
  "agreeing",
  "agreement",
  "aground",
  "ahead",
  "ahoy",
  "aide",
  "aids",
  "aim",
  "ajar",
  "alabaster",
  "alarm",
  "albatross",
  "album",
  "alfalfa",
  "algebra",
  "algorithm",
  "alias",
  "alibi",
  "alienable",
  "alienate",
  "aliens",
  "alike",
  "alive",
  "alkaline",
  "alkalize",
  "almanac",
  "almighty",
  "almost",
  "aloe",
  "aloft",
  "aloha",
  "alone",
  "alongside",
  "aloof",
  "alphabet",
  "alright",
  "although",
  "altitude",
  "alto",
  "aluminum",
  "alumni",
  "always",
  "amaretto",
  "amaze",
  "amazingly",
  "amber",
  "ambiance",
  "ambiguity",
  "ambiguous",
  "ambition",
  "ambitious",
  "ambulance",
  "ambush",
  "amendable",
  "amendment",
  "amends",
  "amenity",
  "amiable",
  "amicably",
  "amid",
  "amigo",
  "amino",
  "amiss",
  "ammonia",
  "ammonium",
  "amnesty",
  "amniotic",
  "among",
  "amount",
  "amperage",
  "ample",
  "amplifier",
  "amplify",
  "amply",
  "amuck",
  "amulet",
  "amusable",
  "amused",
  "amusement",
  "amuser",
  "amusing",
  "anaconda",
  "anaerobic",
  "anagram",
  "anatomist",
  "anatomy",
  "anchor",
  "anchovy",
  "ancient",
  "android",
  "anemia",
  "anemic",
  "aneurism",
  "anew",
  "angelfish",
  "angelic",
  "anger",
  "angled",
  "angler",
  "angles",
  "angling",
  "angrily",
  "angriness",
  "anguished",
  "angular",
  "animal",
  "animate",
  "animating",
  "animation",
  "animator",
  "anime",
  "animosity",
  "ankle",
  "annex",
  "annotate",
  "announcer",
  "annoying",
  "annually",
  "annuity",
  "anointer",
  "another",
  "answering",
  "antacid",
  "antarctic",
  "anteater",
  "antelope",
  "antennae",
  "anthem",
  "anthill",
  "anthology",
  "antibody",
  "antics",
  "antidote",
  "antihero",
  "antiquely",
  "antiques",
  "antiquity",
  "antirust",
  "antitoxic",
  "antitrust",
  "antiviral",
  "antivirus",
  "antler",
  "antonym",
  "antsy",
  "anvil",
  "anybody",
  "anyhow",
  "anymore",
  "anyone",
  "anyplace",
  "anything",
  "anytime",
  "anyway",
  "anywhere",
  "aorta",
  "apache",
  "apostle",
  "appealing",
  "appear",
  "appease",
  "appeasing",
  "appendage",
  "appendix",
  "appetite",
  "appetizer",
  "applaud",
  "applause",
  "apple",
  "appliance",
  "applicant",
  "applied",
  "apply",
  "appointee",
  "appraisal",
  "appraiser",
  "apprehend",
  "approach",
  "approval",
  "approve",
  "apricot",
  "april",
  "apron",
  "aptitude",
  "aptly",
  "aqua",
  "aqueduct",
  "arbitrary",
  "arbitrate",
  "ardently",
  "area",
  "arena",
  "arguable",
  "arguably",
  "argue",
  "arise",
  "armadillo",
  "armband",
  "armchair",
  "armed",
  "armful",
  "armhole",
  "arming",
  "armless",
  "armoire",
  "armored",
  "armory",
  "armrest",
  "army",
  "aroma",
  "arose",
  "around",
  "arousal",
  "arrange",
  "array",
  "arrest",
  "arrival",
  "arrive",
  "arrogance",
  "arrogant",
  "arson",
  "art",
  "ascend",
  "ascension",
  "ascent",
  "ascertain",
  "ashamed",
  "ashen",
  "ashes",
  "ashy",
  "aside",
  "askew",
  "asleep",
  "asparagus",
  "aspect",
  "aspirate",
  "aspire",
  "aspirin",
  "astonish",
  "astound",
  "astride",
  "astrology",
  "astronaut",
  "astronomy",
  "astute",
  "atlantic",
  "atlas",
  "atom",
  "atonable",
  "atop",
  "atrium",
  "atrocious",
  "atrophy",
  "attach",
  "attain",
  "attempt",
  "attendant",
  "attendee",
  "attention",
  "attentive",
  "attest",
  "attic",
  "attire",
  "attitude",
  "attractor",
  "attribute",
  "atypical",
  "auction",
  "audacious",
  "audacity",
  "audible",
  "audibly",
  "audience",
  "audio",
  "audition",
  "augmented",
  "august",
  "authentic",
  "author",
  "autism",
  "autistic",
  "autograph",
  "automaker",
  "automated",
  "automatic",
  "autopilot",
  "available",
  "avalanche",
  "avatar",
  "avenge",
  "avenging",
  "avenue",
  "average",
  "aversion",
  "avert",
  "aviation",
  "aviator",
  "avid",
  "avoid",
  "await",
  "awaken",
  "award",
  "aware",
  "awhile",
  "awkward",
  "awning",
  "awoke",
  "awry",
  "axis",
  "babble",
  "babbling",
  "babied",
  "baboon",
  "backache",
  "backboard",
  "backboned",
  "backdrop",
  "backed",
  "backer",
  "backfield",
  "backfire",
  "backhand",
  "backing",
  "backlands",
  "backlash",
  "backless",
  "backlight",
  "backlit",
  "backlog",
  "backpack",
  "backpedal",
  "backrest",
  "backroom",
  "backshift",
  "backside",
  "backslid",
  "backspace",
  "backspin",
  "backstab",
  "backstage",
  "backtalk",
  "backtrack",
  "backup",
  "backward",
  "backwash",
  "backwater",
  "backyard",
  "bacon",
  "bacteria",
  "bacterium",
  "badass",
  "badge",
  "badland",
  "badly",
  "badness",
  "baffle",
  "baffling",
  "bagel",
  "bagful",
  "baggage",
  "bagged",
  "baggie",
  "bagginess",
  "bagging",
  "baggy",
  "bagpipe",
  "baguette",
  "baked",
  "bakery",
  "bakeshop",
  "baking",
  "balance",
  "balancing",
  "balcony",
  "balmy",
  "balsamic",
  "bamboo",
  "banana",
  "banish",
  "banister",
  "banjo",
  "bankable",
  "bankbook",
  "banked",
  "banker",
  "banking",
  "banknote",
  "bankroll",
  "banner",
  "bannister",
  "banshee",
  "banter",
  "barbecue",
  "barbed",
  "barbell",
  "barber",
  "barcode",
  "barge",
  "bargraph",
  "barista",
  "baritone",
  "barley",
  "barmaid",
  "barman",
  "barn",
  "barometer",
  "barrack",
  "barracuda",
  "barrel",
  "barrette",
  "barricade",
  "barrier",
  "barstool",
  "bartender",
  "barterer",
  "bash",
  "basically",
  "basics",
  "basil",
  "basin",
  "basis",
  "basket",
  "batboy",
  "batch",
  "bath",
  "baton",
  "bats",
  "battalion",
  "battered",
  "battering",
  "battery",
  "batting",
  "battle",
  "bauble",
  "bazooka",
  "blabber",
  "bladder",
  "blade",
  "blah",
  "blame",
  "blaming",
  "blanching",
  "blandness",
  "blank",
  "blaspheme",
  "blasphemy",
  "blast",
  "blatancy",
  "blatantly",
  "blazer",
  "blazing",
  "bleach",
  "bleak",
  "bleep",
  "blemish",
  "blend",
  "bless",
  "blighted",
  "blimp",
  "bling",
  "blinked",
  "blinker",
  "blinking",
  "blinks",
  "blip",
  "blissful",
  "blitz",
  "blizzard",
  "bloated",
  "bloating",
  "blob",
  "blog",
  "bloomers",
  "blooming",
  "blooper",
  "blot",
  "blouse",
  "blubber",
  "bluff",
  "bluish",
  "blunderer",
  "blunt",
  "blurb",
  "blurred",
  "blurry",
  "blurt",
  "blush",
  "blustery",
  "boaster",
  "boastful",
  "boasting",
  "boat",
  "bobbed",
  "bobbing",
  "bobble",
  "bobcat",
  "bobsled",
  "bobtail",
  "bodacious",
  "body",
  "bogged",
  "boggle",
  "bogus",
  "boil",
  "bok",
  "bolster",
  "bolt",
  "bonanza",
  "bonded",
  "bonding",
  "bondless",
  "boned",
  "bonehead",
  "boneless",
  "bonelike",
  "boney",
  "bonfire",
  "bonnet",
  "bonsai",
  "bonus",
  "bony",
  "boogeyman",
  "boogieman",
  "book",
  "boondocks",
  "booted",
  "booth",
  "bootie",
  "booting",
  "bootlace",
  "bootleg",
  "boots",
  "boozy",
  "borax",
  "boring",
  "borough",
  "borrower",
  "borrowing",
  "boss",
  "botanical",
  "botanist",
  "botany",
  "botch",
  "both",
  "bottle",
  "bottling",
  "bottom",
  "bounce",
  "bouncing",
  "bouncy",
  "bounding",
  "boundless",
  "bountiful",
  "bovine",
  "boxcar",
  "boxer",
  "boxing",
  "boxlike",
  "boxy",
  "breach",
  "breath",
  "breeches",
  "breeching",
  "breeder",
  "breeding",
  "breeze",
  "breezy",
  "brethren",
  "brewery",
  "brewing",
  "briar",
  "bribe",
  "brick",
  "bride",
  "bridged",
  "brigade",
  "bright",
  "brilliant",
  "brim",
  "bring",
  "brink",
  "brisket",
  "briskly",
  "briskness",
  "bristle",
  "brittle",
  "broadband",
  "broadcast",
  "broaden",
  "broadly",
  "broadness",
  "broadside",
  "broadways",
  "broiler",
  "broiling",
  "broken",
  "broker",
  "bronchial",
  "bronco",
  "bronze",
  "bronzing",
  "brook",
  "broom",
  "brought",
  "browbeat",
  "brownnose",
  "browse",
  "browsing",
  "bruising",
  "brunch",
  "brunette",
  "brunt",
  "brush",
  "brussels",
  "brute",
  "brutishly",
  "bubble",
  "bubbling",
  "bubbly",
  "buccaneer",
  "bucked",
  "bucket",
  "buckle",
  "buckshot",
  "buckskin",
  "bucktooth",
  "buckwheat",
  "buddhism",
  "buddhist",
  "budding",
  "buddy",
  "budget",
  "buffalo",
  "buffed",
  "buffer",
  "buffing",
  "buffoon",
  "buggy",
  "bulb",
  "bulge",
  "bulginess",
  "bulgur",
  "bulk",
  "bulldog",
  "bulldozer",
  "bullfight",
  "bullfrog",
  "bullhorn",
  "bullion",
  "bullish",
  "bullpen",
  "bullring",
  "bullseye",
  "bullwhip",
  "bully",
  "bunch",
  "bundle",
  "bungee",
  "bunion",
  "bunkbed",
  "bunkhouse",
  "bunkmate",
  "bunny",
  "bunt",
  "busboy",
  "bush",
  "busily",
  "busload",
  "bust",
  "busybody",
  "buzz",
  "cabana",
  "cabbage",
  "cabbie",
  "cabdriver",
  "cable",
  "caboose",
  "cache",
  "cackle",
  "cacti",
  "cactus",
  "caddie",
  "caddy",
  "cadet",
  "cadillac",
  "cadmium",
  "cage",
  "cahoots",
  "cake",
  "calamari",
  "calamity",
  "calcium",
  "calculate",
  "calculus",
  "caliber",
  "calibrate",
  "calm",
  "caloric",
  "calorie",
  "calzone",
  "camcorder",
  "cameo",
  "camera",
  "camisole",
  "camper",
  "campfire",
  "camping",
  "campsite",
  "campus",
  "canal",
  "canary",
  "cancel",
  "candied",
  "candle",
  "candy",
  "cane",
  "canine",
  "canister",
  "cannabis",
  "canned",
  "canning",
  "cannon",
  "cannot",
  "canola",
  "canon",
  "canopener",
  "canopy",
  "canteen",
  "canyon",
  "capable",
  "capably",
  "capacity",
  "cape",
  "capillary",
  "capital",
  "capitol",
  "capped",
  "capricorn",
  "capsize",
  "capsule",
  "caption",
  "captivate",
  "captive",
  "captivity",
  "capture",
  "caramel",
  "carat",
  "caravan",
  "carbon",
  "cardboard",
  "carded",
  "cardiac",
  "cardigan",
  "cardinal",
  "cardstock",
  "carefully",
  "caregiver",
  "careless",
  "caress",
  "caretaker",
  "cargo",
  "caring",
  "carless",
  "carload",
  "carmaker",
  "carnage",
  "carnation",
  "carnival",
  "carnivore",
  "carol",
  "carpenter",
  "carpentry",
  "carpool",
  "carport",
  "carried",
  "carrot",
  "carrousel",
  "carry",
  "cartel",
  "cartload",
  "carton",
  "cartoon",
  "cartridge",
  "cartwheel",
  "carve",
  "carving",
  "carwash",
  "cascade",
  "case",
  "cash",
  "casing",
  "casino",
  "casket",
  "cassette",
  "casually",
  "casualty",
  "catacomb",
  "catalog",
  "catalyst",
  "catalyze",
  "catapult",
  "cataract",
  "catatonic",
  "catcall",
  "catchable",
  "catcher",
  "catching",
  "catchy",
  "caterer",
  "catering",
  "catfight",
  "catfish",
  "cathedral",
  "cathouse",
  "catlike",
  "catnap",
  "catnip",
  "catsup",
  "cattail",
  "cattishly",
  "cattle",
  "catty",
  "catwalk",
  "caucasian",
  "caucus",
  "causal",
  "causation",
  "cause",
  "causing",
  "cauterize",
  "caution",
  "cautious",
  "cavalier",
  "cavalry",
  "caviar",
  "cavity",
  "cedar",
  "celery",
  "celestial",
  "celibacy",
  "celibate",
  "celtic",
  "cement",
  "census",
  "ceramics",
  "ceremony",
  "certainly",
  "certainty",
  "certified",
  "certify",
  "cesarean",
  "cesspool",
  "chafe",
  "chaffing",
  "chain",
  "chair",
  "chalice",
  "challenge",
  "chamber",
  "chamomile",
  "champion",
  "chance",
  "change",
  "channel",
  "chant",
  "chaos",
  "chaperone",
  "chaplain",
  "chapped",
  "chaps",
  "chapter",
  "character",
  "charbroil",
  "charcoal",
  "charger",
  "charging",
  "chariot",
  "charity",
  "charm",
  "charred",
  "charter",
  "charting",
  "chase",
  "chasing",
  "chaste",
  "chastise",
  "chastity",
  "chatroom",
  "chatter",
  "chatting",
  "chatty",
  "cheating",
  "cheddar",
  "cheek",
  "cheer",
  "cheese",
  "cheesy",
  "chef",
  "chemicals",
  "chemist",
  "chemo",
  "cherisher",
  "cherub",
  "chess",
  "chest",
  "chevron",
  "chevy",
  "chewable",
  "chewer",
  "chewing",
  "chewy",
  "chief",
  "chihuahua",
  "childcare",
  "childhood",
  "childish",
  "childless",
  "childlike",
  "chili",
  "chill",
  "chimp",
  "chip",
  "chirping",
  "chirpy",
  "chitchat",
  "chivalry",
  "chive",
  "chloride",
  "chlorine",
  "choice",
  "chokehold",
  "choking",
  "chomp",
  "chooser",
  "choosing",
  "choosy",
  "chop",
  "chosen",
  "chowder",
  "chowtime",
  "chrome",
  "chubby",
  "chuck",
  "chug",
  "chummy",
  "chump",
  "chunk",
  "churn",
  "chute",
  "cider",
  "cilantro",
  "cinch",
  "cinema",
  "cinnamon",
  "circle",
  "circling",
  "circular",
  "circulate",
  "circus",
  "citable",
  "citadel",
  "citation",
  "citizen",
  "citric",
  "citrus",
  "city",
  "civic",
  "civil",
  "clad",
  "claim",
  "clambake",
  "clammy",
  "clamor",
  "clamp",
  "clamshell",
  "clang",
  "clanking",
  "clapped",
  "clapper",
  "clapping",
  "clarify",
  "clarinet",
  "clarity",
  "clash",
  "clasp",
  "class",
  "clatter",
  "clause",
  "clavicle",
  "claw",
  "clay",
  "clean",
  "clear",
  "cleat",
  "cleaver",
  "cleft",
  "clench",
  "clergyman",
  "clerical",
  "clerk",
  "clever",
  "clicker",
  "client",
  "climate",
  "climatic",
  "cling",
  "clinic",
  "clinking",
  "clip",
  "clique",
  "cloak",
  "clobber",
  "clock",
  "clone",
  "cloning",
  "closable",
  "closure",
  "clothes",
  "clothing",
  "cloud",
  "clover",
  "clubbed",
  "clubbing",
  "clubhouse",
  "clump",
  "clumsily",
  "clumsy",
  "clunky",
  "clustered",
  "clutch",
  "clutter",
  "coach",
  "coagulant",
  "coastal",
  "coaster",
  "coasting",
  "coastland",
  "coastline",
  "coat",
  "coauthor",
  "cobalt",
  "cobbler",
  "cobweb",
  "cocoa",
  "coconut",
  "cod",
  "coeditor",
  "coerce",
  "coexist",
  "coffee",
  "cofounder",
  "cognition",
  "cognitive",
  "cogwheel",
  "coherence",
  "coherent",
  "cohesive",
  "coil",
  "coke",
  "cola",
  "cold",
  "coleslaw",
  "coliseum",
  "collage",
  "collapse",
  "collar",
  "collected",
  "collector",
  "collide",
  "collie",
  "collision",
  "colonial",
  "colonist",
  "colonize",
  "colony",
  "colossal",
  "colt",
  "coma",
  "come",
  "comfort",
  "comfy",
  "comic",
  "coming",
  "comma",
  "commence",
  "commend",
  "comment",
  "commerce",
  "commode",
  "commodity",
  "commodore",
  "common",
  "commotion",
  "commute",
  "commuting",
  "compacted",
  "compacter",
  "compactly",
  "compactor",
  "companion",
  "company",
  "compare",
  "compel",
  "compile",
  "comply",
  "component",
  "composed",
  "composer",
  "composite",
  "compost",
  "composure",
  "compound",
  "compress",
  "comprised",
  "computer",
  "computing",
  "comrade",
  "concave",
  "conceal",
  "conceded",
  "concept",
  "concerned",
  "concert",
  "conch",
  "concierge",
  "concise",
  "conclude",
  "concrete",
  "concur",
  "condense",
  "condiment",
  "condition",
  "condone",
  "conducive",
  "conductor",
  "conduit",
  "cone",
  "confess",
  "confetti",
  "confidant",
  "confident",
  "confider",
  "confiding",
  "configure",
  "confined",
  "confining",
  "confirm",
  "conflict",
  "conform",
  "confound",
  "confront",
  "confused",
  "confusing",
  "confusion",
  "congenial",
  "congested",
  "congrats",
  "congress",
  "conical",
  "conjoined",
  "conjure",
  "conjuror",
  "connected",
  "connector",
  "consensus",
  "consent",
  "console",
  "consoling",
  "consonant",
  "constable",
  "constant",
  "constrain",
  "constrict",
  "construct",
  "consult",
  "consumer",
  "consuming",
  "contact",
  "container",
  "contempt",
  "contend",
  "contented",
  "contently",
  "contents",
  "contest",
  "context",
  "contort",
  "contour",
  "contrite",
  "control",
  "contusion",
  "convene",
  "convent",
  "copartner",
  "cope",
  "copied",
  "copier",
  "copilot",
  "coping",
  "copious",
  "copper",
  "copy",
  "coral",
  "cork",
  "cornball",
  "cornbread",
  "corncob",
  "cornea",
  "corned",
  "corner",
  "cornfield",
  "cornflake",
  "cornhusk",
  "cornmeal",
  "cornstalk",
  "corny",
  "coronary",
  "coroner",
  "corporal",
  "corporate",
  "corral",
  "correct",
  "corridor",
  "corrode",
  "corroding",
  "corrosive",
  "corsage",
  "corset",
  "cortex",
  "cosigner",
  "cosmetics",
  "cosmic",
  "cosmos",
  "cosponsor",
  "cost",
  "cottage",
  "cotton",
  "couch",
  "cough",
  "could",
  "countable",
  "countdown",
  "counting",
  "countless",
  "country",
  "county",
  "courier",
  "covenant",
  "cover",
  "coveted",
  "coveting",
  "coyness",
  "cozily",
  "coziness",
  "cozy",
  "crabbing",
  "crabgrass",
  "crablike",
  "crabmeat",
  "cradle",
  "cradling",
  "crafter",
  "craftily",
  "craftsman",
  "craftwork",
  "crafty",
  "cramp",
  "cranberry",
  "crane",
  "cranial",
  "cranium",
  "crank",
  "crate",
  "crave",
  "craving",
  "crawfish",
  "crawlers",
  "crawling",
  "crayfish",
  "crayon",
  "crazed",
  "crazily",
  "craziness",
  "crazy",
  "creamed",
  "creamer",
  "creamlike",
  "crease",
  "creasing",
  "creatable",
  "create",
  "creation",
  "creative",
  "creature",
  "credible",
  "credibly",
  "credit",
  "creed",
  "creme",
  "creole",
  "crepe",
  "crept",
  "crescent",
  "crested",
  "cresting",
  "crestless",
  "crevice",
  "crewless",
  "crewman",
  "crewmate",
  "crib",
  "cricket",
  "cried",
  "crier",
  "crimp",
  "crimson",
  "cringe",
  "cringing",
  "crinkle",
  "crinkly",
  "crisped",
  "crisping",
  "crisply",
  "crispness",
  "crispy",
  "criteria",
  "critter",
  "croak",
  "crock",
  "crook",
  "croon",
  "crop",
  "cross",
  "crouch",
  "crouton",
  "crowbar",
  "crowd",
  "crown",
  "crucial",
  "crudely",
  "crudeness",
  "cruelly",
  "cruelness",
  "cruelty",
  "crumb",
  "crummiest",
  "crummy",
  "crumpet",
  "crumpled",
  "cruncher",
  "crunching",
  "crunchy",
  "crusader",
  "crushable",
  "crushed",
  "crusher",
  "crushing",
  "crust",
  "crux",
  "crying",
  "cryptic",
  "crystal",
  "cubbyhole",
  "cube",
  "cubical",
  "cubicle",
  "cucumber",
  "cuddle",
  "cuddly",
  "cufflink",
  "culinary",
  "culminate",
  "culpable",
  "culprit",
  "cultivate",
  "cultural",
  "culture",
  "cupbearer",
  "cupcake",
  "cupid",
  "cupped",
  "cupping",
  "curable",
  "curator",
  "curdle",
  "cure",
  "curfew",
  "curing",
  "curled",
  "curler",
  "curliness",
  "curling",
  "curly",
  "curry",
  "curse",
  "cursive",
  "cursor",
  "curtain",
  "curtly",
  "curtsy",
  "curvature",
  "curve",
  "curvy",
  "cushy",
  "cusp",
  "cussed",
  "custard",
  "custodian",
  "custody",
  "customary",
  "customer",
  "customize",
  "customs",
  "cut",
  "cycle",
  "cyclic",
  "cycling",
  "cyclist",
  "cylinder",
  "cymbal",
  "cytoplasm",
  "cytoplast",
  "dab",
  "dad",
  "daffodil",
  "dagger",
  "daily",
  "daintily",
  "dainty",
  "dairy",
  "daisy",
  "dallying",
  "dance",
  "dancing",
  "dandelion",
  "dander",
  "dandruff",
  "dandy",
  "danger",
  "dangle",
  "dangling",
  "daredevil",
  "dares",
  "daringly",
  "darkened",
  "darkening",
  "darkish",
  "darkness",
  "darkroom",
  "darling",
  "darn",
  "dart",
  "darwinism",
  "dash",
  "dastardly",
  "data",
  "datebook",
  "dating",
  "daughter",
  "daunting",
  "dawdler",
  "dawn",
  "daybed",
  "daybreak",
  "daycare",
  "daydream",
  "daylight",
  "daylong",
  "dayroom",
  "daytime",
  "dazzler",
  "dazzling",
  "deacon",
  "deafening",
  "deafness",
  "dealer",
  "dealing",
  "dealmaker",
  "dealt",
  "dean",
  "debatable",
  "debate",
  "debating",
  "debit",
  "debrief",
  "debtless",
  "debtor",
  "debug",
  "debunk",
  "decade",
  "decaf",
  "decal",
  "decathlon",
  "decay",
  "deceased",
  "deceit",
  "deceiver",
  "deceiving",
  "december",
  "decency",
  "decent",
  "deception",
  "deceptive",
  "decibel",
  "decidable",
  "decimal",
  "decimeter",
  "decipher",
  "deck",
  "declared",
  "decline",
  "decode",
  "decompose",
  "decorated",
  "decorator",
  "decoy",
  "decrease",
  "decree",
  "dedicate",
  "dedicator",
  "deduce",
  "deduct",
  "deed",
  "deem",
  "deepen",
  "deeply",
  "deepness",
  "deface",
  "defacing",
  "defame",
  "default",
  "defeat",
  "defection",
  "defective",
  "defendant",
  "defender",
  "defense",
  "defensive",
  "deferral",
  "deferred",
  "defiance",
  "defiant",
  "defile",
  "defiling",
  "define",
  "definite",
  "deflate",
  "deflation",
  "deflator",
  "deflected",
  "deflector",
  "defog",
  "deforest",
  "defraud",
  "defrost",
  "deftly",
  "defuse",
  "defy",
  "degraded",
  "degrading",
  "degrease",
  "degree",
  "dehydrate",
  "deity",
  "dejected",
  "delay",
  "delegate",
  "delegator",
  "delete",
  "deletion",
  "delicacy",
  "delicate",
  "delicious",
  "delighted",
  "delirious",
  "delirium",
  "deliverer",
  "delivery",
  "delouse",
  "delta",
  "deluge",
  "delusion",
  "deluxe",
  "demanding",
  "demeaning",
  "demeanor",
  "demise",
  "democracy",
  "democrat",
  "demote",
  "demotion",
  "demystify",
  "denatured",
  "deniable",
  "denial",
  "denim",
  "denote",
  "dense",
  "density",
  "dental",
  "dentist",
  "denture",
  "deny",
  "deodorant",
  "deodorize",
  "departed",
  "departure",
  "depict",
  "deplete",
  "depletion",
  "deplored",
  "deploy",
  "deport",
  "depose",
  "depraved",
  "depravity",
  "deprecate",
  "depress",
  "deprive",
  "depth",
  "deputize",
  "deputy",
  "derail",
  "deranged",
  "derby",
  "derived",
  "desecrate",
  "deserve",
  "deserving",
  "designate",
  "designed",
  "designer",
  "designing",
  "deskbound",
  "desktop",
  "deskwork",
  "desolate",
  "despair",
  "despise",
  "despite",
  "destiny",
  "destitute",
  "destruct",
  "detached",
  "detail",
  "detection",
  "detective",
  "detector",
  "detention",
  "detergent",
  "detest",
  "detonate",
  "detonator",
  "detoxify",
  "detract",
  "deuce",
  "devalue",
  "deviancy",
  "deviant",
  "deviate",
  "deviation",
  "deviator",
  "device",
  "devious",
  "devotedly",
  "devotee",
  "devotion",
  "devourer",
  "devouring",
  "devoutly",
  "dexterity",
  "dexterous",
  "diabetes",
  "diabetic",
  "diabolic",
  "diagnoses",
  "diagnosis",
  "diagram",
  "dial",
  "diameter",
  "diaper",
  "diaphragm",
  "diary",
  "dice",
  "dicing",
  "dictate",
  "dictation",
  "dictator",
  "difficult",
  "diffused",
  "diffuser",
  "diffusion",
  "diffusive",
  "dig",
  "dilation",
  "diligence",
  "diligent",
  "dill",
  "dilute",
  "dime",
  "diminish",
  "dimly",
  "dimmed",
  "dimmer",
  "dimness",
  "dimple",
  "diner",
  "dingbat",
  "dinghy",
  "dinginess",
  "dingo",
  "dingy",
  "dining",
  "dinner",
  "diocese",
  "dioxide",
  "diploma",
  "dipped",
  "dipper",
  "dipping",
  "directed",
  "direction",
  "directive",
  "directly",
  "directory",
  "direness",
  "dirtiness",
  "disabled",
  "disagree",
  "disallow",
  "disarm",
  "disarray",
  "disaster",
  "disband",
  "disbelief",
  "disburse",
  "discard",
  "discern",
  "discharge",
  "disclose",
  "discolor",
  "discount",
  "discourse",
  "discover",
  "discuss",
  "disdain",
  "disengage",
  "disfigure",
  "disgrace",
  "dish",
  "disinfect",
  "disjoin",
  "disk",
  "dislike",
  "disliking",
  "dislocate",
  "dislodge",
  "disloyal",
  "dismantle",
  "dismay",
  "dismiss",
  "dismount",
  "disobey",
  "disorder",
  "disown",
  "disparate",
  "disparity",
  "dispatch",
  "dispense",
  "dispersal",
  "dispersed",
  "disperser",
  "displace",
  "display",
  "displease",
  "disposal",
  "dispose",
  "disprove",
  "dispute",
  "disregard",
  "disrupt",
  "dissuade",
  "distance",
  "distant",
  "distaste",
  "distill",
  "distinct",
  "distort",
  "distract",
  "distress",
  "district",
  "distrust",
  "ditch",
  "ditto",
  "ditzy",
  "dividable",
  "divided",
  "dividend",
  "dividers",
  "dividing",
  "divinely",
  "diving",
  "divinity",
  "divisible",
  "divisibly",
  "division",
  "divisive",
  "divorcee",
  "dizziness",
  "dizzy",
  "doable",
  "docile",
  "dock",
  "doctrine",
  "document",
  "dodge",
  "dodgy",
  "doily",
  "doing",
  "dole",
  "dollar",
  "dollhouse",
  "dollop",
  "dolly",
  "dolphin",
  "domain",
  "domelike",
  "domestic",
  "dominion",
  "dominoes",
  "donated",
  "donation",
  "donator",
  "donor",
  "donut",
  "doodle",
  "doorbell",
  "doorframe",
  "doorknob",
  "doorman",
  "doormat",
  "doornail",
  "doorpost",
  "doorstep",
  "doorstop",
  "doorway",
  "doozy",
  "dork",
  "dormitory",
  "dorsal",
  "dosage",
  "dose",
  "dotted",
  "doubling",
  "douche",
  "dove",
  "down",
  "dowry",
  "doze",
  "drab",
  "dragging",
  "dragonfly",
  "dragonish",
  "dragster",
  "drainable",
  "drainage",
  "drained",
  "drainer",
  "drainpipe",
  "dramatic",
  "dramatize",
  "drank",
  "drapery",
  "drastic",
  "draw",
  "dreaded",
  "dreadful",
  "dreadlock",
  "dreamboat",
  "dreamily",
  "dreamland",
  "dreamless",
  "dreamlike",
  "dreamt",
  "dreamy",
  "drearily",
  "dreary",
  "drench",
  "dress",
  "drew",
  "dribble",
  "dried",
  "drier",
  "drift",
  "driller",
  "drilling",
  "drinkable",
  "drinking",
  "dripping",
  "drippy",
  "drivable",
  "driven",
  "driver",
  "driveway",
  "driving",
  "drizzle",
  "drizzly",
  "drone",
  "drool",
  "droop",
  "drop-down",
  "dropbox",
  "dropkick",
  "droplet",
  "dropout",
  "dropper",
  "drove",
  "drown",
  "drowsily",
  "drudge",
  "drum",
  "dry",
  "dubbed",
  "dubiously",
  "duchess",
  "duckbill",
  "ducking",
  "duckling",
  "ducktail",
  "ducky",
  "duct",
  "dude",
  "duffel",
  "dugout",
  "duh",
  "duke",
  "duller",
  "dullness",
  "duly",
  "dumping",
  "dumpling",
  "dumpster",
  "duo",
  "dupe",
  "duplex",
  "duplicate",
  "duplicity",
  "durable",
  "durably",
  "duration",
  "duress",
  "during",
  "dusk",
  "dust",
  "dutiful",
  "duty",
  "duvet",
  "dwarf",
  "dweeb",
  "dwelled",
  "dweller",
  "dwelling",
  "dwindle",
  "dwindling",
  "dynamic",
  "dynamite",
  "dynasty",
  "dyslexia",
  "dyslexic",
  "each",
  "eagle",
  "earache",
  "eardrum",
  "earflap",
  "earful",
  "earlobe",
  "early",
  "earmark",
  "earmuff",
  "earphone",
  "earpiece",
  "earplugs",
  "earring",
  "earshot",
  "earthen",
  "earthlike",
  "earthling",
  "earthly",
  "earthworm",
  "earthy",
  "earwig",
  "easeful",
  "easel",
  "easiest",
  "easily",
  "easiness",
  "easing",
  "eastbound",
  "eastcoast",
  "easter",
  "eastward",
  "eatable",
  "eaten",
  "eatery",
  "eating",
  "eats",
  "ebay",
  "ebony",
  "ebook",
  "ecard",
  "eccentric",
  "echo",
  "eclair",
  "eclipse",
  "ecologist",
  "ecology",
  "economic",
  "economist",
  "economy",
  "ecosphere",
  "ecosystem",
  "edge",
  "edginess",
  "edging",
  "edgy",
  "edition",
  "editor",
  "educated",
  "education",
  "educator",
  "eel",
  "effective",
  "effects",
  "efficient",
  "effort",
  "eggbeater",
  "egging",
  "eggnog",
  "eggplant",
  "eggshell",
  "egomaniac",
  "egotism",
  "egotistic",
  "either",
  "eject",
  "elaborate",
  "elastic",
  "elated",
  "elbow",
  "eldercare",
  "elderly",
  "eldest",
  "electable",
  "election",
  "elective",
  "elephant",
  "elevate",
  "elevating",
  "elevation",
  "elevator",
  "eleven",
  "elf",
  "eligible",
  "eligibly",
  "eliminate",
  "elite",
  "elitism",
  "elixir",
  "elk",
  "ellipse",
  "elliptic",
  "elm",
  "elongated",
  "elope",
  "eloquence",
  "eloquent",
  "elsewhere",
  "elude",
  "elusive",
  "elves",
  "email",
  "embargo",
  "embark",
  "embassy",
  "embattled",
  "embellish",
  "ember",
  "embezzle",
  "emblaze",
  "emblem",
  "embody",
  "embolism",
  "emboss",
  "embroider",
  "emcee",
  "emerald",
  "emergency",
  "emission",
  "emit",
  "emote",
  "emoticon",
  "emotion",
  "empathic",
  "empathy",
  "emperor",
  "emphases",
  "emphasis",
  "emphasize",
  "emphatic",
  "empirical",
  "employed",
  "employee",
  "employer",
  "emporium",
  "empower",
  "emptier",
  "emptiness",
  "empty",
  "emu",
  "enable",
  "enactment",
  "enamel",
  "enchanted",
  "enchilada",
  "encircle",
  "enclose",
  "enclosure",
  "encode",
  "encore",
  "encounter",
  "encourage",
  "encroach",
  "encrust",
  "encrypt",
  "endanger",
  "endeared",
  "endearing",
  "ended",
  "ending",
  "endless",
  "endnote",
  "endocrine",
  "endorphin",
  "endorse",
  "endowment",
  "endpoint",
  "endurable",
  "endurance",
  "enduring",
  "energetic",
  "energize",
  "energy",
  "enforced",
  "enforcer",
  "engaged",
  "engaging",
  "engine",
  "engorge",
  "engraved",
  "engraver",
  "engraving",
  "engross",
  "engulf",
  "enhance",
  "enigmatic",
  "enjoyable",
  "enjoyably",
  "enjoyer",
  "enjoying",
  "enjoyment",
  "enlarged",
  "enlarging",
  "enlighten",
  "enlisted",
  "enquirer",
  "enrage",
  "enrich",
  "enroll",
  "enslave",
  "ensnare",
  "ensure",
  "entail",
  "entangled",
  "entering",
  "entertain",
  "enticing",
  "entire",
  "entitle",
  "entity",
  "entomb",
  "entourage",
  "entrap",
  "entree",
  "entrench",
  "entrust",
  "entryway",
  "entwine",
  "enunciate",
  "envelope",
  "enviable",
  "enviably",
  "envious",
  "envision",
  "envoy",
  "envy",
  "enzyme",
  "epic",
  "epidemic",
  "epidermal",
  "epidermis",
  "epidural",
  "epilepsy",
  "epileptic",
  "epilogue",
  "epiphany",
  "episode",
  "equal",
  "equate",
  "equation",
  "equator",
  "equinox",
  "equipment",
  "equity",
  "equivocal",
  "eradicate",
  "erasable",
  "erased",
  "eraser",
  "erasure",
  "ergonomic",
  "errand",
  "errant",
  "erratic",
  "error",
  "erupt",
  "escalate",
  "escalator",
  "escapable",
  "escapade",
  "escapist",
  "escargot",
  "eskimo",
  "esophagus",
  "espionage",
  "espresso",
  "esquire",
  "essay",
  "essence",
  "essential",
  "establish",
  "estate",
  "esteemed",
  "estimate",
  "estimator",
  "estranged",
  "estrogen",
  "etching",
  "eternal",
  "eternity",
  "ethanol",
  "ether",
  "ethically",
  "ethics",
  "euphemism",
  "evacuate",
  "evacuee",
  "evade",
  "evaluate",
  "evaluator",
  "evaporate",
  "evasion",
  "evasive",
  "even",
  "everglade",
  "evergreen",
  "everybody",
  "everyday",
  "everyone",
  "evict",
  "evidence",
  "evident",
  "evil",
  "evoke",
  "evolution",
  "evolve",
  "exact",
  "exalted",
  "example",
  "excavate",
  "excavator",
  "exceeding",
  "exception",
  "excess",
  "exchange",
  "excitable",
  "exciting",
  "exclaim",
  "exclude",
  "excluding",
  "exclusion",
  "exclusive",
  "excretion",
  "excretory",
  "excursion",
  "excusable",
  "excusably",
  "excuse",
  "exemplary",
  "exemplify",
  "exemption",
  "exerciser",
  "exert",
  "exes",
  "exfoliate",
  "exhale",
  "exhaust",
  "exhume",
  "exile",
  "existing",
  "exit",
  "exodus",
  "exonerate",
  "exorcism",
  "exorcist",
  "expand",
  "expanse",
  "expansion",
  "expansive",
  "expectant",
  "expedited",
  "expediter",
  "expel",
  "expend",
  "expenses",
  "expensive",
  "expert",
  "expire",
  "expiring",
  "explain",
  "expletive",
  "explicit",
  "explode",
  "exploit",
  "explore",
  "exploring",
  "exponent",
  "exporter",
  "exposable",
  "expose",
  "exposure",
  "express",
  "expulsion",
  "exquisite",
  "extended",
  "extending",
  "extent",
  "extenuate",
  "exterior",
  "external",
  "extinct",
  "extortion",
  "extradite",
  "extras",
  "extrovert",
  "extrude",
  "extruding",
  "exuberant",
  "fable",
  "fabric",
  "fabulous",
  "facebook",
  "facecloth",
  "facedown",
  "faceless",
  "facelift",
  "faceplate",
  "faceted",
  "facial",
  "facility",
  "facing",
  "facsimile",
  "faction",
  "factoid",
  "factor",
  "factsheet",
  "factual",
  "faculty",
  "fade",
  "fading",
  "failing",
  "falcon",
  "fall",
  "false",
  "falsify",
  "fame",
  "familiar",
  "family",
  "famine",
  "famished",
  "fanatic",
  "fancied",
  "fanciness",
  "fancy",
  "fanfare",
  "fang",
  "fanning",
  "fantasize",
  "fantastic",
  "fantasy",
  "fascism",
  "fastball",
  "faster",
  "fasting",
  "fastness",
  "faucet",
  "favorable",
  "favorably",
  "favored",
  "favoring",
  "favorite",
  "fax",
  "feast",
  "federal",
  "fedora",
  "feeble",
  "feed",
  "feel",
  "feisty",
  "feline",
  "felt-tip",
  "feminine",
  "feminism",
  "feminist",
  "feminize",
  "femur",
  "fence",
  "fencing",
  "fender",
  "ferment",
  "fernlike",
  "ferocious",
  "ferocity",
  "ferret",
  "ferris",
  "ferry",
  "fervor",
  "fester",
  "festival",
  "festive",
  "festivity",
  "fetal",
  "fetch",
  "fever",
  "fiber",
  "fiction",
  "fiddle",
  "fiddling",
  "fidelity",
  "fidgeting",
  "fidgety",
  "fifteen",
  "fifth",
  "fiftieth",
  "fifty",
  "figment",
  "figure",
  "figurine",
  "filing",
  "filled",
  "filler",
  "filling",
  "film",
  "filter",
  "filth",
  "filtrate",
  "finale",
  "finalist",
  "finalize",
  "finally",
  "finance",
  "financial",
  "finch",
  "fineness",
  "finer",
  "finicky",
  "finished",
  "finisher",
  "finishing",
  "finite",
  "finless",
  "finlike",
  "fiscally",
  "fit",
  "five",
  "flaccid",
  "flagman",
  "flagpole",
  "flagship",
  "flagstick",
  "flagstone",
  "flail",
  "flakily",
  "flaky",
  "flame",
  "flammable",
  "flanked",
  "flanking",
  "flannels",
  "flap",
  "flaring",
  "flashback",
  "flashbulb",
  "flashcard",
  "flashily",
  "flashing",
  "flashy",
  "flask",
  "flatbed",
  "flatfoot",
  "flatly",
  "flatness",
  "flatten",
  "flattered",
  "flatterer",
  "flattery",
  "flattop",
  "flatware",
  "flatworm",
  "flavored",
  "flavorful",
  "flavoring",
  "flaxseed",
  "fled",
  "fleshed",
  "fleshy",
  "flick",
  "flier",
  "flight",
  "flinch",
  "fling",
  "flint",
  "flip",
  "flirt",
  "float",
  "flock",
  "flogging",
  "flop",
  "floral",
  "florist",
  "floss",
  "flounder",
  "flyable",
  "flyaway",
  "flyer",
  "flying",
  "flyover",
  "flypaper",
  "foam",
  "foe",
  "fog",
  "foil",
  "folic",
  "folk",
  "follicle",
  "follow",
  "fondling",
  "fondly",
  "fondness",
  "fondue",
  "font",
  "food",
  "fool",
  "footage",
  "football",
  "footbath",
  "footboard",
  "footer",
  "footgear",
  "foothill",
  "foothold",
  "footing",
  "footless",
  "footman",
  "footnote",
  "footpad",
  "footpath",
  "footprint",
  "footrest",
  "footsie",
  "footsore",
  "footwear",
  "footwork",
  "fossil",
  "foster",
  "founder",
  "founding",
  "fountain",
  "fox",
  "foyer",
  "fraction",
  "fracture",
  "fragile",
  "fragility",
  "fragment",
  "fragrance",
  "fragrant",
  "frail",
  "frame",
  "framing",
  "frantic",
  "fraternal",
  "frayed",
  "fraying",
  "frays",
  "freckled",
  "freckles",
  "freebase",
  "freebee",
  "freebie",
  "freedom",
  "freefall",
  "freehand",
  "freeing",
  "freeload",
  "freely",
  "freemason",
  "freeness",
  "freestyle",
  "freeware",
  "freeway",
  "freewill",
  "freezable",
  "freezing",
  "freight",
  "french",
  "frenzied",
  "frenzy",
  "frequency",
  "frequent",
  "fresh",
  "fretful",
  "fretted",
  "friction",
  "friday",
  "fridge",
  "fried",
  "friend",
  "frighten",
  "frightful",
  "frigidity",
  "frigidly",
  "frill",
  "fringe",
  "frisbee",
  "frisk",
  "fritter",
  "frivolous",
  "frolic",
  "from",
  "front",
  "frostbite",
  "frosted",
  "frostily",
  "frosting",
  "frostlike",
  "frosty",
  "froth",
  "frown",
  "frozen",
  "fructose",
  "frugality",
  "frugally",
  "fruit",
  "frustrate",
  "frying",
  "gab",
  "gaffe",
  "gag",
  "gainfully",
  "gaining",
  "gains",
  "gala",
  "gallantly",
  "galleria",
  "gallery",
  "galley",
  "gallon",
  "gallows",
  "gallstone",
  "galore",
  "galvanize",
  "gambling",
  "game",
  "gaming",
  "gamma",
  "gander",
  "gangly",
  "gangrene",
  "gangway",
  "gap",
  "garage",
  "garbage",
  "garden",
  "gargle",
  "garland",
  "garlic",
  "garment",
  "garnet",
  "garnish",
  "garter",
  "gas",
  "gatherer",
  "gathering",
  "gating",
  "gauging",
  "gauntlet",
  "gauze",
  "gave",
  "gawk",
  "gazing",
  "gear",
  "gecko",
  "geek",
  "geiger",
  "gem",
  "gender",
  "generic",
  "generous",
  "genetics",
  "genre",
  "gentile",
  "gentleman",
  "gently",
  "gents",
  "geography",
  "geologic",
  "geologist",
  "geology",
  "geometric",
  "geometry",
  "geranium",
  "gerbil",
  "geriatric",
  "germicide",
  "germinate",
  "germless",
  "germproof",
  "gestate",
  "gestation",
  "gesture",
  "getaway",
  "getting",
  "getup",
  "giant",
  "gibberish",
  "giblet",
  "giddily",
  "giddiness",
  "giddy",
  "gift",
  "gigabyte",
  "gigahertz",
  "gigantic",
  "giggle",
  "giggling",
  "giggly",
  "gigolo",
  "gilled",
  "gills",
  "gimmick",
  "girdle",
  "giveaway",
  "given",
  "giver",
  "giving",
  "gizmo",
  "gizzard",
  "glacial",
  "glacier",
  "glade",
  "gladiator",
  "gladly",
  "glamorous",
  "glamour",
  "glance",
  "glancing",
  "glandular",
  "glare",
  "glaring",
  "glass",
  "glaucoma",
  "glazing",
  "gleaming",
  "gleeful",
  "glider",
  "gliding",
  "glimmer",
  "glimpse",
  "glisten",
  "glitch",
  "glitter",
  "glitzy",
  "gloater",
  "gloating",
  "gloomily",
  "gloomy",
  "glorified",
  "glorifier",
  "glorify",
  "glorious",
  "glory",
  "gloss",
  "glove",
  "glowing",
  "glowworm",
  "glucose",
  "glue",
  "gluten",
  "glutinous",
  "glutton",
  "gnarly",
  "gnat",
  "goal",
  "goatskin",
  "goes",
  "goggles",
  "going",
  "goldfish",
  "goldmine",
  "goldsmith",
  "golf",
  "goliath",
  "gonad",
  "gondola",
  "gone",
  "gong",
  "good",
  "gooey",
  "goofball",
  "goofiness",
  "goofy",
  "google",
  "goon",
  "gopher",
  "gore",
  "gorged",
  "gorgeous",
  "gory",
  "gosling",
  "gossip",
  "gothic",
  "gotten",
  "gout",
  "gown",
  "grab",
  "graceful",
  "graceless",
  "gracious",
  "gradation",
  "graded",
  "grader",
  "gradient",
  "grading",
  "gradually",
  "graduate",
  "graffiti",
  "grafted",
  "grafting",
  "grain",
  "granddad",
  "grandkid",
  "grandly",
  "grandma",
  "grandpa",
  "grandson",
  "granite",
  "granny",
  "granola",
  "grant",
  "granular",
  "grape",
  "graph",
  "grapple",
  "grappling",
  "grasp",
  "grass",
  "gratified",
  "gratify",
  "grating",
  "gratitude",
  "gratuity",
  "gravel",
  "graveness",
  "graves",
  "graveyard",
  "gravitate",
  "gravity",
  "gravy",
  "gray",
  "grazing",
  "greasily",
  "greedily",
  "greedless",
  "greedy",
  "green",
  "greeter",
  "greeting",
  "grew",
  "greyhound",
  "grid",
  "grief",
  "grievance",
  "grieving",
  "grievous",
  "grill",
  "grimace",
  "grimacing",
  "grime",
  "griminess",
  "grimy",
  "grinch",
  "grinning",
  "grip",
  "gristle",
  "grit",
  "groggily",
  "groggy",
  "groin",
  "groom",
  "groove",
  "grooving",
  "groovy",
  "grope",
  "ground",
  "grouped",
  "grout",
  "grove",
  "grower",
  "growing",
  "growl",
  "grub",
  "grudge",
  "grudging",
  "grueling",
  "gruffly",
  "grumble",
  "grumbling",
  "grumbly",
  "grumpily",
  "grunge",
  "grunt",
  "guacamole",
  "guidable",
  "guidance",
  "guide",
  "guiding",
  "guileless",
  "guise",
  "gulf",
  "gullible",
  "gully",
  "gulp",
  "gumball",
  "gumdrop",
  "gumminess",
  "gumming",
  "gummy",
  "gurgle",
  "gurgling",
  "guru",
  "gush",
  "gusto",
  "gusty",
  "gutless",
  "guts",
  "gutter",
  "guy",
  "guzzler",
  "gyration",
  "habitable",
  "habitant",
  "habitat",
  "habitual",
  "hacked",
  "hacker",
  "hacking",
  "hacksaw",
  "had",
  "haggler",
  "haiku",
  "half",
  "halogen",
  "halt",
  "halved",
  "halves",
  "hamburger",
  "hamlet",
  "hammock",
  "hamper",
  "hamster",
  "hamstring",
  "handbag",
  "handball",
  "handbook",
  "handbrake",
  "handcart",
  "handclap",
  "handclasp",
  "handcraft",
  "handcuff",
  "handed",
  "handful",
  "handgrip",
  "handgun",
  "handheld",
  "handiness",
  "handiwork",
  "handlebar",
  "handled",
  "handler",
  "handling",
  "handmade",
  "handoff",
  "handpick",
  "handprint",
  "handrail",
  "handsaw",
  "handset",
  "handsfree",
  "handshake",
  "handstand",
  "handwash",
  "handwork",
  "handwoven",
  "handwrite",
  "handyman",
  "hangnail",
  "hangout",
  "hangover",
  "hangup",
  "hankering",
  "hankie",
  "hanky",
  "haphazard",
  "happening",
  "happier",
  "happiest",
  "happily",
  "happiness",
  "happy",
  "harbor",
  "hardcopy",
  "hardcore",
  "hardcover",
  "harddisk",
  "hardened",
  "hardener",
  "hardening",
  "hardhat",
  "hardhead",
  "hardiness",
  "hardly",
  "hardness",
  "hardship",
  "hardware",
  "hardwired",
  "hardwood",
  "hardy",
  "harmful",
  "harmless",
  "harmonica",
  "harmonics",
  "harmonize",
  "harmony",
  "harness",
  "harpist",
  "harsh",
  "harvest",
  "hash",
  "hassle",
  "haste",
  "hastily",
  "hastiness",
  "hasty",
  "hatbox",
  "hatchback",
  "hatchery",
  "hatchet",
  "hatching",
  "hatchling",
  "hate",
  "hatless",
  "hatred",
  "haunt",
  "haven",
  "hazard",
  "hazelnut",
  "hazily",
  "haziness",
  "hazing",
  "hazy",
  "headache",
  "headband",
  "headboard",
  "headcount",
  "headdress",
  "headed",
  "header",
  "headfirst",
  "headgear",
  "heading",
  "headlamp",
  "headless",
  "headlock",
  "headphone",
  "headpiece",
  "headrest",
  "headroom",
  "headscarf",
  "headset",
  "headsman",
  "headstand",
  "headstone",
  "headway",
  "headwear",
  "heap",
  "heat",
  "heave",
  "heavily",
  "heaviness",
  "heaving",
  "hedge",
  "hedging",
  "heftiness",
  "hefty",
  "helium",
  "helmet",
  "helper",
  "helpful",
  "helping",
  "helpless",
  "helpline",
  "hemlock",
  "hemstitch",
  "hence",
  "henchman",
  "henna",
  "herald",
  "herbal",
  "herbicide",
  "herbs",
  "heritage",
  "hermit",
  "heroics",
  "heroism",
  "herring",
  "herself",
  "hertz",
  "hesitancy",
  "hesitant",
  "hesitate",
  "hexagon",
  "hexagram",
  "hubcap",
  "huddle",
  "huddling",
  "huff",
  "hug",
  "hula",
  "hulk",
  "hull",
  "human",
  "humble",
  "humbling",
  "humbly",
  "humid",
  "humiliate",
  "humility",
  "humming",
  "hummus",
  "humongous",
  "humorist",
  "humorless",
  "humorous",
  "humpback",
  "humped",
  "humvee",
  "hunchback",
  "hundredth",
  "hunger",
  "hungrily",
  "hungry",
  "hunk",
  "hunter",
  "hunting",
  "huntress",
  "huntsman",
  "hurdle",
  "hurled",
  "hurler",
  "hurling",
  "hurray",
  "hurricane",
  "hurried",
  "hurry",
  "hurt",
  "husband",
  "hush",
  "husked",
  "huskiness",
  "hut",
  "hybrid",
  "hydrant",
  "hydrated",
  "hydration",
  "hydrogen",
  "hydroxide",
  "hyperlink",
  "hypertext",
  "hyphen",
  "hypnoses",
  "hypnosis",
  "hypnotic",
  "hypnotism",
  "hypnotist",
  "hypnotize",
  "hypocrisy",
  "hypocrite",
  "ibuprofen",
  "ice",
  "iciness",
  "icing",
  "icky",
  "icon",
  "icy",
  "idealism",
  "idealist",
  "idealize",
  "ideally",
  "idealness",
  "identical",
  "identify",
  "identity",
  "ideology",
  "idiocy",
  "idiom",
  "idly",
  "igloo",
  "ignition",
  "ignore",
  "iguana",
  "illicitly",
  "illusion",
  "illusive",
  "image",
  "imaginary",
  "imagines",
  "imaging",
  "imbecile",
  "imitate",
  "imitation",
  "immature",
  "immerse",
  "immersion",
  "imminent",
  "immobile",
  "immodest",
  "immorally",
  "immortal",
  "immovable",
  "immovably",
  "immunity",
  "immunize",
  "impaired",
  "impale",
  "impart",
  "impatient",
  "impeach",
  "impeding",
  "impending",
  "imperfect",
  "imperial",
  "impish",
  "implant",
  "implement",
  "implicate",
  "implicit",
  "implode",
  "implosion",
  "implosive",
  "imply",
  "impolite",
  "important",
  "importer",
  "impose",
  "imposing",
  "impotence",
  "impotency",
  "impotent",
  "impound",
  "imprecise",
  "imprint",
  "imprison",
  "impromptu",
  "improper",
  "improve",
  "improving",
  "improvise",
  "imprudent",
  "impulse",
  "impulsive",
  "impure",
  "impurity",
  "iodine",
  "iodize",
  "ion",
  "ipad",
  "iphone",
  "ipod",
  "irate",
  "irk",
  "iron",
  "irregular",
  "irrigate",
  "irritable",
  "irritably",
  "irritant",
  "irritate",
  "islamic",
  "islamist",
  "isolated",
  "isolating",
  "isolation",
  "isotope",
  "issue",
  "issuing",
  "italicize",
  "italics",
  "item",
  "itinerary",
  "itunes",
  "ivory",
  "ivy",
  "jab",
  "jackal",
  "jacket",
  "jackknife",
  "jackpot",
  "jailbird",
  "jailbreak",
  "jailer",
  "jailhouse",
  "jalapeno",
  "jam",
  "janitor",
  "january",
  "jargon",
  "jarring",
  "jasmine",
  "jaundice",
  "jaunt",
  "java",
  "jawed",
  "jawless",
  "jawline",
  "jaws",
  "jaybird",
  "jaywalker",
  "jazz",
  "jeep",
  "jeeringly",
  "jellied",
  "jelly",
  "jersey",
  "jester",
  "jet",
  "jiffy",
  "jigsaw",
  "jimmy",
  "jingle",
  "jingling",
  "jinx",
  "jitters",
  "jittery",
  "job",
  "jockey",
  "jockstrap",
  "jogger",
  "jogging",
  "john",
  "joining",
  "jokester",
  "jokingly",
  "jolliness",
  "jolly",
  "jolt",
  "jot",
  "jovial",
  "joyfully",
  "joylessly",
  "joyous",
  "joyride",
  "joystick",
  "jubilance",
  "jubilant",
  "judge",
  "judgingly",
  "judicial",
  "judiciary",
  "judo",
  "juggle",
  "juggling",
  "jugular",
  "juice",
  "juiciness",
  "juicy",
  "jujitsu",
  "jukebox",
  "july",
  "jumble",
  "jumbo",
  "jump",
  "junction",
  "juncture",
  "june",
  "junior",
  "juniper",
  "junkie",
  "junkman",
  "junkyard",
  "jurist",
  "juror",
  "jury",
  "justice",
  "justifier",
  "justify",
  "justly",
  "justness",
  "juvenile",
  "kabob",
  "kangaroo",
  "karaoke",
  "karate",
  "karma",
  "kebab",
  "keenly",
  "keenness",
  "keep",
  "keg",
  "kelp",
  "kennel",
  "kept",
  "kerchief",
  "kerosene",
  "kettle",
  "kick",
  "kiln",
  "kilobyte",
  "kilogram",
  "kilometer",
  "kilowatt",
  "kilt",
  "kimono",
  "kindle",
  "kindling",
  "kindly",
  "kindness",
  "kindred",
  "kinetic",
  "kinfolk",
  "king",
  "kinship",
  "kinsman",
  "kinswoman",
  "kissable",
  "kisser",
  "kissing",
  "kitchen",
  "kite",
  "kitten",
  "kitty",
  "kiwi",
  "kleenex",
  "knapsack",
  "knee",
  "knelt",
  "knickers",
  "knoll",
  "koala",
  "kooky",
  "kosher",
  "krypton",
  "kudos",
  "kung",
  "labored",
  "laborer",
  "laboring",
  "laborious",
  "labrador",
  "ladder",
  "ladies",
  "ladle",
  "ladybug",
  "ladylike",
  "lagged",
  "lagging",
  "lagoon",
  "lair",
  "lake",
  "lance",
  "landed",
  "landfall",
  "landfill",
  "landing",
  "landlady",
  "landless",
  "landline",
  "landlord",
  "landmark",
  "landmass",
  "landmine",
  "landowner",
  "landscape",
  "landside",
  "landslide",
  "language",
  "lankiness",
  "lanky",
  "lantern",
  "lapdog",
  "lapel",
  "lapped",
  "lapping",
  "laptop",
  "lard",
  "large",
  "lark",
  "lash",
  "lasso",
  "last",
  "latch",
  "late",
  "lather",
  "latitude",
  "latrine",
  "latter",
  "latticed",
  "launch",
  "launder",
  "laundry",
  "laurel",
  "lavender",
  "lavish",
  "laxative",
  "lazily",
  "laziness",
  "lazy",
  "lecturer",
  "left",
  "legacy",
  "legal",
  "legend",
  "legged",
  "leggings",
  "legible",
  "legibly",
  "legislate",
  "lego",
  "legroom",
  "legume",
  "legwarmer",
  "legwork",
  "lemon",
  "lend",
  "length",
  "lens",
  "lent",
  "leotard",
  "lesser",
  "letdown",
  "lethargic",
  "lethargy",
  "letter",
  "lettuce",
  "level",
  "leverage",
  "levers",
  "levitate",
  "levitator",
  "liability",
  "liable",
  "liberty",
  "librarian",
  "library",
  "licking",
  "licorice",
  "lid",
  "life",
  "lifter",
  "lifting",
  "liftoff",
  "ligament",
  "likely",
  "likeness",
  "likewise",
  "liking",
  "lilac",
  "lilly",
  "lily",
  "limb",
  "limeade",
  "limelight",
  "limes",
  "limit",
  "limping",
  "limpness",
  "line",
  "lingo",
  "linguini",
  "linguist",
  "lining",
  "linked",
  "linoleum",
  "linseed",
  "lint",
  "lion",
  "lip",
  "liquefy",
  "liqueur",
  "liquid",
  "lisp",
  "list",
  "litigate",
  "litigator",
  "litmus",
  "litter",
  "little",
  "livable",
  "lived",
  "lively",
  "liver",
  "livestock",
  "lividly",
  "living",
  "lizard",
  "lubricant",
  "lubricate",
  "lucid",
  "luckily",
  "luckiness",
  "luckless",
  "lucrative",
  "ludicrous",
  "lugged",
  "lukewarm",
  "lullaby",
  "lumber",
  "luminance",
  "luminous",
  "lumpiness",
  "lumping",
  "lumpish",
  "lunacy",
  "lunar",
  "lunchbox",
  "luncheon",
  "lunchroom",
  "lunchtime",
  "lung",
  "lurch",
  "lure",
  "luridness",
  "lurk",
  "lushly",
  "lushness",
  "luster",
  "lustfully",
  "lustily",
  "lustiness",
  "lustrous",
  "lusty",
  "luxurious",
  "luxury",
  "lying",
  "lyrically",
  "lyricism",
  "lyricist",
  "lyrics",
  "macarena",
  "macaroni",
  "macaw",
  "mace",
  "machine",
  "machinist",
  "magazine",
  "magenta",
  "maggot",
  "magical",
  "magician",
  "magma",
  "magnesium",
  "magnetic",
  "magnetism",
  "magnetize",
  "magnifier",
  "magnify",
  "magnitude",
  "magnolia",
  "mahogany",
  "maimed",
  "majestic",
  "majesty",
  "majorette",
  "majority",
  "makeover",
  "maker",
  "makeshift",
  "making",
  "malformed",
  "malt",
  "mama",
  "mammal",
  "mammary",
  "mammogram",
  "manager",
  "managing",
  "manatee",
  "mandarin",
  "mandate",
  "mandatory",
  "mandolin",
  "manger",
  "mangle",
  "mango",
  "mangy",
  "manhandle",
  "manhole",
  "manhood",
  "manhunt",
  "manicotti",
  "manicure",
  "manifesto",
  "manila",
  "mankind",
  "manlike",
  "manliness",
  "manly",
  "manmade",
  "manned",
  "mannish",
  "manor",
  "manpower",
  "mantis",
  "mantra",
  "manual",
  "many",
  "map",
  "marathon",
  "marauding",
  "marbled",
  "marbles",
  "marbling",
  "march",
  "mardi",
  "margarine",
  "margarita",
  "margin",
  "marigold",
  "marina",
  "marine",
  "marital",
  "maritime",
  "marlin",
  "marmalade",
  "maroon",
  "married",
  "marrow",
  "marry",
  "marshland",
  "marshy",
  "marsupial",
  "marvelous",
  "marxism",
  "mascot",
  "masculine",
  "mashed",
  "mashing",
  "massager",
  "masses",
  "massive",
  "mastiff",
  "matador",
  "matchbook",
  "matchbox",
  "matcher",
  "matching",
  "matchless",
  "material",
  "maternal",
  "maternity",
  "math",
  "mating",
  "matriarch",
  "matrimony",
  "matrix",
  "matron",
  "matted",
  "matter",
  "maturely",
  "maturing",
  "maturity",
  "mauve",
  "maverick",
  "maximize",
  "maximum",
  "maybe",
  "mayday",
  "mayflower",
  "moaner",
  "moaning",
  "mobile",
  "mobility",
  "mobilize",
  "mobster",
  "mocha",
  "mocker",
  "mockup",
  "modified",
  "modify",
  "modular",
  "modulator",
  "module",
  "moisten",
  "moistness",
  "moisture",
  "molar",
  "molasses",
  "mold",
  "molecular",
  "molecule",
  "molehill",
  "mollusk",
  "mom",
  "monastery",
  "monday",
  "monetary",
  "monetize",
  "moneybags",
  "moneyless",
  "moneywise",
  "mongoose",
  "mongrel",
  "monitor",
  "monkhood",
  "monogamy",
  "monogram",
  "monologue",
  "monopoly",
  "monorail",
  "monotone",
  "monotype",
  "monoxide",
  "monsieur",
  "monsoon",
  "monstrous",
  "monthly",
  "monument",
  "moocher",
  "moodiness",
  "moody",
  "mooing",
  "moonbeam",
  "mooned",
  "moonlight",
  "moonlike",
  "moonlit",
  "moonrise",
  "moonscape",
  "moonshine",
  "moonstone",
  "moonwalk",
  "mop",
  "morale",
  "morality",
  "morally",
  "morbidity",
  "morbidly",
  "morphine",
  "morphing",
  "morse",
  "mortality",
  "mortally",
  "mortician",
  "mortified",
  "mortify",
  "mortuary",
  "mosaic",
  "mossy",
  "most",
  "mothball",
  "mothproof",
  "motion",
  "motivate",
  "motivator",
  "motive",
  "motocross",
  "motor",
  "motto",
  "mountable",
  "mountain",
  "mounted",
  "mounting",
  "mourner",
  "mournful",
  "mouse",
  "mousiness",
  "moustache",
  "mousy",
  "mouth",
  "movable",
  "move",
  "movie",
  "moving",
  "mower",
  "mowing",
  "much",
  "muck",
  "mud",
  "mug",
  "mulberry",
  "mulch",
  "mule",
  "mulled",
  "mullets",
  "multiple",
  "multiply",
  "multitask",
  "multitude",
  "mumble",
  "mumbling",
  "mumbo",
  "mummified",
  "mummify",
  "mummy",
  "mumps",
  "munchkin",
  "mundane",
  "municipal",
  "muppet",
  "mural",
  "murkiness",
  "murky",
  "murmuring",
  "muscular",
  "museum",
  "mushily",
  "mushiness",
  "mushroom",
  "mushy",
  "music",
  "musket",
  "muskiness",
  "musky",
  "mustang",
  "mustard",
  "muster",
  "mustiness",
  "musty",
  "mutable",
  "mutate",
  "mutation",
  "mute",
  "mutilated",
  "mutilator",
  "mutiny",
  "mutt",
  "mutual",
  "muzzle",
  "myself",
  "myspace",
  "mystified",
  "mystify",
  "myth",
  "nacho",
  "nag",
  "nail",
  "name",
  "naming",
  "nanny",
  "nanometer",
  "nape",
  "napkin",
  "napped",
  "napping",
  "nappy",
  "narrow",
  "nastily",
  "nastiness",
  "national",
  "native",
  "nativity",
  "natural",
  "nature",
  "naturist",
  "nautical",
  "navigate",
  "navigator",
  "navy",
  "nearby",
  "nearest",
  "nearly",
  "nearness",
  "neatly",
  "neatness",
  "nebula",
  "nebulizer",
  "nectar",
  "negate",
  "negation",
  "negative",
  "neglector",
  "negligee",
  "negligent",
  "negotiate",
  "nemeses",
  "nemesis",
  "neon",
  "nephew",
  "nerd",
  "nervous",
  "nervy",
  "nest",
  "net",
  "neurology",
  "neuron",
  "neurosis",
  "neurotic",
  "neuter",
  "neutron",
  "never",
  "next",
  "nibble",
  "nickname",
  "nicotine",
  "niece",
  "nifty",
  "nimble",
  "nimbly",
  "nineteen",
  "ninetieth",
  "ninja",
  "nintendo",
  "ninth",
  "nuclear",
  "nuclei",
  "nucleus",
  "nugget",
  "nullify",
  "number",
  "numbing",
  "numbly",
  "numbness",
  "numeral",
  "numerate",
  "numerator",
  "numeric",
  "numerous",
  "nuptials",
  "nursery",
  "nursing",
  "nurture",
  "nutcase",
  "nutlike",
  "nutmeg",
  "nutrient",
  "nutshell",
  "nuttiness",
  "nutty",
  "nuzzle",
  "nylon",
  "oaf",
  "oak",
  "oasis",
  "oat",
  "obedience",
  "obedient",
  "obituary",
  "object",
  "obligate",
  "obliged",
  "oblivion",
  "oblivious",
  "oblong",
  "obnoxious",
  "oboe",
  "obscure",
  "obscurity",
  "observant",
  "observer",
  "observing",
  "obsessed",
  "obsession",
  "obsessive",
  "obsolete",
  "obstacle",
  "obstinate",
  "obstruct",
  "obtain",
  "obtrusive",
  "obtuse",
  "obvious",
  "occultist",
  "occupancy",
  "occupant",
  "occupier",
  "occupy",
  "ocean",
  "ocelot",
  "octagon",
  "octane",
  "october",
  "octopus",
  "ogle",
  "oil",
  "oink",
  "ointment",
  "okay",
  "old",
  "olive",
  "olympics",
  "omega",
  "omen",
  "ominous",
  "omission",
  "omit",
  "omnivore",
  "onboard",
  "oncoming",
  "ongoing",
  "onion",
  "online",
  "onlooker",
  "only",
  "onscreen",
  "onset",
  "onshore",
  "onslaught",
  "onstage",
  "onto",
  "onward",
  "onyx",
  "oops",
  "ooze",
  "oozy",
  "opacity",
  "opal",
  "open",
  "operable",
  "operate",
  "operating",
  "operation",
  "operative",
  "operator",
  "opium",
  "opossum",
  "opponent",
  "oppose",
  "opposing",
  "opposite",
  "oppressed",
  "oppressor",
  "opt",
  "opulently",
  "osmosis",
  "other",
  "otter",
  "ouch",
  "ought",
  "ounce",
  "outage",
  "outback",
  "outbid",
  "outboard",
  "outbound",
  "outbreak",
  "outburst",
  "outcast",
  "outclass",
  "outcome",
  "outdated",
  "outdoors",
  "outer",
  "outfield",
  "outfit",
  "outflank",
  "outgoing",
  "outgrow",
  "outhouse",
  "outing",
  "outlast",
  "outlet",
  "outline",
  "outlook",
  "outlying",
  "outmatch",
  "outmost",
  "outnumber",
  "outplayed",
  "outpost",
  "outpour",
  "output",
  "outrage",
  "outrank",
  "outreach",
  "outright",
  "outscore",
  "outsell",
  "outshine",
  "outshoot",
  "outsider",
  "outskirts",
  "outsmart",
  "outsource",
  "outspoken",
  "outtakes",
  "outthink",
  "outward",
  "outweigh",
  "outwit",
  "oval",
  "ovary",
  "oven",
  "overact",
  "overall",
  "overarch",
  "overbid",
  "overbill",
  "overbite",
  "overblown",
  "overboard",
  "overbook",
  "overbuilt",
  "overcast",
  "overcoat",
  "overcome",
  "overcook",
  "overcrowd",
  "overdraft",
  "overdrawn",
  "overdress",
  "overdrive",
  "overdue",
  "overeager",
  "overeater",
  "overexert",
  "overfed",
  "overfeed",
  "overfill",
  "overflow",
  "overfull",
  "overgrown",
  "overhand",
  "overhang",
  "overhaul",
  "overhead",
  "overhear",
  "overheat",
  "overhung",
  "overjoyed",
  "overkill",
  "overlabor",
  "overlaid",
  "overlap",
  "overlay",
  "overload",
  "overlook",
  "overlord",
  "overlying",
  "overnight",
  "overpass",
  "overpay",
  "overplant",
  "overplay",
  "overpower",
  "overprice",
  "overrate",
  "overreach",
  "overreact",
  "override",
  "overripe",
  "overrule",
  "overrun",
  "overshoot",
  "overshot",
  "oversight",
  "oversized",
  "oversleep",
  "oversold",
  "overspend",
  "overstate",
  "overstay",
  "overstep",
  "overstock",
  "overstuff",
  "oversweet",
  "overtake",
  "overthrow",
  "overtime",
  "overtly",
  "overtone",
  "overture",
  "overturn",
  "overuse",
  "overvalue",
  "overview",
  "overwrite",
  "owl",
  "oxford",
  "oxidant",
  "oxidation",
  "oxidize",
  "oxidizing",
  "oxygen",
  "oxymoron",
  "oyster",
  "ozone",
  "paced",
  "pacemaker",
  "pacific",
  "pacifier",
  "pacifism",
  "pacifist",
  "pacify",
  "padded",
  "padding",
  "paddle",
  "paddling",
  "padlock",
  "pagan",
  "pager",
  "paging",
  "pajamas",
  "palace",
  "palatable",
  "palm",
  "palpable",
  "palpitate",
  "paltry",
  "pampered",
  "pamperer",
  "pampers",
  "pamphlet",
  "panama",
  "pancake",
  "pancreas",
  "panda",
  "pandemic",
  "pang",
  "panhandle",
  "panic",
  "panning",
  "panorama",
  "panoramic",
  "panther",
  "pantomime",
  "pantry",
  "pants",
  "pantyhose",
  "paparazzi",
  "papaya",
  "paper",
  "paprika",
  "papyrus",
  "parabola",
  "parachute",
  "parade",
  "paradox",
  "paragraph",
  "parakeet",
  "paralegal",
  "paralyses",
  "paralysis",
  "paralyze",
  "paramedic",
  "parameter",
  "paramount",
  "parasail",
  "parasite",
  "parasitic",
  "parcel",
  "parched",
  "parchment",
  "pardon",
  "parish",
  "parka",
  "parking",
  "parkway",
  "parlor",
  "parmesan",
  "parole",
  "parrot",
  "parsley",
  "parsnip",
  "partake",
  "parted",
  "parting",
  "partition",
  "partly",
  "partner",
  "partridge",
  "party",
  "passable",
  "passably",
  "passage",
  "passcode",
  "passenger",
  "passerby",
  "passing",
  "passion",
  "passive",
  "passivism",
  "passover",
  "passport",
  "password",
  "pasta",
  "pasted",
  "pastel",
  "pastime",
  "pastor",
  "pastrami",
  "pasture",
  "pasty",
  "patchwork",
  "patchy",
  "paternal",
  "paternity",
  "path",
  "patience",
  "patient",
  "patio",
  "patriarch",
  "patriot",
  "patrol",
  "patronage",
  "patronize",
  "pauper",
  "pavement",
  "paver",
  "pavestone",
  "pavilion",
  "paving",
  "pawing",
  "payable",
  "payback",
  "paycheck",
  "payday",
  "payee",
  "payer",
  "paying",
  "payment",
  "payphone",
  "payroll",
  "pebble",
  "pebbly",
  "pecan",
  "pectin",
  "peculiar",
  "peddling",
  "pediatric",
  "pedicure",
  "pedigree",
  "pedometer",
  "pegboard",
  "pelican",
  "pellet",
  "pelt",
  "pelvis",
  "penalize",
  "penalty",
  "pencil",
  "pendant",
  "pending",
  "penholder",
  "penknife",
  "pennant",
  "penniless",
  "penny",
  "penpal",
  "pension",
  "pentagon",
  "pentagram",
  "pep",
  "perceive",
  "percent",
  "perch",
  "percolate",
  "perennial",
  "perfected",
  "perfectly",
  "perfume",
  "periscope",
  "perish",
  "perjurer",
  "perjury",
  "perkiness",
  "perky",
  "perm",
  "peroxide",
  "perpetual",
  "perplexed",
  "persecute",
  "persevere",
  "persuaded",
  "persuader",
  "pesky",
  "peso",
  "pessimism",
  "pessimist",
  "pester",
  "pesticide",
  "petal",
  "petite",
  "petition",
  "petri",
  "petroleum",
  "petted",
  "petticoat",
  "pettiness",
  "petty",
  "petunia",
  "phantom",
  "phobia",
  "phoenix",
  "phonebook",
  "phoney",
  "phonics",
  "phoniness",
  "phony",
  "phosphate",
  "photo",
  "phrase",
  "phrasing",
  "placard",
  "placate",
  "placidly",
  "plank",
  "planner",
  "plant",
  "plasma",
  "plaster",
  "plastic",
  "plated",
  "platform",
  "plating",
  "platinum",
  "platonic",
  "platter",
  "platypus",
  "plausible",
  "plausibly",
  "playable",
  "playback",
  "player",
  "playful",
  "playgroup",
  "playhouse",
  "playing",
  "playlist",
  "playmaker",
  "playmate",
  "playoff",
  "playpen",
  "playroom",
  "playset",
  "plaything",
  "playtime",
  "plaza",
  "pleading",
  "pleat",
  "pledge",
  "plentiful",
  "plenty",
  "plethora",
  "plexiglas",
  "pliable",
  "plod",
  "plop",
  "plot",
  "plow",
  "ploy",
  "pluck",
  "plug",
  "plunder",
  "plunging",
  "plural",
  "plus",
  "plutonium",
  "plywood",
  "poach",
  "pod",
  "poem",
  "poet",
  "pogo",
  "pointed",
  "pointer",
  "pointing",
  "pointless",
  "pointy",
  "poise",
  "poison",
  "poker",
  "poking",
  "polar",
  "police",
  "policy",
  "polio",
  "polish",
  "politely",
  "polka",
  "polo",
  "polyester",
  "polygon",
  "polygraph",
  "polymer",
  "poncho",
  "pond",
  "pony",
  "popcorn",
  "pope",
  "poplar",
  "popper",
  "poppy",
  "popsicle",
  "populace",
  "popular",
  "populate",
  "porcupine",
  "pork",
  "porous",
  "porridge",
  "portable",
  "portal",
  "portfolio",
  "porthole",
  "portion",
  "portly",
  "portside",
  "poser",
  "posh",
  "posing",
  "possible",
  "possibly",
  "possum",
  "postage",
  "postal",
  "postbox",
  "postcard",
  "posted",
  "poster",
  "posting",
  "postnasal",
  "posture",
  "postwar",
  "pouch",
  "pounce",
  "pouncing",
  "pound",
  "pouring",
  "pout",
  "powdered",
  "powdering",
  "powdery",
  "power",
  "powwow",
  "pox",
  "praising",
  "prance",
  "prancing",
  "pranker",
  "prankish",
  "prankster",
  "prayer",
  "praying",
  "preacher",
  "preaching",
  "preachy",
  "preamble",
  "precinct",
  "precise",
  "precision",
  "precook",
  "precut",
  "predator",
  "predefine",
  "predict",
  "preface",
  "prefix",
  "preflight",
  "preformed",
  "pregame",
  "pregnancy",
  "pregnant",
  "preheated",
  "prelaunch",
  "prelaw",
  "prelude",
  "premiere",
  "premises",
  "premium",
  "prenatal",
  "preoccupy",
  "preorder",
  "prepaid",
  "prepay",
  "preplan",
  "preppy",
  "preschool",
  "prescribe",
  "preseason",
  "preset",
  "preshow",
  "president",
  "presoak",
  "press",
  "presume",
  "presuming",
  "preteen",
  "pretended",
  "pretender",
  "pretense",
  "pretext",
  "pretty",
  "pretzel",
  "prevail",
  "prevalent",
  "prevent",
  "preview",
  "previous",
  "prewar",
  "prewashed",
  "prideful",
  "pried",
  "primal",
  "primarily",
  "primary",
  "primate",
  "primer",
  "primp",
  "princess",
  "print",
  "prior",
  "prism",
  "prison",
  "prissy",
  "pristine",
  "privacy",
  "private",
  "privatize",
  "prize",
  "proactive",
  "probable",
  "probably",
  "probation",
  "probe",
  "probing",
  "probiotic",
  "problem",
  "procedure",
  "process",
  "proclaim",
  "procreate",
  "procurer",
  "prodigal",
  "prodigy",
  "produce",
  "product",
  "profane",
  "profanity",
  "professed",
  "professor",
  "profile",
  "profound",
  "profusely",
  "progeny",
  "prognosis",
  "program",
  "progress",
  "projector",
  "prologue",
  "prolonged",
  "promenade",
  "prominent",
  "promoter",
  "promotion",
  "prompter",
  "promptly",
  "prone",
  "prong",
  "pronounce",
  "pronto",
  "proofing",
  "proofread",
  "proofs",
  "propeller",
  "properly",
  "property",
  "proponent",
  "proposal",
  "propose",
  "props",
  "prorate",
  "protector",
  "protegee",
  "proton",
  "prototype",
  "protozoan",
  "protract",
  "protrude",
  "proud",
  "provable",
  "proved",
  "proven",
  "provided",
  "provider",
  "providing",
  "province",
  "proving",
  "provoke",
  "provoking",
  "provolone",
  "prowess",
  "prowler",
  "prowling",
  "proximity",
  "proxy",
  "prozac",
  "prude",
  "prudishly",
  "prune",
  "pruning",
  "pry",
  "psychic",
  "public",
  "publisher",
  "pucker",
  "pueblo",
  "pug",
  "pull",
  "pulmonary",
  "pulp",
  "pulsate",
  "pulse",
  "pulverize",
  "puma",
  "pumice",
  "pummel",
  "punch",
  "punctual",
  "punctuate",
  "punctured",
  "pungent",
  "punisher",
  "punk",
  "pupil",
  "puppet",
  "puppy",
  "purchase",
  "pureblood",
  "purebred",
  "purely",
  "pureness",
  "purgatory",
  "purge",
  "purging",
  "purifier",
  "purify",
  "purist",
  "puritan",
  "purity",
  "purple",
  "purplish",
  "purposely",
  "purr",
  "purse",
  "pursuable",
  "pursuant",
  "pursuit",
  "purveyor",
  "pushcart",
  "pushchair",
  "pusher",
  "pushiness",
  "pushing",
  "pushover",
  "pushpin",
  "pushup",
  "pushy",
  "putdown",
  "putt",
  "puzzle",
  "puzzling",
  "pyramid",
  "pyromania",
  "python",
  "quack",
  "quadrant",
  "quail",
  "quaintly",
  "quake",
  "quaking",
  "qualified",
  "qualifier",
  "qualify",
  "quality",
  "qualm",
  "quantum",
  "quarrel",
  "quarry",
  "quartered",
  "quarterly",
  "quarters",
  "quartet",
  "quench",
  "query",
  "quicken",
  "quickly",
  "quickness",
  "quicksand",
  "quickstep",
  "quiet",
  "quill",
  "quilt",
  "quintet",
  "quintuple",
  "quirk",
  "quit",
  "quiver",
  "quizzical",
  "quotable",
  "quotation",
  "quote",
  "rabid",
  "race",
  "racing",
  "racism",
  "rack",
  "racoon",
  "radar",
  "radial",
  "radiance",
  "radiantly",
  "radiated",
  "radiation",
  "radiator",
  "radio",
  "radish",
  "raffle",
  "raft",
  "rage",
  "ragged",
  "raging",
  "ragweed",
  "raider",
  "railcar",
  "railing",
  "railroad",
  "railway",
  "raisin",
  "rake",
  "raking",
  "rally",
  "ramble",
  "rambling",
  "ramp",
  "ramrod",
  "ranch",
  "rancidity",
  "random",
  "ranged",
  "ranger",
  "ranging",
  "ranked",
  "ranking",
  "ransack",
  "ranting",
  "rants",
  "rare",
  "rarity",
  "rascal",
  "rash",
  "rasping",
  "ravage",
  "raven",
  "ravine",
  "raving",
  "ravioli",
  "ravishing",
  "reabsorb",
  "reach",
  "reacquire",
  "reaction",
  "reactive",
  "reactor",
  "reaffirm",
  "ream",
  "reanalyze",
  "reappear",
  "reapply",
  "reappoint",
  "reapprove",
  "rearrange",
  "rearview",
  "reason",
  "reassign",
  "reassure",
  "reattach",
  "reawake",
  "rebalance",
  "rebate",
  "rebel",
  "rebirth",
  "reboot",
  "reborn",
  "rebound",
  "rebuff",
  "rebuild",
  "rebuilt",
  "reburial",
  "rebuttal",
  "recall",
  "recant",
  "recapture",
  "recast",
  "recede",
  "recent",
  "recess",
  "recharger",
  "recipient",
  "recital",
  "recite",
  "reckless",
  "reclaim",
  "recliner",
  "reclining",
  "recluse",
  "reclusive",
  "recognize",
  "recoil",
  "recollect",
  "recolor",
  "reconcile",
  "reconfirm",
  "reconvene",
  "recopy",
  "record",
  "recount",
  "recoup",
  "recovery",
  "recreate",
  "rectal",
  "rectangle",
  "rectified",
  "rectify",
  "recycled",
  "recycler",
  "recycling",
  "reemerge",
  "reenact",
  "reenter",
  "reentry",
  "reexamine",
  "referable",
  "referee",
  "reference",
  "refill",
  "refinance",
  "refined",
  "refinery",
  "refining",
  "refinish",
  "reflected",
  "reflector",
  "reflex",
  "reflux",
  "refocus",
  "refold",
  "reforest",
  "reformat",
  "reformed",
  "reformer",
  "reformist",
  "refract",
  "refrain",
  "refreeze",
  "refresh",
  "refried",
  "refueling",
  "refund",
  "refurbish",
  "refurnish",
  "refusal",
  "refuse",
  "refusing",
  "refutable",
  "refute",
  "regain",
  "regalia",
  "regally",
  "reggae",
  "regime",
  "region",
  "register",
  "registrar",
  "registry",
  "regress",
  "regretful",
  "regroup",
  "regular",
  "regulate",
  "regulator",
  "rehab",
  "reheat",
  "rehire",
  "rehydrate",
  "reimburse",
  "reissue",
  "reiterate",
  "rejoice",
  "rejoicing",
  "rejoin",
  "rekindle",
  "relapse",
  "relapsing",
  "relatable",
  "related",
  "relation",
  "relative",
  "relax",
  "relay",
  "relearn",
  "release",
  "relenting",
  "reliable",
  "reliably",
  "reliance",
  "reliant",
  "relic",
  "relieve",
  "relieving",
  "relight",
  "relish",
  "relive",
  "reload",
  "relocate",
  "relock",
  "reluctant",
  "rely",
  "remake",
  "remark",
  "remarry",
  "rematch",
  "remedial",
  "remedy",
  "remember",
  "reminder",
  "remindful",
  "remission",
  "remix",
  "remnant",
  "remodeler",
  "remold",
  "remorse",
  "remote",
  "removable",
  "removal",
  "removed",
  "remover",
  "removing",
  "rename",
  "renderer",
  "rendering",
  "rendition",
  "renegade",
  "renewable",
  "renewably",
  "renewal",
  "renewed",
  "renounce",
  "renovate",
  "renovator",
  "rentable",
  "rental",
  "rented",
  "renter",
  "reoccupy",
  "reoccur",
  "reopen",
  "reorder",
  "repackage",
  "repacking",
  "repaint",
  "repair",
  "repave",
  "repaying",
  "repayment",
  "repeal",
  "repeated",
  "repeater",
  "repent",
  "rephrase",
  "replace",
  "replay",
  "replica",
  "reply",
  "reporter",
  "repose",
  "repossess",
  "repost",
  "repressed",
  "reprimand",
  "reprint",
  "reprise",
  "reproach",
  "reprocess",
  "reproduce",
  "reprogram",
  "reps",
  "reptile",
  "reptilian",
  "repugnant",
  "repulsion",
  "repulsive",
  "repurpose",
  "reputable",
  "reputably",
  "request",
  "require",
  "requisite",
  "reroute",
  "rerun",
  "resale",
  "resample",
  "rescuer",
  "reseal",
  "research",
  "reselect",
  "reseller",
  "resemble",
  "resend",
  "resent",
  "reset",
  "reshape",
  "reshoot",
  "reshuffle",
  "residence",
  "residency",
  "resident",
  "residual",
  "residue",
  "resigned",
  "resilient",
  "resistant",
  "resisting",
  "resize",
  "resolute",
  "resolved",
  "resonant",
  "resonate",
  "resort",
  "resource",
  "respect",
  "resubmit",
  "result",
  "resume",
  "resupply",
  "resurface",
  "resurrect",
  "retail",
  "retainer",
  "retaining",
  "retake",
  "retaliate",
  "retention",
  "rethink",
  "retinal",
  "retired",
  "retiree",
  "retiring",
  "retold",
  "retool",
  "retorted",
  "retouch",
  "retrace",
  "retract",
  "retrain",
  "retread",
  "retreat",
  "retrial",
  "retrieval",
  "retriever",
  "retry",
  "return",
  "retying",
  "retype",
  "reunion",
  "reunite",
  "reusable",
  "reuse",
  "reveal",
  "reveler",
  "revenge",
  "revenue",
  "reverb",
  "revered",
  "reverence",
  "reverend",
  "reversal",
  "reverse",
  "reversing",
  "reversion",
  "revert",
  "revisable",
  "revise",
  "revision",
  "revisit",
  "revivable",
  "revival",
  "reviver",
  "reviving",
  "revocable",
  "revoke",
  "revolt",
  "revolver",
  "revolving",
  "reward",
  "rewash",
  "rewind",
  "rewire",
  "reword",
  "rework",
  "rewrap",
  "rewrite",
  "rhyme",
  "ribbon",
  "ribcage",
  "rice",
  "riches",
  "richly",
  "richness",
  "rickety",
  "ricotta",
  "riddance",
  "ridden",
  "ride",
  "riding",
  "rifling",
  "rift",
  "rigging",
  "rigid",
  "rigor",
  "rimless",
  "rimmed",
  "rind",
  "rink",
  "rinse",
  "rinsing",
  "riot",
  "ripcord",
  "ripeness",
  "ripening",
  "ripping",
  "ripple",
  "rippling",
  "riptide",
  "rise",
  "rising",
  "risk",
  "risotto",
  "ritalin",
  "ritzy",
  "rival",
  "riverbank",
  "riverbed",
  "riverboat",
  "riverside",
  "riveter",
  "riveting",
  "roamer",
  "roaming",
  "roast",
  "robbing",
  "robe",
  "robin",
  "robotics",
  "robust",
  "rockband",
  "rocker",
  "rocket",
  "rockfish",
  "rockiness",
  "rocking",
  "rocklike",
  "rockslide",
  "rockstar",
  "rocky",
  "rogue",
  "roman",
  "romp",
  "rope",
  "roping",
  "roster",
  "rosy",
  "rotten",
  "rotting",
  "rotunda",
  "roulette",
  "rounding",
  "roundish",
  "roundness",
  "roundup",
  "roundworm",
  "routine",
  "routing",
  "rover",
  "roving",
  "royal",
  "rubbed",
  "rubber",
  "rubbing",
  "rubble",
  "rubdown",
  "ruby",
  "ruckus",
  "rudder",
  "rug",
  "ruined",
  "rule",
  "rumble",
  "rumbling",
  "rummage",
  "rumor",
  "runaround",
  "rundown",
  "runner",
  "running",
  "runny",
  "runt",
  "runway",
  "rupture",
  "rural",
  "ruse",
  "rush",
  "rust",
  "rut",
  "sabbath",
  "sabotage",
  "sacrament",
  "sacred",
  "sacrifice",
  "sadden",
  "saddlebag",
  "saddled",
  "saddling",
  "sadly",
  "sadness",
  "safari",
  "safeguard",
  "safehouse",
  "safely",
  "safeness",
  "saffron",
  "saga",
  "sage",
  "sagging",
  "saggy",
  "said",
  "saint",
  "sake",
  "salad",
  "salami",
  "salaried",
  "salary",
  "saline",
  "salon",
  "saloon",
  "salsa",
  "salt",
  "salutary",
  "salute",
  "salvage",
  "salvaging",
  "salvation",
  "same",
  "sample",
  "sampling",
  "sanction",
  "sanctity",
  "sanctuary",
  "sandal",
  "sandbag",
  "sandbank",
  "sandbar",
  "sandblast",
  "sandbox",
  "sanded",
  "sandfish",
  "sanding",
  "sandlot",
  "sandpaper",
  "sandpit",
  "sandstone",
  "sandstorm",
  "sandworm",
  "sandy",
  "sanitary",
  "sanitizer",
  "sank",
  "santa",
  "sapling",
  "sappiness",
  "sappy",
  "sarcasm",
  "sarcastic",
  "sardine",
  "sash",
  "sasquatch",
  "sassy",
  "satchel",
  "satiable",
  "satin",
  "satirical",
  "satisfied",
  "satisfy",
  "saturate",
  "saturday",
  "sauciness",
  "saucy",
  "sauna",
  "savage",
  "savanna",
  "saved",
  "savings",
  "savior",
  "savor",
  "saxophone",
  "say",
  "scabbed",
  "scabby",
  "scalded",
  "scalding",
  "scale",
  "scaling",
  "scallion",
  "scallop",
  "scalping",
  "scam",
  "scandal",
  "scanner",
  "scanning",
  "scant",
  "scapegoat",
  "scarce",
  "scarcity",
  "scarecrow",
  "scared",
  "scarf",
  "scarily",
  "scariness",
  "scarring",
  "scary",
  "scavenger",
  "scenic",
  "schedule",
  "schematic",
  "scheme",
  "scheming",
  "schilling",
  "schnapps",
  "scholar",
  "science",
  "scientist",
  "scion",
  "scoff",
  "scolding",
  "scone",
  "scoop",
  "scooter",
  "scope",
  "scorch",
  "scorebook",
  "scorecard",
  "scored",
  "scoreless",
  "scorer",
  "scoring",
  "scorn",
  "scorpion",
  "scotch",
  "scoundrel",
  "scoured",
  "scouring",
  "scouting",
  "scouts",
  "scowling",
  "scrabble",
  "scraggly",
  "scrambled",
  "scrambler",
  "scrap",
  "scratch",
  "scrawny",
  "screen",
  "scribble",
  "scribe",
  "scribing",
  "scrimmage",
  "script",
  "scroll",
  "scrooge",
  "scrounger",
  "scrubbed",
  "scrubber",
  "scruffy",
  "scrunch",
  "scrutiny",
  "scuba",
  "scuff",
  "sculptor",
  "sculpture",
  "scurvy",
  "scuttle",
  "secluded",
  "secluding",
  "seclusion",
  "second",
  "secrecy",
  "secret",
  "sectional",
  "sector",
  "secular",
  "securely",
  "security",
  "sedan",
  "sedate",
  "sedation",
  "sedative",
  "sediment",
  "seduce",
  "seducing",
  "segment",
  "seismic",
  "seizing",
  "seldom",
  "selected",
  "selection",
  "selective",
  "selector",
  "self",
  "seltzer",
  "semantic",
  "semester",
  "semicolon",
  "semifinal",
  "seminar",
  "semisoft",
  "semisweet",
  "senate",
  "senator",
  "send",
  "senior",
  "senorita",
  "sensation",
  "sensitive",
  "sensitize",
  "sensually",
  "sensuous",
  "sepia",
  "september",
  "septic",
  "septum",
  "sequel",
  "sequence",
  "sequester",
  "series",
  "sermon",
  "serotonin",
  "serpent",
  "serrated",
  "serve",
  "service",
  "serving",
  "sesame",
  "sessions",
  "setback",
  "setting",
  "settle",
  "settling",
  "setup",
  "sevenfold",
  "seventeen",
  "seventh",
  "seventy",
  "severity",
  "shabby",
  "shack",
  "shaded",
  "shadily",
  "shadiness",
  "shading",
  "shadow",
  "shady",
  "shaft",
  "shakable",
  "shakily",
  "shakiness",
  "shaking",
  "shaky",
  "shale",
  "shallot",
  "shallow",
  "shame",
  "shampoo",
  "shamrock",
  "shank",
  "shanty",
  "shape",
  "shaping",
  "share",
  "sharpener",
  "sharper",
  "sharpie",
  "sharply",
  "sharpness",
  "shawl",
  "sheath",
  "shed",
  "sheep",
  "sheet",
  "shelf",
  "shell",
  "shelter",
  "shelve",
  "shelving",
  "sherry",
  "shield",
  "shifter",
  "shifting",
  "shiftless",
  "shifty",
  "shimmer",
  "shimmy",
  "shindig",
  "shine",
  "shingle",
  "shininess",
  "shining",
  "shiny",
  "ship",
  "shirt",
  "shivering",
  "shock",
  "shone",
  "shoplift",
  "shopper",
  "shopping",
  "shoptalk",
  "shore",
  "shortage",
  "shortcake",
  "shortcut",
  "shorten",
  "shorter",
  "shorthand",
  "shortlist",
  "shortly",
  "shortness",
  "shorts",
  "shortwave",
  "shorty",
  "shout",
  "shove",
  "showbiz",
  "showcase",
  "showdown",
  "shower",
  "showgirl",
  "showing",
  "showman",
  "shown",
  "showoff",
  "showpiece",
  "showplace",
  "showroom",
  "showy",
  "shrank",
  "shrapnel",
  "shredder",
  "shredding",
  "shrewdly",
  "shriek",
  "shrill",
  "shrimp",
  "shrine",
  "shrink",
  "shrivel",
  "shrouded",
  "shrubbery",
  "shrubs",
  "shrug",
  "shrunk",
  "shucking",
  "shudder",
  "shuffle",
  "shuffling",
  "shun",
  "shush",
  "shut",
  "shy",
  "siamese",
  "siberian",
  "sibling",
  "siding",
  "sierra",
  "siesta",
  "sift",
  "sighing",
  "silenced",
  "silencer",
  "silent",
  "silica",
  "silicon",
  "silk",
  "silliness",
  "silly",
  "silo",
  "silt",
  "silver",
  "similarly",
  "simile",
  "simmering",
  "simple",
  "simplify",
  "simply",
  "sincere",
  "sincerity",
  "singer",
  "singing",
  "single",
  "singular",
  "sinister",
  "sinless",
  "sinner",
  "sinuous",
  "sip",
  "siren",
  "sister",
  "sitcom",
  "sitter",
  "sitting",
  "situated",
  "situation",
  "sixfold",
  "sixteen",
  "sixth",
  "sixties",
  "sixtieth",
  "sixtyfold",
  "sizable",
  "sizably",
  "size",
  "sizing",
  "sizzle",
  "sizzling",
  "skater",
  "skating",
  "skedaddle",
  "skeletal",
  "skeleton",
  "skeptic",
  "sketch",
  "skewed",
  "skewer",
  "skid",
  "skied",
  "skier",
  "skies",
  "skiing",
  "skilled",
  "skillet",
  "skillful",
  "skimmed",
  "skimmer",
  "skimming",
  "skimpily",
  "skincare",
  "skinhead",
  "skinless",
  "skinning",
  "skinny",
  "skintight",
  "skipper",
  "skipping",
  "skirmish",
  "skirt",
  "skittle",
  "skydiver",
  "skylight",
  "skyline",
  "skype",
  "skyrocket",
  "skyward",
  "slab",
  "slacked",
  "slacker",
  "slacking",
  "slackness",
  "slacks",
  "slain",
  "slam",
  "slander",
  "slang",
  "slapping",
  "slapstick",
  "slashed",
  "slashing",
  "slate",
  "slather",
  "slaw",
  "sled",
  "sleek",
  "sleep",
  "sleet",
  "sleeve",
  "slept",
  "sliceable",
  "sliced",
  "slicer",
  "slicing",
  "slick",
  "slider",
  "slideshow",
  "sliding",
  "slighted",
  "slighting",
  "slightly",
  "slimness",
  "slimy",
  "slinging",
  "slingshot",
  "slinky",
  "slip",
  "slit",
  "sliver",
  "slobbery",
  "slogan",
  "sloped",
  "sloping",
  "sloppily",
  "sloppy",
  "slot",
  "slouching",
  "slouchy",
  "sludge",
  "slug",
  "slum",
  "slurp",
  "slush",
  "sly",
  "small",
  "smartly",
  "smartness",
  "smasher",
  "smashing",
  "smashup",
  "smell",
  "smelting",
  "smile",
  "smilingly",
  "smirk",
  "smite",
  "smith",
  "smitten",
  "smock",
  "smog",
  "smoked",
  "smokeless",
  "smokiness",
  "smoking",
  "smoky",
  "smolder",
  "smooth",
  "smother",
  "smudge",
  "smudgy",
  "smuggler",
  "smuggling",
  "smugly",
  "smugness",
  "snack",
  "snagged",
  "snaking",
  "snap",
  "snare",
  "snarl",
  "snazzy",
  "sneak",
  "sneer",
  "sneeze",
  "sneezing",
  "snide",
  "sniff",
  "snippet",
  "snipping",
  "snitch",
  "snooper",
  "snooze",
  "snore",
  "snoring",
  "snorkel",
  "snort",
  "snout",
  "snowbird",
  "snowboard",
  "snowbound",
  "snowcap",
  "snowdrift",
  "snowdrop",
  "snowfall",
  "snowfield",
  "snowflake",
  "snowiness",
  "snowless",
  "snowman",
  "snowplow",
  "snowshoe",
  "snowstorm",
  "snowsuit",
  "snowy",
  "snub",
  "snuff",
  "snuggle",
  "snugly",
  "snugness",
  "speak",
  "spearfish",
  "spearhead",
  "spearman",
  "spearmint",
  "species",
  "specimen",
  "specked",
  "speckled",
  "specks",
  "spectacle",
  "spectator",
  "spectrum",
  "speculate",
  "speech",
  "speed",
  "spellbind",
  "speller",
  "spelling",
  "spendable",
  "spender",
  "spending",
  "spent",
  "spew",
  "sphere",
  "spherical",
  "sphinx",
  "spider",
  "spied",
  "spiffy",
  "spill",
  "spilt",
  "spinach",
  "spinal",
  "spindle",
  "spinner",
  "spinning",
  "spinout",
  "spinster",
  "spiny",
  "spiral",
  "spirited",
  "spiritism",
  "spirits",
  "spiritual",
  "splashed",
  "splashing",
  "splashy",
  "splatter",
  "spleen",
  "splendid",
  "splendor",
  "splice",
  "splicing",
  "splinter",
  "splotchy",
  "splurge",
  "spoilage",
  "spoiled",
  "spoiler",
  "spoiling",
  "spoils",
  "spoken",
  "spokesman",
  "sponge",
  "spongy",
  "sponsor",
  "spoof",
  "spookily",
  "spooky",
  "spool",
  "spoon",
  "spore",
  "sporting",
  "sports",
  "sporty",
  "spotless",
  "spotlight",
  "spotted",
  "spotter",
  "spotting",
  "spotty",
  "spousal",
  "spouse",
  "spout",
  "sprain",
  "sprang",
  "sprawl",
  "spray",
  "spree",
  "sprig",
  "spring",
  "sprinkled",
  "sprinkler",
  "sprint",
  "sprite",
  "sprout",
  "spruce",
  "sprung",
  "spry",
  "spud",
  "spur",
  "sputter",
  "spyglass",
  "squabble",
  "squad",
  "squall",
  "squander",
  "squash",
  "squatted",
  "squatter",
  "squatting",
  "squeak",
  "squealer",
  "squealing",
  "squeamish",
  "squeegee",
  "squeeze",
  "squeezing",
  "squid",
  "squiggle",
  "squiggly",
  "squint",
  "squire",
  "squirt",
  "squishier",
  "squishy",
  "stability",
  "stabilize",
  "stable",
  "stack",
  "stadium",
  "staff",
  "stage",
  "staging",
  "stagnant",
  "stagnate",
  "stainable",
  "stained",
  "staining",
  "stainless",
  "stalemate",
  "staleness",
  "stalling",
  "stallion",
  "stamina",
  "stammer",
  "stamp",
  "stand",
  "stank",
  "staple",
  "stapling",
  "starboard",
  "starch",
  "stardom",
  "stardust",
  "starfish",
  "stargazer",
  "staring",
  "stark",
  "starless",
  "starlet",
  "starlight",
  "starlit",
  "starring",
  "starry",
  "starship",
  "starter",
  "starting",
  "startle",
  "startling",
  "startup",
  "starved",
  "starving",
  "stash",
  "state",
  "static",
  "statistic",
  "statue",
  "stature",
  "status",
  "statute",
  "statutory",
  "staunch",
  "stays",
  "steadfast",
  "steadier",
  "steadily",
  "steadying",
  "steam",
  "steed",
  "steep",
  "steerable",
  "steering",
  "steersman",
  "stegosaur",
  "stellar",
  "stem",
  "stench",
  "stencil",
  "step",
  "stereo",
  "sterile",
  "sterility",
  "sterilize",
  "sterling",
  "sternness",
  "sternum",
  "stew",
  "stick",
  "stiffen",
  "stiffly",
  "stiffness",
  "stifle",
  "stifling",
  "stillness",
  "stilt",
  "stimulant",
  "stimulate",
  "stimuli",
  "stimulus",
  "stinger",
  "stingily",
  "stinging",
  "stingray",
  "stingy",
  "stinking",
  "stinky",
  "stipend",
  "stipulate",
  "stir",
  "stitch",
  "stock",
  "stoic",
  "stoke",
  "stole",
  "stomp",
  "stonewall",
  "stoneware",
  "stonework",
  "stoning",
  "stony",
  "stood",
  "stooge",
  "stool",
  "stoop",
  "stoplight",
  "stoppable",
  "stoppage",
  "stopped",
  "stopper",
  "stopping",
  "stopwatch",
  "storable",
  "storage",
  "storeroom",
  "storewide",
  "storm",
  "stout",
  "stove",
  "stowaway",
  "stowing",
  "straddle",
  "straggler",
  "strained",
  "strainer",
  "straining",
  "strangely",
  "stranger",
  "strangle",
  "strategic",
  "strategy",
  "stratus",
  "straw",
  "stray",
  "streak",
  "stream",
  "street",
  "strength",
  "strenuous",
  "strep",
  "stress",
  "stretch",
  "strewn",
  "stricken",
  "strict",
  "stride",
  "strife",
  "strike",
  "striking",
  "strive",
  "striving",
  "strobe",
  "strode",
  "stroller",
  "strongbox",
  "strongly",
  "strongman",
  "struck",
  "structure",
  "strudel",
  "struggle",
  "strum",
  "strung",
  "strut",
  "stubbed",
  "stubble",
  "stubbly",
  "stubborn",
  "stucco",
  "stuck",
  "student",
  "studied",
  "studio",
  "study",
  "stuffed",
  "stuffing",
  "stuffy",
  "stumble",
  "stumbling",
  "stump",
  "stung",
  "stunned",
  "stunner",
  "stunning",
  "stunt",
  "stupor",
  "sturdily",
  "sturdy",
  "styling",
  "stylishly",
  "stylist",
  "stylized",
  "stylus",
  "suave",
  "subarctic",
  "subatomic",
  "subdivide",
  "subdued",
  "subduing",
  "subfloor",
  "subgroup",
  "subheader",
  "subject",
  "sublease",
  "sublet",
  "sublevel",
  "sublime",
  "submarine",
  "submerge",
  "submersed",
  "submitter",
  "subpanel",
  "subpar",
  "subplot",
  "subprime",
  "subscribe",
  "subscript",
  "subsector",
  "subside",
  "subsiding",
  "subsidize",
  "subsidy",
  "subsoil",
  "subsonic",
  "substance",
  "subsystem",
  "subtext",
  "subtitle",
  "subtly",
  "subtotal",
  "subtract",
  "subtype",
  "suburb",
  "subway",
  "subwoofer",
  "subzero",
  "succulent",
  "such",
  "suction",
  "sudden",
  "sudoku",
  "suds",
  "sufferer",
  "suffering",
  "suffice",
  "suffix",
  "suffocate",
  "suffrage",
  "sugar",
  "suggest",
  "suing",
  "suitable",
  "suitably",
  "suitcase",
  "suitor",
  "sulfate",
  "sulfide",
  "sulfite",
  "sulfur",
  "sulk",
  "sullen",
  "sulphate",
  "sulphuric",
  "sultry",
  "superbowl",
  "superglue",
  "superhero",
  "superior",
  "superjet",
  "superman",
  "supermom",
  "supernova",
  "supervise",
  "supper",
  "supplier",
  "supply",
  "support",
  "supremacy",
  "supreme",
  "surcharge",
  "surely",
  "sureness",
  "surface",
  "surfacing",
  "surfboard",
  "surfer",
  "surgery",
  "surgical",
  "surging",
  "surname",
  "surpass",
  "surplus",
  "surprise",
  "surreal",
  "surrender",
  "surrogate",
  "surround",
  "survey",
  "survival",
  "survive",
  "surviving",
  "survivor",
  "sushi",
  "suspect",
  "suspend",
  "suspense",
  "sustained",
  "sustainer",
  "swab",
  "swaddling",
  "swagger",
  "swampland",
  "swan",
  "swapping",
  "swarm",
  "sway",
  "swear",
  "sweat",
  "sweep",
  "swell",
  "swept",
  "swerve",
  "swifter",
  "swiftly",
  "swiftness",
  "swimmable",
  "swimmer",
  "swimming",
  "swimsuit",
  "swimwear",
  "swinger",
  "swinging",
  "swipe",
  "swirl",
  "switch",
  "swivel",
  "swizzle",
  "swooned",
  "swoop",
  "swoosh",
  "swore",
  "sworn",
  "swung",
  "sycamore",
  "sympathy",
  "symphonic",
  "symphony",
  "symptom",
  "synapse",
  "syndrome",
  "synergy",
  "synopses",
  "synopsis",
  "synthesis",
  "synthetic",
  "syrup",
  "system",
  "t-shirt",
  "tabasco",
  "tabby",
  "tableful",
  "tables",
  "tablet",
  "tableware",
  "tabloid",
  "tackiness",
  "tacking",
  "tackle",
  "tackling",
  "tacky",
  "taco",
  "tactful",
  "tactical",
  "tactics",
  "tactile",
  "tactless",
  "tadpole",
  "taekwondo",
  "tag",
  "tainted",
  "take",
  "taking",
  "talcum",
  "talisman",
  "tall",
  "talon",
  "tamale",
  "tameness",
  "tamer",
  "tamper",
  "tank",
  "tanned",
  "tannery",
  "tanning",
  "tantrum",
  "tapeless",
  "tapered",
  "tapering",
  "tapestry",
  "tapioca",
  "tapping",
  "taps",
  "tarantula",
  "target",
  "tarmac",
  "tarnish",
  "tarot",
  "tartar",
  "tartly",
  "tartness",
  "task",
  "tassel",
  "taste",
  "tastiness",
  "tasting",
  "tasty",
  "tattered",
  "tattle",
  "tattling",
  "tattoo",
  "taunt",
  "tavern",
  "thank",
  "that",
  "thaw",
  "theater",
  "theatrics",
  "thee",
  "theft",
  "theme",
  "theology",
  "theorize",
  "thermal",
  "thermos",
  "thesaurus",
  "these",
  "thesis",
  "thespian",
  "thicken",
  "thicket",
  "thickness",
  "thieving",
  "thievish",
  "thigh",
  "thimble",
  "thing",
  "think",
  "thinly",
  "thinner",
  "thinness",
  "thinning",
  "thirstily",
  "thirsting",
  "thirsty",
  "thirteen",
  "thirty",
  "thong",
  "thorn",
  "those",
  "thousand",
  "thrash",
  "thread",
  "threaten",
  "threefold",
  "thrift",
  "thrill",
  "thrive",
  "thriving",
  "throat",
  "throbbing",
  "throng",
  "throttle",
  "throwaway",
  "throwback",
  "thrower",
  "throwing",
  "thud",
  "thumb",
  "thumping",
  "thursday",
  "thus",
  "thwarting",
  "thyself",
  "tiara",
  "tibia",
  "tidal",
  "tidbit",
  "tidiness",
  "tidings",
  "tidy",
  "tiger",
  "tighten",
  "tightly",
  "tightness",
  "tightrope",
  "tightwad",
  "tigress",
  "tile",
  "tiling",
  "till",
  "tilt",
  "timid",
  "timing",
  "timothy",
  "tinderbox",
  "tinfoil",
  "tingle",
  "tingling",
  "tingly",
  "tinker",
  "tinkling",
  "tinsel",
  "tinsmith",
  "tint",
  "tinwork",
  "tiny",
  "tipoff",
  "tipped",
  "tipper",
  "tipping",
  "tiptoeing",
  "tiptop",
  "tiring",
  "tissue",
  "trace",
  "tracing",
  "track",
  "traction",
  "tractor",
  "trade",
  "trading",
  "tradition",
  "traffic",
  "tragedy",
  "trailing",
  "trailside",
  "train",
  "traitor",
  "trance",
  "tranquil",
  "transfer",
  "transform",
  "translate",
  "transpire",
  "transport",
  "transpose",
  "trapdoor",
  "trapeze",
  "trapezoid",
  "trapped",
  "trapper",
  "trapping",
  "traps",
  "trash",
  "travel",
  "traverse",
  "travesty",
  "tray",
  "treachery",
  "treading",
  "treadmill",
  "treason",
  "treat",
  "treble",
  "tree",
  "trekker",
  "tremble",
  "trembling",
  "tremor",
  "trench",
  "trend",
  "trespass",
  "triage",
  "trial",
  "triangle",
  "tribesman",
  "tribunal",
  "tribune",
  "tributary",
  "tribute",
  "triceps",
  "trickery",
  "trickily",
  "tricking",
  "trickle",
  "trickster",
  "tricky",
  "tricolor",
  "tricycle",
  "trident",
  "tried",
  "trifle",
  "trifocals",
  "trillion",
  "trilogy",
  "trimester",
  "trimmer",
  "trimming",
  "trimness",
  "trinity",
  "trio",
  "tripod",
  "tripping",
  "triumph",
  "trivial",
  "trodden",
  "trolling",
  "trombone",
  "trophy",
  "tropical",
  "tropics",
  "trouble",
  "troubling",
  "trough",
  "trousers",
  "trout",
  "trowel",
  "truce",
  "truck",
  "truffle",
  "trump",
  "trunks",
  "trustable",
  "trustee",
  "trustful",
  "trusting",
  "trustless",
  "truth",
  "try",
  "tubby",
  "tubeless",
  "tubular",
  "tucking",
  "tuesday",
  "tug",
  "tuition",
  "tulip",
  "tumble",
  "tumbling",
  "tummy",
  "turban",
  "turbine",
  "turbofan",
  "turbojet",
  "turbulent",
  "turf",
  "turkey",
  "turmoil",
  "turret",
  "turtle",
  "tusk",
  "tutor",
  "tutu",
  "tux",
  "tweak",
  "tweed",
  "tweet",
  "tweezers",
  "twelve",
  "twentieth",
  "twenty",
  "twerp",
  "twice",
  "twiddle",
  "twiddling",
  "twig",
  "twilight",
  "twine",
  "twins",
  "twirl",
  "twistable",
  "twisted",
  "twister",
  "twisting",
  "twisty",
  "twitch",
  "twitter",
  "tycoon",
  "tying",
  "tyke",
  "udder",
  "ultimate",
  "ultimatum",
  "ultra",
  "umbilical",
  "umbrella",
  "umpire",
  "unabashed",
  "unable",
  "unadorned",
  "unadvised",
  "unafraid",
  "unaired",
  "unaligned",
  "unaltered",
  "unarmored",
  "unashamed",
  "unaudited",
  "unawake",
  "unaware",
  "unbaked",
  "unbalance",
  "unbeaten",
  "unbend",
  "unbent",
  "unbiased",
  "unbitten",
  "unblended",
  "unblessed",
  "unblock",
  "unbolted",
  "unbounded",
  "unboxed",
  "unbraided",
  "unbridle",
  "unbroken",
  "unbuckled",
  "unbundle",
  "unburned",
  "unbutton",
  "uncanny",
  "uncapped",
  "uncaring",
  "uncertain",
  "unchain",
  "unchanged",
  "uncharted",
  "uncheck",
  "uncivil",
  "unclad",
  "unclaimed",
  "unclamped",
  "unclasp",
  "uncle",
  "unclip",
  "uncloak",
  "unclog",
  "unclothed",
  "uncoated",
  "uncoiled",
  "uncolored",
  "uncombed",
  "uncommon",
  "uncooked",
  "uncork",
  "uncorrupt",
  "uncounted",
  "uncouple",
  "uncouth",
  "uncover",
  "uncross",
  "uncrown",
  "uncrushed",
  "uncured",
  "uncurious",
  "uncurled",
  "uncut",
  "undamaged",
  "undated",
  "undaunted",
  "undead",
  "undecided",
  "undefined",
  "underage",
  "underarm",
  "undercoat",
  "undercook",
  "undercut",
  "underdog",
  "underdone",
  "underfed",
  "underfeed",
  "underfoot",
  "undergo",
  "undergrad",
  "underhand",
  "underline",
  "underling",
  "undermine",
  "undermost",
  "underpaid",
  "underpass",
  "underpay",
  "underrate",
  "undertake",
  "undertone",
  "undertook",
  "undertow",
  "underuse",
  "underwear",
  "underwent",
  "underwire",
  "undesired",
  "undiluted",
  "undivided",
  "undocked",
  "undoing",
  "undone",
  "undrafted",
  "undress",
  "undrilled",
  "undusted",
  "undying",
  "unearned",
  "unearth",
  "unease",
  "uneasily",
  "uneasy",
  "uneatable",
  "uneaten",
  "unedited",
  "unelected",
  "unending",
  "unengaged",
  "unenvied",
  "unequal",
  "unethical",
  "uneven",
  "unexpired",
  "unexposed",
  "unfailing",
  "unfair",
  "unfasten",
  "unfazed",
  "unfeeling",
  "unfiled",
  "unfilled",
  "unfitted",
  "unfitting",
  "unfixable",
  "unfixed",
  "unflawed",
  "unfocused",
  "unfold",
  "unfounded",
  "unframed",
  "unfreeze",
  "unfrosted",
  "unfrozen",
  "unfunded",
  "unglazed",
  "ungloved",
  "unglue",
  "ungodly",
  "ungraded",
  "ungreased",
  "unguarded",
  "unguided",
  "unhappily",
  "unhappy",
  "unharmed",
  "unhealthy",
  "unheard",
  "unhearing",
  "unheated",
  "unhelpful",
  "unhidden",
  "unhinge",
  "unhitched",
  "unholy",
  "unhook",
  "unicorn",
  "unicycle",
  "unified",
  "unifier",
  "uniformed",
  "uniformly",
  "unify",
  "unimpeded",
  "uninjured",
  "uninstall",
  "uninsured",
  "uninvited",
  "union",
  "uniquely",
  "unisexual",
  "unison",
  "unissued",
  "unit",
  "universal",
  "universe",
  "unjustly",
  "unkempt",
  "unkind",
  "unknotted",
  "unknowing",
  "unknown",
  "unlaced",
  "unlatch",
  "unlawful",
  "unleaded",
  "unlearned",
  "unleash",
  "unless",
  "unleveled",
  "unlighted",
  "unlikable",
  "unlimited",
  "unlined",
  "unlinked",
  "unlisted",
  "unlit",
  "unlivable",
  "unloaded",
  "unloader",
  "unlocked",
  "unlocking",
  "unlovable",
  "unloved",
  "unlovely",
  "unloving",
  "unluckily",
  "unlucky",
  "unmade",
  "unmanaged",
  "unmanned",
  "unmapped",
  "unmarked",
  "unmasked",
  "unmasking",
  "unmatched",
  "unmindful",
  "unmixable",
  "unmixed",
  "unmolded",
  "unmoral",
  "unmovable",
  "unmoved",
  "unmoving",
  "unnamable",
  "unnamed",
  "unnatural",
  "unneeded",
  "unnerve",
  "unnerving",
  "unnoticed",
  "unopened",
  "unopposed",
  "unpack",
  "unpadded",
  "unpaid",
  "unpainted",
  "unpaired",
  "unpaved",
  "unpeeled",
  "unpicked",
  "unpiloted",
  "unpinned",
  "unplanned",
  "unplanted",
  "unpleased",
  "unpledged",
  "unplowed",
  "unplug",
  "unpopular",
  "unproven",
  "unquote",
  "unranked",
  "unrated",
  "unraveled",
  "unreached",
  "unread",
  "unreal",
  "unreeling",
  "unrefined",
  "unrelated",
  "unrented",
  "unrest",
  "unretired",
  "unrevised",
  "unrigged",
  "unripe",
  "unrivaled",
  "unroasted",
  "unrobed",
  "unroll",
  "unruffled",
  "unruly",
  "unrushed",
  "unsaddle",
  "unsafe",
  "unsaid",
  "unsalted",
  "unsaved",
  "unsavory",
  "unscathed",
  "unscented",
  "unscrew",
  "unsealed",
  "unseated",
  "unsecured",
  "unseeing",
  "unseemly",
  "unseen",
  "unselect",
  "unselfish",
  "unsent",
  "unsettled",
  "unshackle",
  "unshaken",
  "unshaved",
  "unshaven",
  "unsheathe",
  "unshipped",
  "unsightly",
  "unsigned",
  "unskilled",
  "unsliced",
  "unsmooth",
  "unsnap",
  "unsocial",
  "unsoiled",
  "unsold",
  "unsolved",
  "unsorted",
  "unspoiled",
  "unspoken",
  "unstable",
  "unstaffed",
  "unstamped",
  "unsteady",
  "unsterile",
  "unstirred",
  "unstitch",
  "unstopped",
  "unstuck",
  "unstuffed",
  "unstylish",
  "unsubtle",
  "unsubtly",
  "unsuited",
  "unsure",
  "unsworn",
  "untagged",
  "untainted",
  "untaken",
  "untamed",
  "untangled",
  "untapped",
  "untaxed",
  "unthawed",
  "unthread",
  "untidy",
  "untie",
  "until",
  "untimed",
  "untimely",
  "untitled",
  "untoasted",
  "untold",
  "untouched",
  "untracked",
  "untrained",
  "untreated",
  "untried",
  "untrimmed",
  "untrue",
  "untruth",
  "unturned",
  "untwist",
  "untying",
  "unusable",
  "unused",
  "unusual",
  "unvalued",
  "unvaried",
  "unvarying",
  "unveiled",
  "unveiling",
  "unvented",
  "unviable",
  "unvisited",
  "unvocal",
  "unwanted",
  "unwarlike",
  "unwary",
  "unwashed",
  "unwatched",
  "unweave",
  "unwed",
  "unwelcome",
  "unwell",
  "unwieldy",
  "unwilling",
  "unwind",
  "unwired",
  "unwitting",
  "unwomanly",
  "unworldly",
  "unworn",
  "unworried",
  "unworthy",
  "unwound",
  "unwoven",
  "unwrapped",
  "unwritten",
  "unzip",
  "upbeat",
  "upchuck",
  "upcoming",
  "upcountry",
  "update",
  "upfront",
  "upgrade",
  "upheaval",
  "upheld",
  "uphill",
  "uphold",
  "uplifted",
  "uplifting",
  "upload",
  "upon",
  "upper",
  "upright",
  "uprising",
  "upriver",
  "uproar",
  "uproot",
  "upscale",
  "upside",
  "upstage",
  "upstairs",
  "upstart",
  "upstate",
  "upstream",
  "upstroke",
  "upswing",
  "uptake",
  "uptight",
  "uptown",
  "upturned",
  "upward",
  "upwind",
  "uranium",
  "urban",
  "urchin",
  "urethane",
  "urgency",
  "urgent",
  "urging",
  "urologist",
  "urology",
  "usable",
  "usage",
  "useable",
  "used",
  "uselessly",
  "user",
  "usher",
  "usual",
  "utensil",
  "utility",
  "utilize",
  "utmost",
  "utopia",
  "utter",
  "vacancy",
  "vacant",
  "vacate",
  "vacation",
  "vagabond",
  "vagrancy",
  "vagrantly",
  "vaguely",
  "vagueness",
  "valiant",
  "valid",
  "valium",
  "valley",
  "valuables",
  "value",
  "vanilla",
  "vanish",
  "vanity",
  "vanquish",
  "vantage",
  "vaporizer",
  "variable",
  "variably",
  "varied",
  "variety",
  "various",
  "varmint",
  "varnish",
  "varsity",
  "varying",
  "vascular",
  "vaseline",
  "vastly",
  "vastness",
  "veal",
  "vegan",
  "veggie",
  "vehicular",
  "velcro",
  "velocity",
  "velvet",
  "vendetta",
  "vending",
  "vendor",
  "veneering",
  "vengeful",
  "venomous",
  "ventricle",
  "venture",
  "venue",
  "venus",
  "verbalize",
  "verbally",
  "verbose",
  "verdict",
  "verify",
  "verse",
  "version",
  "versus",
  "vertebrae",
  "vertical",
  "vertigo",
  "very",
  "vessel",
  "vest",
  "veteran",
  "veto",
  "vexingly",
  "viability",
  "viable",
  "vibes",
  "vice",
  "vicinity",
  "victory",
  "video",
  "viewable",
  "viewer",
  "viewing",
  "viewless",
  "viewpoint",
  "vigorous",
  "village",
  "villain",
  "vindicate",
  "vineyard",
  "vintage",
  "violate",
  "violation",
  "violator",
  "violet",
  "violin",
  "viper",
  "viral",
  "virtual",
  "virtuous",
  "virus",
  "visa",
  "viscosity",
  "viscous",
  "viselike",
  "visible",
  "visibly",
  "vision",
  "visiting",
  "visitor",
  "visor",
  "vista",
  "vitality",
  "vitalize",
  "vitally",
  "vitamins",
  "vivacious",
  "vividly",
  "vividness",
  "vixen",
  "vocalist",
  "vocalize",
  "vocally",
  "vocation",
  "voice",
  "voicing",
  "void",
  "volatile",
  "volley",
  "voltage",
  "volumes",
  "voter",
  "voting",
  "voucher",
  "vowed",
  "vowel",
  "voyage",
  "wackiness",
  "wad",
  "wafer",
  "waffle",
  "waged",
  "wager",
  "wages",
  "waggle",
  "wagon",
  "wake",
  "waking",
  "walk",
  "walmart",
  "walnut",
  "walrus",
  "waltz",
  "wand",
  "wannabe",
  "wanted",
  "wanting",
  "wasabi",
  "washable",
  "washbasin",
  "washboard",
  "washbowl",
  "washcloth",
  "washday",
  "washed",
  "washer",
  "washhouse",
  "washing",
  "washout",
  "washroom",
  "washstand",
  "washtub",
  "wasp",
  "wasting",
  "watch",
  "water",
  "waviness",
  "waving",
  "wavy",
  "whacking",
  "whacky",
  "wham",
  "wharf",
  "wheat",
  "whenever",
  "whiff",
  "whimsical",
  "whinny",
  "whiny",
  "whisking",
  "whoever",
  "whole",
  "whomever",
  "whoopee",
  "whooping",
  "whoops",
  "why",
  "wick",
  "widely",
  "widen",
  "widget",
  "widow",
  "width",
  "wieldable",
  "wielder",
  "wife",
  "wifi",
  "wikipedia",
  "wildcard",
  "wildcat",
  "wilder",
  "wildfire",
  "wildfowl",
  "wildland",
  "wildlife",
  "wildly",
  "wildness",
  "willed",
  "willfully",
  "willing",
  "willow",
  "willpower",
  "wilt",
  "wimp",
  "wince",
  "wincing",
  "wind",
  "wing",
  "winking",
  "winner",
  "winnings",
  "winter",
  "wipe",
  "wired",
  "wireless",
  "wiring",
  "wiry",
  "wisdom",
  "wise",
  "wish",
  "wisplike",
  "wispy",
  "wistful",
  "wizard",
  "wobble",
  "wobbling",
  "wobbly",
  "wok",
  "wolf",
  "wolverine",
  "womanhood",
  "womankind",
  "womanless",
  "womanlike",
  "womanly",
  "womb",
  "woof",
  "wooing",
  "wool",
  "woozy",
  "word",
  "work",
  "worried",
  "worrier",
  "worrisome",
  "worry",
  "worsening",
  "worshiper",
  "worst",
  "wound",
  "woven",
  "wow",
  "wrangle",
  "wrath",
  "wreath",
  "wreckage",
  "wrecker",
  "wrecking",
  "wrench",
  "wriggle",
  "wriggly",
  "wrinkle",
  "wrinkly",
  "wrist",
  "writing",
  "written",
  "wrongdoer",
  "wronged",
  "wrongful",
  "wrongly",
  "wrongness",
  "wrought",
  "xbox",
  "xerox",
  "yahoo",
  "yam",
  "yanking",
  "yapping",
  "yard",
  "yarn",
  "yeah",
  "yearbook",
  "yearling",
  "yearly",
  "yearning",
  "yeast",
  "yelling",
  "yelp",
  "yen",
  "yesterday",
  "yiddish",
  "yield",
  "yin",
  "yippee",
  "yo-yo",
  "yodel",
  "yoga",
  "yogurt",
  "yonder",
  "yoyo",
  "yummy",
  "zap",
  "zealous",
  "zebra",
  "zen",
  "zeppelin",
  "zero",
  "zestfully",
  "zesty",
  "zigzagged",
  "zipfile",
  "zipping",
  "zippy",
  "zips",
  "zit",
  "zodiac",
  "zombie",
  "zone",
  "zoning",
  "zookeeper",
  "zoologist",
  "zoology",
  "zoom"
];
Object.defineProperty(newSecureWords$1, "__esModule", { value: true });
newSecureWords$1.newSecureWords = void 0;
const getSecureRandom_1$1 = getSecureRandom;
const wordlist_1$1 = wordlist$1;
async function newSecureWords(size2 = 6) {
  let words = [];
  for (let i2 = 0; i2 < size2; i2++) {
    words.push(wordlist_1$1.wordlist[await (0, getSecureRandom_1$1.getSecureRandomNumber)(0, wordlist_1$1.wordlist.length)]);
  }
  return words;
}
newSecureWords$1.newSecureWords = newSecureWords;
var newSecurePassphrase = {};
var hasRequiredNewSecurePassphrase;
function requireNewSecurePassphrase() {
  if (hasRequiredNewSecurePassphrase)
    return newSecurePassphrase;
  hasRequiredNewSecurePassphrase = 1;
  Object.defineProperty(newSecurePassphrase, "__esModule", { value: true });
  newSecurePassphrase.newSecurePassphrase = void 0;
  const __1 = requireDist();
  async function newSecurePassphrase$1(size2 = 6) {
    return (await (0, __1.newSecureWords)(size2)).join("-");
  }
  newSecurePassphrase.newSecurePassphrase = newSecurePassphrase$1;
  return newSecurePassphrase;
}
var mnemonic = {};
var binary = {};
Object.defineProperty(binary, "__esModule", { value: true });
binary.bitsToBytes = binary.bytesToBits = binary.lpad = void 0;
function lpad(str, padString, length) {
  while (str.length < length) {
    str = padString + str;
  }
  return str;
}
binary.lpad = lpad;
function bytesToBits(bytes) {
  let res = "";
  for (let i2 = 0; i2 < bytes.length; i2++) {
    let x2 = bytes.at(i2);
    res += lpad(x2.toString(2), "0", 8);
  }
  return res;
}
binary.bytesToBits = bytesToBits;
function bitsToBytes(src2) {
  if (src2.length % 8 !== 0) {
    throw Error("Uneven bits");
  }
  let res = [];
  while (src2.length > 0) {
    res.push(parseInt(src2.slice(0, 8), 2));
    src2 = src2.slice(8);
  }
  return buffer$1.Buffer.from(res);
}
binary.bitsToBytes = bitsToBytes;
var wordlist = {};
Object.defineProperty(wordlist, "__esModule", { value: true });
wordlist.wordlist = void 0;
const EN = [
  "abandon",
  "ability",
  "able",
  "about",
  "above",
  "absent",
  "absorb",
  "abstract",
  "absurd",
  "abuse",
  "access",
  "accident",
  "account",
  "accuse",
  "achieve",
  "acid",
  "acoustic",
  "acquire",
  "across",
  "act",
  "action",
  "actor",
  "actress",
  "actual",
  "adapt",
  "add",
  "addict",
  "address",
  "adjust",
  "admit",
  "adult",
  "advance",
  "advice",
  "aerobic",
  "affair",
  "afford",
  "afraid",
  "again",
  "age",
  "agent",
  "agree",
  "ahead",
  "aim",
  "air",
  "airport",
  "aisle",
  "alarm",
  "album",
  "alcohol",
  "alert",
  "alien",
  "all",
  "alley",
  "allow",
  "almost",
  "alone",
  "alpha",
  "already",
  "also",
  "alter",
  "always",
  "amateur",
  "amazing",
  "among",
  "amount",
  "amused",
  "analyst",
  "anchor",
  "ancient",
  "anger",
  "angle",
  "angry",
  "animal",
  "ankle",
  "announce",
  "annual",
  "another",
  "answer",
  "antenna",
  "antique",
  "anxiety",
  "any",
  "apart",
  "apology",
  "appear",
  "apple",
  "approve",
  "april",
  "arch",
  "arctic",
  "area",
  "arena",
  "argue",
  "arm",
  "armed",
  "armor",
  "army",
  "around",
  "arrange",
  "arrest",
  "arrive",
  "arrow",
  "art",
  "artefact",
  "artist",
  "artwork",
  "ask",
  "aspect",
  "assault",
  "asset",
  "assist",
  "assume",
  "asthma",
  "athlete",
  "atom",
  "attack",
  "attend",
  "attitude",
  "attract",
  "auction",
  "audit",
  "august",
  "aunt",
  "author",
  "auto",
  "autumn",
  "average",
  "avocado",
  "avoid",
  "awake",
  "aware",
  "away",
  "awesome",
  "awful",
  "awkward",
  "axis",
  "baby",
  "bachelor",
  "bacon",
  "badge",
  "bag",
  "balance",
  "balcony",
  "ball",
  "bamboo",
  "banana",
  "banner",
  "bar",
  "barely",
  "bargain",
  "barrel",
  "base",
  "basic",
  "basket",
  "battle",
  "beach",
  "bean",
  "beauty",
  "because",
  "become",
  "beef",
  "before",
  "begin",
  "behave",
  "behind",
  "believe",
  "below",
  "belt",
  "bench",
  "benefit",
  "best",
  "betray",
  "better",
  "between",
  "beyond",
  "bicycle",
  "bid",
  "bike",
  "bind",
  "biology",
  "bird",
  "birth",
  "bitter",
  "black",
  "blade",
  "blame",
  "blanket",
  "blast",
  "bleak",
  "bless",
  "blind",
  "blood",
  "blossom",
  "blouse",
  "blue",
  "blur",
  "blush",
  "board",
  "boat",
  "body",
  "boil",
  "bomb",
  "bone",
  "bonus",
  "book",
  "boost",
  "border",
  "boring",
  "borrow",
  "boss",
  "bottom",
  "bounce",
  "box",
  "boy",
  "bracket",
  "brain",
  "brand",
  "brass",
  "brave",
  "bread",
  "breeze",
  "brick",
  "bridge",
  "brief",
  "bright",
  "bring",
  "brisk",
  "broccoli",
  "broken",
  "bronze",
  "broom",
  "brother",
  "brown",
  "brush",
  "bubble",
  "buddy",
  "budget",
  "buffalo",
  "build",
  "bulb",
  "bulk",
  "bullet",
  "bundle",
  "bunker",
  "burden",
  "burger",
  "burst",
  "bus",
  "business",
  "busy",
  "butter",
  "buyer",
  "buzz",
  "cabbage",
  "cabin",
  "cable",
  "cactus",
  "cage",
  "cake",
  "call",
  "calm",
  "camera",
  "camp",
  "can",
  "canal",
  "cancel",
  "candy",
  "cannon",
  "canoe",
  "canvas",
  "canyon",
  "capable",
  "capital",
  "captain",
  "car",
  "carbon",
  "card",
  "cargo",
  "carpet",
  "carry",
  "cart",
  "case",
  "cash",
  "casino",
  "castle",
  "casual",
  "cat",
  "catalog",
  "catch",
  "category",
  "cattle",
  "caught",
  "cause",
  "caution",
  "cave",
  "ceiling",
  "celery",
  "cement",
  "census",
  "century",
  "cereal",
  "certain",
  "chair",
  "chalk",
  "champion",
  "change",
  "chaos",
  "chapter",
  "charge",
  "chase",
  "chat",
  "cheap",
  "check",
  "cheese",
  "chef",
  "cherry",
  "chest",
  "chicken",
  "chief",
  "child",
  "chimney",
  "choice",
  "choose",
  "chronic",
  "chuckle",
  "chunk",
  "churn",
  "cigar",
  "cinnamon",
  "circle",
  "citizen",
  "city",
  "civil",
  "claim",
  "clap",
  "clarify",
  "claw",
  "clay",
  "clean",
  "clerk",
  "clever",
  "click",
  "client",
  "cliff",
  "climb",
  "clinic",
  "clip",
  "clock",
  "clog",
  "close",
  "cloth",
  "cloud",
  "clown",
  "club",
  "clump",
  "cluster",
  "clutch",
  "coach",
  "coast",
  "coconut",
  "code",
  "coffee",
  "coil",
  "coin",
  "collect",
  "color",
  "column",
  "combine",
  "come",
  "comfort",
  "comic",
  "common",
  "company",
  "concert",
  "conduct",
  "confirm",
  "congress",
  "connect",
  "consider",
  "control",
  "convince",
  "cook",
  "cool",
  "copper",
  "copy",
  "coral",
  "core",
  "corn",
  "correct",
  "cost",
  "cotton",
  "couch",
  "country",
  "couple",
  "course",
  "cousin",
  "cover",
  "coyote",
  "crack",
  "cradle",
  "craft",
  "cram",
  "crane",
  "crash",
  "crater",
  "crawl",
  "crazy",
  "cream",
  "credit",
  "creek",
  "crew",
  "cricket",
  "crime",
  "crisp",
  "critic",
  "crop",
  "cross",
  "crouch",
  "crowd",
  "crucial",
  "cruel",
  "cruise",
  "crumble",
  "crunch",
  "crush",
  "cry",
  "crystal",
  "cube",
  "culture",
  "cup",
  "cupboard",
  "curious",
  "current",
  "curtain",
  "curve",
  "cushion",
  "custom",
  "cute",
  "cycle",
  "dad",
  "damage",
  "damp",
  "dance",
  "danger",
  "daring",
  "dash",
  "daughter",
  "dawn",
  "day",
  "deal",
  "debate",
  "debris",
  "decade",
  "december",
  "decide",
  "decline",
  "decorate",
  "decrease",
  "deer",
  "defense",
  "define",
  "defy",
  "degree",
  "delay",
  "deliver",
  "demand",
  "demise",
  "denial",
  "dentist",
  "deny",
  "depart",
  "depend",
  "deposit",
  "depth",
  "deputy",
  "derive",
  "describe",
  "desert",
  "design",
  "desk",
  "despair",
  "destroy",
  "detail",
  "detect",
  "develop",
  "device",
  "devote",
  "diagram",
  "dial",
  "diamond",
  "diary",
  "dice",
  "diesel",
  "diet",
  "differ",
  "digital",
  "dignity",
  "dilemma",
  "dinner",
  "dinosaur",
  "direct",
  "dirt",
  "disagree",
  "discover",
  "disease",
  "dish",
  "dismiss",
  "disorder",
  "display",
  "distance",
  "divert",
  "divide",
  "divorce",
  "dizzy",
  "doctor",
  "document",
  "dog",
  "doll",
  "dolphin",
  "domain",
  "donate",
  "donkey",
  "donor",
  "door",
  "dose",
  "double",
  "dove",
  "draft",
  "dragon",
  "drama",
  "drastic",
  "draw",
  "dream",
  "dress",
  "drift",
  "drill",
  "drink",
  "drip",
  "drive",
  "drop",
  "drum",
  "dry",
  "duck",
  "dumb",
  "dune",
  "during",
  "dust",
  "dutch",
  "duty",
  "dwarf",
  "dynamic",
  "eager",
  "eagle",
  "early",
  "earn",
  "earth",
  "easily",
  "east",
  "easy",
  "echo",
  "ecology",
  "economy",
  "edge",
  "edit",
  "educate",
  "effort",
  "egg",
  "eight",
  "either",
  "elbow",
  "elder",
  "electric",
  "elegant",
  "element",
  "elephant",
  "elevator",
  "elite",
  "else",
  "embark",
  "embody",
  "embrace",
  "emerge",
  "emotion",
  "employ",
  "empower",
  "empty",
  "enable",
  "enact",
  "end",
  "endless",
  "endorse",
  "enemy",
  "energy",
  "enforce",
  "engage",
  "engine",
  "enhance",
  "enjoy",
  "enlist",
  "enough",
  "enrich",
  "enroll",
  "ensure",
  "enter",
  "entire",
  "entry",
  "envelope",
  "episode",
  "equal",
  "equip",
  "era",
  "erase",
  "erode",
  "erosion",
  "error",
  "erupt",
  "escape",
  "essay",
  "essence",
  "estate",
  "eternal",
  "ethics",
  "evidence",
  "evil",
  "evoke",
  "evolve",
  "exact",
  "example",
  "excess",
  "exchange",
  "excite",
  "exclude",
  "excuse",
  "execute",
  "exercise",
  "exhaust",
  "exhibit",
  "exile",
  "exist",
  "exit",
  "exotic",
  "expand",
  "expect",
  "expire",
  "explain",
  "expose",
  "express",
  "extend",
  "extra",
  "eye",
  "eyebrow",
  "fabric",
  "face",
  "faculty",
  "fade",
  "faint",
  "faith",
  "fall",
  "false",
  "fame",
  "family",
  "famous",
  "fan",
  "fancy",
  "fantasy",
  "farm",
  "fashion",
  "fat",
  "fatal",
  "father",
  "fatigue",
  "fault",
  "favorite",
  "feature",
  "february",
  "federal",
  "fee",
  "feed",
  "feel",
  "female",
  "fence",
  "festival",
  "fetch",
  "fever",
  "few",
  "fiber",
  "fiction",
  "field",
  "figure",
  "file",
  "film",
  "filter",
  "final",
  "find",
  "fine",
  "finger",
  "finish",
  "fire",
  "firm",
  "first",
  "fiscal",
  "fish",
  "fit",
  "fitness",
  "fix",
  "flag",
  "flame",
  "flash",
  "flat",
  "flavor",
  "flee",
  "flight",
  "flip",
  "float",
  "flock",
  "floor",
  "flower",
  "fluid",
  "flush",
  "fly",
  "foam",
  "focus",
  "fog",
  "foil",
  "fold",
  "follow",
  "food",
  "foot",
  "force",
  "forest",
  "forget",
  "fork",
  "fortune",
  "forum",
  "forward",
  "fossil",
  "foster",
  "found",
  "fox",
  "fragile",
  "frame",
  "frequent",
  "fresh",
  "friend",
  "fringe",
  "frog",
  "front",
  "frost",
  "frown",
  "frozen",
  "fruit",
  "fuel",
  "fun",
  "funny",
  "furnace",
  "fury",
  "future",
  "gadget",
  "gain",
  "galaxy",
  "gallery",
  "game",
  "gap",
  "garage",
  "garbage",
  "garden",
  "garlic",
  "garment",
  "gas",
  "gasp",
  "gate",
  "gather",
  "gauge",
  "gaze",
  "general",
  "genius",
  "genre",
  "gentle",
  "genuine",
  "gesture",
  "ghost",
  "giant",
  "gift",
  "giggle",
  "ginger",
  "giraffe",
  "girl",
  "give",
  "glad",
  "glance",
  "glare",
  "glass",
  "glide",
  "glimpse",
  "globe",
  "gloom",
  "glory",
  "glove",
  "glow",
  "glue",
  "goat",
  "goddess",
  "gold",
  "good",
  "goose",
  "gorilla",
  "gospel",
  "gossip",
  "govern",
  "gown",
  "grab",
  "grace",
  "grain",
  "grant",
  "grape",
  "grass",
  "gravity",
  "great",
  "green",
  "grid",
  "grief",
  "grit",
  "grocery",
  "group",
  "grow",
  "grunt",
  "guard",
  "guess",
  "guide",
  "guilt",
  "guitar",
  "gun",
  "gym",
  "habit",
  "hair",
  "half",
  "hammer",
  "hamster",
  "hand",
  "happy",
  "harbor",
  "hard",
  "harsh",
  "harvest",
  "hat",
  "have",
  "hawk",
  "hazard",
  "head",
  "health",
  "heart",
  "heavy",
  "hedgehog",
  "height",
  "hello",
  "helmet",
  "help",
  "hen",
  "hero",
  "hidden",
  "high",
  "hill",
  "hint",
  "hip",
  "hire",
  "history",
  "hobby",
  "hockey",
  "hold",
  "hole",
  "holiday",
  "hollow",
  "home",
  "honey",
  "hood",
  "hope",
  "horn",
  "horror",
  "horse",
  "hospital",
  "host",
  "hotel",
  "hour",
  "hover",
  "hub",
  "huge",
  "human",
  "humble",
  "humor",
  "hundred",
  "hungry",
  "hunt",
  "hurdle",
  "hurry",
  "hurt",
  "husband",
  "hybrid",
  "ice",
  "icon",
  "idea",
  "identify",
  "idle",
  "ignore",
  "ill",
  "illegal",
  "illness",
  "image",
  "imitate",
  "immense",
  "immune",
  "impact",
  "impose",
  "improve",
  "impulse",
  "inch",
  "include",
  "income",
  "increase",
  "index",
  "indicate",
  "indoor",
  "industry",
  "infant",
  "inflict",
  "inform",
  "inhale",
  "inherit",
  "initial",
  "inject",
  "injury",
  "inmate",
  "inner",
  "innocent",
  "input",
  "inquiry",
  "insane",
  "insect",
  "inside",
  "inspire",
  "install",
  "intact",
  "interest",
  "into",
  "invest",
  "invite",
  "involve",
  "iron",
  "island",
  "isolate",
  "issue",
  "item",
  "ivory",
  "jacket",
  "jaguar",
  "jar",
  "jazz",
  "jealous",
  "jeans",
  "jelly",
  "jewel",
  "job",
  "join",
  "joke",
  "journey",
  "joy",
  "judge",
  "juice",
  "jump",
  "jungle",
  "junior",
  "junk",
  "just",
  "kangaroo",
  "keen",
  "keep",
  "ketchup",
  "key",
  "kick",
  "kid",
  "kidney",
  "kind",
  "kingdom",
  "kiss",
  "kit",
  "kitchen",
  "kite",
  "kitten",
  "kiwi",
  "knee",
  "knife",
  "knock",
  "know",
  "lab",
  "label",
  "labor",
  "ladder",
  "lady",
  "lake",
  "lamp",
  "language",
  "laptop",
  "large",
  "later",
  "latin",
  "laugh",
  "laundry",
  "lava",
  "law",
  "lawn",
  "lawsuit",
  "layer",
  "lazy",
  "leader",
  "leaf",
  "learn",
  "leave",
  "lecture",
  "left",
  "leg",
  "legal",
  "legend",
  "leisure",
  "lemon",
  "lend",
  "length",
  "lens",
  "leopard",
  "lesson",
  "letter",
  "level",
  "liar",
  "liberty",
  "library",
  "license",
  "life",
  "lift",
  "light",
  "like",
  "limb",
  "limit",
  "link",
  "lion",
  "liquid",
  "list",
  "little",
  "live",
  "lizard",
  "load",
  "loan",
  "lobster",
  "local",
  "lock",
  "logic",
  "lonely",
  "long",
  "loop",
  "lottery",
  "loud",
  "lounge",
  "love",
  "loyal",
  "lucky",
  "luggage",
  "lumber",
  "lunar",
  "lunch",
  "luxury",
  "lyrics",
  "machine",
  "mad",
  "magic",
  "magnet",
  "maid",
  "mail",
  "main",
  "major",
  "make",
  "mammal",
  "man",
  "manage",
  "mandate",
  "mango",
  "mansion",
  "manual",
  "maple",
  "marble",
  "march",
  "margin",
  "marine",
  "market",
  "marriage",
  "mask",
  "mass",
  "master",
  "match",
  "material",
  "math",
  "matrix",
  "matter",
  "maximum",
  "maze",
  "meadow",
  "mean",
  "measure",
  "meat",
  "mechanic",
  "medal",
  "media",
  "melody",
  "melt",
  "member",
  "memory",
  "mention",
  "menu",
  "mercy",
  "merge",
  "merit",
  "merry",
  "mesh",
  "message",
  "metal",
  "method",
  "middle",
  "midnight",
  "milk",
  "million",
  "mimic",
  "mind",
  "minimum",
  "minor",
  "minute",
  "miracle",
  "mirror",
  "misery",
  "miss",
  "mistake",
  "mix",
  "mixed",
  "mixture",
  "mobile",
  "model",
  "modify",
  "mom",
  "moment",
  "monitor",
  "monkey",
  "monster",
  "month",
  "moon",
  "moral",
  "more",
  "morning",
  "mosquito",
  "mother",
  "motion",
  "motor",
  "mountain",
  "mouse",
  "move",
  "movie",
  "much",
  "muffin",
  "mule",
  "multiply",
  "muscle",
  "museum",
  "mushroom",
  "music",
  "must",
  "mutual",
  "myself",
  "mystery",
  "myth",
  "naive",
  "name",
  "napkin",
  "narrow",
  "nasty",
  "nation",
  "nature",
  "near",
  "neck",
  "need",
  "negative",
  "neglect",
  "neither",
  "nephew",
  "nerve",
  "nest",
  "net",
  "network",
  "neutral",
  "never",
  "news",
  "next",
  "nice",
  "night",
  "noble",
  "noise",
  "nominee",
  "noodle",
  "normal",
  "north",
  "nose",
  "notable",
  "note",
  "nothing",
  "notice",
  "novel",
  "now",
  "nuclear",
  "number",
  "nurse",
  "nut",
  "oak",
  "obey",
  "object",
  "oblige",
  "obscure",
  "observe",
  "obtain",
  "obvious",
  "occur",
  "ocean",
  "october",
  "odor",
  "off",
  "offer",
  "office",
  "often",
  "oil",
  "okay",
  "old",
  "olive",
  "olympic",
  "omit",
  "once",
  "one",
  "onion",
  "online",
  "only",
  "open",
  "opera",
  "opinion",
  "oppose",
  "option",
  "orange",
  "orbit",
  "orchard",
  "order",
  "ordinary",
  "organ",
  "orient",
  "original",
  "orphan",
  "ostrich",
  "other",
  "outdoor",
  "outer",
  "output",
  "outside",
  "oval",
  "oven",
  "over",
  "own",
  "owner",
  "oxygen",
  "oyster",
  "ozone",
  "pact",
  "paddle",
  "page",
  "pair",
  "palace",
  "palm",
  "panda",
  "panel",
  "panic",
  "panther",
  "paper",
  "parade",
  "parent",
  "park",
  "parrot",
  "party",
  "pass",
  "patch",
  "path",
  "patient",
  "patrol",
  "pattern",
  "pause",
  "pave",
  "payment",
  "peace",
  "peanut",
  "pear",
  "peasant",
  "pelican",
  "pen",
  "penalty",
  "pencil",
  "people",
  "pepper",
  "perfect",
  "permit",
  "person",
  "pet",
  "phone",
  "photo",
  "phrase",
  "physical",
  "piano",
  "picnic",
  "picture",
  "piece",
  "pig",
  "pigeon",
  "pill",
  "pilot",
  "pink",
  "pioneer",
  "pipe",
  "pistol",
  "pitch",
  "pizza",
  "place",
  "planet",
  "plastic",
  "plate",
  "play",
  "please",
  "pledge",
  "pluck",
  "plug",
  "plunge",
  "poem",
  "poet",
  "point",
  "polar",
  "pole",
  "police",
  "pond",
  "pony",
  "pool",
  "popular",
  "portion",
  "position",
  "possible",
  "post",
  "potato",
  "pottery",
  "poverty",
  "powder",
  "power",
  "practice",
  "praise",
  "predict",
  "prefer",
  "prepare",
  "present",
  "pretty",
  "prevent",
  "price",
  "pride",
  "primary",
  "print",
  "priority",
  "prison",
  "private",
  "prize",
  "problem",
  "process",
  "produce",
  "profit",
  "program",
  "project",
  "promote",
  "proof",
  "property",
  "prosper",
  "protect",
  "proud",
  "provide",
  "public",
  "pudding",
  "pull",
  "pulp",
  "pulse",
  "pumpkin",
  "punch",
  "pupil",
  "puppy",
  "purchase",
  "purity",
  "purpose",
  "purse",
  "push",
  "put",
  "puzzle",
  "pyramid",
  "quality",
  "quantum",
  "quarter",
  "question",
  "quick",
  "quit",
  "quiz",
  "quote",
  "rabbit",
  "raccoon",
  "race",
  "rack",
  "radar",
  "radio",
  "rail",
  "rain",
  "raise",
  "rally",
  "ramp",
  "ranch",
  "random",
  "range",
  "rapid",
  "rare",
  "rate",
  "rather",
  "raven",
  "raw",
  "razor",
  "ready",
  "real",
  "reason",
  "rebel",
  "rebuild",
  "recall",
  "receive",
  "recipe",
  "record",
  "recycle",
  "reduce",
  "reflect",
  "reform",
  "refuse",
  "region",
  "regret",
  "regular",
  "reject",
  "relax",
  "release",
  "relief",
  "rely",
  "remain",
  "remember",
  "remind",
  "remove",
  "render",
  "renew",
  "rent",
  "reopen",
  "repair",
  "repeat",
  "replace",
  "report",
  "require",
  "rescue",
  "resemble",
  "resist",
  "resource",
  "response",
  "result",
  "retire",
  "retreat",
  "return",
  "reunion",
  "reveal",
  "review",
  "reward",
  "rhythm",
  "rib",
  "ribbon",
  "rice",
  "rich",
  "ride",
  "ridge",
  "rifle",
  "right",
  "rigid",
  "ring",
  "riot",
  "ripple",
  "risk",
  "ritual",
  "rival",
  "river",
  "road",
  "roast",
  "robot",
  "robust",
  "rocket",
  "romance",
  "roof",
  "rookie",
  "room",
  "rose",
  "rotate",
  "rough",
  "round",
  "route",
  "royal",
  "rubber",
  "rude",
  "rug",
  "rule",
  "run",
  "runway",
  "rural",
  "sad",
  "saddle",
  "sadness",
  "safe",
  "sail",
  "salad",
  "salmon",
  "salon",
  "salt",
  "salute",
  "same",
  "sample",
  "sand",
  "satisfy",
  "satoshi",
  "sauce",
  "sausage",
  "save",
  "say",
  "scale",
  "scan",
  "scare",
  "scatter",
  "scene",
  "scheme",
  "school",
  "science",
  "scissors",
  "scorpion",
  "scout",
  "scrap",
  "screen",
  "script",
  "scrub",
  "sea",
  "search",
  "season",
  "seat",
  "second",
  "secret",
  "section",
  "security",
  "seed",
  "seek",
  "segment",
  "select",
  "sell",
  "seminar",
  "senior",
  "sense",
  "sentence",
  "series",
  "service",
  "session",
  "settle",
  "setup",
  "seven",
  "shadow",
  "shaft",
  "shallow",
  "share",
  "shed",
  "shell",
  "sheriff",
  "shield",
  "shift",
  "shine",
  "ship",
  "shiver",
  "shock",
  "shoe",
  "shoot",
  "shop",
  "short",
  "shoulder",
  "shove",
  "shrimp",
  "shrug",
  "shuffle",
  "shy",
  "sibling",
  "sick",
  "side",
  "siege",
  "sight",
  "sign",
  "silent",
  "silk",
  "silly",
  "silver",
  "similar",
  "simple",
  "since",
  "sing",
  "siren",
  "sister",
  "situate",
  "six",
  "size",
  "skate",
  "sketch",
  "ski",
  "skill",
  "skin",
  "skirt",
  "skull",
  "slab",
  "slam",
  "sleep",
  "slender",
  "slice",
  "slide",
  "slight",
  "slim",
  "slogan",
  "slot",
  "slow",
  "slush",
  "small",
  "smart",
  "smile",
  "smoke",
  "smooth",
  "snack",
  "snake",
  "snap",
  "sniff",
  "snow",
  "soap",
  "soccer",
  "social",
  "sock",
  "soda",
  "soft",
  "solar",
  "soldier",
  "solid",
  "solution",
  "solve",
  "someone",
  "song",
  "soon",
  "sorry",
  "sort",
  "soul",
  "sound",
  "soup",
  "source",
  "south",
  "space",
  "spare",
  "spatial",
  "spawn",
  "speak",
  "special",
  "speed",
  "spell",
  "spend",
  "sphere",
  "spice",
  "spider",
  "spike",
  "spin",
  "spirit",
  "split",
  "spoil",
  "sponsor",
  "spoon",
  "sport",
  "spot",
  "spray",
  "spread",
  "spring",
  "spy",
  "square",
  "squeeze",
  "squirrel",
  "stable",
  "stadium",
  "staff",
  "stage",
  "stairs",
  "stamp",
  "stand",
  "start",
  "state",
  "stay",
  "steak",
  "steel",
  "stem",
  "step",
  "stereo",
  "stick",
  "still",
  "sting",
  "stock",
  "stomach",
  "stone",
  "stool",
  "story",
  "stove",
  "strategy",
  "street",
  "strike",
  "strong",
  "struggle",
  "student",
  "stuff",
  "stumble",
  "style",
  "subject",
  "submit",
  "subway",
  "success",
  "such",
  "sudden",
  "suffer",
  "sugar",
  "suggest",
  "suit",
  "summer",
  "sun",
  "sunny",
  "sunset",
  "super",
  "supply",
  "supreme",
  "sure",
  "surface",
  "surge",
  "surprise",
  "surround",
  "survey",
  "suspect",
  "sustain",
  "swallow",
  "swamp",
  "swap",
  "swarm",
  "swear",
  "sweet",
  "swift",
  "swim",
  "swing",
  "switch",
  "sword",
  "symbol",
  "symptom",
  "syrup",
  "system",
  "table",
  "tackle",
  "tag",
  "tail",
  "talent",
  "talk",
  "tank",
  "tape",
  "target",
  "task",
  "taste",
  "tattoo",
  "taxi",
  "teach",
  "team",
  "tell",
  "ten",
  "tenant",
  "tennis",
  "tent",
  "term",
  "test",
  "text",
  "thank",
  "that",
  "theme",
  "then",
  "theory",
  "there",
  "they",
  "thing",
  "this",
  "thought",
  "three",
  "thrive",
  "throw",
  "thumb",
  "thunder",
  "ticket",
  "tide",
  "tiger",
  "tilt",
  "timber",
  "time",
  "tiny",
  "tip",
  "tired",
  "tissue",
  "title",
  "toast",
  "tobacco",
  "today",
  "toddler",
  "toe",
  "together",
  "toilet",
  "token",
  "tomato",
  "tomorrow",
  "tone",
  "tongue",
  "tonight",
  "tool",
  "tooth",
  "top",
  "topic",
  "topple",
  "torch",
  "tornado",
  "tortoise",
  "toss",
  "total",
  "tourist",
  "toward",
  "tower",
  "town",
  "toy",
  "track",
  "trade",
  "traffic",
  "tragic",
  "train",
  "transfer",
  "trap",
  "trash",
  "travel",
  "tray",
  "treat",
  "tree",
  "trend",
  "trial",
  "tribe",
  "trick",
  "trigger",
  "trim",
  "trip",
  "trophy",
  "trouble",
  "truck",
  "true",
  "truly",
  "trumpet",
  "trust",
  "truth",
  "try",
  "tube",
  "tuition",
  "tumble",
  "tuna",
  "tunnel",
  "turkey",
  "turn",
  "turtle",
  "twelve",
  "twenty",
  "twice",
  "twin",
  "twist",
  "two",
  "type",
  "typical",
  "ugly",
  "umbrella",
  "unable",
  "unaware",
  "uncle",
  "uncover",
  "under",
  "undo",
  "unfair",
  "unfold",
  "unhappy",
  "uniform",
  "unique",
  "unit",
  "universe",
  "unknown",
  "unlock",
  "until",
  "unusual",
  "unveil",
  "update",
  "upgrade",
  "uphold",
  "upon",
  "upper",
  "upset",
  "urban",
  "urge",
  "usage",
  "use",
  "used",
  "useful",
  "useless",
  "usual",
  "utility",
  "vacant",
  "vacuum",
  "vague",
  "valid",
  "valley",
  "valve",
  "van",
  "vanish",
  "vapor",
  "various",
  "vast",
  "vault",
  "vehicle",
  "velvet",
  "vendor",
  "venture",
  "venue",
  "verb",
  "verify",
  "version",
  "very",
  "vessel",
  "veteran",
  "viable",
  "vibrant",
  "vicious",
  "victory",
  "video",
  "view",
  "village",
  "vintage",
  "violin",
  "virtual",
  "virus",
  "visa",
  "visit",
  "visual",
  "vital",
  "vivid",
  "vocal",
  "voice",
  "void",
  "volcano",
  "volume",
  "vote",
  "voyage",
  "wage",
  "wagon",
  "wait",
  "walk",
  "wall",
  "walnut",
  "want",
  "warfare",
  "warm",
  "warrior",
  "wash",
  "wasp",
  "waste",
  "water",
  "wave",
  "way",
  "wealth",
  "weapon",
  "wear",
  "weasel",
  "weather",
  "web",
  "wedding",
  "weekend",
  "weird",
  "welcome",
  "west",
  "wet",
  "whale",
  "what",
  "wheat",
  "wheel",
  "when",
  "where",
  "whip",
  "whisper",
  "wide",
  "width",
  "wife",
  "wild",
  "will",
  "win",
  "window",
  "wine",
  "wing",
  "wink",
  "winner",
  "winter",
  "wire",
  "wisdom",
  "wise",
  "wish",
  "witness",
  "wolf",
  "woman",
  "wonder",
  "wood",
  "wool",
  "word",
  "work",
  "world",
  "worry",
  "worth",
  "wrap",
  "wreck",
  "wrestle",
  "wrist",
  "write",
  "wrong",
  "yard",
  "year",
  "yellow",
  "you",
  "young",
  "youth",
  "zebra",
  "zero",
  "zone",
  "zoo"
];
wordlist.wordlist = EN;
var __importDefault$3 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(mnemonic, "__esModule", { value: true });
mnemonic.mnemonicFromRandomSeed = mnemonic.mnemonicIndexesToBytes = mnemonic.bytesToMnemonics = mnemonic.bytesToMnemonicIndexes = mnemonic.mnemonicNew = mnemonic.mnemonicValidate = mnemonic.mnemonicToHDSeed = mnemonic.mnemonicToWalletKey = mnemonic.mnemonicToPrivateKey = mnemonic.mnemonicToSeed = mnemonic.mnemonicToEntropy = void 0;
const tweetnacl_1$1 = __importDefault$3(naclFastExports);
const getSecureRandom_1 = getSecureRandom;
const hmac_sha512_1$3 = hmac_sha512$1;
const pbkdf2_sha512_1 = pbkdf2_sha512$1;
const binary_1 = binary;
const wordlist_1 = wordlist;
const PBKDF_ITERATIONS = 1e5;
async function isPasswordNeeded(mnemonicArray) {
  const passlessEntropy = await mnemonicToEntropy(mnemonicArray);
  return await isPasswordSeed(passlessEntropy) && !await isBasicSeed(passlessEntropy);
}
function normalizeMnemonic(src2) {
  return src2.map((v2) => v2.toLowerCase().trim());
}
async function isBasicSeed(entropy) {
  const seed = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, "TON seed version", Math.max(1, Math.floor(PBKDF_ITERATIONS / 256)), 64);
  return seed[0] == 0;
}
async function isPasswordSeed(entropy) {
  const seed = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, "TON fast seed version", 1, 64);
  return seed[0] == 1;
}
async function mnemonicToEntropy(mnemonicArray, password) {
  return await (0, hmac_sha512_1$3.hmac_sha512)(mnemonicArray.join(" "), password && password.length > 0 ? password : "");
}
mnemonic.mnemonicToEntropy = mnemonicToEntropy;
async function mnemonicToSeed(mnemonicArray, seed, password) {
  const entropy = await mnemonicToEntropy(mnemonicArray, password);
  return await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, seed, PBKDF_ITERATIONS, 64);
}
mnemonic.mnemonicToSeed = mnemonicToSeed;
async function mnemonicToPrivateKey(mnemonicArray, password) {
  mnemonicArray = normalizeMnemonic(mnemonicArray);
  const seed = await mnemonicToSeed(mnemonicArray, "TON default seed", password);
  let keyPair = tweetnacl_1$1.default.sign.keyPair.fromSeed(seed.slice(0, 32));
  return {
    publicKey: buffer$1.Buffer.from(keyPair.publicKey),
    secretKey: buffer$1.Buffer.from(keyPair.secretKey)
  };
}
mnemonic.mnemonicToPrivateKey = mnemonicToPrivateKey;
async function mnemonicToWalletKey(mnemonicArray, password) {
  let seedPk = await mnemonicToPrivateKey(mnemonicArray, password);
  let seedSecret = seedPk.secretKey.slice(0, 32);
  const keyPair = tweetnacl_1$1.default.sign.keyPair.fromSeed(seedSecret);
  return {
    publicKey: buffer$1.Buffer.from(keyPair.publicKey),
    secretKey: buffer$1.Buffer.from(keyPair.secretKey)
  };
}
mnemonic.mnemonicToWalletKey = mnemonicToWalletKey;
async function mnemonicToHDSeed(mnemonicArray, password) {
  mnemonicArray = normalizeMnemonic(mnemonicArray);
  return await mnemonicToSeed(mnemonicArray, "TON HD Keys seed", password);
}
mnemonic.mnemonicToHDSeed = mnemonicToHDSeed;
async function mnemonicValidate(mnemonicArray, password) {
  mnemonicArray = normalizeMnemonic(mnemonicArray);
  for (let word of mnemonicArray) {
    if (wordlist_1.wordlist.indexOf(word) < 0) {
      return false;
    }
  }
  if (password && password.length > 0) {
    if (!await isPasswordNeeded(mnemonicArray)) {
      return false;
    }
  }
  return await isBasicSeed(await mnemonicToEntropy(mnemonicArray, password));
}
mnemonic.mnemonicValidate = mnemonicValidate;
async function mnemonicNew(wordsCount = 24, password) {
  let mnemonicArray = [];
  while (true) {
    mnemonicArray = [];
    for (let i2 = 0; i2 < wordsCount; i2++) {
      let ind = await (0, getSecureRandom_1.getSecureRandomNumber)(0, wordlist_1.wordlist.length);
      mnemonicArray.push(wordlist_1.wordlist[ind]);
    }
    if (password && password.length > 0) {
      if (!await isPasswordNeeded(mnemonicArray)) {
        continue;
      }
    }
    if (!await isBasicSeed(await mnemonicToEntropy(mnemonicArray, password))) {
      continue;
    }
    break;
  }
  return mnemonicArray;
}
mnemonic.mnemonicNew = mnemonicNew;
function bytesToMnemonicIndexes(src2, wordsCount) {
  let bits = (0, binary_1.bytesToBits)(src2);
  let indexes = [];
  for (let i2 = 0; i2 < wordsCount; i2++) {
    let sl2 = bits.slice(i2 * 11, i2 * 11 + 11);
    indexes.push(parseInt(sl2, 2));
  }
  return indexes;
}
mnemonic.bytesToMnemonicIndexes = bytesToMnemonicIndexes;
function bytesToMnemonics(src2, wordsCount) {
  let mnemonics2 = bytesToMnemonicIndexes(src2, wordsCount);
  let res = [];
  for (let m2 of mnemonics2) {
    res.push(wordlist_1.wordlist[m2]);
  }
  return res;
}
mnemonic.bytesToMnemonics = bytesToMnemonics;
function mnemonicIndexesToBytes(src2) {
  let res = "";
  for (let s2 of src2) {
    if (!Number.isSafeInteger(s2)) {
      throw Error("Invalid input");
    }
    if (s2 < 0 || s2 >= 2028) {
      throw Error("Invalid input");
    }
    res += (0, binary_1.lpad)(s2.toString(2), "0", 11);
  }
  while (res.length % 8 !== 0) {
    res = res + "0";
  }
  return (0, binary_1.bitsToBytes)(res);
}
mnemonic.mnemonicIndexesToBytes = mnemonicIndexesToBytes;
async function mnemonicFromRandomSeed(seed, wordsCount = 24, password) {
  const bytesLength = Math.ceil(wordsCount * 11 / 8);
  let currentSeed = seed;
  while (true) {
    let entropy = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(currentSeed, "TON mnemonic seed", Math.max(1, Math.floor(PBKDF_ITERATIONS / 256)), bytesLength);
    let mnemonics2 = bytesToMnemonics(entropy, wordsCount);
    if (await mnemonicValidate(mnemonics2, password)) {
      return mnemonics2;
    }
    currentSeed = entropy;
  }
}
mnemonic.mnemonicFromRandomSeed = mnemonicFromRandomSeed;
var nacl = {};
var __importDefault$2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(nacl, "__esModule", { value: true });
nacl.openBox = nacl.sealBox = nacl.signVerify = nacl.sign = nacl.keyPairFromSeed = nacl.keyPairFromSecretKey = void 0;
const tweetnacl_1 = __importDefault$2(naclFastExports);
function keyPairFromSecretKey(secretKey) {
  let res = tweetnacl_1.default.sign.keyPair.fromSecretKey(new Uint8Array(secretKey));
  return {
    publicKey: buffer$1.Buffer.from(res.publicKey),
    secretKey: buffer$1.Buffer.from(res.secretKey)
  };
}
nacl.keyPairFromSecretKey = keyPairFromSecretKey;
function keyPairFromSeed(secretKey) {
  let res = tweetnacl_1.default.sign.keyPair.fromSeed(new Uint8Array(secretKey));
  return {
    publicKey: buffer$1.Buffer.from(res.publicKey),
    secretKey: buffer$1.Buffer.from(res.secretKey)
  };
}
nacl.keyPairFromSeed = keyPairFromSeed;
function sign(data2, secretKey) {
  return buffer$1.Buffer.from(tweetnacl_1.default.sign.detached(new Uint8Array(data2), new Uint8Array(secretKey)));
}
nacl.sign = sign;
function signVerify(data2, signature2, publicKey) {
  return tweetnacl_1.default.sign.detached.verify(new Uint8Array(data2), new Uint8Array(signature2), new Uint8Array(publicKey));
}
nacl.signVerify = signVerify;
function sealBox(data2, nonce, key2) {
  return buffer$1.Buffer.from(tweetnacl_1.default.secretbox(data2, nonce, key2));
}
nacl.sealBox = sealBox;
function openBox(data2, nonce, key2) {
  let res = tweetnacl_1.default.secretbox.open(data2, nonce, key2);
  if (!res) {
    return null;
  }
  return buffer$1.Buffer.from(res);
}
nacl.openBox = openBox;
var ed25519 = {};
Object.defineProperty(ed25519, "__esModule", { value: true });
ed25519.deriveEd25519Path = ed25519.deriveED25519HardenedKey = ed25519.getED25519MasterKeyFromSeed = void 0;
const hmac_sha512_1$2 = hmac_sha512$1;
const ED25519_CURVE = "ed25519 seed";
const HARDENED_OFFSET$1 = 2147483648;
async function getED25519MasterKeyFromSeed(seed) {
  const I2 = await (0, hmac_sha512_1$2.hmac_sha512)(ED25519_CURVE, seed);
  const IL = I2.slice(0, 32);
  const IR = I2.slice(32);
  return {
    key: IL,
    chainCode: IR
  };
}
ed25519.getED25519MasterKeyFromSeed = getED25519MasterKeyFromSeed;
async function deriveED25519HardenedKey(parent, index2) {
  if (index2 >= HARDENED_OFFSET$1) {
    throw Error("Key index must be less than offset");
  }
  const indexBuffer = buffer$1.Buffer.alloc(4);
  indexBuffer.writeUInt32BE(index2 + HARDENED_OFFSET$1, 0);
  const data2 = buffer$1.Buffer.concat([buffer$1.Buffer.alloc(1, 0), parent.key, indexBuffer]);
  const I2 = await (0, hmac_sha512_1$2.hmac_sha512)(parent.chainCode, data2);
  const IL = I2.slice(0, 32);
  const IR = I2.slice(32);
  return {
    key: IL,
    chainCode: IR
  };
}
ed25519.deriveED25519HardenedKey = deriveED25519HardenedKey;
async function deriveEd25519Path(seed, path) {
  let state2 = await getED25519MasterKeyFromSeed(seed);
  let remaining = [...path];
  while (remaining.length > 0) {
    let index2 = remaining[0];
    remaining = remaining.slice(1);
    state2 = await deriveED25519HardenedKey(state2, index2);
  }
  return state2.key;
}
ed25519.deriveEd25519Path = deriveEd25519Path;
var symmetric = {};
Object.defineProperty(symmetric, "__esModule", { value: true });
symmetric.deriveSymmetricPath = symmetric.deriveSymmetricHardenedKey = symmetric.getSymmetricMasterKeyFromSeed = void 0;
const hmac_sha512_1$1 = hmac_sha512$1;
const SYMMETRIC_SEED = "Symmetric key seed";
async function getSymmetricMasterKeyFromSeed(seed) {
  const I2 = await (0, hmac_sha512_1$1.hmac_sha512)(SYMMETRIC_SEED, seed);
  const IL = I2.slice(32);
  const IR = I2.slice(0, 32);
  return {
    key: IL,
    chainCode: IR
  };
}
symmetric.getSymmetricMasterKeyFromSeed = getSymmetricMasterKeyFromSeed;
async function deriveSymmetricHardenedKey(parent, offset) {
  const data2 = buffer$1.Buffer.concat([buffer$1.Buffer.alloc(1, 0), buffer$1.Buffer.from(offset)]);
  const I2 = await (0, hmac_sha512_1$1.hmac_sha512)(parent.chainCode, data2);
  const IL = I2.slice(32);
  const IR = I2.slice(0, 32);
  return {
    key: IL,
    chainCode: IR
  };
}
symmetric.deriveSymmetricHardenedKey = deriveSymmetricHardenedKey;
async function deriveSymmetricPath(seed, path) {
  let state2 = await getSymmetricMasterKeyFromSeed(seed);
  let remaining = [...path];
  while (remaining.length > 0) {
    let index2 = remaining[0];
    remaining = remaining.slice(1);
    state2 = await deriveSymmetricHardenedKey(state2, index2);
  }
  return state2.key;
}
symmetric.deriveSymmetricPath = deriveSymmetricPath;
var mnemonics = {};
Object.defineProperty(mnemonics, "__esModule", { value: true });
mnemonics.deriveMnemonicsPath = mnemonics.deriveMnemonicHardenedKey = mnemonics.getMnemonicsMasterKeyFromSeed = void 0;
const mnemonic_1 = mnemonic;
const hmac_sha512_1 = hmac_sha512$1;
const HARDENED_OFFSET = 2147483648;
const MNEMONICS_SEED = "TON Mnemonics HD seed";
async function getMnemonicsMasterKeyFromSeed(seed) {
  const I2 = await (0, hmac_sha512_1.hmac_sha512)(MNEMONICS_SEED, seed);
  const IL = I2.slice(0, 32);
  const IR = I2.slice(32);
  return {
    key: IL,
    chainCode: IR
  };
}
mnemonics.getMnemonicsMasterKeyFromSeed = getMnemonicsMasterKeyFromSeed;
async function deriveMnemonicHardenedKey(parent, index2) {
  if (index2 >= HARDENED_OFFSET) {
    throw Error("Key index must be less than offset");
  }
  const indexBuffer = buffer$1.Buffer.alloc(4);
  indexBuffer.writeUInt32BE(index2 + HARDENED_OFFSET, 0);
  const data2 = buffer$1.Buffer.concat([buffer$1.Buffer.alloc(1, 0), parent.key, indexBuffer]);
  const I2 = await (0, hmac_sha512_1.hmac_sha512)(parent.chainCode, data2);
  const IL = I2.slice(0, 32);
  const IR = I2.slice(32);
  return {
    key: IL,
    chainCode: IR
  };
}
mnemonics.deriveMnemonicHardenedKey = deriveMnemonicHardenedKey;
async function deriveMnemonicsPath(seed, path, wordsCount = 24, password) {
  let state2 = await getMnemonicsMasterKeyFromSeed(seed);
  let remaining = [...path];
  while (remaining.length > 0) {
    let index2 = remaining[0];
    remaining = remaining.slice(1);
    state2 = await deriveMnemonicHardenedKey(state2, index2);
  }
  return await (0, mnemonic_1.mnemonicFromRandomSeed)(state2.key, wordsCount, password);
}
mnemonics.deriveMnemonicsPath = deriveMnemonicsPath;
var hasRequiredDist;
function requireDist() {
  if (hasRequiredDist)
    return dist;
  hasRequiredDist = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getMnemonicsMasterKeyFromSeed = exports2.deriveMnemonicHardenedKey = exports2.deriveMnemonicsPath = exports2.deriveSymmetricPath = exports2.deriveSymmetricHardenedKey = exports2.getSymmetricMasterKeyFromSeed = exports2.deriveEd25519Path = exports2.deriveED25519HardenedKey = exports2.getED25519MasterKeyFromSeed = exports2.signVerify = exports2.sign = exports2.keyPairFromSecretKey = exports2.keyPairFromSeed = exports2.openBox = exports2.sealBox = exports2.mnemonicWordList = exports2.mnemonicToHDSeed = exports2.mnemonicToSeed = exports2.mnemonicToWalletKey = exports2.mnemonicToPrivateKey = exports2.mnemonicValidate = exports2.mnemonicNew = exports2.newSecurePassphrase = exports2.newSecureWords = exports2.getSecureRandomNumber = exports2.getSecureRandomWords = exports2.getSecureRandomBytes = exports2.hmac_sha512 = exports2.pbkdf2_sha512 = exports2.sha512_sync = exports2.sha512 = exports2.sha256_sync = exports2.sha256 = void 0;
    var sha256_1 = sha256$3;
    Object.defineProperty(exports2, "sha256", { enumerable: true, get: function() {
      return sha256_1.sha256;
    } });
    Object.defineProperty(exports2, "sha256_sync", { enumerable: true, get: function() {
      return sha256_1.sha256_sync;
    } });
    var sha512_1 = sha512$1;
    Object.defineProperty(exports2, "sha512", { enumerable: true, get: function() {
      return sha512_1.sha512;
    } });
    Object.defineProperty(exports2, "sha512_sync", { enumerable: true, get: function() {
      return sha512_1.sha512_sync;
    } });
    var pbkdf2_sha512_12 = pbkdf2_sha512$1;
    Object.defineProperty(exports2, "pbkdf2_sha512", { enumerable: true, get: function() {
      return pbkdf2_sha512_12.pbkdf2_sha512;
    } });
    var hmac_sha512_12 = hmac_sha512$1;
    Object.defineProperty(exports2, "hmac_sha512", { enumerable: true, get: function() {
      return hmac_sha512_12.hmac_sha512;
    } });
    var getSecureRandom_12 = getSecureRandom;
    Object.defineProperty(exports2, "getSecureRandomBytes", { enumerable: true, get: function() {
      return getSecureRandom_12.getSecureRandomBytes;
    } });
    Object.defineProperty(exports2, "getSecureRandomWords", { enumerable: true, get: function() {
      return getSecureRandom_12.getSecureRandomWords;
    } });
    Object.defineProperty(exports2, "getSecureRandomNumber", { enumerable: true, get: function() {
      return getSecureRandom_12.getSecureRandomNumber;
    } });
    var newSecureWords_1 = newSecureWords$1;
    Object.defineProperty(exports2, "newSecureWords", { enumerable: true, get: function() {
      return newSecureWords_1.newSecureWords;
    } });
    var newSecurePassphrase_1 = requireNewSecurePassphrase();
    Object.defineProperty(exports2, "newSecurePassphrase", { enumerable: true, get: function() {
      return newSecurePassphrase_1.newSecurePassphrase;
    } });
    var mnemonic_12 = mnemonic;
    Object.defineProperty(exports2, "mnemonicNew", { enumerable: true, get: function() {
      return mnemonic_12.mnemonicNew;
    } });
    Object.defineProperty(exports2, "mnemonicValidate", { enumerable: true, get: function() {
      return mnemonic_12.mnemonicValidate;
    } });
    Object.defineProperty(exports2, "mnemonicToPrivateKey", { enumerable: true, get: function() {
      return mnemonic_12.mnemonicToPrivateKey;
    } });
    Object.defineProperty(exports2, "mnemonicToWalletKey", { enumerable: true, get: function() {
      return mnemonic_12.mnemonicToWalletKey;
    } });
    Object.defineProperty(exports2, "mnemonicToSeed", { enumerable: true, get: function() {
      return mnemonic_12.mnemonicToSeed;
    } });
    Object.defineProperty(exports2, "mnemonicToHDSeed", { enumerable: true, get: function() {
      return mnemonic_12.mnemonicToHDSeed;
    } });
    var wordlist_12 = wordlist;
    Object.defineProperty(exports2, "mnemonicWordList", { enumerable: true, get: function() {
      return wordlist_12.wordlist;
    } });
    var nacl_1 = nacl;
    Object.defineProperty(exports2, "sealBox", { enumerable: true, get: function() {
      return nacl_1.sealBox;
    } });
    Object.defineProperty(exports2, "openBox", { enumerable: true, get: function() {
      return nacl_1.openBox;
    } });
    var nacl_2 = nacl;
    Object.defineProperty(exports2, "keyPairFromSeed", { enumerable: true, get: function() {
      return nacl_2.keyPairFromSeed;
    } });
    Object.defineProperty(exports2, "keyPairFromSecretKey", { enumerable: true, get: function() {
      return nacl_2.keyPairFromSecretKey;
    } });
    Object.defineProperty(exports2, "sign", { enumerable: true, get: function() {
      return nacl_2.sign;
    } });
    Object.defineProperty(exports2, "signVerify", { enumerable: true, get: function() {
      return nacl_2.signVerify;
    } });
    var ed25519_1 = ed25519;
    Object.defineProperty(exports2, "getED25519MasterKeyFromSeed", { enumerable: true, get: function() {
      return ed25519_1.getED25519MasterKeyFromSeed;
    } });
    Object.defineProperty(exports2, "deriveED25519HardenedKey", { enumerable: true, get: function() {
      return ed25519_1.deriveED25519HardenedKey;
    } });
    Object.defineProperty(exports2, "deriveEd25519Path", { enumerable: true, get: function() {
      return ed25519_1.deriveEd25519Path;
    } });
    var symmetric_1 = symmetric;
    Object.defineProperty(exports2, "getSymmetricMasterKeyFromSeed", { enumerable: true, get: function() {
      return symmetric_1.getSymmetricMasterKeyFromSeed;
    } });
    Object.defineProperty(exports2, "deriveSymmetricHardenedKey", { enumerable: true, get: function() {
      return symmetric_1.deriveSymmetricHardenedKey;
    } });
    Object.defineProperty(exports2, "deriveSymmetricPath", { enumerable: true, get: function() {
      return symmetric_1.deriveSymmetricPath;
    } });
    var mnemonics_1 = mnemonics;
    Object.defineProperty(exports2, "deriveMnemonicsPath", { enumerable: true, get: function() {
      return mnemonics_1.deriveMnemonicsPath;
    } });
    Object.defineProperty(exports2, "deriveMnemonicHardenedKey", { enumerable: true, get: function() {
      return mnemonics_1.deriveMnemonicHardenedKey;
    } });
    Object.defineProperty(exports2, "getMnemonicsMasterKeyFromSeed", { enumerable: true, get: function() {
      return mnemonics_1.getMnemonicsMasterKeyFromSeed;
    } });
  })(dist);
  return dist;
}
Object.defineProperty(wonderCalculator$1, "__esModule", { value: true });
wonderCalculator$1.wonderCalculator = void 0;
const BitString_1 = requireBitString();
const CellType_1 = CellType;
const LevelMask_1 = LevelMask$1;
const exoticPruned_1 = exoticPruned$1;
const exoticMerkleProof_1 = exoticMerkleProof$1;
const descriptor_1 = descriptor;
const ton_crypto_1$2 = requireDist();
const exoticMerkleUpdate_1 = exoticMerkleUpdate$1;
function wonderCalculator(type2, bits, refs) {
  let levelMask;
  let pruned = null;
  if (type2 === CellType_1.CellType.Ordinary) {
    let mask = 0;
    for (let r2 of refs) {
      mask = mask | r2.mask.value;
    }
    levelMask = new LevelMask_1.LevelMask(mask);
  } else if (type2 === CellType_1.CellType.PrunedBranch) {
    pruned = (0, exoticPruned_1.exoticPruned)(bits, refs);
    levelMask = new LevelMask_1.LevelMask(pruned.mask);
  } else if (type2 === CellType_1.CellType.MerkleProof) {
    (0, exoticMerkleProof_1.exoticMerkleProof)(bits, refs);
    levelMask = new LevelMask_1.LevelMask(refs[0].mask.value >> 1);
  } else if (type2 === CellType_1.CellType.MerkleUpdate) {
    (0, exoticMerkleUpdate_1.exoticMerkleUpdate)(bits, refs);
    levelMask = new LevelMask_1.LevelMask((refs[0].mask.value | refs[1].mask.value) >> 1);
  } else {
    throw new Error("Unsupported exotic type");
  }
  let depths = [];
  let hashes = [];
  let hashCount = type2 === CellType_1.CellType.PrunedBranch ? 1 : levelMask.hashCount;
  let totalHashCount = levelMask.hashCount;
  let hashIOffset = totalHashCount - hashCount;
  for (let levelI = 0, hashI = 0; levelI <= levelMask.level; levelI++) {
    if (!levelMask.isSignificant(levelI)) {
      continue;
    }
    if (hashI < hashIOffset) {
      hashI++;
      continue;
    }
    let currentBits;
    if (hashI === hashIOffset) {
      if (!(levelI === 0 || type2 === CellType_1.CellType.PrunedBranch)) {
        throw Error("Invalid");
      }
      currentBits = bits;
    } else {
      if (!(levelI !== 0 && type2 !== CellType_1.CellType.PrunedBranch)) {
        throw Error("Invalid: " + levelI + ", " + type2);
      }
      currentBits = new BitString_1.BitString(hashes[hashI - hashIOffset - 1], 0, 256);
    }
    let currentDepth = 0;
    for (let c2 of refs) {
      let childDepth;
      if (type2 == CellType_1.CellType.MerkleProof || type2 == CellType_1.CellType.MerkleUpdate) {
        childDepth = c2.depth(levelI + 1);
      } else {
        childDepth = c2.depth(levelI);
      }
      currentDepth = Math.max(currentDepth, childDepth);
    }
    if (refs.length > 0) {
      currentDepth++;
    }
    let repr = (0, descriptor_1.getRepr)(currentBits, refs, levelI, type2);
    let hash2 = (0, ton_crypto_1$2.sha256_sync)(repr);
    let destI = hashI - hashIOffset;
    depths[destI] = currentDepth;
    hashes[destI] = hash2;
    hashI++;
  }
  let resolvedHashes = [];
  let resolvedDepths = [];
  if (pruned) {
    for (let i2 = 0; i2 < 4; i2++) {
      const { hashIndex } = levelMask.apply(i2);
      const { hashIndex: thisHashIndex } = levelMask;
      if (hashIndex !== thisHashIndex) {
        resolvedHashes.push(pruned.pruned[hashIndex].hash);
        resolvedDepths.push(pruned.pruned[hashIndex].depth);
      } else {
        resolvedHashes.push(hashes[0]);
        resolvedDepths.push(depths[0]);
      }
    }
  } else {
    for (let i2 = 0; i2 < 4; i2++) {
      resolvedHashes.push(hashes[levelMask.apply(i2).hashIndex]);
      resolvedDepths.push(depths[levelMask.apply(i2).hashIndex]);
    }
  }
  return {
    mask: levelMask,
    hashes: resolvedHashes,
    depths: resolvedDepths
  };
}
wonderCalculator$1.wonderCalculator = wonderCalculator;
var serialization = {};
var topologicalSort$1 = {};
Object.defineProperty(topologicalSort$1, "__esModule", { value: true });
topologicalSort$1.topologicalSort = void 0;
function topologicalSort(src2) {
  let pending = [src2];
  let allCells = /* @__PURE__ */ new Map();
  let notPermCells = /* @__PURE__ */ new Set();
  let sorted = [];
  while (pending.length > 0) {
    const cells = [...pending];
    pending = [];
    for (let cell of cells) {
      const hash2 = cell.hash().toString("hex");
      if (allCells.has(hash2)) {
        continue;
      }
      notPermCells.add(hash2);
      allCells.set(hash2, { cell, refs: cell.refs.map((v2) => v2.hash().toString("hex")) });
      for (let r2 of cell.refs) {
        pending.push(r2);
      }
    }
  }
  let tempMark = /* @__PURE__ */ new Set();
  function visit(hash2) {
    if (!notPermCells.has(hash2)) {
      return;
    }
    if (tempMark.has(hash2)) {
      throw Error("Not a DAG");
    }
    tempMark.add(hash2);
    for (let c2 of allCells.get(hash2).refs) {
      visit(c2);
    }
    sorted.unshift(hash2);
    tempMark.delete(hash2);
    notPermCells.delete(hash2);
  }
  while (notPermCells.size > 0) {
    const id2 = Array.from(notPermCells)[0];
    visit(id2);
  }
  let indexes = /* @__PURE__ */ new Map();
  for (let i2 = 0; i2 < sorted.length; i2++) {
    indexes.set(sorted[i2], i2);
  }
  let result = [];
  for (let ent of sorted) {
    const rrr = allCells.get(ent);
    result.push({ cell: rrr.cell, refs: rrr.refs.map((v2) => indexes.get(v2)) });
  }
  return result;
}
topologicalSort$1.topologicalSort = topologicalSort;
var bitsForNumber$1 = {};
Object.defineProperty(bitsForNumber$1, "__esModule", { value: true });
bitsForNumber$1.bitsForNumber = void 0;
function bitsForNumber(src2, mode) {
  let v2 = BigInt(src2);
  if (mode === "int") {
    if (v2 === 0n || v2 === -1n) {
      return 1;
    }
    let v22 = v2 > 0 ? v2 : -v2;
    return v22.toString(2).length + 1;
  } else if (mode === "uint") {
    if (v2 < 0) {
      throw Error(`value is negative. Got ${src2}`);
    }
    return v2.toString(2).length;
  } else {
    throw Error(`invalid mode. Got ${mode}`);
  }
}
bitsForNumber$1.bitsForNumber = bitsForNumber;
var crc32c$1 = {};
Object.defineProperty(crc32c$1, "__esModule", { value: true });
crc32c$1.crc32c = void 0;
const POLY = 2197175160;
function crc32c(source) {
  let crc = 0 ^ 4294967295;
  for (let n2 = 0; n2 < source.length; n2++) {
    crc ^= source[n2];
    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
    crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
  }
  crc = crc ^ 4294967295;
  let res = buffer$1.Buffer.alloc(4);
  res.writeInt32LE(crc);
  return res;
}
crc32c$1.crc32c = crc32c;
var hasRequiredSerialization;
function requireSerialization() {
  if (hasRequiredSerialization)
    return serialization;
  hasRequiredSerialization = 1;
  Object.defineProperty(serialization, "__esModule", { value: true });
  serialization.serializeBoc = serialization.deserializeBoc = serialization.parseBoc = void 0;
  const BitReader_12 = BitReader$1;
  const BitString_12 = requireBitString();
  const Cell_12 = requireCell();
  const topologicalSort_1 = topologicalSort$1;
  const bitsForNumber_1 = bitsForNumber$1;
  const BitBuilder_1 = requireBitBuilder();
  const descriptor_12 = descriptor;
  const paddedBits_12 = requirePaddedBits();
  const crc32c_1 = crc32c$1;
  function readCell(reader2, sizeBytes) {
    const d1 = reader2.loadUint(8);
    const refsCount = d1 % 8;
    const exotic = !!(d1 & 8);
    const d2 = reader2.loadUint(8);
    const dataBytesize = Math.ceil(d2 / 2);
    const paddingAdded = !!(d2 % 2);
    let bits = BitString_12.BitString.EMPTY;
    if (dataBytesize > 0) {
      if (paddingAdded) {
        bits = reader2.loadPaddedBits(dataBytesize * 8);
      } else {
        bits = reader2.loadBits(dataBytesize * 8);
      }
    }
    let refs = [];
    for (let i2 = 0; i2 < refsCount; i2++) {
      refs.push(reader2.loadUint(sizeBytes * 8));
    }
    return {
      bits,
      refs,
      exotic
    };
  }
  function calcCellSize(cell, sizeBytes) {
    return 2 + Math.ceil(cell.bits.length / 8) + cell.refs.length * sizeBytes;
  }
  function parseBoc(src2) {
    let reader2 = new BitReader_12.BitReader(new BitString_12.BitString(src2, 0, src2.length * 8));
    let magic = reader2.loadUint(32);
    if (magic === 1761568243) {
      let size2 = reader2.loadUint(8);
      let offBytes = reader2.loadUint(8);
      let cells = reader2.loadUint(size2 * 8);
      let roots = reader2.loadUint(size2 * 8);
      let absent = reader2.loadUint(size2 * 8);
      let totalCellSize = reader2.loadUint(offBytes * 8);
      let index2 = reader2.loadBuffer(cells * offBytes);
      let cellData = reader2.loadBuffer(totalCellSize);
      return {
        size: size2,
        offBytes,
        cells,
        roots,
        absent,
        totalCellSize,
        index: index2,
        cellData,
        root: [0]
      };
    } else if (magic === 2898503464) {
      let size2 = reader2.loadUint(8);
      let offBytes = reader2.loadUint(8);
      let cells = reader2.loadUint(size2 * 8);
      let roots = reader2.loadUint(size2 * 8);
      let absent = reader2.loadUint(size2 * 8);
      let totalCellSize = reader2.loadUint(offBytes * 8);
      let index2 = reader2.loadBuffer(cells * offBytes);
      let cellData = reader2.loadBuffer(totalCellSize);
      let crc32 = reader2.loadBuffer(4);
      if (!(0, crc32c_1.crc32c)(src2.subarray(0, src2.length - 4)).equals(crc32)) {
        throw Error("Invalid CRC32C");
      }
      return {
        size: size2,
        offBytes,
        cells,
        roots,
        absent,
        totalCellSize,
        index: index2,
        cellData,
        root: [0]
      };
    } else if (magic === 3052313714) {
      let hasIdx = reader2.loadUint(1);
      let hasCrc32c = reader2.loadUint(1);
      reader2.loadUint(1);
      reader2.loadUint(2);
      let size2 = reader2.loadUint(3);
      let offBytes = reader2.loadUint(8);
      let cells = reader2.loadUint(size2 * 8);
      let roots = reader2.loadUint(size2 * 8);
      let absent = reader2.loadUint(size2 * 8);
      let totalCellSize = reader2.loadUint(offBytes * 8);
      let root = [];
      for (let i2 = 0; i2 < roots; i2++) {
        root.push(reader2.loadUint(size2 * 8));
      }
      let index2 = null;
      if (hasIdx) {
        index2 = reader2.loadBuffer(cells * offBytes);
      }
      let cellData = reader2.loadBuffer(totalCellSize);
      if (hasCrc32c) {
        let crc32 = reader2.loadBuffer(4);
        if (!(0, crc32c_1.crc32c)(src2.subarray(0, src2.length - 4)).equals(crc32)) {
          throw Error("Invalid CRC32C");
        }
      }
      return {
        size: size2,
        offBytes,
        cells,
        roots,
        absent,
        totalCellSize,
        index: index2,
        cellData,
        root
      };
    } else {
      throw Error("Invalid magic");
    }
  }
  serialization.parseBoc = parseBoc;
  function deserializeBoc(src2) {
    let boc = parseBoc(src2);
    let reader2 = new BitReader_12.BitReader(new BitString_12.BitString(boc.cellData, 0, boc.cellData.length * 8));
    let cells = [];
    for (let i2 = 0; i2 < boc.cells; i2++) {
      let cll = readCell(reader2, boc.size);
      cells.push({ ...cll, result: null });
    }
    for (let i2 = cells.length - 1; i2 >= 0; i2--) {
      if (cells[i2].result) {
        throw Error("Impossible");
      }
      let refs = [];
      for (let r2 of cells[i2].refs) {
        if (!cells[r2].result) {
          throw Error("Invalid BOC file");
        }
        refs.push(cells[r2].result);
      }
      cells[i2].result = new Cell_12.Cell({ bits: cells[i2].bits, refs, exotic: cells[i2].exotic });
    }
    let roots = [];
    for (let i2 = 0; i2 < boc.root.length; i2++) {
      roots.push(cells[boc.root[i2]].result);
    }
    return roots;
  }
  serialization.deserializeBoc = deserializeBoc;
  function writeCellToBuilder(cell, refs, sizeBytes, to) {
    let d1 = (0, descriptor_12.getRefsDescriptor)(cell.refs, cell.level(), cell.type);
    let d2 = (0, descriptor_12.getBitsDescriptor)(cell.bits);
    to.writeUint(d1, 8);
    to.writeUint(d2, 8);
    to.writeBuffer((0, paddedBits_12.bitsToPaddedBuffer)(cell.bits));
    for (let r2 of refs) {
      to.writeUint(r2, sizeBytes * 8);
    }
  }
  function serializeBoc(root, opts) {
    let allCells = (0, topologicalSort_1.topologicalSort)(root);
    let cellsNum = allCells.length;
    let has_idx = opts.idx;
    let has_crc32c = opts.crc32;
    let has_cache_bits = false;
    let flags = 0;
    let sizeBytes = Math.max(Math.ceil((0, bitsForNumber_1.bitsForNumber)(cellsNum, "uint") / 8), 1);
    let totalCellSize = 0;
    let index2 = [];
    for (let c2 of allCells) {
      let sz = calcCellSize(c2.cell, sizeBytes);
      index2.push(totalCellSize);
      totalCellSize += sz;
    }
    let offsetBytes = Math.max(Math.ceil((0, bitsForNumber_1.bitsForNumber)(totalCellSize, "uint") / 8), 1);
    let totalSize = (4 + // magic
    1 + // flags and s_bytes
    1 + // offset_bytes
    3 * sizeBytes + // cells_num, roots, complete
    offsetBytes + // full_size
    1 * sizeBytes + // root_idx
    (has_idx ? cellsNum * offsetBytes : 0) + totalCellSize + (has_crc32c ? 4 : 0)) * 8;
    let builder2 = new BitBuilder_1.BitBuilder(totalSize);
    builder2.writeUint(3052313714, 32);
    builder2.writeBit(has_idx);
    builder2.writeBit(has_crc32c);
    builder2.writeBit(has_cache_bits);
    builder2.writeUint(flags, 2);
    builder2.writeUint(sizeBytes, 3);
    builder2.writeUint(offsetBytes, 8);
    builder2.writeUint(cellsNum, sizeBytes * 8);
    builder2.writeUint(1, sizeBytes * 8);
    builder2.writeUint(0, sizeBytes * 8);
    builder2.writeUint(totalCellSize, offsetBytes * 8);
    builder2.writeUint(0, sizeBytes * 8);
    if (has_idx) {
      for (let i2 = 0; i2 < cellsNum; i2++) {
        builder2.writeUint(index2[i2], offsetBytes * 8);
      }
    }
    for (let i2 = 0; i2 < cellsNum; i2++) {
      writeCellToBuilder(allCells[i2].cell, allCells[i2].refs, sizeBytes, builder2);
    }
    if (has_crc32c) {
      let crc32 = (0, crc32c_1.crc32c)(builder2.buffer());
      builder2.writeBuffer(crc32);
    }
    let res = builder2.buffer();
    if (res.length !== totalSize / 8) {
      throw Error("Internal error");
    }
    return res;
  }
  serialization.serializeBoc = serializeBoc;
  return serialization;
}
var hasRequiredCell;
function requireCell() {
  if (hasRequiredCell)
    return Cell;
  hasRequiredCell = 1;
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  var _a2;
  Object.defineProperty(Cell, "__esModule", { value: true });
  Cell.Cell = void 0;
  const symbol_inspect_12 = __importDefault2(symbol_inspect);
  const BitString_12 = requireBitString();
  const CellType_12 = CellType;
  const Slice_12 = requireSlice();
  const resolveExotic_1 = resolveExotic$1;
  const wonderCalculator_1 = wonderCalculator$1;
  const serialization_1 = requireSerialization();
  const BitReader_12 = BitReader$1;
  const Builder_12 = requireBuilder();
  let Cell$1 = class Cell2 {
    /**
     * Deserialize cells from BOC
     * @param src source buffer
     * @returns array of cells
     */
    static fromBoc(src2) {
      return (0, serialization_1.deserializeBoc)(src2);
    }
    /**
     * Helper class that deserializes a single cell from BOC in base64
     * @param src source string
     */
    static fromBase64(src2) {
      let parsed = Cell2.fromBoc(buffer$1.Buffer.from(src2, "base64"));
      if (parsed.length !== 1) {
        throw new Error("Deserialized more than one cell");
      }
      return parsed[0];
    }
    constructor(opts) {
      this._hashes = [];
      this._depths = [];
      this.beginParse = (allowExotic = false) => {
        if (this.isExotic && !allowExotic) {
          throw new Error("Exotic cells cannot be parsed");
        }
        return new Slice_12.Slice(new BitReader_12.BitReader(this.bits), this.refs);
      };
      this.hash = (level = 3) => {
        return this._hashes[Math.min(this._hashes.length - 1, level)];
      };
      this.depth = (level = 3) => {
        return this._depths[Math.min(this._depths.length - 1, level)];
      };
      this.level = () => {
        return this.mask.level;
      };
      this.equals = (other) => {
        return this.hash().equals(other.hash());
      };
      this[_a2] = () => this.toString();
      let bits = BitString_12.BitString.EMPTY;
      if (opts && opts.bits) {
        bits = opts.bits;
      }
      let refs = [];
      if (opts && opts.refs) {
        refs = [...opts.refs];
      }
      let hashes;
      let depths;
      let mask;
      let type2 = CellType_12.CellType.Ordinary;
      if (opts && opts.exotic) {
        let resolved = (0, resolveExotic_1.resolveExotic)(bits, refs);
        let wonders = (0, wonderCalculator_1.wonderCalculator)(resolved.type, bits, refs);
        mask = wonders.mask;
        depths = wonders.depths;
        hashes = wonders.hashes;
        type2 = resolved.type;
      } else {
        if (refs.length > 4) {
          throw new Error("Invalid number of references");
        }
        if (bits.length > 1023) {
          throw new Error(`Bits overflow: ${bits.length} > 1023`);
        }
        let wonders = (0, wonderCalculator_1.wonderCalculator)(CellType_12.CellType.Ordinary, bits, refs);
        mask = wonders.mask;
        depths = wonders.depths;
        hashes = wonders.hashes;
        type2 = CellType_12.CellType.Ordinary;
      }
      this.type = type2;
      this.bits = bits;
      this.refs = refs;
      this.mask = mask;
      this._depths = depths;
      this._hashes = hashes;
      Object.freeze(this);
      Object.freeze(this.refs);
      Object.freeze(this.bits);
      Object.freeze(this.mask);
      Object.freeze(this._depths);
      Object.freeze(this._hashes);
    }
    /**
     * Check if cell is exotic
     */
    get isExotic() {
      return this.type !== CellType_12.CellType.Ordinary;
    }
    /**
     * Serializes cell to BOC
     * @param opts options
     */
    toBoc(opts) {
      let idx = opts && opts.idx !== null && opts.idx !== void 0 ? opts.idx : false;
      let crc32 = opts && opts.crc32 !== null && opts.crc32 !== void 0 ? opts.crc32 : true;
      return (0, serialization_1.serializeBoc)(this, { idx, crc32 });
    }
    /**
     * Format cell to string
     * @param indent indentation
     * @returns string representation
     */
    toString(indent) {
      let id2 = indent || "";
      let t2 = "x";
      if (this.isExotic) {
        if (this.type === CellType_12.CellType.MerkleProof) {
          t2 = "p";
        } else if (this.type === CellType_12.CellType.MerkleUpdate) {
          t2 = "u";
        } else if (this.type === CellType_12.CellType.PrunedBranch) {
          t2 = "p";
        }
      }
      let s2 = id2 + (this.isExotic ? t2 : "x") + "{" + this.bits.toString() + "}";
      for (let k2 in this.refs) {
        const i2 = this.refs[k2];
        s2 += "\n" + i2.toString(id2 + " ");
      }
      return s2;
    }
    /**
     * Covnert cell to slice
     * @returns slice
     */
    asSlice() {
      return this.beginParse();
    }
    /**
     * Convert cell to a builder that has this cell stored
     * @returns builder
     */
    asBuilder() {
      return (0, Builder_12.beginCell)().storeSlice(this.asSlice());
    }
  };
  Cell.Cell = Cell$1;
  _a2 = symbol_inspect_12.default;
  Cell$1.EMPTY = new Cell$1();
  return Cell;
}
var hasRequiredBuilder;
function requireBuilder() {
  if (hasRequiredBuilder)
    return Builder;
  hasRequiredBuilder = 1;
  Object.defineProperty(Builder, "__esModule", { value: true });
  Builder.Builder = Builder.beginCell = void 0;
  const BitBuilder_1 = requireBitBuilder();
  const Cell_12 = requireCell();
  const strings_1 = requireStrings();
  function beginCell() {
    return new Builder$1();
  }
  Builder.beginCell = beginCell;
  let Builder$1 = class Builder2 {
    constructor() {
      this._bits = new BitBuilder_1.BitBuilder();
      this._refs = [];
    }
    /**
     * Bits written so far
     */
    get bits() {
      return this._bits.length;
    }
    /**
     * References written so far
     */
    get refs() {
      return this._refs.length;
    }
    /**
     * Available bits
     */
    get availableBits() {
      return 1023 - this.bits;
    }
    /**
     * Available references
     */
    get availableRefs() {
      return 4 - this.refs;
    }
    /**
     * Write a single bit
     * @param value bit to write, true or positive number for 1, false or zero or negative for 0
     * @returns this builder
     */
    storeBit(value) {
      this._bits.writeBit(value);
      return this;
    }
    /**
     * Write bits from BitString
     * @param src source bits
     * @returns this builder
     */
    storeBits(src2) {
      this._bits.writeBits(src2);
      return this;
    }
    /**
     * Store Buffer
     * @param src source buffer
     * @param bytes optional number of bytes to write
     * @returns this builder
     */
    storeBuffer(src2, bytes) {
      if (bytes !== void 0 && bytes !== null) {
        if (src2.length !== bytes) {
          throw Error(`Buffer length ${src2.length} is not equal to ${bytes}`);
        }
      }
      this._bits.writeBuffer(src2);
      return this;
    }
    /**
     * Store Maybe Buffer
     * @param src source buffer or null
     * @param bytes optional number of bytes to write
     * @returns this builder
     */
    storeMaybeBuffer(src2, bytes) {
      if (src2 !== null) {
        this.storeBit(1);
        this.storeBuffer(src2, bytes);
      } else {
        this.storeBit(0);
      }
      return this;
    }
    /**
     * Store uint value
     * @param value value as bigint or number
     * @param bits number of bits to write
     * @returns this builder
     */
    storeUint(value, bits) {
      this._bits.writeUint(value, bits);
      return this;
    }
    /**
     * Store maybe uint value
     * @param value value as bigint or number, null or undefined
     * @param bits number of bits to write
     * @returns this builder
     */
    storeMaybeUint(value, bits) {
      if (value !== null && value !== void 0) {
        this.storeBit(1);
        this.storeUint(value, bits);
      } else {
        this.storeBit(0);
      }
      return this;
    }
    /**
     * Store int value
     * @param value value as bigint or number
     * @param bits number of bits to write
     * @returns this builder
     */
    storeInt(value, bits) {
      this._bits.writeInt(value, bits);
      return this;
    }
    /**
     * Store maybe int value
     * @param value value as bigint or number, null or undefined
     * @param bits number of bits to write
     * @returns this builder
     */
    storeMaybeInt(value, bits) {
      if (value !== null && value !== void 0) {
        this.storeBit(1);
        this.storeInt(value, bits);
      } else {
        this.storeBit(0);
      }
      return this;
    }
    /**
     * Store varuint value
     * @param value value as bigint or number
     * @param bits number of bits to write to header
     * @returns this builder
     */
    storeVarUint(value, bits) {
      this._bits.writeVarUint(value, bits);
      return this;
    }
    /**
     * Store maybe varuint value
     * @param value value as bigint or number, null or undefined
     * @param bits number of bits to write to header
     * @returns this builder
     */
    storeMaybeVarUint(value, bits) {
      if (value !== null && value !== void 0) {
        this.storeBit(1);
        this.storeVarUint(value, bits);
      } else {
        this.storeBit(0);
      }
      return this;
    }
    /**
     * Store varint value
     * @param value value as bigint or number
     * @param bits number of bits to write to header
     * @returns this builder
     */
    storeVarInt(value, bits) {
      this._bits.writeVarInt(value, bits);
      return this;
    }
    /**
     * Store maybe varint value
     * @param value value as bigint or number, null or undefined
     * @param bits number of bits to write to header
     * @returns this builder
     */
    storeMaybeVarInt(value, bits) {
      if (value !== null && value !== void 0) {
        this.storeBit(1);
        this.storeVarInt(value, bits);
      } else {
        this.storeBit(0);
      }
      return this;
    }
    /**
     * Store coins value
     * @param amount amount of coins
     * @returns this builder
     */
    storeCoins(amount) {
      this._bits.writeCoins(amount);
      return this;
    }
    /**
     * Store maybe coins value
     * @param amount amount of coins, null or undefined
     * @returns this builder
     */
    storeMaybeCoins(amount) {
      if (amount !== null && amount !== void 0) {
        this.storeBit(1);
        this.storeCoins(amount);
      } else {
        this.storeBit(0);
      }
      return this;
    }
    /**
     * Store address
     * @param addres address to store
     * @returns this builder
     */
    storeAddress(address) {
      this._bits.writeAddress(address);
      return this;
    }
    /**
     * Store reference
     * @param cell cell or builder to store
     * @returns this builder
     */
    storeRef(cell) {
      if (this._refs.length >= 4) {
        throw new Error("Too many references");
      }
      if (cell instanceof Cell_12.Cell) {
        this._refs.push(cell);
      } else if (cell instanceof Builder2) {
        this._refs.push(cell.endCell());
      } else {
        throw new Error("Invalid argument");
      }
      return this;
    }
    /**
     * Store reference if not null
     * @param cell cell or builder to store
     * @returns this builder
     */
    storeMaybeRef(cell) {
      if (cell) {
        this.storeBit(1);
        this.storeRef(cell);
      } else {
        this.storeBit(0);
      }
      return this;
    }
    /**
     * Store slice it in this builder
     * @param src source slice
     */
    storeSlice(src2) {
      let c2 = src2.clone();
      if (c2.remainingBits > 0) {
        this.storeBits(c2.loadBits(c2.remainingBits));
      }
      while (c2.remainingRefs > 0) {
        this.storeRef(c2.loadRef());
      }
      return this;
    }
    /**
     * Store slice in this builder if not null
     * @param src source slice
     */
    storeMaybeSlice(src2) {
      if (src2) {
        this.storeBit(1);
        this.storeSlice(src2);
      } else {
        this.storeBit(0);
      }
      return this;
    }
    /**
     * Store builder
     * @param src builder to store
     * @returns this builder
     */
    storeBuilder(src2) {
      return this.storeSlice(src2.endCell().beginParse());
    }
    /**
     * Store builder if not null
     * @param src builder to store
     * @returns this builder
     */
    storeMaybeBuilder(src2) {
      if (src2) {
        this.storeBit(1);
        this.storeBuilder(src2);
      } else {
        this.storeBit(0);
      }
      return this;
    }
    /**
     * Store writer or builder
     * @param writer writer or builder to store
     * @returns this builder
     */
    storeWritable(writer) {
      if (typeof writer === "object") {
        writer.writeTo(this);
      } else {
        writer(this);
      }
      return this;
    }
    /**
     * Store writer or builder if not null
     * @param writer writer or builder to store
     * @returns this builder
     */
    storeMaybeWritable(writer) {
      if (writer) {
        this.storeBit(1);
        this.storeWritable(writer);
      } else {
        this.storeBit(0);
      }
      return this;
    }
    /**
     * Store object in this builder
     * @param writer Writable or writer functuin
     */
    store(writer) {
      this.storeWritable(writer);
      return this;
    }
    /**
     * Store string tail
     * @param src source string
     * @returns this builder
     */
    storeStringTail(src2) {
      (0, strings_1.writeString)(src2, this);
      return this;
    }
    /**
     * Store string tail
     * @param src source string
     * @returns this builder
     */
    storeMaybeStringTail(src2) {
      if (src2 !== null && src2 !== void 0) {
        this.storeBit(1);
        (0, strings_1.writeString)(src2, this);
      } else {
        this.storeBit(0);
      }
      return this;
    }
    /**
     * Store string tail in ref
     * @param src source string
     * @returns this builder
     */
    storeStringRefTail(src2) {
      this.storeRef(beginCell().storeStringTail(src2));
      return this;
    }
    /**
     * Store maybe string tail in ref
     * @param src source string
     * @returns this builder
     */
    storeMaybeStringRefTail(src2) {
      if (src2 !== null && src2 !== void 0) {
        this.storeBit(1);
        this.storeStringRefTail(src2);
      } else {
        this.storeBit(0);
      }
      return this;
    }
    /**
     * Store dictionary in this builder
     * @param dict dictionary to store
     * @returns this builder
     */
    storeDict(dict, key2, value) {
      if (dict) {
        dict.store(this, key2, value);
      } else {
        this.storeBit(0);
      }
      return this;
    }
    /**
     * Store dictionary in this builder directly
     * @param dict dictionary to store
     * @returns this builder
     */
    storeDictDirect(dict, key2, value) {
      dict.storeDirect(this, key2, value);
      return this;
    }
    /**
     * Complete cell
     * @returns cell
     */
    endCell() {
      return new Cell_12.Cell({
        bits: this._bits.build(),
        refs: this._refs
      });
    }
    /**
     * Convert to cell
     * @returns cell
     */
    asCell() {
      return this.endCell();
    }
    /**
     * Convert to slice
     * @returns slice
     */
    asSlice() {
      return this.endCell().beginParse();
    }
  };
  Builder.Builder = Builder$1;
  return Builder;
}
var StateInit = {};
var SimpleLibrary = {};
Object.defineProperty(SimpleLibrary, "__esModule", { value: true });
SimpleLibrary.SimpleLibraryValue = SimpleLibrary.storeSimpleLibrary = SimpleLibrary.loadSimpleLibrary = void 0;
function loadSimpleLibrary(slice) {
  return {
    public: slice.loadBit(),
    root: slice.loadRef()
  };
}
SimpleLibrary.loadSimpleLibrary = loadSimpleLibrary;
function storeSimpleLibrary(src2) {
  return (builder2) => {
    builder2.storeBit(src2.public);
    builder2.storeRef(src2.root);
  };
}
SimpleLibrary.storeSimpleLibrary = storeSimpleLibrary;
SimpleLibrary.SimpleLibraryValue = {
  serialize(src2, builder2) {
    storeSimpleLibrary(src2)(builder2);
  },
  parse(src2) {
    return loadSimpleLibrary(src2);
  }
};
var TickTock = {};
Object.defineProperty(TickTock, "__esModule", { value: true });
TickTock.storeTickTock = TickTock.loadTickTock = void 0;
function loadTickTock(slice) {
  return {
    tick: slice.loadBit(),
    tock: slice.loadBit()
  };
}
TickTock.loadTickTock = loadTickTock;
function storeTickTock(src2) {
  return (builder2) => {
    builder2.storeBit(src2.tick);
    builder2.storeBit(src2.tock);
  };
}
TickTock.storeTickTock = storeTickTock;
Object.defineProperty(StateInit, "__esModule", { value: true });
StateInit.storeStateInit = StateInit.loadStateInit = void 0;
const Dictionary_1$2 = requireDictionary();
const SimpleLibrary_1 = SimpleLibrary;
const TickTock_1 = TickTock;
function loadStateInit(slice) {
  let splitDepth;
  if (slice.loadBit()) {
    splitDepth = slice.loadUint(5);
  }
  let special;
  if (slice.loadBit()) {
    special = (0, TickTock_1.loadTickTock)(slice);
  }
  let code2 = slice.loadMaybeRef();
  let data2 = slice.loadMaybeRef();
  let libraries = slice.loadDict(Dictionary_1$2.Dictionary.Keys.BigUint(256), SimpleLibrary_1.SimpleLibraryValue);
  if (libraries.size === 0) {
    libraries = void 0;
  }
  return {
    splitDepth,
    special,
    code: code2,
    data: data2,
    libraries
  };
}
StateInit.loadStateInit = loadStateInit;
function storeStateInit(src2) {
  return (builder2) => {
    if (src2.splitDepth !== null && src2.splitDepth !== void 0) {
      builder2.storeBit(true);
      builder2.storeUint(src2.splitDepth, 5);
    } else {
      builder2.storeBit(false);
    }
    if (src2.special !== null && src2.special !== void 0) {
      builder2.storeBit(true);
      builder2.store((0, TickTock_1.storeTickTock)(src2.special));
    } else {
      builder2.storeBit(false);
    }
    builder2.storeMaybeRef(src2.code);
    builder2.storeMaybeRef(src2.data);
    builder2.storeDict(src2.libraries);
  };
}
StateInit.storeStateInit = storeStateInit;
Object.defineProperty(contractAddress$1, "__esModule", { value: true });
contractAddress$1.contractAddress = void 0;
const Builder_1$7 = requireBuilder();
const StateInit_1$3 = StateInit;
const Address_1$2 = Address$1;
function contractAddress(workchain, init2) {
  let hash2 = (0, Builder_1$7.beginCell)().store((0, StateInit_1$3.storeStateInit)(init2)).endCell().hash();
  return new Address_1$2.Address(workchain, hash2);
}
contractAddress$1.contractAddress = contractAddress;
var tuple$1 = {};
Object.defineProperty(tuple$1, "__esModule", { value: true });
tuple$1.parseTuple = tuple$1.serializeTuple = void 0;
const Builder_1$6 = requireBuilder();
const INT64_MIN = BigInt("-9223372036854775808");
const INT64_MAX = BigInt("9223372036854775807");
function serializeTupleItem(src2, builder2) {
  if (src2.type === "null") {
    builder2.storeUint(0, 8);
  } else if (src2.type === "int") {
    if (src2.value <= INT64_MAX && src2.value >= INT64_MIN) {
      builder2.storeUint(1, 8);
      builder2.storeInt(src2.value, 64);
    } else {
      builder2.storeUint(256, 15);
      builder2.storeInt(src2.value, 257);
    }
  } else if (src2.type === "nan") {
    builder2.storeInt(767, 16);
  } else if (src2.type === "cell") {
    builder2.storeUint(3, 8);
    builder2.storeRef(src2.cell);
  } else if (src2.type === "slice") {
    builder2.storeUint(4, 8);
    builder2.storeUint(0, 10);
    builder2.storeUint(src2.cell.bits.length, 10);
    builder2.storeUint(0, 3);
    builder2.storeUint(src2.cell.refs.length, 3);
    builder2.storeRef(src2.cell);
  } else if (src2.type === "builder") {
    builder2.storeUint(5, 8);
    builder2.storeRef(src2.cell);
  } else if (src2.type === "tuple") {
    let head2 = null;
    let tail2 = null;
    for (let i2 = 0; i2 < src2.items.length; i2++) {
      let s2 = head2;
      head2 = tail2;
      tail2 = s2;
      if (i2 > 1) {
        head2 = (0, Builder_1$6.beginCell)().storeRef(tail2).storeRef(head2).endCell();
      }
      let bc2 = (0, Builder_1$6.beginCell)();
      serializeTupleItem(src2.items[i2], bc2);
      tail2 = bc2.endCell();
    }
    builder2.storeUint(7, 8);
    builder2.storeUint(src2.items.length, 16);
    if (head2) {
      builder2.storeRef(head2);
    }
    if (tail2) {
      builder2.storeRef(tail2);
    }
  } else {
    throw Error("Invalid value");
  }
}
function parseStackItem(cs) {
  let kind = cs.loadUint(8);
  if (kind === 0) {
    return { type: "null" };
  } else if (kind === 1) {
    return { type: "int", value: cs.loadIntBig(64) };
  } else if (kind === 2) {
    if (cs.loadUint(7) === 0) {
      return { type: "int", value: cs.loadIntBig(257) };
    } else {
      cs.loadBit();
      return { type: "nan" };
    }
  } else if (kind === 3) {
    return { type: "cell", cell: cs.loadRef() };
  } else if (kind === 4) {
    let startBits = cs.loadUint(10);
    let endBits = cs.loadUint(10);
    let startRefs = cs.loadUint(3);
    let endRefs = cs.loadUint(3);
    let rs = cs.loadRef().beginParse();
    rs.skip(startBits);
    let dt = rs.loadBits(endBits - startBits);
    let builder2 = (0, Builder_1$6.beginCell)().storeBits(dt);
    if (startRefs < endRefs) {
      for (let i2 = 0; i2 < startRefs; i2++) {
        rs.loadRef();
      }
      for (let i2 = 0; i2 < endRefs - startRefs; i2++) {
        builder2.storeRef(rs.loadRef());
      }
    }
    return { type: "slice", cell: builder2.endCell() };
  } else if (kind === 5) {
    return { type: "builder", cell: cs.loadRef() };
  } else if (kind === 7) {
    let length = cs.loadUint(16);
    let items = [];
    if (length > 1) {
      let head2 = cs.loadRef().beginParse();
      let tail2 = cs.loadRef().beginParse();
      items.unshift(parseStackItem(tail2));
      for (let i2 = 0; i2 < length - 2; i2++) {
        let ohead = head2;
        head2 = ohead.loadRef().beginParse();
        tail2 = ohead.loadRef().beginParse();
        items.unshift(parseStackItem(tail2));
      }
      items.unshift(parseStackItem(head2));
    } else if (length === 1) {
      items.push(parseStackItem(cs.loadRef().beginParse()));
    }
    return { type: "tuple", items };
  } else {
    throw Error("Unsupported stack item");
  }
}
function serializeTupleTail(src2, builder2) {
  if (src2.length > 0) {
    let tail2 = (0, Builder_1$6.beginCell)();
    serializeTupleTail(src2.slice(0, src2.length - 1), tail2);
    builder2.storeRef(tail2.endCell());
    serializeTupleItem(src2[src2.length - 1], builder2);
  }
}
function serializeTuple(src2) {
  let builder2 = (0, Builder_1$6.beginCell)();
  builder2.storeUint(src2.length, 24);
  let r2 = [...src2];
  serializeTupleTail(r2, builder2);
  return builder2.endCell();
}
tuple$1.serializeTuple = serializeTuple;
function parseTuple(src2) {
  let res = [];
  let cs = src2.beginParse();
  let size2 = cs.loadUint(24);
  for (let i2 = 0; i2 < size2; i2++) {
    let next = cs.loadRef();
    res.unshift(parseStackItem(cs));
    cs = next.beginParse();
  }
  return res;
}
tuple$1.parseTuple = parseTuple;
var reader = {};
Object.defineProperty(reader, "__esModule", { value: true });
reader.TupleReader = void 0;
class TupleReader {
  constructor(items) {
    this.items = [...items];
  }
  get remaining() {
    return this.items.length;
  }
  peek() {
    if (this.items.length === 0) {
      throw Error("EOF");
    }
    return this.items[0];
  }
  pop() {
    if (this.items.length === 0) {
      throw Error("EOF");
    }
    let res = this.items[0];
    this.items.splice(0, 1);
    return res;
  }
  skip(num = 1) {
    for (let i2 = 0; i2 < num; i2++) {
      this.pop();
    }
    return this;
  }
  readBigNumber() {
    let popped = this.pop();
    if (popped.type !== "int") {
      throw Error("Not a number");
    }
    return popped.value;
  }
  readBigNumberOpt() {
    let popped = this.pop();
    if (popped.type === "null") {
      return null;
    }
    if (popped.type !== "int") {
      throw Error("Not a number");
    }
    return popped.value;
  }
  readNumber() {
    return Number(this.readBigNumber());
  }
  readNumberOpt() {
    let r2 = this.readBigNumberOpt();
    if (r2 !== null) {
      return Number(r2);
    } else {
      return null;
    }
  }
  readBoolean() {
    let res = this.readNumber();
    return res === 0 ? false : true;
  }
  readBooleanOpt() {
    let res = this.readNumberOpt();
    if (res !== null) {
      return res === 0 ? false : true;
    } else {
      return null;
    }
  }
  readAddress() {
    let r2 = this.readCell().beginParse().loadAddress();
    if (r2 !== null) {
      return r2;
    } else {
      throw Error("Not an address");
    }
  }
  readAddressOpt() {
    let r2 = this.readCellOpt();
    if (r2 !== null) {
      return r2.beginParse().loadMaybeAddress();
    } else {
      return null;
    }
  }
  readCell() {
    let popped = this.pop();
    if (popped.type !== "cell" && popped.type !== "slice" && popped.type !== "builder") {
      throw Error("Not a cell: " + popped.type);
    }
    return popped.cell;
  }
  readCellOpt() {
    let popped = this.pop();
    if (popped.type === "null") {
      return null;
    }
    if (popped.type !== "cell" && popped.type !== "slice" && popped.type !== "builder") {
      throw Error("Not a cell");
    }
    return popped.cell;
  }
  readTuple() {
    let popped = this.pop();
    if (popped.type !== "tuple") {
      throw Error("Not a number");
    }
    return new TupleReader(popped.items);
  }
  readTupleOpt() {
    let popped = this.pop();
    if (popped.type === "null") {
      return null;
    }
    if (popped.type !== "tuple") {
      throw Error("Not a number");
    }
    return new TupleReader(popped.items);
  }
  readBuffer() {
    let s2 = this.readCell().beginParse();
    if (s2.remainingRefs !== 0) {
      throw Error("Not a buffer");
    }
    if (s2.remainingBits % 8 !== 0) {
      throw Error("Not a buffer");
    }
    return s2.loadBuffer(s2.remainingBits / 8);
  }
  readBufferOpt() {
    let popped = this.peek();
    if (popped.type === "null") {
      return null;
    }
    let s2 = this.readCell().beginParse();
    if (s2.remainingRefs !== 0) {
      throw Error("Not a buffer");
    }
    if (s2.remainingBits % 8 !== 0) {
      throw Error("Not a buffer");
    }
    return s2.loadBuffer(s2.remainingBits / 8);
  }
  readString() {
    let s2 = this.readCell().beginParse();
    return s2.loadStringTail();
  }
  readStringOpt() {
    let popped = this.peek();
    if (popped.type === "null") {
      return null;
    }
    let s2 = this.readCell().beginParse();
    return s2.loadStringTail();
  }
}
reader.TupleReader = TupleReader;
var builder = {};
Object.defineProperty(builder, "__esModule", { value: true });
builder.TupleBuilder = void 0;
const Builder_1$5 = requireBuilder();
const Cell_1$2 = requireCell();
const Slice_1 = requireSlice();
class TupleBuilder {
  constructor() {
    this._tuple = [];
  }
  writeNumber(v2) {
    if (v2 === null || v2 === void 0) {
      this._tuple.push({ type: "null" });
    } else {
      this._tuple.push({ type: "int", value: BigInt(v2) });
    }
  }
  writeBoolean(v2) {
    if (v2 === null || v2 === void 0) {
      this._tuple.push({ type: "null" });
    } else {
      this._tuple.push({ type: "int", value: v2 ? -1n : 0n });
    }
  }
  writeBuffer(v2) {
    if (v2 === null || v2 === void 0) {
      this._tuple.push({ type: "null" });
    } else {
      this._tuple.push({ type: "slice", cell: (0, Builder_1$5.beginCell)().storeBuffer(v2).endCell() });
    }
  }
  writeString(v2) {
    if (v2 === null || v2 === void 0) {
      this._tuple.push({ type: "null" });
    } else {
      this._tuple.push({ type: "slice", cell: (0, Builder_1$5.beginCell)().storeStringTail(v2).endCell() });
    }
  }
  writeCell(v2) {
    if (v2 === null || v2 === void 0) {
      this._tuple.push({ type: "null" });
    } else {
      if (v2 instanceof Cell_1$2.Cell) {
        this._tuple.push({ type: "cell", cell: v2 });
      } else if (v2 instanceof Slice_1.Slice) {
        this._tuple.push({ type: "cell", cell: v2.asCell() });
      }
    }
  }
  writeSlice(v2) {
    if (v2 === null || v2 === void 0) {
      this._tuple.push({ type: "null" });
    } else {
      if (v2 instanceof Cell_1$2.Cell) {
        this._tuple.push({ type: "slice", cell: v2 });
      } else if (v2 instanceof Slice_1.Slice) {
        this._tuple.push({ type: "slice", cell: v2.asCell() });
      }
    }
  }
  writeBuilder(v2) {
    if (v2 === null || v2 === void 0) {
      this._tuple.push({ type: "null" });
    } else {
      if (v2 instanceof Cell_1$2.Cell) {
        this._tuple.push({ type: "builder", cell: v2 });
      } else if (v2 instanceof Slice_1.Slice) {
        this._tuple.push({ type: "builder", cell: v2.asCell() });
      }
    }
  }
  writeTuple(v2) {
    if (v2 === null || v2 === void 0) {
      this._tuple.push({ type: "null" });
    } else {
      this._tuple.push({ type: "tuple", items: v2 });
    }
  }
  writeAddress(v2) {
    if (v2 === null || v2 === void 0) {
      this._tuple.push({ type: "null" });
    } else {
      this._tuple.push({ type: "slice", cell: (0, Builder_1$5.beginCell)().storeAddress(v2).endCell() });
    }
  }
  build() {
    return [...this._tuple];
  }
}
builder.TupleBuilder = TupleBuilder;
var _export = {};
var _helpers = {};
var convert = {};
Object.defineProperty(convert, "__esModule", { value: true });
convert.fromNano = convert.toNano = void 0;
function toNano(src2) {
  if (typeof src2 === "bigint") {
    return src2 * 1000000000n;
  } else if (typeof src2 === "number") {
    return BigInt(src2) * 1000000000n;
  } else {
    let neg = false;
    while (src2.startsWith("-")) {
      neg = !neg;
      src2 = src2.slice(1);
    }
    if (src2 === ".") {
      throw Error("Invalid number");
    }
    let parts = src2.split(".");
    if (parts.length > 2) {
      throw Error("Invalid number");
    }
    let whole = parts[0];
    let frac = parts[1];
    if (!whole) {
      whole = "0";
    }
    if (!frac) {
      frac = "0";
    }
    if (frac.length > 9) {
      throw Error("Invalid number");
    }
    while (frac.length < 9) {
      frac += "0";
    }
    let r2 = BigInt(whole) * 1000000000n + BigInt(frac);
    if (neg) {
      r2 = -r2;
    }
    return r2;
  }
}
convert.toNano = toNano;
function fromNano(src2) {
  let v2 = BigInt(src2);
  let neg = false;
  if (v2 < 0) {
    neg = true;
    v2 = -v2;
  }
  let frac = v2 % 1000000000n;
  let facStr = frac.toString();
  while (facStr.length < 9) {
    facStr = "0" + facStr;
  }
  facStr = facStr.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  let whole = v2 / 1000000000n;
  let wholeStr = whole.toString();
  let value = `${wholeStr}${facStr === "0" ? "" : `.${facStr}`}`;
  if (neg) {
    value = "-" + value;
  }
  return value;
}
convert.fromNano = fromNano;
Object.defineProperty(_helpers, "__esModule", { value: true });
_helpers.comment = _helpers.external = _helpers.internal = void 0;
const Address_1$1 = Address$1;
const Cell_1$1 = requireCell();
const Builder_1$4 = requireBuilder();
const convert_1 = convert;
function internal$1(src2) {
  let bounce = true;
  if (src2.bounce !== null && src2.bounce !== void 0) {
    bounce = src2.bounce;
  }
  let to;
  if (typeof src2.to === "string") {
    to = Address_1$1.Address.parse(src2.to);
  } else if (Address_1$1.Address.isAddress(src2.to)) {
    to = src2.to;
  } else {
    throw new Error(`Invalid address ${src2.to}`);
  }
  let value;
  if (typeof src2.value === "string") {
    value = (0, convert_1.toNano)(src2.value);
  } else {
    value = src2.value;
  }
  let body = Cell_1$1.Cell.EMPTY;
  if (typeof src2.body === "string") {
    body = (0, Builder_1$4.beginCell)().storeUint(0, 32).storeStringTail(src2.body).endCell();
  } else if (src2.body) {
    body = src2.body;
  }
  return {
    info: {
      type: "internal",
      dest: to,
      value: { coins: value },
      bounce,
      ihrDisabled: true,
      bounced: false,
      ihrFee: 0n,
      forwardFee: 0n,
      createdAt: 0,
      createdLt: 0n
    },
    init: src2.init ? { code: src2.init.code, data: src2.init.data } : void 0,
    body
  };
}
_helpers.internal = internal$1;
function external(src2) {
  let to;
  if (typeof src2.to === "string") {
    to = Address_1$1.Address.parse(src2.to);
  } else if (Address_1$1.Address.isAddress(src2.to)) {
    to = src2.to;
  } else {
    throw new Error(`Invalid address ${src2.to}`);
  }
  return {
    info: {
      type: "external-in",
      dest: to,
      importFee: 0n
    },
    init: src2.init ? { code: src2.init.code, data: src2.init.data } : void 0,
    body: src2.body || Cell_1$1.Cell.EMPTY
  };
}
_helpers.external = external;
function comment(src2) {
  return (0, Builder_1$4.beginCell)().storeUint(0, 32).storeStringTail(src2).endCell();
}
_helpers.comment = comment;
var Account = {};
var AccountStorage = {};
var AccountState = {};
Object.defineProperty(AccountState, "__esModule", { value: true });
AccountState.storeAccountState = AccountState.loadAccountState = void 0;
const StateInit_1$2 = StateInit;
function loadAccountState(cs) {
  if (cs.loadBit()) {
    return { type: "active", state: (0, StateInit_1$2.loadStateInit)(cs) };
  } else if (cs.loadBit()) {
    return { type: "frozen", stateHash: cs.loadUintBig(256) };
  } else {
    return { type: "uninit" };
  }
}
AccountState.loadAccountState = loadAccountState;
function storeAccountState(src2) {
  return (builder2) => {
    if (src2.type === "active") {
      builder2.storeBit(true);
      builder2.store((0, StateInit_1$2.storeStateInit)(src2.state));
    } else if (src2.type === "frozen") {
      builder2.storeBit(false);
      builder2.storeBit(true);
      builder2.storeUint(src2.stateHash, 256);
    } else if (src2.type === "uninit") {
      builder2.storeBit(false);
      builder2.storeBit(false);
    }
  };
}
AccountState.storeAccountState = storeAccountState;
var CurrencyCollection = {};
Object.defineProperty(CurrencyCollection, "__esModule", { value: true });
CurrencyCollection.storeCurrencyCollection = CurrencyCollection.loadCurrencyCollection = void 0;
const Dictionary_1$1 = requireDictionary();
function loadCurrencyCollection(slice) {
  const coins = slice.loadCoins();
  const other = slice.loadDict(Dictionary_1$1.Dictionary.Keys.Uint(32), Dictionary_1$1.Dictionary.Values.BigVarUint(
    5
    /* log2(32) */
  ));
  if (other.size === 0) {
    return { coins };
  } else {
    return { other, coins };
  }
}
CurrencyCollection.loadCurrencyCollection = loadCurrencyCollection;
function storeCurrencyCollection(collection) {
  return (builder2) => {
    builder2.storeCoins(collection.coins);
    if (collection.other) {
      builder2.storeDict(collection.other);
    } else {
      builder2.storeBit(0);
    }
  };
}
CurrencyCollection.storeCurrencyCollection = storeCurrencyCollection;
Object.defineProperty(AccountStorage, "__esModule", { value: true });
AccountStorage.storeAccountStorage = AccountStorage.loadAccountStorage = void 0;
const AccountState_1 = AccountState;
const CurrencyCollection_1$5 = CurrencyCollection;
function loadAccountStorage(slice) {
  return {
    lastTransLt: slice.loadUintBig(64),
    balance: (0, CurrencyCollection_1$5.loadCurrencyCollection)(slice),
    state: (0, AccountState_1.loadAccountState)(slice)
  };
}
AccountStorage.loadAccountStorage = loadAccountStorage;
function storeAccountStorage(src2) {
  return (builder2) => {
    builder2.storeUint(src2.lastTransLt, 64);
    builder2.store((0, CurrencyCollection_1$5.storeCurrencyCollection)(src2.balance));
    builder2.store((0, AccountState_1.storeAccountState)(src2.state));
  };
}
AccountStorage.storeAccountStorage = storeAccountStorage;
var StorageInto = {};
var StorageUsed = {};
Object.defineProperty(StorageUsed, "__esModule", { value: true });
StorageUsed.storeStorageUsed = StorageUsed.loadStorageUsed = void 0;
function loadStorageUsed(cs) {
  return {
    cells: cs.loadVarUintBig(3),
    bits: cs.loadVarUintBig(3),
    publicCells: cs.loadVarUintBig(3)
  };
}
StorageUsed.loadStorageUsed = loadStorageUsed;
function storeStorageUsed(src2) {
  return (builder2) => {
    builder2.storeVarUint(src2.cells, 3);
    builder2.storeVarUint(src2.bits, 3);
    builder2.storeVarUint(src2.publicCells, 3);
  };
}
StorageUsed.storeStorageUsed = storeStorageUsed;
Object.defineProperty(StorageInto, "__esModule", { value: true });
StorageInto.storeStorageInfo = StorageInto.loadStorageInfo = void 0;
const StorageUsed_1 = StorageUsed;
function loadStorageInfo(slice) {
  return {
    used: (0, StorageUsed_1.loadStorageUsed)(slice),
    lastPaid: slice.loadUint(32),
    duePayment: slice.loadMaybeCoins()
  };
}
StorageInto.loadStorageInfo = loadStorageInfo;
function storeStorageInfo(src2) {
  return (builder2) => {
    builder2.store((0, StorageUsed_1.storeStorageUsed)(src2.used));
    builder2.storeUint(src2.lastPaid, 32);
    builder2.storeMaybeCoins(src2.duePayment);
  };
}
StorageInto.storeStorageInfo = storeStorageInfo;
Object.defineProperty(Account, "__esModule", { value: true });
Account.storeAccount = Account.loadAccount = void 0;
const AccountStorage_1 = AccountStorage;
const StorageInto_1 = StorageInto;
function loadAccount(slice) {
  return {
    addr: slice.loadAddress(),
    storageStats: (0, StorageInto_1.loadStorageInfo)(slice),
    storage: (0, AccountStorage_1.loadAccountStorage)(slice)
  };
}
Account.loadAccount = loadAccount;
function storeAccount(src2) {
  return (builder2) => {
    builder2.storeAddress(src2.addr);
    builder2.store((0, StorageInto_1.storeStorageInfo)(src2.storageStats));
    builder2.store((0, AccountStorage_1.storeAccountStorage)(src2.storage));
  };
}
Account.storeAccount = storeAccount;
var AccountStatus = {};
Object.defineProperty(AccountStatus, "__esModule", { value: true });
AccountStatus.storeAccountStatus = AccountStatus.loadAccountStatus = void 0;
function loadAccountStatus(slice) {
  const status = slice.loadUint(2);
  if (status === 0) {
    return "uninitialized";
  }
  if (status === 1) {
    return "frozen";
  }
  if (status === 2) {
    return "active";
  }
  if (status === 3) {
    return "non-existing";
  }
  throw Error("Invalid data");
}
AccountStatus.loadAccountStatus = loadAccountStatus;
function storeAccountStatus(src2) {
  return (builder2) => {
    if (src2 === "uninitialized") {
      builder2.storeUint(0, 2);
    } else if (src2 === "frozen") {
      builder2.storeUint(1, 2);
    } else if (src2 === "active") {
      builder2.storeUint(2, 2);
    } else if (src2 === "non-existing") {
      builder2.storeUint(3, 2);
    } else {
      throw Error("Invalid data");
    }
    return builder2;
  };
}
AccountStatus.storeAccountStatus = storeAccountStatus;
var AccountStatusChange = {};
Object.defineProperty(AccountStatusChange, "__esModule", { value: true });
AccountStatusChange.storeAccountStatusChange = AccountStatusChange.loadAccountStatusChange = void 0;
function loadAccountStatusChange(slice) {
  if (!slice.loadBit()) {
    return "unchanged";
  }
  if (slice.loadBit()) {
    return "frozen";
  } else {
    return "deleted";
  }
}
AccountStatusChange.loadAccountStatusChange = loadAccountStatusChange;
function storeAccountStatusChange(src2) {
  return (builder2) => {
    if (src2 == "unchanged") {
      builder2.storeBit(0);
    } else if (src2 === "frozen") {
      builder2.storeBit(1);
      builder2.storeBit(0);
    } else if (src2 === "deleted") {
      builder2.storeBit(1);
      builder2.storeBit(1);
    } else {
      throw Error("Invalid account status change");
    }
  };
}
AccountStatusChange.storeAccountStatusChange = storeAccountStatusChange;
var CommonMessageInfo = {};
Object.defineProperty(CommonMessageInfo, "__esModule", { value: true });
CommonMessageInfo.storeCommonMessageInfo = CommonMessageInfo.loadCommonMessageInfo = void 0;
const CurrencyCollection_1$4 = CurrencyCollection;
function loadCommonMessageInfo(slice) {
  if (!slice.loadBit()) {
    const ihrDisabled = slice.loadBit();
    const bounce = slice.loadBit();
    const bounced = slice.loadBit();
    const src3 = slice.loadAddress();
    const dest2 = slice.loadAddress();
    const value = (0, CurrencyCollection_1$4.loadCurrencyCollection)(slice);
    const ihrFee = slice.loadCoins();
    const forwardFee = slice.loadCoins();
    const createdLt2 = slice.loadUintBig(64);
    const createdAt2 = slice.loadUint(32);
    return {
      type: "internal",
      ihrDisabled,
      bounce,
      bounced,
      src: src3,
      dest: dest2,
      value,
      ihrFee,
      forwardFee,
      createdLt: createdLt2,
      createdAt: createdAt2
    };
  }
  if (!slice.loadBit()) {
    const src3 = slice.loadMaybeExternalAddress();
    const dest2 = slice.loadAddress();
    const importFee = slice.loadCoins();
    return {
      type: "external-in",
      src: src3,
      dest: dest2,
      importFee
    };
  }
  const src2 = slice.loadAddress();
  const dest = slice.loadMaybeExternalAddress();
  const createdLt = slice.loadUintBig(64);
  const createdAt = slice.loadUint(32);
  return {
    type: "external-out",
    src: src2,
    dest,
    createdLt,
    createdAt
  };
}
CommonMessageInfo.loadCommonMessageInfo = loadCommonMessageInfo;
function storeCommonMessageInfo(source) {
  return (builder2) => {
    if (source.type === "internal") {
      builder2.storeBit(0);
      builder2.storeBit(source.ihrDisabled);
      builder2.storeBit(source.bounce);
      builder2.storeBit(source.bounced);
      builder2.storeAddress(source.src);
      builder2.storeAddress(source.dest);
      builder2.store((0, CurrencyCollection_1$4.storeCurrencyCollection)(source.value));
      builder2.storeCoins(source.ihrFee);
      builder2.storeCoins(source.forwardFee);
      builder2.storeUint(source.createdLt, 64);
      builder2.storeUint(source.createdAt, 32);
    } else if (source.type === "external-in") {
      builder2.storeBit(1);
      builder2.storeBit(0);
      builder2.storeAddress(source.src);
      builder2.storeAddress(source.dest);
      builder2.storeCoins(source.importFee);
    } else if (source.type === "external-out") {
      builder2.storeBit(1);
      builder2.storeBit(1);
      builder2.storeAddress(source.src);
      builder2.storeAddress(source.dest);
      builder2.storeUint(source.createdLt, 64);
      builder2.storeUint(source.createdAt, 32);
    } else {
      throw new Error("Unknown CommonMessageInfo type");
    }
  };
}
CommonMessageInfo.storeCommonMessageInfo = storeCommonMessageInfo;
var CommonMessageInfoRelaxed = {};
Object.defineProperty(CommonMessageInfoRelaxed, "__esModule", { value: true });
CommonMessageInfoRelaxed.storeCommonMessageInfoRelaxed = CommonMessageInfoRelaxed.loadCommonMessageInfoRelaxed = void 0;
const CurrencyCollection_1$3 = CurrencyCollection;
function loadCommonMessageInfoRelaxed(slice) {
  if (!slice.loadBit()) {
    const ihrDisabled = slice.loadBit();
    const bounce = slice.loadBit();
    const bounced = slice.loadBit();
    const src3 = slice.loadMaybeAddress();
    const dest2 = slice.loadAddress();
    const value = (0, CurrencyCollection_1$3.loadCurrencyCollection)(slice);
    const ihrFee = slice.loadCoins();
    const forwardFee = slice.loadCoins();
    const createdLt2 = slice.loadUintBig(64);
    const createdAt2 = slice.loadUint(32);
    return {
      type: "internal",
      ihrDisabled,
      bounce,
      bounced,
      src: src3,
      dest: dest2,
      value,
      ihrFee,
      forwardFee,
      createdLt: createdLt2,
      createdAt: createdAt2
    };
  }
  if (!slice.loadBit()) {
    throw Error("External In message is not possible for CommonMessageInfoRelaxed");
  }
  const src2 = slice.loadMaybeAddress();
  const dest = slice.loadMaybeExternalAddress();
  const createdLt = slice.loadUintBig(64);
  const createdAt = slice.loadUint(32);
  return {
    type: "external-out",
    src: src2,
    dest,
    createdLt,
    createdAt
  };
}
CommonMessageInfoRelaxed.loadCommonMessageInfoRelaxed = loadCommonMessageInfoRelaxed;
function storeCommonMessageInfoRelaxed(source) {
  return (builder2) => {
    if (source.type === "internal") {
      builder2.storeBit(0);
      builder2.storeBit(source.ihrDisabled);
      builder2.storeBit(source.bounce);
      builder2.storeBit(source.bounced);
      builder2.storeAddress(source.src);
      builder2.storeAddress(source.dest);
      builder2.store((0, CurrencyCollection_1$3.storeCurrencyCollection)(source.value));
      builder2.storeCoins(source.ihrFee);
      builder2.storeCoins(source.forwardFee);
      builder2.storeUint(source.createdLt, 64);
      builder2.storeUint(source.createdAt, 32);
    } else if (source.type === "external-out") {
      builder2.storeBit(1);
      builder2.storeBit(1);
      builder2.storeAddress(source.src);
      builder2.storeAddress(source.dest);
      builder2.storeUint(source.createdLt, 64);
      builder2.storeUint(source.createdAt, 32);
    } else {
      throw new Error("Unknown CommonMessageInfo type");
    }
  };
}
CommonMessageInfoRelaxed.storeCommonMessageInfoRelaxed = storeCommonMessageInfoRelaxed;
var ComputeSkipReason = {};
Object.defineProperty(ComputeSkipReason, "__esModule", { value: true });
ComputeSkipReason.storeComputeSkipReason = ComputeSkipReason.loadComputeSkipReason = void 0;
function loadComputeSkipReason(slice) {
  let reason = slice.loadUint(2);
  if (reason === 0) {
    return "no-state";
  } else if (reason === 1) {
    return "bad-state";
  } else if (reason === 2) {
    return "no-gas";
  }
  throw new Error(`Unknown ComputeSkipReason: ${reason}`);
}
ComputeSkipReason.loadComputeSkipReason = loadComputeSkipReason;
function storeComputeSkipReason(src2) {
  return (builder2) => {
    if (src2 === "no-state") {
      builder2.storeUint(0, 2);
    } else if (src2 === "bad-state") {
      builder2.storeUint(1, 2);
    } else if (src2 === "no-gas") {
      builder2.storeUint(2, 2);
    } else {
      throw new Error(`Unknown ComputeSkipReason: ${src2}`);
    }
  };
}
ComputeSkipReason.storeComputeSkipReason = storeComputeSkipReason;
var DepthBalanceInfo = {};
Object.defineProperty(DepthBalanceInfo, "__esModule", { value: true });
DepthBalanceInfo.storeDepthBalanceInfo = DepthBalanceInfo.loadDepthBalanceInfo = void 0;
const CurrencyCollection_1$2 = CurrencyCollection;
function loadDepthBalanceInfo(slice) {
  let splitDepth = slice.loadUint(5);
  return {
    splitDepth,
    balance: (0, CurrencyCollection_1$2.loadCurrencyCollection)(slice)
  };
}
DepthBalanceInfo.loadDepthBalanceInfo = loadDepthBalanceInfo;
function storeDepthBalanceInfo(src2) {
  return (builder2) => {
    builder2.storeUint(src2.splitDepth, 5);
    builder2.store((0, CurrencyCollection_1$2.storeCurrencyCollection)(src2.balance));
  };
}
DepthBalanceInfo.storeDepthBalanceInfo = storeDepthBalanceInfo;
var HashUpdate = {};
Object.defineProperty(HashUpdate, "__esModule", { value: true });
HashUpdate.storeHashUpdate = HashUpdate.loadHashUpdate = void 0;
function loadHashUpdate(slice) {
  if (slice.loadUint(8) !== 114) {
    throw Error("Invalid data");
  }
  const oldHash = slice.loadBuffer(32);
  const newHash = slice.loadBuffer(32);
  return { oldHash, newHash };
}
HashUpdate.loadHashUpdate = loadHashUpdate;
function storeHashUpdate(src2) {
  return (builder2) => {
    builder2.storeUint(114, 8);
    builder2.storeBuffer(src2.oldHash);
    builder2.storeBuffer(src2.newHash);
  };
}
HashUpdate.storeHashUpdate = storeHashUpdate;
var MasterchainStateExtra = {};
Object.defineProperty(MasterchainStateExtra, "__esModule", { value: true });
MasterchainStateExtra.loadMasterchainStateExtra = void 0;
const Dictionary_1 = requireDictionary();
const CurrencyCollection_1$1 = CurrencyCollection;
function loadMasterchainStateExtra(cs) {
  if (cs.loadUint(16) !== 52262) {
    throw Error("Invalid data");
  }
  if (cs.loadBit()) {
    cs.loadRef();
  }
  let configAddress = cs.loadUintBig(256);
  let config = Dictionary_1.Dictionary.load(Dictionary_1.Dictionary.Keys.Int(32), Dictionary_1.Dictionary.Values.Cell(), cs);
  const globalBalance = (0, CurrencyCollection_1$1.loadCurrencyCollection)(cs);
  return {
    config,
    configAddress,
    globalBalance
  };
}
MasterchainStateExtra.loadMasterchainStateExtra = loadMasterchainStateExtra;
var Message = {};
Object.defineProperty(Message, "__esModule", { value: true });
Message.MessageValue = Message.storeMessage = Message.loadMessage = void 0;
const Builder_1$3 = requireBuilder();
const CommonMessageInfo_1 = CommonMessageInfo;
const StateInit_1$1 = StateInit;
function loadMessage(slice) {
  const info = (0, CommonMessageInfo_1.loadCommonMessageInfo)(slice);
  let init2 = null;
  if (slice.loadBit()) {
    if (!slice.loadBit()) {
      init2 = (0, StateInit_1$1.loadStateInit)(slice);
    } else {
      init2 = (0, StateInit_1$1.loadStateInit)(slice.loadRef().beginParse());
    }
  }
  const body = slice.loadBit() ? slice.loadRef() : slice.asCell();
  return {
    info,
    init: init2,
    body
  };
}
Message.loadMessage = loadMessage;
function storeMessage(message2, opts) {
  return (builder2) => {
    builder2.store((0, CommonMessageInfo_1.storeCommonMessageInfo)(message2.info));
    if (message2.init) {
      builder2.storeBit(true);
      let initCell = (0, Builder_1$3.beginCell)().store((0, StateInit_1$1.storeStateInit)(message2.init));
      if (builder2.availableBits - 2 >= initCell.bits) {
        builder2.storeBit(false);
        builder2.storeBuilder(initCell);
      } else {
        builder2.storeBit(true);
        builder2.storeRef(initCell);
      }
    } else {
      builder2.storeBit(false);
    }
    let needRef = false;
    if (opts && opts.forceRef) {
      needRef = true;
    } else {
      if (builder2.availableBits - 1 >= message2.body.bits.length) {
        needRef = false;
      } else {
        needRef = true;
      }
    }
    if (needRef) {
      builder2.storeBit(true);
      builder2.storeRef(message2.body);
    } else {
      builder2.storeBit(false);
      builder2.storeBuilder(message2.body.asBuilder());
    }
  };
}
Message.storeMessage = storeMessage;
Message.MessageValue = {
  serialize(src2, builder2) {
    builder2.storeRef((0, Builder_1$3.beginCell)().store(storeMessage(src2)));
  },
  parse(slice) {
    return loadMessage(slice.loadRef().beginParse());
  }
};
var MessageRelaxed = {};
Object.defineProperty(MessageRelaxed, "__esModule", { value: true });
MessageRelaxed.storeMessageRelaxed = MessageRelaxed.loadMessageRelaxed = void 0;
const Builder_1$2 = requireBuilder();
const CommonMessageInfoRelaxed_1 = CommonMessageInfoRelaxed;
const StateInit_1 = StateInit;
function loadMessageRelaxed(slice) {
  const info = (0, CommonMessageInfoRelaxed_1.loadCommonMessageInfoRelaxed)(slice);
  let init2 = null;
  if (slice.loadBit()) {
    if (!slice.loadBit()) {
      init2 = (0, StateInit_1.loadStateInit)(slice);
    } else {
      init2 = (0, StateInit_1.loadStateInit)(slice.loadRef().beginParse());
    }
  }
  const body = slice.loadBit() ? slice.loadRef() : slice.asCell();
  return {
    info,
    init: init2,
    body
  };
}
MessageRelaxed.loadMessageRelaxed = loadMessageRelaxed;
function storeMessageRelaxed(message2, opts) {
  return (builder2) => {
    builder2.store((0, CommonMessageInfoRelaxed_1.storeCommonMessageInfoRelaxed)(message2.info));
    if (message2.init) {
      builder2.storeBit(true);
      let initCell = (0, Builder_1$2.beginCell)().store((0, StateInit_1.storeStateInit)(message2.init));
      if (builder2.availableBits - 2 >= initCell.bits) {
        builder2.storeBit(false);
        builder2.storeBuilder(initCell);
      } else {
        builder2.storeBit(true);
        builder2.storeRef(initCell);
      }
    } else {
      builder2.storeBit(false);
    }
    let needRef = false;
    if (opts && opts.forceRef) {
      needRef = true;
    } else {
      if (builder2.availableBits - 1 >= message2.body.bits.length) {
        needRef = false;
      } else {
        needRef = true;
      }
    }
    if (needRef) {
      builder2.storeBit(true);
      builder2.storeRef(message2.body);
    } else {
      builder2.storeBit(false);
      builder2.storeBuilder(message2.body.asBuilder());
    }
  };
}
MessageRelaxed.storeMessageRelaxed = storeMessageRelaxed;
var SendMode = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.SendMode = void 0;
  (function(SendMode2) {
    SendMode2[SendMode2["CARRRY_ALL_REMAINING_BALANCE"] = 128] = "CARRRY_ALL_REMAINING_BALANCE";
    SendMode2[SendMode2["CARRRY_ALL_REMAINING_INCOMING_VALUE"] = 64] = "CARRRY_ALL_REMAINING_INCOMING_VALUE";
    SendMode2[SendMode2["DESTROY_ACCOUNT_IF_ZERO"] = 32] = "DESTROY_ACCOUNT_IF_ZERO";
    SendMode2[SendMode2["PAY_GAS_SEPARATLY"] = 1] = "PAY_GAS_SEPARATLY";
    SendMode2[SendMode2["IGNORE_ERRORS"] = 2] = "IGNORE_ERRORS";
    SendMode2[SendMode2["NONE"] = 0] = "NONE";
  })(exports2.SendMode || (exports2.SendMode = {}));
})(SendMode);
var ShardAccount = {};
Object.defineProperty(ShardAccount, "__esModule", { value: true });
ShardAccount.storeShardAccount = ShardAccount.loadShardAccount = void 0;
const Builder_1$1 = requireBuilder();
const Account_1 = Account;
function loadShardAccount(slice) {
  let accountRef = slice.loadRef();
  let account = void 0;
  if (!accountRef.isExotic) {
    let accountSlice = accountRef.beginParse();
    if (accountSlice.loadBit()) {
      account = (0, Account_1.loadAccount)(accountSlice);
    }
  }
  return {
    account,
    lastTransactionHash: slice.loadUintBig(256),
    lastTransactionLt: slice.loadUintBig(64)
  };
}
ShardAccount.loadShardAccount = loadShardAccount;
function storeShardAccount(src2) {
  return (builder2) => {
    if (src2.account) {
      builder2.storeRef((0, Builder_1$1.beginCell)().storeBit(true).store((0, Account_1.storeAccount)(src2.account)));
    } else {
      builder2.storeRef((0, Builder_1$1.beginCell)().storeBit(false));
    }
    builder2.storeUint(src2.lastTransactionHash, 256);
    builder2.storeUint(src2.lastTransactionLt, 64);
  };
}
ShardAccount.storeShardAccount = storeShardAccount;
var ShardAccounts = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.storeShardAccounts = exports2.loadShardAccounts = exports2.ShardAccountRefValue = void 0;
  const Dictionary_12 = requireDictionary();
  const DepthBalanceInfo_1 = DepthBalanceInfo;
  const ShardAccount_1 = ShardAccount;
  exports2.ShardAccountRefValue = {
    parse: (cs) => {
      let depthBalanceInfo = (0, DepthBalanceInfo_1.loadDepthBalanceInfo)(cs);
      let shardAccount = (0, ShardAccount_1.loadShardAccount)(cs);
      return {
        depthBalanceInfo,
        shardAccount
      };
    },
    serialize(src2, builder2) {
      builder2.store((0, DepthBalanceInfo_1.storeDepthBalanceInfo)(src2.depthBalanceInfo));
      builder2.store((0, ShardAccount_1.storeShardAccount)(src2.shardAccount));
    }
  };
  function loadShardAccounts(cs) {
    return Dictionary_12.Dictionary.load(Dictionary_12.Dictionary.Keys.BigUint(256), exports2.ShardAccountRefValue, cs);
  }
  exports2.loadShardAccounts = loadShardAccounts;
  function storeShardAccounts(src2) {
    return (Builder2) => {
      Builder2.storeDict(src2);
    };
  }
  exports2.storeShardAccounts = storeShardAccounts;
})(ShardAccounts);
var ShardIdent = {};
Object.defineProperty(ShardIdent, "__esModule", { value: true });
ShardIdent.storeShardIdent = ShardIdent.loadShardIdent = void 0;
function loadShardIdent(slice) {
  if (slice.loadUint(2) !== 0) {
    throw Error("Invalid data");
  }
  return {
    shardPrefixBits: slice.loadUint(6),
    workchainId: slice.loadInt(32),
    shardPrefix: slice.loadUintBig(64)
  };
}
ShardIdent.loadShardIdent = loadShardIdent;
function storeShardIdent(src2) {
  return (builder2) => {
    builder2.storeUint(0, 2);
    builder2.storeUint(src2.shardPrefixBits, 6);
    builder2.storeInt(src2.workchainId, 32);
    builder2.storeUint(src2.shardPrefix, 64);
  };
}
ShardIdent.storeShardIdent = storeShardIdent;
var ShardStateUnsplit = {};
Object.defineProperty(ShardStateUnsplit, "__esModule", { value: true });
ShardStateUnsplit.loadShardStateUnsplit = void 0;
const MasterchainStateExtra_1 = MasterchainStateExtra;
const ShardAccounts_1 = ShardAccounts;
const ShardIdent_1 = ShardIdent;
function loadShardStateUnsplit(cs) {
  if (cs.loadUint(32) !== 2418257890) {
    throw Error("Invalid data");
  }
  let globalId = cs.loadInt(32);
  let shardId = (0, ShardIdent_1.loadShardIdent)(cs);
  let seqno = cs.loadUint(32);
  let vertSeqNo = cs.loadUint(32);
  let genUtime = cs.loadUint(32);
  let genLt = cs.loadUintBig(64);
  let minRefMcSeqno = cs.loadUint(32);
  cs.loadRef();
  let beforeSplit = cs.loadBit();
  let shardAccountsRef = cs.loadRef();
  let accounts = void 0;
  if (!shardAccountsRef.isExotic) {
    accounts = (0, ShardAccounts_1.loadShardAccounts)(shardAccountsRef.beginParse());
  }
  cs.loadRef();
  let mcStateExtra = cs.loadBit();
  let extras = null;
  if (mcStateExtra) {
    let cell = cs.loadRef();
    if (!cell.isExotic) {
      extras = (0, MasterchainStateExtra_1.loadMasterchainStateExtra)(cell.beginParse());
    }
  }
  return {
    globalId,
    shardId,
    seqno,
    vertSeqNo,
    genUtime,
    genLt,
    minRefMcSeqno,
    beforeSplit,
    accounts,
    extras
  };
}
ShardStateUnsplit.loadShardStateUnsplit = loadShardStateUnsplit;
var SplitMergeInfo = {};
Object.defineProperty(SplitMergeInfo, "__esModule", { value: true });
SplitMergeInfo.storeSplitMergeInfo = SplitMergeInfo.loadSplitMergeInfo = void 0;
function loadSplitMergeInfo(slice) {
  let currentShardPrefixLength = slice.loadUint(6);
  let accountSplitDepth = slice.loadUint(6);
  let thisAddress = slice.loadUintBig(256);
  let siblingAddress = slice.loadUintBig(256);
  return {
    currentShardPrefixLength,
    accountSplitDepth,
    thisAddress,
    siblingAddress
  };
}
SplitMergeInfo.loadSplitMergeInfo = loadSplitMergeInfo;
function storeSplitMergeInfo(src2) {
  return (builder2) => {
    builder2.storeUint(src2.currentShardPrefixLength, 6);
    builder2.storeUint(src2.accountSplitDepth, 6);
    builder2.storeUint(src2.thisAddress, 256);
    builder2.storeUint(src2.siblingAddress, 256);
  };
}
SplitMergeInfo.storeSplitMergeInfo = storeSplitMergeInfo;
var StorageUsedShort = {};
Object.defineProperty(StorageUsedShort, "__esModule", { value: true });
StorageUsedShort.storeStorageUsedShort = StorageUsedShort.loadStorageUsedShort = void 0;
function loadStorageUsedShort(slice) {
  let cells = slice.loadVarUintBig(3);
  let bits = slice.loadVarUintBig(3);
  return {
    cells,
    bits
  };
}
StorageUsedShort.loadStorageUsedShort = loadStorageUsedShort;
function storeStorageUsedShort(src2) {
  return (builder2) => {
    builder2.storeVarUint(src2.cells, 3);
    builder2.storeVarUint(src2.bits, 3);
  };
}
StorageUsedShort.storeStorageUsedShort = storeStorageUsedShort;
var Transaction = {};
var TransactionDescription = {};
var TransactionActionPhase = {};
Object.defineProperty(TransactionActionPhase, "__esModule", { value: true });
TransactionActionPhase.storeTransactionActionPhase = TransactionActionPhase.loadTransactionActionPhase = void 0;
const AccountStatusChange_1$1 = AccountStatusChange;
const StorageUsedShort_1$1 = StorageUsedShort;
function loadTransactionActionPhase(slice) {
  let success2 = slice.loadBit();
  let valid = slice.loadBit();
  let noFunds = slice.loadBit();
  let statusChange = (0, AccountStatusChange_1$1.loadAccountStatusChange)(slice);
  let totalFwdFees = slice.loadBit() ? slice.loadCoins() : void 0;
  let totalActionFees = slice.loadBit() ? slice.loadCoins() : void 0;
  let resultCode = slice.loadInt(32);
  let resultArg = slice.loadBit() ? slice.loadInt(32) : void 0;
  let totalActions = slice.loadUint(16);
  let specActions = slice.loadUint(16);
  let skippedActions = slice.loadUint(16);
  let messagesCreated = slice.loadUint(16);
  let actionListHash = slice.loadUintBig(256);
  let totalMessageSize = (0, StorageUsedShort_1$1.loadStorageUsedShort)(slice);
  return {
    success: success2,
    valid,
    noFunds,
    statusChange,
    totalFwdFees,
    totalActionFees,
    resultCode,
    resultArg,
    totalActions,
    specActions,
    skippedActions,
    messagesCreated,
    actionListHash,
    totalMessageSize
  };
}
TransactionActionPhase.loadTransactionActionPhase = loadTransactionActionPhase;
function storeTransactionActionPhase(src2) {
  return (builder2) => {
    builder2.storeBit(src2.success);
    builder2.storeBit(src2.valid);
    builder2.storeBit(src2.noFunds);
    builder2.store((0, AccountStatusChange_1$1.storeAccountStatusChange)(src2.statusChange));
    builder2.storeMaybeCoins(src2.totalFwdFees);
    builder2.storeMaybeCoins(src2.totalActionFees);
    builder2.storeInt(src2.resultCode, 32);
    builder2.storeMaybeInt(src2.resultArg, 32);
    builder2.storeUint(src2.totalActions, 16);
    builder2.storeUint(src2.specActions, 16);
    builder2.storeUint(src2.skippedActions, 16);
    builder2.storeUint(src2.messagesCreated, 16);
    builder2.storeUint(src2.actionListHash, 256);
    builder2.store((0, StorageUsedShort_1$1.storeStorageUsedShort)(src2.totalMessageSize));
  };
}
TransactionActionPhase.storeTransactionActionPhase = storeTransactionActionPhase;
var TransactionBouncePhase = {};
Object.defineProperty(TransactionBouncePhase, "__esModule", { value: true });
TransactionBouncePhase.storeTransactionBouncePhase = TransactionBouncePhase.loadTransactionBouncePhase = void 0;
const StorageUsedShort_1 = StorageUsedShort;
function loadTransactionBouncePhase(slice) {
  if (slice.loadBit()) {
    let messageSize = (0, StorageUsedShort_1.loadStorageUsedShort)(slice);
    let messageFees = slice.loadCoins();
    let forwardFees = slice.loadCoins();
    return {
      type: "ok",
      messageSize,
      messageFees,
      forwardFees
    };
  }
  if (slice.loadBit()) {
    let messageSize = (0, StorageUsedShort_1.loadStorageUsedShort)(slice);
    let requiredForwardFees = slice.loadCoins();
    return {
      type: "no-funds",
      messageSize,
      requiredForwardFees
    };
  }
  return {
    type: "negative-funds"
  };
}
TransactionBouncePhase.loadTransactionBouncePhase = loadTransactionBouncePhase;
function storeTransactionBouncePhase(src2) {
  return (builder2) => {
    if (src2.type === "ok") {
      builder2.storeBit(true);
      builder2.store((0, StorageUsedShort_1.storeStorageUsedShort)(src2.messageSize));
      builder2.storeCoins(src2.messageFees);
      builder2.storeCoins(src2.forwardFees);
    } else if (src2.type === "negative-funds") {
      builder2.storeBit(false);
      builder2.storeBit(false);
    } else if (src2.type === "no-funds") {
      builder2.storeBit(false);
      builder2.storeBit(true);
      builder2.store((0, StorageUsedShort_1.storeStorageUsedShort)(src2.messageSize));
      builder2.storeCoins(src2.requiredForwardFees);
    } else {
      throw new Error("Invalid TransactionBouncePhase type");
    }
  };
}
TransactionBouncePhase.storeTransactionBouncePhase = storeTransactionBouncePhase;
var TransactionComputePhase = {};
Object.defineProperty(TransactionComputePhase, "__esModule", { value: true });
TransactionComputePhase.storeTransactionComputePhase = TransactionComputePhase.loadTransactionComputePhase = void 0;
const Builder_1 = requireBuilder();
const ComputeSkipReason_1 = ComputeSkipReason;
function loadTransactionComputePhase(slice) {
  if (!slice.loadBit()) {
    let reason = (0, ComputeSkipReason_1.loadComputeSkipReason)(slice);
    return {
      type: "skipped",
      reason
    };
  }
  let success2 = slice.loadBit();
  let messageStateUsed = slice.loadBit();
  let accountActivated = slice.loadBit();
  let gasFees = slice.loadCoins();
  const vmState = slice.loadRef().beginParse();
  let gasUsed = vmState.loadVarUintBig(3);
  let gasLimit = vmState.loadVarUintBig(3);
  let gasCredit = vmState.loadBit() ? vmState.loadVarUintBig(2) : void 0;
  let mode = vmState.loadUint(8);
  let exitCode = vmState.loadUint(32);
  let exitArg = vmState.loadBit() ? vmState.loadInt(32) : void 0;
  let vmSteps = vmState.loadUint(32);
  let vmInitStateHash = vmState.loadUintBig(256);
  let vmFinalStateHash = vmState.loadUintBig(256);
  return {
    type: "vm",
    success: success2,
    messageStateUsed,
    accountActivated,
    gasFees,
    gasUsed,
    gasLimit,
    gasCredit,
    mode,
    exitCode,
    exitArg,
    vmSteps,
    vmInitStateHash,
    vmFinalStateHash
  };
}
TransactionComputePhase.loadTransactionComputePhase = loadTransactionComputePhase;
function storeTransactionComputePhase(src2) {
  return (builder2) => {
    if (src2.type === "skipped") {
      builder2.storeBit(0);
      builder2.store((0, ComputeSkipReason_1.storeComputeSkipReason)(src2.reason));
      return;
    }
    builder2.storeBit(1);
    builder2.storeBit(src2.success);
    builder2.storeBit(src2.messageStateUsed);
    builder2.storeBit(src2.accountActivated);
    builder2.storeCoins(src2.gasFees);
    builder2.storeRef((0, Builder_1.beginCell)().storeVarUint(src2.gasUsed, 3).storeVarUint(src2.gasLimit, 3).store((b2) => src2.gasCredit !== void 0 && src2.gasCredit !== null ? b2.storeBit(1).storeVarUint(src2.gasCredit, 2) : b2.storeBit(0)).storeUint(src2.mode, 8).storeUint(src2.exitCode, 32).store((b2) => src2.exitArg !== void 0 && src2.exitArg !== null ? b2.storeBit(1).storeInt(src2.exitArg, 32) : b2.storeBit(0)).storeUint(src2.vmSteps, 32).storeUint(src2.vmInitStateHash, 256).storeUint(src2.vmFinalStateHash, 256).endCell());
  };
}
TransactionComputePhase.storeTransactionComputePhase = storeTransactionComputePhase;
var TransactionCreditPhase = {};
Object.defineProperty(TransactionCreditPhase, "__esModule", { value: true });
TransactionCreditPhase.storeTransactionCreditPhase = TransactionCreditPhase.loadTransactionCreditPhase = void 0;
const CurrencyCollection_1 = CurrencyCollection;
function loadTransactionCreditPhase(slice) {
  const dueFeesColelcted = slice.loadBit() ? slice.loadCoins() : void 0;
  const credit = (0, CurrencyCollection_1.loadCurrencyCollection)(slice);
  return {
    dueFeesColelcted,
    credit
  };
}
TransactionCreditPhase.loadTransactionCreditPhase = loadTransactionCreditPhase;
function storeTransactionCreditPhase(src2) {
  return (builder2) => {
    if (src2.dueFeesColelcted === null || src2.dueFeesColelcted === void 0) {
      builder2.storeBit(false);
    } else {
      builder2.storeBit(true);
      builder2.storeCoins(src2.dueFeesColelcted);
    }
    builder2.store((0, CurrencyCollection_1.storeCurrencyCollection)(src2.credit));
  };
}
TransactionCreditPhase.storeTransactionCreditPhase = storeTransactionCreditPhase;
var TransactionStoragePhase = {};
Object.defineProperty(TransactionStoragePhase, "__esModule", { value: true });
TransactionStoragePhase.storeTransactionsStoragePhase = TransactionStoragePhase.loadTransactionStoragePhase = void 0;
const AccountStatusChange_1 = AccountStatusChange;
function loadTransactionStoragePhase(slice) {
  const storageFeesCollected = slice.loadCoins();
  let storageFeesDue = void 0;
  if (slice.loadBit()) {
    storageFeesDue = slice.loadCoins();
  }
  const statusChange = (0, AccountStatusChange_1.loadAccountStatusChange)(slice);
  return {
    storageFeesCollected,
    storageFeesDue,
    statusChange
  };
}
TransactionStoragePhase.loadTransactionStoragePhase = loadTransactionStoragePhase;
function storeTransactionsStoragePhase(src2) {
  return (builder2) => {
    builder2.storeCoins(src2.storageFeesCollected);
    if (src2.storageFeesDue === null || src2.storageFeesDue === void 0) {
      builder2.storeBit(false);
    } else {
      builder2.storeBit(true);
      builder2.storeCoins(src2.storageFeesDue);
    }
    builder2.store((0, AccountStatusChange_1.storeAccountStatusChange)(src2.statusChange));
  };
}
TransactionStoragePhase.storeTransactionsStoragePhase = storeTransactionsStoragePhase;
var hasRequiredTransactionDescription;
function requireTransactionDescription() {
  if (hasRequiredTransactionDescription)
    return TransactionDescription;
  hasRequiredTransactionDescription = 1;
  Object.defineProperty(TransactionDescription, "__esModule", { value: true });
  TransactionDescription.storeTransactionDescription = TransactionDescription.loadTransactionDescription = void 0;
  const Builder_12 = requireBuilder();
  const SplitMergeInfo_1 = SplitMergeInfo;
  const Transaction_1 = requireTransaction();
  const TransactionActionPhase_1 = TransactionActionPhase;
  const TransactionBouncePhase_1 = TransactionBouncePhase;
  const TransactionComputePhase_1 = TransactionComputePhase;
  const TransactionCreditPhase_1 = TransactionCreditPhase;
  const TransactionStoragePhase_1 = TransactionStoragePhase;
  function loadTransactionDescription(slice) {
    let type2 = slice.loadUint(4);
    if (type2 === 0) {
      const creditFirst = slice.loadBit();
      let storagePhase = void 0;
      if (slice.loadBit()) {
        storagePhase = (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice);
      }
      let creditPhase = void 0;
      if (slice.loadBit()) {
        creditPhase = (0, TransactionCreditPhase_1.loadTransactionCreditPhase)(slice);
      }
      let computePhase = (0, TransactionComputePhase_1.loadTransactionComputePhase)(slice);
      let actionPhase = void 0;
      if (slice.loadBit()) {
        actionPhase = (0, TransactionActionPhase_1.loadTransactionActionPhase)(slice.loadRef().beginParse());
      }
      let aborted = slice.loadBit();
      let bouncePhase = void 0;
      if (slice.loadBit()) {
        bouncePhase = (0, TransactionBouncePhase_1.loadTransactionBouncePhase)(slice);
      }
      const destroyed = slice.loadBit();
      return {
        type: "generic",
        creditFirst,
        storagePhase,
        creditPhase,
        computePhase,
        actionPhase,
        bouncePhase,
        aborted,
        destroyed
      };
    }
    if (type2 === 1) {
      return {
        type: "storage",
        storagePhase: (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice)
      };
    }
    if (type2 === 2 || type2 === 3) {
      const isTock = type2 === 3;
      let storagePhase = (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice);
      let computePhase = (0, TransactionComputePhase_1.loadTransactionComputePhase)(slice);
      let actionPhase = void 0;
      if (slice.loadBit()) {
        actionPhase = (0, TransactionActionPhase_1.loadTransactionActionPhase)(slice.loadRef().beginParse());
      }
      const aborted = slice.loadBit();
      const destroyed = slice.loadBit();
      return {
        type: "tick-tock",
        isTock,
        storagePhase,
        computePhase,
        actionPhase,
        aborted,
        destroyed
      };
    }
    if (type2 === 4) {
      let splitInfo = (0, SplitMergeInfo_1.loadSplitMergeInfo)(slice);
      let storagePhase = void 0;
      if (slice.loadBit()) {
        storagePhase = (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice);
      }
      let computePhase = (0, TransactionComputePhase_1.loadTransactionComputePhase)(slice);
      let actionPhase = void 0;
      if (slice.loadBit()) {
        actionPhase = (0, TransactionActionPhase_1.loadTransactionActionPhase)(slice.loadRef().beginParse());
      }
      const aborted = slice.loadBit();
      const destroyed = slice.loadBit();
      return {
        type: "split-prepare",
        splitInfo,
        storagePhase,
        computePhase,
        actionPhase,
        aborted,
        destroyed
      };
    }
    if (type2 === 5) {
      let splitInfo = (0, SplitMergeInfo_1.loadSplitMergeInfo)(slice);
      let prepareTransaction = (0, Transaction_1.loadTransaction)(slice.loadRef().beginParse());
      const installed = slice.loadBit();
      return {
        type: "split-install",
        splitInfo,
        prepareTransaction,
        installed
      };
    }
    throw Error(`Unsupported transaction description type ${type2}`);
  }
  TransactionDescription.loadTransactionDescription = loadTransactionDescription;
  function storeTransactionDescription(src2) {
    return (builder2) => {
      if (src2.type === "generic") {
        builder2.storeUint(0, 4);
        builder2.storeBit(src2.creditFirst);
        if (src2.storagePhase) {
          builder2.storeBit(true);
          builder2.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src2.storagePhase));
        } else {
          builder2.storeBit(false);
        }
        if (src2.creditPhase) {
          builder2.storeBit(true);
          builder2.store((0, TransactionCreditPhase_1.storeTransactionCreditPhase)(src2.creditPhase));
        } else {
          builder2.storeBit(false);
        }
        builder2.store((0, TransactionComputePhase_1.storeTransactionComputePhase)(src2.computePhase));
        if (src2.actionPhase) {
          builder2.storeBit(true);
          builder2.storeRef((0, Builder_12.beginCell)().store((0, TransactionActionPhase_1.storeTransactionActionPhase)(src2.actionPhase)));
        } else {
          builder2.storeBit(false);
        }
        builder2.storeBit(src2.aborted);
        if (src2.bouncePhase) {
          builder2.storeBit(true);
          builder2.store((0, TransactionBouncePhase_1.storeTransactionBouncePhase)(src2.bouncePhase));
        } else {
          builder2.storeBit(false);
        }
        builder2.storeBit(src2.destroyed);
      } else if (src2.type === "storage") {
        builder2.storeUint(1, 4);
        builder2.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src2.storagePhase));
      } else if (src2.type === "tick-tock") {
        builder2.storeUint(src2.isTock ? 3 : 2, 4);
        builder2.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src2.storagePhase));
        builder2.store((0, TransactionComputePhase_1.storeTransactionComputePhase)(src2.computePhase));
        if (src2.actionPhase) {
          builder2.storeBit(true);
          builder2.storeRef((0, Builder_12.beginCell)().store((0, TransactionActionPhase_1.storeTransactionActionPhase)(src2.actionPhase)));
        } else {
          builder2.storeBit(false);
        }
        builder2.storeBit(src2.aborted);
        builder2.storeBit(src2.destroyed);
      } else if (src2.type === "split-prepare") {
        builder2.storeUint(4, 4);
        builder2.store((0, SplitMergeInfo_1.storeSplitMergeInfo)(src2.splitInfo));
        if (src2.storagePhase) {
          builder2.storeBit(true);
          builder2.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src2.storagePhase));
        } else {
          builder2.storeBit(false);
        }
        builder2.store((0, TransactionComputePhase_1.storeTransactionComputePhase)(src2.computePhase));
        if (src2.actionPhase) {
          builder2.storeBit(true);
          builder2.store((0, TransactionActionPhase_1.storeTransactionActionPhase)(src2.actionPhase));
        } else {
          builder2.storeBit(false);
        }
        builder2.storeBit(src2.aborted);
        builder2.storeBit(src2.destroyed);
      } else if (src2.type === "split-install") {
        builder2.storeUint(5, 4);
        builder2.store((0, SplitMergeInfo_1.storeSplitMergeInfo)(src2.splitInfo));
        builder2.storeRef((0, Builder_12.beginCell)().store((0, Transaction_1.storeTransaction)(src2.prepareTransaction)));
        builder2.storeBit(src2.installed);
      } else {
        throw Error(`Unsupported transaction description type ${src2.type}`);
      }
    };
  }
  TransactionDescription.storeTransactionDescription = storeTransactionDescription;
  return TransactionDescription;
}
var hasRequiredTransaction;
function requireTransaction() {
  if (hasRequiredTransaction)
    return Transaction;
  hasRequiredTransaction = 1;
  Object.defineProperty(Transaction, "__esModule", { value: true });
  Transaction.storeTransaction = Transaction.loadTransaction = void 0;
  const Builder_12 = requireBuilder();
  const Dictionary_12 = requireDictionary();
  const AccountStatus_1 = AccountStatus;
  const CurrencyCollection_12 = CurrencyCollection;
  const HashUpdate_1 = HashUpdate;
  const Message_1 = Message;
  const TransactionDescription_1 = requireTransactionDescription();
  function loadTransaction(slice) {
    if (slice.loadUint(4) !== 7) {
      throw Error("Invalid data");
    }
    let address = slice.loadUintBig(256);
    let lt = slice.loadUintBig(64);
    let prevTransactionHash = slice.loadUintBig(256);
    let prevTransactionLt = slice.loadUintBig(64);
    let now = slice.loadUint(32);
    let outMessagesCount = slice.loadUint(15);
    let oldStatus = (0, AccountStatus_1.loadAccountStatus)(slice);
    let endStatus = (0, AccountStatus_1.loadAccountStatus)(slice);
    let msgRef = slice.loadRef();
    let msgSlice = msgRef.beginParse();
    let inMessage = msgSlice.loadBit() ? (0, Message_1.loadMessage)(msgSlice.loadRef().beginParse()) : void 0;
    let outMessages = msgSlice.loadDict(Dictionary_12.Dictionary.Keys.Uint(15), Message_1.MessageValue);
    msgSlice.endParse();
    let totalFees = (0, CurrencyCollection_12.loadCurrencyCollection)(slice);
    let stateUpdate = (0, HashUpdate_1.loadHashUpdate)(slice.loadRef().beginParse());
    let description2 = (0, TransactionDescription_1.loadTransactionDescription)(slice.loadRef().beginParse());
    return {
      address,
      lt,
      prevTransactionHash,
      prevTransactionLt,
      now,
      outMessagesCount,
      oldStatus,
      endStatus,
      inMessage,
      outMessages,
      totalFees,
      stateUpdate,
      description: description2
    };
  }
  Transaction.loadTransaction = loadTransaction;
  function storeTransaction(src2) {
    return (builder2) => {
      builder2.storeUint(7, 4);
      builder2.storeUint(src2.address, 256);
      builder2.storeUint(src2.lt, 64);
      builder2.storeUint(src2.prevTransactionHash, 256);
      builder2.storeUint(src2.prevTransactionLt, 64);
      builder2.storeUint(src2.now, 32);
      builder2.storeUint(src2.outMessagesCount, 15);
      builder2.store((0, AccountStatus_1.storeAccountStatus)(src2.oldStatus));
      builder2.store((0, AccountStatus_1.storeAccountStatus)(src2.endStatus));
      let msgBuilder = (0, Builder_12.beginCell)();
      if (src2.inMessage) {
        msgBuilder.storeBit(true);
        msgBuilder.storeRef((0, Builder_12.beginCell)().store((0, Message_1.storeMessage)(src2.inMessage)));
      } else {
        msgBuilder.storeBit(false);
      }
      msgBuilder.storeDict(src2.outMessages);
      builder2.storeRef(msgBuilder);
      builder2.store((0, CurrencyCollection_12.storeCurrencyCollection)(src2.totalFees));
      builder2.storeRef((0, Builder_12.beginCell)().store((0, HashUpdate_1.storeHashUpdate)(src2.stateUpdate)));
      builder2.storeRef((0, Builder_12.beginCell)().store((0, TransactionDescription_1.storeTransactionDescription)(src2.description)));
    };
  }
  Transaction.storeTransaction = storeTransaction;
  return Transaction;
}
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.loadStorageUsedShort = exports2.storeStorageUsed = exports2.loadStorageUsed = exports2.storeStorageInfo = exports2.loadStorageInfo = exports2.storeStateInit = exports2.loadStateInit = exports2.storeSplitMergeInfo = exports2.loadSplitMergeInfo = exports2.storeSimpleLibrary = exports2.loadSimpleLibrary = exports2.loadShardStateUnsplit = exports2.storeShardIdent = exports2.loadShardIdent = exports2.storeShardAccounts = exports2.loadShardAccounts = exports2.ShardAccountRefValue = exports2.storeShardAccount = exports2.loadShardAccount = exports2.SendMode = exports2.storeMessageRelaxed = exports2.loadMessageRelaxed = exports2.storeMessage = exports2.loadMessage = exports2.loadMasterchainStateExtra = exports2.storeHashUpdate = exports2.loadHashUpdate = exports2.storeDepthBalanceInfo = exports2.loadDepthBalanceInfo = exports2.storeCurrencyCollection = exports2.loadCurrencyCollection = exports2.storeComputeSkipReason = exports2.loadComputeSkipReason = exports2.storeCommonMessageInfoRelaxed = exports2.loadCommonMessageInfoRelaxed = exports2.storeCommonMessageInfo = exports2.loadCommonMessageInfo = exports2.storeAccountStorage = exports2.loadAccountStorage = exports2.storeAccountStatusChange = exports2.loadAccountStatusChange = exports2.storeAccountStatus = exports2.loadAccountStatus = exports2.storeAccountState = exports2.loadAccountState = exports2.storeAccount = exports2.loadAccount = exports2.comment = exports2.external = exports2.internal = void 0;
  exports2.storeTransactionsStoragePhase = exports2.loadTransactionStoragePhase = exports2.storeTransactionDescription = exports2.loadTransactionDescription = exports2.storeTransactionCreditPhase = exports2.loadTransactionCreditPhase = exports2.storeTransactionComputePhase = exports2.loadTransactionComputePhase = exports2.storeTransactionBouncePhase = exports2.loadTransactionBouncePhase = exports2.storeTransactionActionPhase = exports2.loadTransactionActionPhase = exports2.storeTransaction = exports2.loadTransaction = exports2.storeTickTock = exports2.loadTickTock = exports2.storeStorageUsedShort = void 0;
  var _helpers_1 = _helpers;
  Object.defineProperty(exports2, "internal", { enumerable: true, get: function() {
    return _helpers_1.internal;
  } });
  Object.defineProperty(exports2, "external", { enumerable: true, get: function() {
    return _helpers_1.external;
  } });
  Object.defineProperty(exports2, "comment", { enumerable: true, get: function() {
    return _helpers_1.comment;
  } });
  var Account_12 = Account;
  Object.defineProperty(exports2, "loadAccount", { enumerable: true, get: function() {
    return Account_12.loadAccount;
  } });
  Object.defineProperty(exports2, "storeAccount", { enumerable: true, get: function() {
    return Account_12.storeAccount;
  } });
  var AccountState_12 = AccountState;
  Object.defineProperty(exports2, "loadAccountState", { enumerable: true, get: function() {
    return AccountState_12.loadAccountState;
  } });
  Object.defineProperty(exports2, "storeAccountState", { enumerable: true, get: function() {
    return AccountState_12.storeAccountState;
  } });
  var AccountStatus_1 = AccountStatus;
  Object.defineProperty(exports2, "loadAccountStatus", { enumerable: true, get: function() {
    return AccountStatus_1.loadAccountStatus;
  } });
  Object.defineProperty(exports2, "storeAccountStatus", { enumerable: true, get: function() {
    return AccountStatus_1.storeAccountStatus;
  } });
  var AccountStatusChange_12 = AccountStatusChange;
  Object.defineProperty(exports2, "loadAccountStatusChange", { enumerable: true, get: function() {
    return AccountStatusChange_12.loadAccountStatusChange;
  } });
  Object.defineProperty(exports2, "storeAccountStatusChange", { enumerable: true, get: function() {
    return AccountStatusChange_12.storeAccountStatusChange;
  } });
  var AccountStorage_12 = AccountStorage;
  Object.defineProperty(exports2, "loadAccountStorage", { enumerable: true, get: function() {
    return AccountStorage_12.loadAccountStorage;
  } });
  Object.defineProperty(exports2, "storeAccountStorage", { enumerable: true, get: function() {
    return AccountStorage_12.storeAccountStorage;
  } });
  var CommonMessageInfo_12 = CommonMessageInfo;
  Object.defineProperty(exports2, "loadCommonMessageInfo", { enumerable: true, get: function() {
    return CommonMessageInfo_12.loadCommonMessageInfo;
  } });
  Object.defineProperty(exports2, "storeCommonMessageInfo", { enumerable: true, get: function() {
    return CommonMessageInfo_12.storeCommonMessageInfo;
  } });
  var CommonMessageInfoRelaxed_12 = CommonMessageInfoRelaxed;
  Object.defineProperty(exports2, "loadCommonMessageInfoRelaxed", { enumerable: true, get: function() {
    return CommonMessageInfoRelaxed_12.loadCommonMessageInfoRelaxed;
  } });
  Object.defineProperty(exports2, "storeCommonMessageInfoRelaxed", { enumerable: true, get: function() {
    return CommonMessageInfoRelaxed_12.storeCommonMessageInfoRelaxed;
  } });
  var ComputeSkipReason_12 = ComputeSkipReason;
  Object.defineProperty(exports2, "loadComputeSkipReason", { enumerable: true, get: function() {
    return ComputeSkipReason_12.loadComputeSkipReason;
  } });
  Object.defineProperty(exports2, "storeComputeSkipReason", { enumerable: true, get: function() {
    return ComputeSkipReason_12.storeComputeSkipReason;
  } });
  var CurrencyCollection_12 = CurrencyCollection;
  Object.defineProperty(exports2, "loadCurrencyCollection", { enumerable: true, get: function() {
    return CurrencyCollection_12.loadCurrencyCollection;
  } });
  Object.defineProperty(exports2, "storeCurrencyCollection", { enumerable: true, get: function() {
    return CurrencyCollection_12.storeCurrencyCollection;
  } });
  var DepthBalanceInfo_1 = DepthBalanceInfo;
  Object.defineProperty(exports2, "loadDepthBalanceInfo", { enumerable: true, get: function() {
    return DepthBalanceInfo_1.loadDepthBalanceInfo;
  } });
  Object.defineProperty(exports2, "storeDepthBalanceInfo", { enumerable: true, get: function() {
    return DepthBalanceInfo_1.storeDepthBalanceInfo;
  } });
  var HashUpdate_1 = HashUpdate;
  Object.defineProperty(exports2, "loadHashUpdate", { enumerable: true, get: function() {
    return HashUpdate_1.loadHashUpdate;
  } });
  Object.defineProperty(exports2, "storeHashUpdate", { enumerable: true, get: function() {
    return HashUpdate_1.storeHashUpdate;
  } });
  var MasterchainStateExtra_12 = MasterchainStateExtra;
  Object.defineProperty(exports2, "loadMasterchainStateExtra", { enumerable: true, get: function() {
    return MasterchainStateExtra_12.loadMasterchainStateExtra;
  } });
  var Message_1 = Message;
  Object.defineProperty(exports2, "loadMessage", { enumerable: true, get: function() {
    return Message_1.loadMessage;
  } });
  Object.defineProperty(exports2, "storeMessage", { enumerable: true, get: function() {
    return Message_1.storeMessage;
  } });
  var MessageRelaxed_1 = MessageRelaxed;
  Object.defineProperty(exports2, "loadMessageRelaxed", { enumerable: true, get: function() {
    return MessageRelaxed_1.loadMessageRelaxed;
  } });
  Object.defineProperty(exports2, "storeMessageRelaxed", { enumerable: true, get: function() {
    return MessageRelaxed_1.storeMessageRelaxed;
  } });
  var SendMode_1 = SendMode;
  Object.defineProperty(exports2, "SendMode", { enumerable: true, get: function() {
    return SendMode_1.SendMode;
  } });
  var ShardAccount_1 = ShardAccount;
  Object.defineProperty(exports2, "loadShardAccount", { enumerable: true, get: function() {
    return ShardAccount_1.loadShardAccount;
  } });
  Object.defineProperty(exports2, "storeShardAccount", { enumerable: true, get: function() {
    return ShardAccount_1.storeShardAccount;
  } });
  var ShardAccounts_12 = ShardAccounts;
  Object.defineProperty(exports2, "ShardAccountRefValue", { enumerable: true, get: function() {
    return ShardAccounts_12.ShardAccountRefValue;
  } });
  Object.defineProperty(exports2, "loadShardAccounts", { enumerable: true, get: function() {
    return ShardAccounts_12.loadShardAccounts;
  } });
  Object.defineProperty(exports2, "storeShardAccounts", { enumerable: true, get: function() {
    return ShardAccounts_12.storeShardAccounts;
  } });
  var ShardIdent_12 = ShardIdent;
  Object.defineProperty(exports2, "loadShardIdent", { enumerable: true, get: function() {
    return ShardIdent_12.loadShardIdent;
  } });
  Object.defineProperty(exports2, "storeShardIdent", { enumerable: true, get: function() {
    return ShardIdent_12.storeShardIdent;
  } });
  var ShardStateUnsplit_1 = ShardStateUnsplit;
  Object.defineProperty(exports2, "loadShardStateUnsplit", { enumerable: true, get: function() {
    return ShardStateUnsplit_1.loadShardStateUnsplit;
  } });
  var SimpleLibrary_12 = SimpleLibrary;
  Object.defineProperty(exports2, "loadSimpleLibrary", { enumerable: true, get: function() {
    return SimpleLibrary_12.loadSimpleLibrary;
  } });
  Object.defineProperty(exports2, "storeSimpleLibrary", { enumerable: true, get: function() {
    return SimpleLibrary_12.storeSimpleLibrary;
  } });
  var SplitMergeInfo_1 = SplitMergeInfo;
  Object.defineProperty(exports2, "loadSplitMergeInfo", { enumerable: true, get: function() {
    return SplitMergeInfo_1.loadSplitMergeInfo;
  } });
  Object.defineProperty(exports2, "storeSplitMergeInfo", { enumerable: true, get: function() {
    return SplitMergeInfo_1.storeSplitMergeInfo;
  } });
  var StateInit_12 = StateInit;
  Object.defineProperty(exports2, "loadStateInit", { enumerable: true, get: function() {
    return StateInit_12.loadStateInit;
  } });
  Object.defineProperty(exports2, "storeStateInit", { enumerable: true, get: function() {
    return StateInit_12.storeStateInit;
  } });
  var StorageInto_12 = StorageInto;
  Object.defineProperty(exports2, "loadStorageInfo", { enumerable: true, get: function() {
    return StorageInto_12.loadStorageInfo;
  } });
  Object.defineProperty(exports2, "storeStorageInfo", { enumerable: true, get: function() {
    return StorageInto_12.storeStorageInfo;
  } });
  var StorageUsed_12 = StorageUsed;
  Object.defineProperty(exports2, "loadStorageUsed", { enumerable: true, get: function() {
    return StorageUsed_12.loadStorageUsed;
  } });
  Object.defineProperty(exports2, "storeStorageUsed", { enumerable: true, get: function() {
    return StorageUsed_12.storeStorageUsed;
  } });
  var StorageUsedShort_12 = StorageUsedShort;
  Object.defineProperty(exports2, "loadStorageUsedShort", { enumerable: true, get: function() {
    return StorageUsedShort_12.loadStorageUsedShort;
  } });
  Object.defineProperty(exports2, "storeStorageUsedShort", { enumerable: true, get: function() {
    return StorageUsedShort_12.storeStorageUsedShort;
  } });
  var TickTock_12 = TickTock;
  Object.defineProperty(exports2, "loadTickTock", { enumerable: true, get: function() {
    return TickTock_12.loadTickTock;
  } });
  Object.defineProperty(exports2, "storeTickTock", { enumerable: true, get: function() {
    return TickTock_12.storeTickTock;
  } });
  var Transaction_1 = requireTransaction();
  Object.defineProperty(exports2, "loadTransaction", { enumerable: true, get: function() {
    return Transaction_1.loadTransaction;
  } });
  Object.defineProperty(exports2, "storeTransaction", { enumerable: true, get: function() {
    return Transaction_1.storeTransaction;
  } });
  var TransactionActionPhase_1 = TransactionActionPhase;
  Object.defineProperty(exports2, "loadTransactionActionPhase", { enumerable: true, get: function() {
    return TransactionActionPhase_1.loadTransactionActionPhase;
  } });
  Object.defineProperty(exports2, "storeTransactionActionPhase", { enumerable: true, get: function() {
    return TransactionActionPhase_1.storeTransactionActionPhase;
  } });
  var TransactionBouncePhase_1 = TransactionBouncePhase;
  Object.defineProperty(exports2, "loadTransactionBouncePhase", { enumerable: true, get: function() {
    return TransactionBouncePhase_1.loadTransactionBouncePhase;
  } });
  Object.defineProperty(exports2, "storeTransactionBouncePhase", { enumerable: true, get: function() {
    return TransactionBouncePhase_1.storeTransactionBouncePhase;
  } });
  var TransactionComputePhase_1 = TransactionComputePhase;
  Object.defineProperty(exports2, "loadTransactionComputePhase", { enumerable: true, get: function() {
    return TransactionComputePhase_1.loadTransactionComputePhase;
  } });
  Object.defineProperty(exports2, "storeTransactionComputePhase", { enumerable: true, get: function() {
    return TransactionComputePhase_1.storeTransactionComputePhase;
  } });
  var TransactionCreditPhase_1 = TransactionCreditPhase;
  Object.defineProperty(exports2, "loadTransactionCreditPhase", { enumerable: true, get: function() {
    return TransactionCreditPhase_1.loadTransactionCreditPhase;
  } });
  Object.defineProperty(exports2, "storeTransactionCreditPhase", { enumerable: true, get: function() {
    return TransactionCreditPhase_1.storeTransactionCreditPhase;
  } });
  var TransactionDescription_1 = requireTransactionDescription();
  Object.defineProperty(exports2, "loadTransactionDescription", { enumerable: true, get: function() {
    return TransactionDescription_1.loadTransactionDescription;
  } });
  Object.defineProperty(exports2, "storeTransactionDescription", { enumerable: true, get: function() {
    return TransactionDescription_1.storeTransactionDescription;
  } });
  var TransactionStoragePhase_1 = TransactionStoragePhase;
  Object.defineProperty(exports2, "loadTransactionStoragePhase", { enumerable: true, get: function() {
    return TransactionStoragePhase_1.loadTransactionStoragePhase;
  } });
  Object.defineProperty(exports2, "storeTransactionsStoragePhase", { enumerable: true, get: function() {
    return TransactionStoragePhase_1.storeTransactionsStoragePhase;
  } });
})(_export);
var openContract$1 = {};
Object.defineProperty(openContract$1, "__esModule", { value: true });
openContract$1.openContract = void 0;
const Address_1 = Address$1;
const Cell_1 = requireCell();
function openContract(src2, factory) {
  let address;
  let init2 = null;
  if (!Address_1.Address.isAddress(src2.address)) {
    throw Error("Invalid address");
  }
  address = src2.address;
  if (src2.init) {
    if (!(src2.init.code instanceof Cell_1.Cell)) {
      throw Error("Invalid init.code");
    }
    if (!(src2.init.data instanceof Cell_1.Cell)) {
      throw Error("Invalid init.data");
    }
    init2 = src2.init;
  }
  let executor = factory({ address, init: init2 });
  return new Proxy(src2, {
    get(target, prop) {
      const value = target[prop];
      if (typeof prop === "string" && (prop.startsWith("get") || prop.startsWith("send"))) {
        if (typeof value === "function") {
          return (...args) => value.apply(target, [executor, ...args]);
        }
      }
      return value;
    }
  });
}
openContract$1.openContract = openContract;
var ComputeError$1 = {};
Object.defineProperty(ComputeError$1, "__esModule", { value: true });
ComputeError$1.ComputeError = void 0;
class ComputeError extends Error {
  constructor(message2, exitCode, opts) {
    super(message2);
    this.exitCode = exitCode;
    this.debugLogs = opts && opts.debugLogs ? opts.debugLogs : null;
    this.logs = opts && opts.logs ? opts.logs : null;
    Object.setPrototypeOf(this, ComputeError.prototype);
  }
}
ComputeError$1.ComputeError = ComputeError;
var getMethodId$1 = {};
Object.defineProperty(getMethodId$1, "__esModule", { value: true });
getMethodId$1.getMethodId = void 0;
const TABLE = new Int16Array([
  0,
  4129,
  8258,
  12387,
  16516,
  20645,
  24774,
  28903,
  33032,
  37161,
  41290,
  45419,
  49548,
  53677,
  57806,
  61935,
  4657,
  528,
  12915,
  8786,
  21173,
  17044,
  29431,
  25302,
  37689,
  33560,
  45947,
  41818,
  54205,
  50076,
  62463,
  58334,
  9314,
  13379,
  1056,
  5121,
  25830,
  29895,
  17572,
  21637,
  42346,
  46411,
  34088,
  38153,
  58862,
  62927,
  50604,
  54669,
  13907,
  9842,
  5649,
  1584,
  30423,
  26358,
  22165,
  18100,
  46939,
  42874,
  38681,
  34616,
  63455,
  59390,
  55197,
  51132,
  18628,
  22757,
  26758,
  30887,
  2112,
  6241,
  10242,
  14371,
  51660,
  55789,
  59790,
  63919,
  35144,
  39273,
  43274,
  47403,
  23285,
  19156,
  31415,
  27286,
  6769,
  2640,
  14899,
  10770,
  56317,
  52188,
  64447,
  60318,
  39801,
  35672,
  47931,
  43802,
  27814,
  31879,
  19684,
  23749,
  11298,
  15363,
  3168,
  7233,
  60846,
  64911,
  52716,
  56781,
  44330,
  48395,
  36200,
  40265,
  32407,
  28342,
  24277,
  20212,
  15891,
  11826,
  7761,
  3696,
  65439,
  61374,
  57309,
  53244,
  48923,
  44858,
  40793,
  36728,
  37256,
  33193,
  45514,
  41451,
  53516,
  49453,
  61774,
  57711,
  4224,
  161,
  12482,
  8419,
  20484,
  16421,
  28742,
  24679,
  33721,
  37784,
  41979,
  46042,
  49981,
  54044,
  58239,
  62302,
  689,
  4752,
  8947,
  13010,
  16949,
  21012,
  25207,
  29270,
  46570,
  42443,
  38312,
  34185,
  62830,
  58703,
  54572,
  50445,
  13538,
  9411,
  5280,
  1153,
  29798,
  25671,
  21540,
  17413,
  42971,
  47098,
  34713,
  38840,
  59231,
  63358,
  50973,
  55100,
  9939,
  14066,
  1681,
  5808,
  26199,
  30326,
  17941,
  22068,
  55628,
  51565,
  63758,
  59695,
  39368,
  35305,
  47498,
  43435,
  22596,
  18533,
  30726,
  26663,
  6336,
  2273,
  14466,
  10403,
  52093,
  56156,
  60223,
  64286,
  35833,
  39896,
  43963,
  48026,
  19061,
  23124,
  27191,
  31254,
  2801,
  6864,
  10931,
  14994,
  64814,
  60687,
  56684,
  52557,
  48554,
  44427,
  40424,
  36297,
  31782,
  27655,
  23652,
  19525,
  15522,
  11395,
  7392,
  3265,
  61215,
  65342,
  53085,
  57212,
  44955,
  49082,
  36825,
  40952,
  28183,
  32310,
  20053,
  24180,
  11923,
  16050,
  3793,
  7920
]);
function crc16(data2) {
  if (!(data2 instanceof buffer$1.Buffer)) {
    data2 = buffer$1.Buffer.from(data2);
  }
  let crc = 0;
  for (let index2 = 0; index2 < data2.length; index2++) {
    const byte = data2[index2];
    crc = (TABLE[(crc >> 8 ^ byte) & 255] ^ crc << 8) & 65535;
  }
  return crc;
}
function getMethodId(name2) {
  return crc16(name2) & 65535 | 65536;
}
getMethodId$1.getMethodId = getMethodId;
var safeSign$1 = {};
Object.defineProperty(safeSign$1, "__esModule", { value: true });
safeSign$1.safeSignVerify = safeSign$1.safeSign = void 0;
const ton_crypto_1$1 = requireDist();
const MIN_SEED_LENGTH = 8;
const MAX_SEED_LENGTH = 64;
function createSafeSignHash(cell, seed) {
  let seedData = buffer$1.Buffer.from(seed);
  if (seedData.length > MAX_SEED_LENGTH) {
    throw Error("Seed can	 be longer than 64 bytes");
  }
  if (seedData.length < MIN_SEED_LENGTH) {
    throw Error("Seed must be at least 8 bytes");
  }
  return (0, ton_crypto_1$1.sha256_sync)(buffer$1.Buffer.concat([buffer$1.Buffer.from([255, 255]), seedData, cell.hash()]));
}
function safeSign(cell, secretKey, seed = "ton-safe-sign-magic") {
  return (0, ton_crypto_1$1.sign)(createSafeSignHash(cell, seed), secretKey);
}
safeSign$1.safeSign = safeSign;
function safeSignVerify(cell, signature2, publicKey, seed = "ton-safe-sign-magic") {
  return (0, ton_crypto_1$1.signVerify)(createSafeSignHash(cell, seed), signature2, publicKey);
}
safeSign$1.safeSignVerify = safeSignVerify;
(function(exports2) {
  var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    var desc = Object.getOwnPropertyDescriptor(m2, k2);
    if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m2[k2];
      } };
    }
    Object.defineProperty(o2, k22, desc);
  } : function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o2[k22] = m2[k2];
  });
  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports3) {
    for (var p2 in m2)
      if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p2))
        __createBinding2(exports3, m2, p2);
  };
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.safeSignVerify = exports2.safeSign = exports2.getMethodId = exports2.base32Encode = exports2.base32Decode = exports2.crc32c = exports2.crc16 = exports2.fromNano = exports2.toNano = exports2.ComputeError = exports2.openContract = exports2.TupleBuilder = exports2.TupleReader = exports2.serializeTuple = exports2.parseTuple = exports2.exoticPruned = exports2.exoticMerkleUpdate = exports2.exoticMerkleProof = exports2.Dictionary = exports2.Cell = exports2.CellType = exports2.Slice = exports2.beginCell = exports2.Builder = exports2.BitBuilder = exports2.BitReader = exports2.BitString = exports2.contractAddress = exports2.ADNLAddress = exports2.ExternalAddress = exports2.Address = void 0;
  var Address_12 = Address$1;
  Object.defineProperty(exports2, "Address", { enumerable: true, get: function() {
    return Address_12.Address;
  } });
  var ExternalAddress_12 = ExternalAddress$1;
  Object.defineProperty(exports2, "ExternalAddress", { enumerable: true, get: function() {
    return ExternalAddress_12.ExternalAddress;
  } });
  var ADNLAddress_1 = ADNLAddress$1;
  Object.defineProperty(exports2, "ADNLAddress", { enumerable: true, get: function() {
    return ADNLAddress_1.ADNLAddress;
  } });
  var contractAddress_1 = contractAddress$1;
  Object.defineProperty(exports2, "contractAddress", { enumerable: true, get: function() {
    return contractAddress_1.contractAddress;
  } });
  var BitString_12 = requireBitString();
  Object.defineProperty(exports2, "BitString", { enumerable: true, get: function() {
    return BitString_12.BitString;
  } });
  var BitReader_12 = BitReader$1;
  Object.defineProperty(exports2, "BitReader", { enumerable: true, get: function() {
    return BitReader_12.BitReader;
  } });
  var BitBuilder_1 = requireBitBuilder();
  Object.defineProperty(exports2, "BitBuilder", { enumerable: true, get: function() {
    return BitBuilder_1.BitBuilder;
  } });
  var Builder_12 = requireBuilder();
  Object.defineProperty(exports2, "Builder", { enumerable: true, get: function() {
    return Builder_12.Builder;
  } });
  Object.defineProperty(exports2, "beginCell", { enumerable: true, get: function() {
    return Builder_12.beginCell;
  } });
  var Slice_12 = requireSlice();
  Object.defineProperty(exports2, "Slice", { enumerable: true, get: function() {
    return Slice_12.Slice;
  } });
  var CellType_12 = CellType;
  Object.defineProperty(exports2, "CellType", { enumerable: true, get: function() {
    return CellType_12.CellType;
  } });
  var Cell_12 = requireCell();
  Object.defineProperty(exports2, "Cell", { enumerable: true, get: function() {
    return Cell_12.Cell;
  } });
  var Dictionary_12 = requireDictionary();
  Object.defineProperty(exports2, "Dictionary", { enumerable: true, get: function() {
    return Dictionary_12.Dictionary;
  } });
  var exoticMerkleProof_12 = exoticMerkleProof$1;
  Object.defineProperty(exports2, "exoticMerkleProof", { enumerable: true, get: function() {
    return exoticMerkleProof_12.exoticMerkleProof;
  } });
  var exoticMerkleUpdate_12 = exoticMerkleUpdate$1;
  Object.defineProperty(exports2, "exoticMerkleUpdate", { enumerable: true, get: function() {
    return exoticMerkleUpdate_12.exoticMerkleUpdate;
  } });
  var exoticPruned_12 = exoticPruned$1;
  Object.defineProperty(exports2, "exoticPruned", { enumerable: true, get: function() {
    return exoticPruned_12.exoticPruned;
  } });
  var tuple_1 = tuple$1;
  Object.defineProperty(exports2, "parseTuple", { enumerable: true, get: function() {
    return tuple_1.parseTuple;
  } });
  Object.defineProperty(exports2, "serializeTuple", { enumerable: true, get: function() {
    return tuple_1.serializeTuple;
  } });
  var reader_1 = reader;
  Object.defineProperty(exports2, "TupleReader", { enumerable: true, get: function() {
    return reader_1.TupleReader;
  } });
  var builder_1 = builder;
  Object.defineProperty(exports2, "TupleBuilder", { enumerable: true, get: function() {
    return builder_1.TupleBuilder;
  } });
  __exportStar(_export, exports2);
  var openContract_1 = openContract$1;
  Object.defineProperty(exports2, "openContract", { enumerable: true, get: function() {
    return openContract_1.openContract;
  } });
  var ComputeError_1 = ComputeError$1;
  Object.defineProperty(exports2, "ComputeError", { enumerable: true, get: function() {
    return ComputeError_1.ComputeError;
  } });
  var convert_12 = convert;
  Object.defineProperty(exports2, "toNano", { enumerable: true, get: function() {
    return convert_12.toNano;
  } });
  Object.defineProperty(exports2, "fromNano", { enumerable: true, get: function() {
    return convert_12.fromNano;
  } });
  var crc16_12 = crc16$2;
  Object.defineProperty(exports2, "crc16", { enumerable: true, get: function() {
    return crc16_12.crc16;
  } });
  var crc32c_1 = crc32c$1;
  Object.defineProperty(exports2, "crc32c", { enumerable: true, get: function() {
    return crc32c_1.crc32c;
  } });
  var base32_12 = base32;
  Object.defineProperty(exports2, "base32Decode", { enumerable: true, get: function() {
    return base32_12.base32Decode;
  } });
  Object.defineProperty(exports2, "base32Encode", { enumerable: true, get: function() {
    return base32_12.base32Encode;
  } });
  var getMethodId_1 = getMethodId$1;
  Object.defineProperty(exports2, "getMethodId", { enumerable: true, get: function() {
    return getMethodId_1.getMethodId;
  } });
  var safeSign_1 = safeSign$1;
  Object.defineProperty(exports2, "safeSign", { enumerable: true, get: function() {
    return safeSign_1.safeSign;
  } });
  Object.defineProperty(exports2, "safeSignVerify", { enumerable: true, get: function() {
    return safeSign_1.safeSignVerify;
  } });
})(dist$1);
var HttpApi$1 = {};
var __spreadArray$5 = globalThis && globalThis.__spreadArray || function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i2 = 0, l2 = from.length, ar; i2 < l2; i2++) {
      if (ar || !(i2 in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i2);
        ar[i2] = from[i2];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
function identity$1(a2) {
  return a2;
}
function constant(a2) {
  return function() {
    return a2;
  };
}
var constNull = /* @__PURE__ */ constant(null);
var constUndefined = /* @__PURE__ */ constant(void 0);
function flow(ab2, bc2, cd2, de2, ef2, fg2, gh2, hi2, ij2) {
  switch (arguments.length) {
    case 1:
      return ab2;
    case 2:
      return function() {
        return bc2(ab2.apply(this, arguments));
      };
    case 3:
      return function() {
        return cd2(bc2(ab2.apply(this, arguments)));
      };
    case 4:
      return function() {
        return de2(cd2(bc2(ab2.apply(this, arguments))));
      };
    case 5:
      return function() {
        return ef2(de2(cd2(bc2(ab2.apply(this, arguments)))));
      };
    case 6:
      return function() {
        return fg2(ef2(de2(cd2(bc2(ab2.apply(this, arguments))))));
      };
    case 7:
      return function() {
        return gh2(fg2(ef2(de2(cd2(bc2(ab2.apply(this, arguments)))))));
      };
    case 8:
      return function() {
        return hi2(gh2(fg2(ef2(de2(cd2(bc2(ab2.apply(this, arguments))))))));
      };
    case 9:
      return function() {
        return ij2(hi2(gh2(fg2(ef2(de2(cd2(bc2(ab2.apply(this, arguments)))))))));
      };
  }
  return;
}
function pipe$1(a2, ab2, bc2, cd2, de2, ef2, fg2, gh2, hi2) {
  switch (arguments.length) {
    case 1:
      return a2;
    case 2:
      return ab2(a2);
    case 3:
      return bc2(ab2(a2));
    case 4:
      return cd2(bc2(ab2(a2)));
    case 5:
      return de2(cd2(bc2(ab2(a2))));
    case 6:
      return ef2(de2(cd2(bc2(ab2(a2)))));
    case 7:
      return fg2(ef2(de2(cd2(bc2(ab2(a2))))));
    case 8:
      return gh2(fg2(ef2(de2(cd2(bc2(ab2(a2)))))));
    case 9:
      return hi2(gh2(fg2(ef2(de2(cd2(bc2(ab2(a2))))))));
    default: {
      var ret = arguments[0];
      for (var i2 = 1; i2 < arguments.length; i2++) {
        ret = arguments[i2](ret);
      }
      return ret;
    }
  }
}
var SK = function(_2, b2) {
  return b2;
};
var dual = function(arity, body) {
  var isDataFirst = typeof arity === "number" ? function(args) {
    return args.length >= arity;
  } : arity;
  return function() {
    var args = Array.from(arguments);
    if (isDataFirst(arguments)) {
      return body.apply(this, args);
    }
    return function(self2) {
      return body.apply(void 0, __spreadArray$5([self2], args, false));
    };
  };
};
var __spreadArray$4 = globalThis && globalThis.__spreadArray || function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i2 = 0, l2 = from.length, ar; i2 < l2; i2++) {
      if (ar || !(i2 in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i2);
        ar[i2] = from[i2];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var isNone$1 = function(fa2) {
  return fa2._tag === "None";
};
var isSome$1 = function(fa2) {
  return fa2._tag === "Some";
};
var none$1 = { _tag: "None" };
var some$4 = function(a2) {
  return { _tag: "Some", value: a2 };
};
var isLeft$1 = function(ma2) {
  return ma2._tag === "Left";
};
var isRight$1 = function(ma2) {
  return ma2._tag === "Right";
};
var left$1 = function(e2) {
  return { _tag: "Left", left: e2 };
};
var right$1 = function(a2) {
  return { _tag: "Right", right: a2 };
};
var isNonEmpty$5 = function(as2) {
  return as2.length > 0;
};
var head$4 = function(as2) {
  return as2[0];
};
var tail$3 = function(as2) {
  return as2.slice(1);
};
var emptyReadonlyArray = [];
var emptyRecord = {};
var has$2 = Object.prototype.hasOwnProperty;
var fromReadonlyNonEmptyArray$1 = function(as2) {
  return __spreadArray$4([as2[0]], as2.slice(1), true);
};
var liftNullable$1 = function(F2) {
  return function(f2, onNullable) {
    return function() {
      var a2 = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        a2[_i] = arguments[_i];
      }
      var o2 = f2.apply(void 0, a2);
      return F2.fromEither(o2 == null ? left$1(onNullable.apply(void 0, a2)) : right$1(o2));
    };
  };
};
var liftOption$1 = function(F2) {
  return function(f2, onNone) {
    return function() {
      var a2 = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        a2[_i] = arguments[_i];
      }
      var o2 = f2.apply(void 0, a2);
      return F2.fromEither(isNone$1(o2) ? left$1(onNone.apply(void 0, a2)) : right$1(o2.value));
    };
  };
};
var flatMapNullable$1 = function(F2, M2) {
  return /* @__PURE__ */ dual(3, function(self2, f2, onNullable) {
    return M2.flatMap(self2, liftNullable$1(F2)(f2, onNullable));
  });
};
var flatMapOption$1 = function(F2, M2) {
  return /* @__PURE__ */ dual(3, function(self2, f2, onNone) {
    return M2.flatMap(self2, liftOption$1(F2)(f2, onNone));
  });
};
function apFirst$5(A2) {
  return function(second) {
    return function(first2) {
      return A2.ap(A2.map(first2, function(a2) {
        return function() {
          return a2;
        };
      }), second);
    };
  };
}
function apSecond$5(A2) {
  return function(second) {
    return function(first2) {
      return A2.ap(A2.map(first2, function() {
        return function(b2) {
          return b2;
        };
      }), second);
    };
  };
}
function apS$5(F2) {
  return function(name2, fb2) {
    return function(fa2) {
      return F2.ap(F2.map(fa2, function(a2) {
        return function(b2) {
          var _a2;
          return Object.assign({}, a2, (_a2 = {}, _a2[name2] = b2, _a2));
        };
      }), fb2);
    };
  };
}
function getApplySemigroup$3(F2) {
  return function(S2) {
    return {
      concat: function(first2, second) {
        return F2.ap(F2.map(first2, function(x2) {
          return function(y2) {
            return S2.concat(x2, y2);
          };
        }), second);
      }
    };
  };
}
function flap$6(F2) {
  return function(a2) {
    return function(fab) {
      return F2.map(fab, function(f2) {
        return f2(a2);
      });
    };
  };
}
function bindTo$5(F2) {
  return function(name2) {
    return function(fa2) {
      return F2.map(fa2, function(a2) {
        var _a2;
        return _a2 = {}, _a2[name2] = a2, _a2;
      });
    };
  };
}
function let_$5(F2) {
  return function(name2, f2) {
    return function(fa2) {
      return F2.map(fa2, function(a2) {
        var _a2;
        return Object.assign({}, a2, (_a2 = {}, _a2[name2] = f2(a2), _a2));
      });
    };
  };
}
function as$3(F2) {
  return function(self2, b2) {
    return F2.map(self2, function() {
      return b2;
    });
  };
}
function asUnit$3(F2) {
  var asM = as$3(F2);
  return function(self2) {
    return asM(self2, void 0);
  };
}
function getApplicativeMonoid$1(F2) {
  var f2 = getApplySemigroup$3(F2);
  return function(M2) {
    return {
      concat: f2(M2).concat,
      empty: F2.of(M2.empty)
    };
  };
}
function chainFirst$5(M2) {
  var tapM = tap$3(M2);
  return function(f2) {
    return function(first2) {
      return tapM(first2, f2);
    };
  };
}
function tap$3(M2) {
  return function(first2, f2) {
    return M2.chain(first2, function(a2) {
      return M2.map(f2(a2), function() {
        return a2;
      });
    });
  };
}
function bind$5(M2) {
  return function(name2, f2) {
    return function(ma2) {
      return M2.chain(ma2, function(a2) {
        return M2.map(f2(a2), function(b2) {
          var _a2;
          return Object.assign({}, a2, (_a2 = {}, _a2[name2] = b2, _a2));
        });
      });
    };
  };
}
var tailRec$1 = function(startWith, f2) {
  var ab2 = f2(startWith);
  while (ab2._tag === "Left") {
    ab2 = f2(ab2.left);
  }
  return ab2.right;
};
function fromOption$3(F2) {
  return function(onNone) {
    return function(ma2) {
      return F2.fromEither(isNone$1(ma2) ? left$1(onNone()) : right$1(ma2.value));
    };
  };
}
function fromPredicate$4(F2) {
  return function(predicate, onFalse) {
    return function(a2) {
      return F2.fromEither(predicate(a2) ? right$1(a2) : left$1(onFalse(a2)));
    };
  };
}
function fromOptionK$3(F2) {
  var fromOptionF = fromOption$3(F2);
  return function(onNone) {
    var from = fromOptionF(onNone);
    return function(f2) {
      return flow(f2, from);
    };
  };
}
function chainOptionK$2(F2, M2) {
  var fromOptionKF = fromOptionK$3(F2);
  return function(onNone) {
    var from = fromOptionKF(onNone);
    return function(f2) {
      return function(ma2) {
        return M2.chain(ma2, from(f2));
      };
    };
  };
}
function fromEitherK$3(F2) {
  return function(f2) {
    return flow(f2, F2.fromEither);
  };
}
function chainEitherK$2(F2, M2) {
  var fromEitherKF = fromEitherK$3(F2);
  return function(f2) {
    return function(ma2) {
      return M2.chain(ma2, fromEitherKF(f2));
    };
  };
}
function filterOrElse$2(F2, M2) {
  return function(predicate, onFalse) {
    return function(ma2) {
      return M2.chain(ma2, function(a2) {
        return F2.fromEither(predicate(a2) ? right$1(a2) : left$1(onFalse(a2)));
      });
    };
  };
}
function tapEither$2(F2, M2) {
  var fromEither2 = fromEitherK$3(F2);
  var tapM = tap$3(M2);
  return function(self2, f2) {
    return tapM(self2, fromEither2(f2));
  };
}
var separated = function(left2, right2) {
  return { left: left2, right: right2 };
};
function wiltDefault$1(T2, C2) {
  return function(F2) {
    var traverseF = T2.traverse(F2);
    return function(wa2, f2) {
      return F2.map(traverseF(wa2, f2), C2.separate);
    };
  };
}
function witherDefault$1(T2, C2) {
  return function(F2) {
    var traverseF = T2.traverse(F2);
    return function(wa2, f2) {
      return F2.map(traverseF(wa2, f2), C2.compact);
    };
  };
}
function filterE$2(W2) {
  return function(F2) {
    var witherF = W2.wither(F2);
    return function(predicate) {
      return function(ga) {
        return witherF(ga, function(a2) {
          return F2.map(predicate(a2), function(b2) {
            return b2 ? some$4(a2) : none$1;
          });
        });
      };
    };
  };
}
var left = left$1;
var right = right$1;
var flatMap$3 = /* @__PURE__ */ dual(2, function(ma2, f2) {
  return isLeft(ma2) ? ma2 : f2(ma2.right);
});
var _map$5 = function(fa2, f2) {
  return pipe$1(fa2, map$7(f2));
};
var _ap$3 = function(fab, fa2) {
  return pipe$1(fab, ap$5(fa2));
};
var _reduce$5 = function(fa2, b2, f2) {
  return pipe$1(fa2, reduce$8(b2, f2));
};
var _foldMap$5 = function(M2) {
  return function(fa2, f2) {
    var foldMapM = foldMap$8(M2);
    return pipe$1(fa2, foldMapM(f2));
  };
};
var _reduceRight$5 = function(fa2, b2, f2) {
  return pipe$1(fa2, reduceRight$8(b2, f2));
};
var _traverse$5 = function(F2) {
  var traverseF = traverse$5(F2);
  return function(ta2, f2) {
    return pipe$1(ta2, traverseF(f2));
  };
};
var _bimap = function(fa2, f2, g2) {
  return pipe$1(fa2, bimap$1(f2, g2));
};
var _mapLeft = function(fa2, f2) {
  return pipe$1(fa2, mapLeft$1(f2));
};
var _alt$3 = function(fa2, that) {
  return pipe$1(fa2, alt$4(that));
};
var _extend$3 = function(wa2, f2) {
  return pipe$1(wa2, extend$4(f2));
};
var _chainRec = function(a2, f2) {
  return tailRec$1(f2(a2), function(e2) {
    return isLeft(e2) ? right(left(e2.left)) : isLeft(e2.right) ? left(f2(e2.right.left)) : right(right(e2.right.right));
  });
};
var URI$4 = "Either";
var getShow$7 = function(SE, SA) {
  return {
    show: function(ma2) {
      return isLeft(ma2) ? "left(".concat(SE.show(ma2.left), ")") : "right(".concat(SA.show(ma2.right), ")");
    }
  };
};
var getEq$7 = function(EL, EA) {
  return {
    equals: function(x2, y2) {
      return x2 === y2 || (isLeft(x2) ? isLeft(y2) && EL.equals(x2.left, y2.left) : isRight(y2) && EA.equals(x2.right, y2.right));
    }
  };
};
var getSemigroup$3 = function(S2) {
  return {
    concat: function(x2, y2) {
      return isLeft(y2) ? x2 : isLeft(x2) ? y2 : right(S2.concat(x2.right, y2.right));
    }
  };
};
var getCompactable = function(M2) {
  var empty2 = left(M2.empty);
  return {
    URI: URI$4,
    _E: void 0,
    compact: function(ma2) {
      return isLeft(ma2) ? ma2 : ma2.right._tag === "None" ? empty2 : right(ma2.right.value);
    },
    separate: function(ma2) {
      return isLeft(ma2) ? separated(ma2, ma2) : isLeft(ma2.right) ? separated(right(ma2.right.left), empty2) : separated(empty2, right(ma2.right.right));
    }
  };
};
var getFilterable = function(M2) {
  var empty2 = left(M2.empty);
  var _a2 = getCompactable(M2), compact2 = _a2.compact, separate2 = _a2.separate;
  var filter2 = function(ma2, predicate) {
    return isLeft(ma2) ? ma2 : predicate(ma2.right) ? ma2 : empty2;
  };
  var partition2 = function(ma2, p2) {
    return isLeft(ma2) ? separated(ma2, ma2) : p2(ma2.right) ? separated(empty2, right(ma2.right)) : separated(right(ma2.right), empty2);
  };
  return {
    URI: URI$4,
    _E: void 0,
    map: _map$5,
    compact: compact2,
    separate: separate2,
    filter: filter2,
    filterMap: function(ma2, f2) {
      if (isLeft(ma2)) {
        return ma2;
      }
      var ob2 = f2(ma2.right);
      return ob2._tag === "None" ? empty2 : right(ob2.value);
    },
    partition: partition2,
    partitionMap: function(ma2, f2) {
      if (isLeft(ma2)) {
        return separated(ma2, ma2);
      }
      var e2 = f2(ma2.right);
      return isLeft(e2) ? separated(right(e2.left), empty2) : separated(empty2, right(e2.right));
    }
  };
};
var getWitherable$1 = function(M2) {
  var F_ = getFilterable(M2);
  var C2 = getCompactable(M2);
  return {
    URI: URI$4,
    _E: void 0,
    map: _map$5,
    compact: F_.compact,
    separate: F_.separate,
    filter: F_.filter,
    filterMap: F_.filterMap,
    partition: F_.partition,
    partitionMap: F_.partitionMap,
    traverse: _traverse$5,
    sequence: sequence$5,
    reduce: _reduce$5,
    foldMap: _foldMap$5,
    reduceRight: _reduceRight$5,
    wither: witherDefault$1(Traversable$4, C2),
    wilt: wiltDefault$1(Traversable$4, C2)
  };
};
var getApplicativeValidation = function(SE) {
  return {
    URI: URI$4,
    _E: void 0,
    map: _map$5,
    ap: function(fab, fa2) {
      return isLeft(fab) ? isLeft(fa2) ? left(SE.concat(fab.left, fa2.left)) : fab : isLeft(fa2) ? fa2 : right(fab.right(fa2.right));
    },
    of: of$3
  };
};
var getAltValidation = function(SE) {
  return {
    URI: URI$4,
    _E: void 0,
    map: _map$5,
    alt: function(me2, that) {
      if (isRight(me2)) {
        return me2;
      }
      var ea2 = that();
      return isLeft(ea2) ? left(SE.concat(me2.left, ea2.left)) : ea2;
    }
  };
};
var map$7 = function(f2) {
  return function(fa2) {
    return isLeft(fa2) ? fa2 : right(f2(fa2.right));
  };
};
var Functor$5 = {
  URI: URI$4,
  map: _map$5
};
var as$2 = dual(2, as$3(Functor$5));
var asUnit$2 = asUnit$3(Functor$5);
var of$3 = right;
var Pointed$3 = {
  URI: URI$4,
  of: of$3
};
var apW = function(fa2) {
  return function(fab) {
    return isLeft(fab) ? fab : isLeft(fa2) ? fa2 : right(fab.right(fa2.right));
  };
};
var ap$5 = apW;
var Apply$4 = {
  URI: URI$4,
  map: _map$5,
  ap: _ap$3
};
var Applicative$4 = {
  URI: URI$4,
  map: _map$5,
  ap: _ap$3,
  of: of$3
};
var Chain$4 = {
  URI: URI$4,
  map: _map$5,
  ap: _ap$3,
  chain: flatMap$3
};
var Monad$3 = {
  URI: URI$4,
  map: _map$5,
  ap: _ap$3,
  of: of$3,
  chain: flatMap$3
};
var reduce$8 = function(b2, f2) {
  return function(fa2) {
    return isLeft(fa2) ? b2 : f2(b2, fa2.right);
  };
};
var foldMap$8 = function(M2) {
  return function(f2) {
    return function(fa2) {
      return isLeft(fa2) ? M2.empty : f2(fa2.right);
    };
  };
};
var reduceRight$8 = function(b2, f2) {
  return function(fa2) {
    return isLeft(fa2) ? b2 : f2(fa2.right, b2);
  };
};
var Foldable$4 = {
  URI: URI$4,
  reduce: _reduce$5,
  foldMap: _foldMap$5,
  reduceRight: _reduceRight$5
};
var traverse$5 = function(F2) {
  return function(f2) {
    return function(ta2) {
      return isLeft(ta2) ? F2.of(left(ta2.left)) : F2.map(f2(ta2.right), right);
    };
  };
};
var sequence$5 = function(F2) {
  return function(ma2) {
    return isLeft(ma2) ? F2.of(left(ma2.left)) : F2.map(ma2.right, right);
  };
};
var Traversable$4 = {
  URI: URI$4,
  map: _map$5,
  reduce: _reduce$5,
  foldMap: _foldMap$5,
  reduceRight: _reduceRight$5,
  traverse: _traverse$5,
  sequence: sequence$5
};
var bimap$1 = function(f2, g2) {
  return function(fa2) {
    return isLeft(fa2) ? left(f2(fa2.left)) : right(g2(fa2.right));
  };
};
var mapLeft$1 = function(f2) {
  return function(fa2) {
    return isLeft(fa2) ? left(f2(fa2.left)) : fa2;
  };
};
var Bifunctor = {
  URI: URI$4,
  bimap: _bimap,
  mapLeft: _mapLeft
};
var altW$3 = function(that) {
  return function(fa2) {
    return isLeft(fa2) ? that() : fa2;
  };
};
var alt$4 = altW$3;
var Alt$3 = {
  URI: URI$4,
  map: _map$5,
  alt: _alt$3
};
var extend$4 = function(f2) {
  return function(wa2) {
    return isLeft(wa2) ? wa2 : right(f2(wa2));
  };
};
var Extend$2 = {
  URI: URI$4,
  map: _map$5,
  extend: _extend$3
};
var ChainRec$1 = {
  URI: URI$4,
  map: _map$5,
  ap: _ap$3,
  chain: flatMap$3,
  chainRec: _chainRec
};
var throwError$1 = left;
var MonadThrow$1 = {
  URI: URI$4,
  map: _map$5,
  ap: _ap$3,
  of: of$3,
  chain: flatMap$3,
  throwError: throwError$1
};
var FromEither$3 = {
  URI: URI$4,
  fromEither: identity$1
};
var fromPredicate$3 = /* @__PURE__ */ fromPredicate$4(FromEither$3);
var fromOption$2 = /* @__PURE__ */ fromOption$3(FromEither$3);
var isLeft = isLeft$1;
var isRight = isRight$1;
var matchW$3 = function(onLeft, onRight) {
  return function(ma2) {
    return isLeft(ma2) ? onLeft(ma2.left) : onRight(ma2.right);
  };
};
var foldW$1 = matchW$3;
var match$3 = matchW$3;
var fold$2 = match$3;
var getOrElseW$1 = function(onLeft) {
  return function(ma2) {
    return isLeft(ma2) ? onLeft(ma2.left) : ma2.right;
  };
};
var getOrElse$1 = getOrElseW$1;
var flap$5 = /* @__PURE__ */ flap$6(Functor$5);
var apFirst$4 = /* @__PURE__ */ apFirst$5(Apply$4);
var apFirstW = apFirst$4;
var apSecond$4 = /* @__PURE__ */ apSecond$5(Apply$4);
var apSecondW = apSecond$4;
var tap$2 = /* @__PURE__ */ dual(2, tap$3(Chain$4));
var flattenW = /* @__PURE__ */ flatMap$3(identity$1);
var flatten$3 = flattenW;
var duplicate$3 = /* @__PURE__ */ extend$4(identity$1);
var fromOptionK$2 = /* @__PURE__ */ fromOptionK$3(FromEither$3);
var chainOptionK$1 = /* @__PURE__ */ chainOptionK$2(FromEither$3, Chain$4);
var chainOptionKW = chainOptionK$1;
var _FromEither = {
  fromEither: FromEither$3.fromEither
};
var liftNullable = /* @__PURE__ */ liftNullable$1(_FromEither);
var liftOption = /* @__PURE__ */ liftOption$1(_FromEither);
var _FlatMap = {
  flatMap: flatMap$3
};
var flatMapNullable = /* @__PURE__ */ flatMapNullable$1(_FromEither, _FlatMap);
var flatMapOption = /* @__PURE__ */ flatMapOption$1(_FromEither, _FlatMap);
var filterOrElse$1 = /* @__PURE__ */ filterOrElse$2(FromEither$3, Chain$4);
var filterOrElseW = filterOrElse$1;
var swap = function(ma2) {
  return isLeft(ma2) ? right(ma2.left) : left(ma2.right);
};
var orElseW = function(onLeft) {
  return function(ma2) {
    return isLeft(ma2) ? onLeft(ma2.left) : ma2;
  };
};
var orElse$1 = orElseW;
var fromNullable$1 = function(e2) {
  return function(a2) {
    return a2 == null ? left(e2) : right(a2);
  };
};
var tryCatch$1 = function(f2, onThrow) {
  try {
    return right(f2());
  } catch (e2) {
    return left(onThrow(e2));
  }
};
var tryCatchK$1 = function(f2, onThrow) {
  return function() {
    var a2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a2[_i] = arguments[_i];
    }
    return tryCatch$1(function() {
      return f2.apply(void 0, a2);
    }, onThrow);
  };
};
var fromNullableK$1 = function(e2) {
  var from = fromNullable$1(e2);
  return function(f2) {
    return flow(f2, from);
  };
};
var chainNullableK$1 = function(e2) {
  var from = fromNullableK$1(e2);
  return function(f2) {
    return flatMap$3(from(f2));
  };
};
var toUnion = /* @__PURE__ */ foldW$1(identity$1, identity$1);
function toError(e2) {
  try {
    return e2 instanceof Error ? e2 : new Error(String(e2));
  } catch (error) {
    return new Error();
  }
}
function elem$5(E2) {
  return function(a2, ma2) {
    if (ma2 === void 0) {
      var elemE_1 = elem$5(E2);
      return function(ma3) {
        return elemE_1(a2, ma3);
      };
    }
    return isLeft(ma2) ? false : E2.equals(a2, ma2.right);
  };
}
var exists$2 = function(predicate) {
  return function(ma2) {
    return isLeft(ma2) ? false : predicate(ma2.right);
  };
};
var Do$3 = /* @__PURE__ */ of$3(emptyRecord);
var bindTo$4 = /* @__PURE__ */ bindTo$5(Functor$5);
var let_$4 = /* @__PURE__ */ let_$5(Functor$5);
var bind$4 = /* @__PURE__ */ bind$5(Chain$4);
var bindW = bind$4;
var apS$4 = /* @__PURE__ */ apS$5(Apply$4);
var apSW = apS$4;
var ApT$1 = /* @__PURE__ */ of$3(emptyReadonlyArray);
var traverseReadonlyNonEmptyArrayWithIndex$1 = function(f2) {
  return function(as2) {
    var e2 = f2(0, head$4(as2));
    if (isLeft(e2)) {
      return e2;
    }
    var out = [e2.right];
    for (var i2 = 1; i2 < as2.length; i2++) {
      var e_1 = f2(i2, as2[i2]);
      if (isLeft(e_1)) {
        return e_1;
      }
      out.push(e_1.right);
    }
    return right(out);
  };
};
var traverseReadonlyArrayWithIndex$1 = function(f2) {
  var g2 = traverseReadonlyNonEmptyArrayWithIndex$1(f2);
  return function(as2) {
    return isNonEmpty$5(as2) ? g2(as2) : ApT$1;
  };
};
var traverseArrayWithIndex$1 = traverseReadonlyArrayWithIndex$1;
var traverseArray$1 = function(f2) {
  return traverseReadonlyArrayWithIndex$1(function(_2, a2) {
    return f2(a2);
  });
};
var sequenceArray$1 = /* @__PURE__ */ traverseArray$1(identity$1);
var chainW = flatMap$3;
var chain$4 = flatMap$3;
var chainFirst$4 = tap$2;
var chainFirstW = tap$2;
function parseJSON(s2, onError) {
  return tryCatch$1(function() {
    return JSON.parse(s2);
  }, onError);
}
var stringifyJSON = function(u2, onError) {
  return tryCatch$1(function() {
    var s2 = JSON.stringify(u2);
    if (typeof s2 !== "string") {
      throw new Error("Converting unsupported structure to JSON");
    }
    return s2;
  }, onError);
};
var either = {
  URI: URI$4,
  map: _map$5,
  of: of$3,
  ap: _ap$3,
  chain: flatMap$3,
  reduce: _reduce$5,
  foldMap: _foldMap$5,
  reduceRight: _reduceRight$5,
  traverse: _traverse$5,
  sequence: sequence$5,
  bimap: _bimap,
  mapLeft: _mapLeft,
  alt: _alt$3,
  extend: _extend$3,
  chainRec: _chainRec,
  throwError: throwError$1
};
var getApplySemigroup$2 = /* @__PURE__ */ getApplySemigroup$3(Apply$4);
var getApplyMonoid$1 = /* @__PURE__ */ getApplicativeMonoid$1(Applicative$4);
var getValidationSemigroup = function(SE, SA) {
  return getApplySemigroup$3(getApplicativeValidation(SE))(SA);
};
var getValidationMonoid = function(SE, MA) {
  return getApplicativeMonoid$1(getApplicativeValidation(SE))(MA);
};
function getValidation(SE) {
  var ap2 = getApplicativeValidation(SE).ap;
  var alt2 = getAltValidation(SE).alt;
  return {
    URI: URI$4,
    _E: void 0,
    map: _map$5,
    of: of$3,
    chain: flatMap$3,
    bimap: _bimap,
    mapLeft: _mapLeft,
    reduce: _reduce$5,
    foldMap: _foldMap$5,
    reduceRight: _reduceRight$5,
    extend: _extend$3,
    traverse: _traverse$5,
    sequence: sequence$5,
    chainRec: _chainRec,
    throwError: throwError$1,
    ap: ap2,
    alt: alt2
  };
}
const Either$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Alt: Alt$3,
  ApT: ApT$1,
  Applicative: Applicative$4,
  Apply: Apply$4,
  Bifunctor,
  Chain: Chain$4,
  ChainRec: ChainRec$1,
  Do: Do$3,
  Extend: Extend$2,
  Foldable: Foldable$4,
  FromEither: FromEither$3,
  Functor: Functor$5,
  Monad: Monad$3,
  MonadThrow: MonadThrow$1,
  Pointed: Pointed$3,
  Traversable: Traversable$4,
  URI: URI$4,
  alt: alt$4,
  altW: altW$3,
  ap: ap$5,
  apFirst: apFirst$4,
  apFirstW,
  apS: apS$4,
  apSW,
  apSecond: apSecond$4,
  apSecondW,
  apW,
  as: as$2,
  asUnit: asUnit$2,
  bimap: bimap$1,
  bind: bind$4,
  bindTo: bindTo$4,
  bindW,
  chain: chain$4,
  chainFirst: chainFirst$4,
  chainFirstW,
  chainNullableK: chainNullableK$1,
  chainOptionK: chainOptionK$1,
  chainOptionKW,
  chainW,
  duplicate: duplicate$3,
  either,
  elem: elem$5,
  exists: exists$2,
  extend: extend$4,
  filterOrElse: filterOrElse$1,
  filterOrElseW,
  flap: flap$5,
  flatMap: flatMap$3,
  flatMapNullable,
  flatMapOption,
  flatten: flatten$3,
  flattenW,
  fold: fold$2,
  foldMap: foldMap$8,
  foldW: foldW$1,
  fromNullable: fromNullable$1,
  fromNullableK: fromNullableK$1,
  fromOption: fromOption$2,
  fromOptionK: fromOptionK$2,
  fromPredicate: fromPredicate$3,
  getAltValidation,
  getApplicativeValidation,
  getApplyMonoid: getApplyMonoid$1,
  getApplySemigroup: getApplySemigroup$2,
  getCompactable,
  getEq: getEq$7,
  getFilterable,
  getOrElse: getOrElse$1,
  getOrElseW: getOrElseW$1,
  getSemigroup: getSemigroup$3,
  getShow: getShow$7,
  getValidation,
  getValidationMonoid,
  getValidationSemigroup,
  getWitherable: getWitherable$1,
  isLeft,
  isRight,
  left,
  let: let_$4,
  liftNullable,
  liftOption,
  map: map$7,
  mapLeft: mapLeft$1,
  match: match$3,
  matchW: matchW$3,
  of: of$3,
  orElse: orElse$1,
  orElseW,
  parseJSON,
  reduce: reduce$8,
  reduceRight: reduceRight$8,
  right,
  sequence: sequence$5,
  sequenceArray: sequenceArray$1,
  stringifyJSON,
  swap,
  tap: tap$2,
  throwError: throwError$1,
  toError,
  toUnion,
  traverse: traverse$5,
  traverseArray: traverseArray$1,
  traverseArrayWithIndex: traverseArrayWithIndex$1,
  traverseReadonlyArrayWithIndex: traverseReadonlyArrayWithIndex$1,
  traverseReadonlyNonEmptyArrayWithIndex: traverseReadonlyNonEmptyArrayWithIndex$1,
  tryCatch: tryCatch$1,
  tryCatchK: tryCatchK$1
}, Symbol.toStringTag, { value: "Module" }));
var __extends = globalThis && globalThis.__extends || function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d3[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign$1 = globalThis && globalThis.__assign || function() {
  __assign$1 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign$1.apply(this, arguments);
};
var __spreadArray$3 = globalThis && globalThis.__spreadArray || function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i2 = 0, l2 = from.length, ar; i2 < l2; i2++) {
      if (ar || !(i2 in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i2);
        ar[i2] = from[i2];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var failures = left;
var failure = function(value, context, message2) {
  return failures([{ value, context, message: message2 }]);
};
var success = right;
var Type = (
  /** @class */
  function() {
    function Type2(name2, is, validate, encode2) {
      this.name = name2;
      this.is = is;
      this.validate = validate;
      this.encode = encode2;
      this.decode = this.decode.bind(this);
    }
    Type2.prototype.pipe = function(ab2, name2) {
      var _this = this;
      if (name2 === void 0) {
        name2 = "pipe(".concat(this.name, ", ").concat(ab2.name, ")");
      }
      return new Type2(name2, ab2.is, function(i2, c2) {
        var e2 = _this.validate(i2, c2);
        if (isLeft(e2)) {
          return e2;
        }
        return ab2.validate(e2.right, c2);
      }, this.encode === identity && ab2.encode === identity ? identity : function(b2) {
        return _this.encode(ab2.encode(b2));
      });
    };
    Type2.prototype.asDecoder = function() {
      return this;
    };
    Type2.prototype.asEncoder = function() {
      return this;
    };
    Type2.prototype.decode = function(i2) {
      return this.validate(i2, [{ key: "", type: this, actual: i2 }]);
    };
    return Type2;
  }()
);
var identity = function(a2) {
  return a2;
};
function getFunctionName(f2) {
  return f2.displayName || f2.name || "<function".concat(f2.length, ">");
}
function getContextEntry(key2, decoder) {
  return { key: key2, type: decoder };
}
function appendContext(c2, key2, decoder, actual) {
  var len2 = c2.length;
  var r2 = Array(len2 + 1);
  for (var i2 = 0; i2 < len2; i2++) {
    r2[i2] = c2[i2];
  }
  r2[len2] = { key: key2, type: decoder, actual };
  return r2;
}
function pushAll(xs, ys) {
  var l2 = ys.length;
  for (var i2 = 0; i2 < l2; i2++) {
    xs.push(ys[i2]);
  }
}
var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
function getNameFromProps(props) {
  return Object.keys(props).map(function(k2) {
    return "".concat(k2, ": ").concat(props[k2].name);
  }).join(", ");
}
function useIdentity(codecs) {
  for (var i2 = 0; i2 < codecs.length; i2++) {
    if (codecs[i2].encode !== identity) {
      return false;
    }
  }
  return true;
}
function getInterfaceTypeName(props) {
  return "{ ".concat(getNameFromProps(props), " }");
}
function getPartialTypeName(inner) {
  return "Partial<".concat(inner, ">");
}
function enumerableRecord(keys2, domain, codomain, name2) {
  if (name2 === void 0) {
    name2 = "{ [K in ".concat(domain.name, "]: ").concat(codomain.name, " }");
  }
  var len2 = keys2.length;
  var props = {};
  for (var i2 = 0; i2 < len2; i2++) {
    props[keys2[i2]] = codomain;
  }
  var exactCodec = strict(props, name2);
  return new DictionaryType(name2, function(u2) {
    return exactCodec.is(u2);
  }, exactCodec.validate, exactCodec.encode, domain, codomain);
}
function getDomainKeys(domain) {
  var _a2;
  if (isLiteralC(domain)) {
    var literal_1 = domain.value;
    if (string.is(literal_1)) {
      return _a2 = {}, _a2[literal_1] = null, _a2;
    }
  } else if (isKeyofC(domain)) {
    return domain.keys;
  } else if (isUnionC(domain)) {
    var keys2 = domain.types.map(function(type2) {
      return getDomainKeys(type2);
    });
    return keys2.some(undefinedType.is) ? void 0 : Object.assign.apply(Object, __spreadArray$3([{}], keys2, false));
  }
  return void 0;
}
function stripNonDomainKeys(o2, domain) {
  var keys2 = Object.keys(o2);
  var len2 = keys2.length;
  var shouldStrip = false;
  var r2 = {};
  for (var i2 = 0; i2 < len2; i2++) {
    var k2 = keys2[i2];
    if (domain.is(k2)) {
      r2[k2] = o2[k2];
    } else {
      shouldStrip = true;
    }
  }
  return shouldStrip ? r2 : o2;
}
function nonEnumerableRecord(domain, codomain, name2) {
  if (name2 === void 0) {
    name2 = "{ [K in ".concat(domain.name, "]: ").concat(codomain.name, " }");
  }
  return new DictionaryType(name2, function(u2) {
    if (UnknownRecord.is(u2)) {
      return Object.keys(u2).every(function(k2) {
        return !domain.is(k2) || codomain.is(u2[k2]);
      });
    }
    return isAnyC(codomain) && Array.isArray(u2);
  }, function(u2, c2) {
    if (UnknownRecord.is(u2)) {
      var a2 = {};
      var errors = [];
      var keys2 = Object.keys(u2);
      var len2 = keys2.length;
      var changed = false;
      for (var i2 = 0; i2 < len2; i2++) {
        var k2 = keys2[i2];
        var ok2 = u2[k2];
        var domainResult = domain.validate(k2, appendContext(c2, k2, domain, k2));
        if (isLeft(domainResult)) {
          changed = true;
        } else {
          var vk2 = domainResult.right;
          changed = changed || vk2 !== k2;
          k2 = vk2;
          var codomainResult = codomain.validate(ok2, appendContext(c2, k2, codomain, ok2));
          if (isLeft(codomainResult)) {
            pushAll(errors, codomainResult.left);
          } else {
            var vok = codomainResult.right;
            changed = changed || vok !== ok2;
            a2[k2] = vok;
          }
        }
      }
      return errors.length > 0 ? failures(errors) : success(changed ? a2 : u2);
    }
    if (isAnyC(codomain) && Array.isArray(u2)) {
      return success(u2);
    }
    return failure(u2, c2);
  }, domain.encode === identity && codomain.encode === identity ? function(a2) {
    return stripNonDomainKeys(a2, domain);
  } : function(a2) {
    var s2 = {};
    var keys2 = Object.keys(stripNonDomainKeys(a2, domain));
    var len2 = keys2.length;
    for (var i2 = 0; i2 < len2; i2++) {
      var k2 = keys2[i2];
      s2[String(domain.encode(k2))] = codomain.encode(a2[k2]);
    }
    return s2;
  }, domain, codomain);
}
function getUnionName(codecs) {
  return "(" + codecs.map(function(type2) {
    return type2.name;
  }).join(" | ") + ")";
}
function mergeAll(base2, us) {
  var equal = true;
  var primitive = true;
  var baseIsNotADictionary = !UnknownRecord.is(base2);
  for (var _i = 0, us_1 = us; _i < us_1.length; _i++) {
    var u2 = us_1[_i];
    if (u2 !== base2) {
      equal = false;
    }
    if (UnknownRecord.is(u2)) {
      primitive = false;
    }
  }
  if (equal) {
    return base2;
  } else if (primitive) {
    return us[us.length - 1];
  }
  var r2 = {};
  for (var _a2 = 0, us_2 = us; _a2 < us_2.length; _a2++) {
    var u2 = us_2[_a2];
    for (var k2 in u2) {
      if (!hasOwnProperty$2.call(r2, k2) || baseIsNotADictionary || u2[k2] !== base2[k2]) {
        r2[k2] = u2[k2];
      }
    }
  }
  return r2;
}
function getProps(codec) {
  switch (codec._tag) {
    case "RefinementType":
    case "ReadonlyType":
      return getProps(codec.type);
    case "InterfaceType":
    case "StrictType":
    case "PartialType":
      return codec.props;
    case "IntersectionType":
      return codec.types.reduce(function(props, type2) {
        return Object.assign(props, getProps(type2));
      }, {});
  }
}
function stripKeys(o2, props) {
  var keys2 = Object.getOwnPropertyNames(o2);
  var shouldStrip = false;
  var r2 = {};
  for (var i2 = 0; i2 < keys2.length; i2++) {
    var key2 = keys2[i2];
    if (!hasOwnProperty$2.call(props, key2)) {
      shouldStrip = true;
    } else {
      r2[key2] = o2[key2];
    }
  }
  return shouldStrip ? r2 : o2;
}
function getExactTypeName(codec) {
  if (isTypeC(codec)) {
    return "{| ".concat(getNameFromProps(codec.props), " |}");
  } else if (isPartialC(codec)) {
    return getPartialTypeName("{| ".concat(getNameFromProps(codec.props), " |}"));
  }
  return "Exact<".concat(codec.name, ">");
}
function isNonEmpty$4(as2) {
  return as2.length > 0;
}
var emptyTags = {};
function intersect(a2, b2) {
  var r2 = [];
  for (var _i = 0, a_1 = a2; _i < a_1.length; _i++) {
    var v2 = a_1[_i];
    if (b2.indexOf(v2) !== -1) {
      r2.push(v2);
    }
  }
  return r2;
}
function mergeTags(a2, b2) {
  if (a2 === emptyTags) {
    return b2;
  }
  if (b2 === emptyTags) {
    return a2;
  }
  var r2 = Object.assign({}, a2);
  for (var k2 in b2) {
    if (hasOwnProperty$2.call(a2, k2)) {
      var intersection_1 = intersect(a2[k2], b2[k2]);
      if (isNonEmpty$4(intersection_1)) {
        r2[k2] = intersection_1;
      } else {
        r2 = emptyTags;
        break;
      }
    } else {
      r2[k2] = b2[k2];
    }
  }
  return r2;
}
function intersectTags(a2, b2) {
  if (a2 === emptyTags || b2 === emptyTags) {
    return emptyTags;
  }
  var r2 = emptyTags;
  for (var k2 in a2) {
    if (hasOwnProperty$2.call(b2, k2)) {
      var intersection_2 = intersect(a2[k2], b2[k2]);
      if (intersection_2.length === 0) {
        if (r2 === emptyTags) {
          r2 = {};
        }
        r2[k2] = a2[k2].concat(b2[k2]);
      }
    }
  }
  return r2;
}
function isAnyC(codec) {
  return codec._tag === "AnyType";
}
function isLiteralC(codec) {
  return codec._tag === "LiteralType";
}
function isKeyofC(codec) {
  return codec._tag === "KeyofType";
}
function isTypeC(codec) {
  return codec._tag === "InterfaceType";
}
function isPartialC(codec) {
  return codec._tag === "PartialType";
}
function isStrictC(codec) {
  return codec._tag === "StrictType";
}
function isExactC(codec) {
  return codec._tag === "ExactType";
}
function isRefinementC(codec) {
  return codec._tag === "RefinementType";
}
function isIntersectionC(codec) {
  return codec._tag === "IntersectionType";
}
function isUnionC(codec) {
  return codec._tag === "UnionType";
}
function isRecursiveC(codec) {
  return codec._tag === "RecursiveType";
}
var lazyCodecs = [];
function getTags(codec) {
  if (lazyCodecs.indexOf(codec) !== -1) {
    return emptyTags;
  }
  if (isTypeC(codec) || isStrictC(codec)) {
    var index2 = emptyTags;
    for (var k2 in codec.props) {
      var prop = codec.props[k2];
      if (isLiteralC(prop)) {
        if (index2 === emptyTags) {
          index2 = {};
        }
        index2[k2] = [prop.value];
      }
    }
    return index2;
  } else if (isExactC(codec) || isRefinementC(codec)) {
    return getTags(codec.type);
  } else if (isIntersectionC(codec)) {
    return codec.types.reduce(function(tags2, codec2) {
      return mergeTags(tags2, getTags(codec2));
    }, emptyTags);
  } else if (isUnionC(codec)) {
    return codec.types.slice(1).reduce(function(tags2, codec2) {
      return intersectTags(tags2, getTags(codec2));
    }, getTags(codec.types[0]));
  } else if (isRecursiveC(codec)) {
    lazyCodecs.push(codec);
    var tags = getTags(codec.type);
    lazyCodecs.pop();
    return tags;
  }
  return emptyTags;
}
function getIndex(codecs) {
  var tags = getTags(codecs[0]);
  var keys2 = Object.keys(tags);
  var len2 = codecs.length;
  var _loop_1 = function(k3) {
    var all2 = tags[k3].slice();
    var index2 = [tags[k3]];
    for (var i2 = 1; i2 < len2; i2++) {
      var codec = codecs[i2];
      var ctags = getTags(codec);
      var values = ctags[k3];
      if (values === void 0) {
        return "continue-keys";
      } else {
        if (values.some(function(v2) {
          return all2.indexOf(v2) !== -1;
        })) {
          return "continue-keys";
        } else {
          all2.push.apply(all2, values);
          index2.push(values);
        }
      }
    }
    return { value: [k3, index2] };
  };
  keys:
    for (var _i = 0, keys_1 = keys2; _i < keys_1.length; _i++) {
      var k2 = keys_1[_i];
      var state_1 = _loop_1(k2);
      if (typeof state_1 === "object")
        return state_1.value;
      switch (state_1) {
        case "continue-keys":
          continue keys;
      }
    }
  return void 0;
}
var NullType = (
  /** @class */
  function(_super) {
    __extends(NullType2, _super);
    function NullType2() {
      var _this = _super.call(this, "null", function(u2) {
        return u2 === null;
      }, function(u2, c2) {
        return _this.is(u2) ? success(u2) : failure(u2, c2);
      }, identity) || this;
      _this._tag = "NullType";
      return _this;
    }
    return NullType2;
  }(Type)
);
var nullType = new NullType();
var UndefinedType = (
  /** @class */
  function(_super) {
    __extends(UndefinedType2, _super);
    function UndefinedType2() {
      var _this = _super.call(this, "undefined", function(u2) {
        return u2 === void 0;
      }, function(u2, c2) {
        return _this.is(u2) ? success(u2) : failure(u2, c2);
      }, identity) || this;
      _this._tag = "UndefinedType";
      return _this;
    }
    return UndefinedType2;
  }(Type)
);
var undefinedType = new UndefinedType();
var VoidType = (
  /** @class */
  function(_super) {
    __extends(VoidType2, _super);
    function VoidType2() {
      var _this = _super.call(this, "void", undefinedType.is, undefinedType.validate, identity) || this;
      _this._tag = "VoidType";
      return _this;
    }
    return VoidType2;
  }(Type)
);
var voidType = new VoidType();
var UnknownType = (
  /** @class */
  function(_super) {
    __extends(UnknownType2, _super);
    function UnknownType2() {
      var _this = _super.call(this, "unknown", function(_2) {
        return true;
      }, success, identity) || this;
      _this._tag = "UnknownType";
      return _this;
    }
    return UnknownType2;
  }(Type)
);
var unknown = new UnknownType();
var StringType = (
  /** @class */
  function(_super) {
    __extends(StringType2, _super);
    function StringType2() {
      var _this = _super.call(this, "string", function(u2) {
        return typeof u2 === "string";
      }, function(u2, c2) {
        return _this.is(u2) ? success(u2) : failure(u2, c2);
      }, identity) || this;
      _this._tag = "StringType";
      return _this;
    }
    return StringType2;
  }(Type)
);
var string = new StringType();
var NumberType = (
  /** @class */
  function(_super) {
    __extends(NumberType2, _super);
    function NumberType2() {
      var _this = _super.call(this, "number", function(u2) {
        return typeof u2 === "number";
      }, function(u2, c2) {
        return _this.is(u2) ? success(u2) : failure(u2, c2);
      }, identity) || this;
      _this._tag = "NumberType";
      return _this;
    }
    return NumberType2;
  }(Type)
);
var number = new NumberType();
var BigIntType = (
  /** @class */
  function(_super) {
    __extends(BigIntType2, _super);
    function BigIntType2() {
      var _this = _super.call(
        this,
        "bigint",
        // tslint:disable-next-line: valid-typeof
        function(u2) {
          return typeof u2 === "bigint";
        },
        function(u2, c2) {
          return _this.is(u2) ? success(u2) : failure(u2, c2);
        },
        identity
      ) || this;
      _this._tag = "BigIntType";
      return _this;
    }
    return BigIntType2;
  }(Type)
);
var bigint = new BigIntType();
var BooleanType = (
  /** @class */
  function(_super) {
    __extends(BooleanType2, _super);
    function BooleanType2() {
      var _this = _super.call(this, "boolean", function(u2) {
        return typeof u2 === "boolean";
      }, function(u2, c2) {
        return _this.is(u2) ? success(u2) : failure(u2, c2);
      }, identity) || this;
      _this._tag = "BooleanType";
      return _this;
    }
    return BooleanType2;
  }(Type)
);
var boolean = new BooleanType();
var AnyArrayType = (
  /** @class */
  function(_super) {
    __extends(AnyArrayType2, _super);
    function AnyArrayType2() {
      var _this = _super.call(this, "UnknownArray", Array.isArray, function(u2, c2) {
        return _this.is(u2) ? success(u2) : failure(u2, c2);
      }, identity) || this;
      _this._tag = "AnyArrayType";
      return _this;
    }
    return AnyArrayType2;
  }(Type)
);
var UnknownArray = new AnyArrayType();
var AnyDictionaryType = (
  /** @class */
  function(_super) {
    __extends(AnyDictionaryType2, _super);
    function AnyDictionaryType2() {
      var _this = _super.call(this, "UnknownRecord", function(u2) {
        return u2 !== null && typeof u2 === "object" && !Array.isArray(u2);
      }, function(u2, c2) {
        return _this.is(u2) ? success(u2) : failure(u2, c2);
      }, identity) || this;
      _this._tag = "AnyDictionaryType";
      return _this;
    }
    return AnyDictionaryType2;
  }(Type)
);
var UnknownRecord = new AnyDictionaryType();
var LiteralType = (
  /** @class */
  function(_super) {
    __extends(LiteralType2, _super);
    function LiteralType2(name2, is, validate, encode2, value) {
      var _this = _super.call(this, name2, is, validate, encode2) || this;
      _this.value = value;
      _this._tag = "LiteralType";
      return _this;
    }
    return LiteralType2;
  }(Type)
);
function literal(value, name2) {
  if (name2 === void 0) {
    name2 = JSON.stringify(value);
  }
  var is = function(u2) {
    return u2 === value;
  };
  return new LiteralType(name2, is, function(u2, c2) {
    return is(u2) ? success(value) : failure(u2, c2);
  }, identity, value);
}
var KeyofType = (
  /** @class */
  function(_super) {
    __extends(KeyofType2, _super);
    function KeyofType2(name2, is, validate, encode2, keys2) {
      var _this = _super.call(this, name2, is, validate, encode2) || this;
      _this.keys = keys2;
      _this._tag = "KeyofType";
      return _this;
    }
    return KeyofType2;
  }(Type)
);
function keyof(keys2, name2) {
  if (name2 === void 0) {
    name2 = Object.keys(keys2).map(function(k2) {
      return JSON.stringify(k2);
    }).join(" | ");
  }
  var is = function(u2) {
    return string.is(u2) && hasOwnProperty$2.call(keys2, u2);
  };
  return new KeyofType(name2, is, function(u2, c2) {
    return is(u2) ? success(u2) : failure(u2, c2);
  }, identity, keys2);
}
var RefinementType = (
  /** @class */
  function(_super) {
    __extends(RefinementType2, _super);
    function RefinementType2(name2, is, validate, encode2, type2, predicate) {
      var _this = _super.call(this, name2, is, validate, encode2) || this;
      _this.type = type2;
      _this.predicate = predicate;
      _this._tag = "RefinementType";
      return _this;
    }
    return RefinementType2;
  }(Type)
);
function brand(codec, predicate, name2) {
  return refinement(codec, predicate, name2);
}
var Int = brand(number, function(n2) {
  return Number.isInteger(n2);
}, "Int");
var RecursiveType = (
  /** @class */
  function(_super) {
    __extends(RecursiveType2, _super);
    function RecursiveType2(name2, is, validate, encode2, runDefinition) {
      var _this = _super.call(this, name2, is, validate, encode2) || this;
      _this.runDefinition = runDefinition;
      _this._tag = "RecursiveType";
      return _this;
    }
    return RecursiveType2;
  }(Type)
);
Object.defineProperty(RecursiveType.prototype, "type", {
  get: function() {
    return this.runDefinition();
  },
  enumerable: true,
  configurable: true
});
function recursion(name2, definition) {
  var cache;
  var runDefinition = function() {
    if (!cache) {
      cache = definition(Self);
      cache.name = name2;
    }
    return cache;
  };
  var Self = new RecursiveType(name2, function(u2) {
    return runDefinition().is(u2);
  }, function(u2, c2) {
    return runDefinition().validate(u2, c2);
  }, function(a2) {
    return runDefinition().encode(a2);
  }, runDefinition);
  return Self;
}
var ArrayType = (
  /** @class */
  function(_super) {
    __extends(ArrayType2, _super);
    function ArrayType2(name2, is, validate, encode2, type2) {
      var _this = _super.call(this, name2, is, validate, encode2) || this;
      _this.type = type2;
      _this._tag = "ArrayType";
      return _this;
    }
    return ArrayType2;
  }(Type)
);
function array$1(item, name2) {
  if (name2 === void 0) {
    name2 = "Array<".concat(item.name, ">");
  }
  return new ArrayType(name2, function(u2) {
    return UnknownArray.is(u2) && u2.every(item.is);
  }, function(u2, c2) {
    var e2 = UnknownArray.validate(u2, c2);
    if (isLeft(e2)) {
      return e2;
    }
    var us = e2.right;
    var len2 = us.length;
    var as2 = us;
    var errors = [];
    for (var i2 = 0; i2 < len2; i2++) {
      var ui2 = us[i2];
      var result = item.validate(ui2, appendContext(c2, String(i2), item, ui2));
      if (isLeft(result)) {
        pushAll(errors, result.left);
      } else {
        var ai2 = result.right;
        if (ai2 !== ui2) {
          if (as2 === us) {
            as2 = us.slice();
          }
          as2[i2] = ai2;
        }
      }
    }
    return errors.length > 0 ? failures(errors) : success(as2);
  }, item.encode === identity ? identity : function(a2) {
    return a2.map(item.encode);
  }, item);
}
var InterfaceType = (
  /** @class */
  function(_super) {
    __extends(InterfaceType2, _super);
    function InterfaceType2(name2, is, validate, encode2, props) {
      var _this = _super.call(this, name2, is, validate, encode2) || this;
      _this.props = props;
      _this._tag = "InterfaceType";
      return _this;
    }
    return InterfaceType2;
  }(Type)
);
function type(props, name2) {
  if (name2 === void 0) {
    name2 = getInterfaceTypeName(props);
  }
  var keys2 = Object.keys(props);
  var types2 = keys2.map(function(key2) {
    return props[key2];
  });
  var len2 = keys2.length;
  return new InterfaceType(name2, function(u2) {
    if (UnknownRecord.is(u2)) {
      for (var i2 = 0; i2 < len2; i2++) {
        var k2 = keys2[i2];
        var uk2 = u2[k2];
        if (uk2 === void 0 && !hasOwnProperty$2.call(u2, k2) || !types2[i2].is(uk2)) {
          return false;
        }
      }
      return true;
    }
    return false;
  }, function(u2, c2) {
    var e2 = UnknownRecord.validate(u2, c2);
    if (isLeft(e2)) {
      return e2;
    }
    var o2 = e2.right;
    var a2 = o2;
    var errors = [];
    for (var i2 = 0; i2 < len2; i2++) {
      var k2 = keys2[i2];
      var ak2 = a2[k2];
      var type_1 = types2[i2];
      var result = type_1.validate(ak2, appendContext(c2, k2, type_1, ak2));
      if (isLeft(result)) {
        pushAll(errors, result.left);
      } else {
        var vak = result.right;
        if (vak !== ak2 || vak === void 0 && !hasOwnProperty$2.call(a2, k2)) {
          if (a2 === o2) {
            a2 = __assign$1({}, o2);
          }
          a2[k2] = vak;
        }
      }
    }
    return errors.length > 0 ? failures(errors) : success(a2);
  }, useIdentity(types2) ? identity : function(a2) {
    var s2 = __assign$1({}, a2);
    for (var i2 = 0; i2 < len2; i2++) {
      var k2 = keys2[i2];
      var encode2 = types2[i2].encode;
      if (encode2 !== identity) {
        s2[k2] = encode2(a2[k2]);
      }
    }
    return s2;
  }, props);
}
var PartialType = (
  /** @class */
  function(_super) {
    __extends(PartialType2, _super);
    function PartialType2(name2, is, validate, encode2, props) {
      var _this = _super.call(this, name2, is, validate, encode2) || this;
      _this.props = props;
      _this._tag = "PartialType";
      return _this;
    }
    return PartialType2;
  }(Type)
);
function partial(props, name2) {
  if (name2 === void 0) {
    name2 = getPartialTypeName(getInterfaceTypeName(props));
  }
  var keys2 = Object.keys(props);
  var types2 = keys2.map(function(key2) {
    return props[key2];
  });
  var len2 = keys2.length;
  return new PartialType(name2, function(u2) {
    if (UnknownRecord.is(u2)) {
      for (var i2 = 0; i2 < len2; i2++) {
        var k2 = keys2[i2];
        var uk2 = u2[k2];
        if (uk2 !== void 0 && !props[k2].is(uk2)) {
          return false;
        }
      }
      return true;
    }
    return false;
  }, function(u2, c2) {
    var e2 = UnknownRecord.validate(u2, c2);
    if (isLeft(e2)) {
      return e2;
    }
    var o2 = e2.right;
    var a2 = o2;
    var errors = [];
    for (var i2 = 0; i2 < len2; i2++) {
      var k2 = keys2[i2];
      var ak2 = a2[k2];
      var type_2 = props[k2];
      var result = type_2.validate(ak2, appendContext(c2, k2, type_2, ak2));
      if (isLeft(result)) {
        if (ak2 !== void 0) {
          pushAll(errors, result.left);
        }
      } else {
        var vak = result.right;
        if (vak !== ak2) {
          if (a2 === o2) {
            a2 = __assign$1({}, o2);
          }
          a2[k2] = vak;
        }
      }
    }
    return errors.length > 0 ? failures(errors) : success(a2);
  }, useIdentity(types2) ? identity : function(a2) {
    var s2 = __assign$1({}, a2);
    for (var i2 = 0; i2 < len2; i2++) {
      var k2 = keys2[i2];
      var ak2 = a2[k2];
      if (ak2 !== void 0) {
        s2[k2] = types2[i2].encode(ak2);
      }
    }
    return s2;
  }, props);
}
var DictionaryType = (
  /** @class */
  function(_super) {
    __extends(DictionaryType2, _super);
    function DictionaryType2(name2, is, validate, encode2, domain, codomain) {
      var _this = _super.call(this, name2, is, validate, encode2) || this;
      _this.domain = domain;
      _this.codomain = codomain;
      _this._tag = "DictionaryType";
      return _this;
    }
    return DictionaryType2;
  }(Type)
);
function record$1(domain, codomain, name2) {
  var keys2 = getDomainKeys(domain);
  return keys2 ? enumerableRecord(Object.keys(keys2), domain, codomain, name2) : nonEnumerableRecord(domain, codomain, name2);
}
var UnionType = (
  /** @class */
  function(_super) {
    __extends(UnionType2, _super);
    function UnionType2(name2, is, validate, encode2, types2) {
      var _this = _super.call(this, name2, is, validate, encode2) || this;
      _this.types = types2;
      _this._tag = "UnionType";
      return _this;
    }
    return UnionType2;
  }(Type)
);
function union$4(codecs, name2) {
  if (name2 === void 0) {
    name2 = getUnionName(codecs);
  }
  var index2 = getIndex(codecs);
  if (index2 !== void 0 && codecs.length > 0) {
    var tag_1 = index2[0], groups_1 = index2[1];
    var len_1 = groups_1.length;
    var find_1 = function(value) {
      for (var i2 = 0; i2 < len_1; i2++) {
        if (groups_1[i2].indexOf(value) !== -1) {
          return i2;
        }
      }
      return void 0;
    };
    return new TaggedUnionType(name2, function(u2) {
      if (UnknownRecord.is(u2)) {
        var i2 = find_1(u2[tag_1]);
        return i2 !== void 0 ? codecs[i2].is(u2) : false;
      }
      return false;
    }, function(u2, c2) {
      var e2 = UnknownRecord.validate(u2, c2);
      if (isLeft(e2)) {
        return e2;
      }
      var r2 = e2.right;
      var i2 = find_1(r2[tag_1]);
      if (i2 === void 0) {
        return failure(u2, c2);
      }
      var codec = codecs[i2];
      return codec.validate(r2, appendContext(c2, String(i2), codec, r2));
    }, useIdentity(codecs) ? identity : function(a2) {
      var i2 = find_1(a2[tag_1]);
      if (i2 === void 0) {
        throw new Error("no codec found to encode value in union codec ".concat(name2));
      } else {
        return codecs[i2].encode(a2);
      }
    }, codecs, tag_1);
  } else {
    return new UnionType(name2, function(u2) {
      return codecs.some(function(type2) {
        return type2.is(u2);
      });
    }, function(u2, c2) {
      var errors = [];
      for (var i2 = 0; i2 < codecs.length; i2++) {
        var codec = codecs[i2];
        var result = codec.validate(u2, appendContext(c2, String(i2), codec, u2));
        if (isLeft(result)) {
          pushAll(errors, result.left);
        } else {
          return success(result.right);
        }
      }
      return failures(errors);
    }, useIdentity(codecs) ? identity : function(a2) {
      for (var _i = 0, codecs_1 = codecs; _i < codecs_1.length; _i++) {
        var codec = codecs_1[_i];
        if (codec.is(a2)) {
          return codec.encode(a2);
        }
      }
      throw new Error("no codec found to encode value in union type ".concat(name2));
    }, codecs);
  }
}
var IntersectionType = (
  /** @class */
  function(_super) {
    __extends(IntersectionType2, _super);
    function IntersectionType2(name2, is, validate, encode2, types2) {
      var _this = _super.call(this, name2, is, validate, encode2) || this;
      _this.types = types2;
      _this._tag = "IntersectionType";
      return _this;
    }
    return IntersectionType2;
  }(Type)
);
function intersection$3(codecs, name2) {
  if (name2 === void 0) {
    name2 = "(".concat(codecs.map(function(type2) {
      return type2.name;
    }).join(" & "), ")");
  }
  var len2 = codecs.length;
  return new IntersectionType(name2, function(u2) {
    return codecs.every(function(type2) {
      return type2.is(u2);
    });
  }, codecs.length === 0 ? success : function(u2, c2) {
    var us = [];
    var errors = [];
    for (var i2 = 0; i2 < len2; i2++) {
      var codec = codecs[i2];
      var result = codec.validate(u2, appendContext(c2, String(i2), codec, u2));
      if (isLeft(result)) {
        pushAll(errors, result.left);
      } else {
        us.push(result.right);
      }
    }
    return errors.length > 0 ? failures(errors) : success(mergeAll(u2, us));
  }, codecs.length === 0 ? identity : function(a2) {
    return mergeAll(a2, codecs.map(function(codec) {
      return codec.encode(a2);
    }));
  }, codecs);
}
var TupleType = (
  /** @class */
  function(_super) {
    __extends(TupleType2, _super);
    function TupleType2(name2, is, validate, encode2, types2) {
      var _this = _super.call(this, name2, is, validate, encode2) || this;
      _this.types = types2;
      _this._tag = "TupleType";
      return _this;
    }
    return TupleType2;
  }(Type)
);
function tuple(codecs, name2) {
  if (name2 === void 0) {
    name2 = "[".concat(codecs.map(function(type2) {
      return type2.name;
    }).join(", "), "]");
  }
  var len2 = codecs.length;
  return new TupleType(name2, function(u2) {
    return UnknownArray.is(u2) && u2.length === len2 && codecs.every(function(type2, i2) {
      return type2.is(u2[i2]);
    });
  }, function(u2, c2) {
    var e2 = UnknownArray.validate(u2, c2);
    if (isLeft(e2)) {
      return e2;
    }
    var us = e2.right;
    var as2 = us.length > len2 ? us.slice(0, len2) : us;
    var errors = [];
    for (var i2 = 0; i2 < len2; i2++) {
      var a2 = us[i2];
      var type_3 = codecs[i2];
      var result = type_3.validate(a2, appendContext(c2, String(i2), type_3, a2));
      if (isLeft(result)) {
        pushAll(errors, result.left);
      } else {
        var va2 = result.right;
        if (va2 !== a2) {
          if (as2 === us) {
            as2 = us.slice();
          }
          as2[i2] = va2;
        }
      }
    }
    return errors.length > 0 ? failures(errors) : success(as2);
  }, useIdentity(codecs) ? identity : function(a2) {
    return codecs.map(function(type2, i2) {
      return type2.encode(a2[i2]);
    });
  }, codecs);
}
var ReadonlyType = (
  /** @class */
  function(_super) {
    __extends(ReadonlyType2, _super);
    function ReadonlyType2(name2, is, validate, encode2, type2) {
      var _this = _super.call(this, name2, is, validate, encode2) || this;
      _this.type = type2;
      _this._tag = "ReadonlyType";
      return _this;
    }
    return ReadonlyType2;
  }(Type)
);
function readonly(codec, name2) {
  if (name2 === void 0) {
    name2 = "Readonly<".concat(codec.name, ">");
  }
  return new ReadonlyType(name2, codec.is, codec.validate, codec.encode, codec);
}
var ReadonlyArrayType = (
  /** @class */
  function(_super) {
    __extends(ReadonlyArrayType2, _super);
    function ReadonlyArrayType2(name2, is, validate, encode2, type2) {
      var _this = _super.call(this, name2, is, validate, encode2) || this;
      _this.type = type2;
      _this._tag = "ReadonlyArrayType";
      return _this;
    }
    return ReadonlyArrayType2;
  }(Type)
);
function readonlyArray(item, name2) {
  if (name2 === void 0) {
    name2 = "ReadonlyArray<".concat(item.name, ">");
  }
  var codec = array$1(item);
  return new ReadonlyArrayType(name2, codec.is, codec.validate, codec.encode, item);
}
var strict = function(props, name2) {
  return exact(type(props), name2);
};
var ExactType = (
  /** @class */
  function(_super) {
    __extends(ExactType2, _super);
    function ExactType2(name2, is, validate, encode2, type2) {
      var _this = _super.call(this, name2, is, validate, encode2) || this;
      _this.type = type2;
      _this._tag = "ExactType";
      return _this;
    }
    return ExactType2;
  }(Type)
);
function exact(codec, name2) {
  if (name2 === void 0) {
    name2 = getExactTypeName(codec);
  }
  var props = getProps(codec);
  return new ExactType(name2, codec.is, function(u2, c2) {
    var e2 = UnknownRecord.validate(u2, c2);
    if (isLeft(e2)) {
      return e2;
    }
    var ce2 = codec.validate(u2, c2);
    if (isLeft(ce2)) {
      return ce2;
    }
    return right(stripKeys(ce2.right, props));
  }, function(a2) {
    return codec.encode(stripKeys(a2, props));
  }, codec);
}
var FunctionType = (
  /** @class */
  function(_super) {
    __extends(FunctionType2, _super);
    function FunctionType2() {
      var _this = _super.call(
        this,
        "Function",
        // tslint:disable-next-line:strict-type-predicates
        function(u2) {
          return typeof u2 === "function";
        },
        function(u2, c2) {
          return _this.is(u2) ? success(u2) : failure(u2, c2);
        },
        identity
      ) || this;
      _this._tag = "FunctionType";
      return _this;
    }
    return FunctionType2;
  }(Type)
);
var Function$1 = new FunctionType();
var NeverType = (
  /** @class */
  function(_super) {
    __extends(NeverType2, _super);
    function NeverType2() {
      var _this = _super.call(
        this,
        "never",
        function(_2) {
          return false;
        },
        function(u2, c2) {
          return failure(u2, c2);
        },
        /* istanbul ignore next */
        function() {
          throw new Error("cannot encode never");
        }
      ) || this;
      _this._tag = "NeverType";
      return _this;
    }
    return NeverType2;
  }(Type)
);
var never = new NeverType();
var AnyType = (
  /** @class */
  function(_super) {
    __extends(AnyType2, _super);
    function AnyType2() {
      var _this = _super.call(this, "any", function(_2) {
        return true;
      }, success, identity) || this;
      _this._tag = "AnyType";
      return _this;
    }
    return AnyType2;
  }(Type)
);
var any = new AnyType();
function refinement(codec, predicate, name2) {
  if (name2 === void 0) {
    name2 = "(".concat(codec.name, " | ").concat(getFunctionName(predicate), ")");
  }
  return new RefinementType(name2, function(u2) {
    return codec.is(u2) && predicate(u2);
  }, function(i2, c2) {
    var e2 = codec.validate(i2, c2);
    if (isLeft(e2)) {
      return e2;
    }
    var a2 = e2.right;
    return predicate(a2) ? success(a2) : failure(a2, c2);
  }, codec.encode, codec, predicate);
}
var Integer = refinement(number, Number.isInteger, "Integer");
var TaggedUnionType = (
  /** @class */
  function(_super) {
    __extends(TaggedUnionType2, _super);
    function TaggedUnionType2(name2, is, validate, encode2, codecs, tag) {
      var _this = _super.call(this, name2, is, validate, encode2, codecs) || this;
      _this.tag = tag;
      return _this;
    }
    return TaggedUnionType2;
  }(UnionType)
);
var taggedUnion = function(tag, codecs, name2) {
  if (name2 === void 0) {
    name2 = getUnionName(codecs);
  }
  var U2 = union$4(codecs, name2);
  if (U2 instanceof TaggedUnionType) {
    return U2;
  } else {
    console.warn("[io-ts] Cannot build a tagged union for ".concat(name2, ", returning a de-optimized union"));
    return new TaggedUnionType(name2, U2.is, U2.validate, U2.encode, codecs, tag);
  }
};
var getValidationError = function(value, context) {
  return {
    value,
    context
  };
};
var getDefaultContext = function(decoder) {
  return [
    { key: "", type: decoder }
  ];
};
var Dictionary = UnknownRecord;
var ObjectType = (
  /** @class */
  function(_super) {
    __extends(ObjectType2, _super);
    function ObjectType2() {
      var _this = _super.call(this, "object", function(u2) {
        return u2 !== null && typeof u2 === "object";
      }, function(u2, c2) {
        return _this.is(u2) ? success(u2) : failure(u2, c2);
      }, identity) || this;
      _this._tag = "ObjectType";
      return _this;
    }
    return ObjectType2;
  }(Type)
);
var object = new ObjectType();
var dictionary = record$1;
var StrictType = (
  /** @class */
  function(_super) {
    __extends(StrictType2, _super);
    function StrictType2(name2, is, validate, encode2, props) {
      var _this = _super.call(this, name2, is, validate, encode2) || this;
      _this.props = props;
      _this._tag = "StrictType";
      return _this;
    }
    return StrictType2;
  }(Type)
);
function clean(codec) {
  return codec;
}
function alias(codec) {
  return function() {
    return codec;
  };
}
const es6 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  AnyArrayType,
  AnyDictionaryType,
  AnyType,
  Array: UnknownArray,
  ArrayType,
  BigIntType,
  BooleanType,
  Dictionary,
  DictionaryType,
  ExactType,
  Function: Function$1,
  FunctionType,
  Int,
  Integer,
  InterfaceType,
  IntersectionType,
  KeyofType,
  LiteralType,
  NeverType,
  NullType,
  NumberType,
  ObjectType,
  PartialType,
  ReadonlyArrayType,
  ReadonlyType,
  RecursiveType,
  RefinementType,
  StrictType,
  StringType,
  TaggedUnionType,
  TupleType,
  Type,
  UndefinedType,
  UnionType,
  UnknownArray,
  UnknownRecord,
  UnknownType,
  VoidType,
  alias,
  any,
  appendContext,
  array: array$1,
  bigint,
  boolean,
  brand,
  clean,
  dictionary,
  emptyTags,
  exact,
  failure,
  failures,
  getContextEntry,
  getDefaultContext,
  getDomainKeys,
  getFunctionName,
  getIndex,
  getTags,
  getValidationError,
  identity,
  interface: type,
  intersection: intersection$3,
  keyof,
  literal,
  mergeAll,
  never,
  null: nullType,
  nullType,
  number,
  object,
  partial,
  readonly,
  readonlyArray,
  record: record$1,
  recursion,
  refinement,
  strict,
  string,
  success,
  taggedUnion,
  tuple,
  type,
  undefined: undefinedType,
  union: union$4,
  unknown,
  void: voidType,
  voidType
}, Symbol.toStringTag, { value: "Module" }));
const require$$1$1 = /* @__PURE__ */ getAugmentedNamespace(es6);
var Either = {};
var Applicative$3 = {};
var Apply$3 = {};
var _function = {};
(function(exports2) {
  var __spreadArray2 = commonjsGlobal && commonjsGlobal.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i2 = 0, l2 = from.length, ar; i2 < l2; i2++) {
        if (ar || !(i2 in from)) {
          if (!ar)
            ar = Array.prototype.slice.call(from, 0, i2);
          ar[i2] = from[i2];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  };
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.dual = exports2.getEndomorphismMonoid = exports2.SK = exports2.hole = exports2.constVoid = exports2.constUndefined = exports2.constNull = exports2.constFalse = exports2.constTrue = exports2.unsafeCoerce = exports2.apply = exports2.getRing = exports2.getSemiring = exports2.getMonoid = exports2.getSemigroup = exports2.getBooleanAlgebra = void 0;
  exports2.identity = identity2;
  exports2.constant = constant2;
  exports2.flip = flip;
  exports2.flow = flow2;
  exports2.tuple = tuple2;
  exports2.increment = increment;
  exports2.decrement = decrement;
  exports2.absurd = absurd;
  exports2.tupled = tupled;
  exports2.untupled = untupled;
  exports2.pipe = pipe2;
  exports2.not = not2;
  var getBooleanAlgebra = function(B2) {
    return function() {
      return {
        meet: function(x2, y2) {
          return function(a2) {
            return B2.meet(x2(a2), y2(a2));
          };
        },
        join: function(x2, y2) {
          return function(a2) {
            return B2.join(x2(a2), y2(a2));
          };
        },
        zero: function() {
          return B2.zero;
        },
        one: function() {
          return B2.one;
        },
        implies: function(x2, y2) {
          return function(a2) {
            return B2.implies(x2(a2), y2(a2));
          };
        },
        not: function(x2) {
          return function(a2) {
            return B2.not(x2(a2));
          };
        }
      };
    };
  };
  exports2.getBooleanAlgebra = getBooleanAlgebra;
  var getSemigroup2 = function(S2) {
    return function() {
      return {
        concat: function(f2, g2) {
          return function(a2) {
            return S2.concat(f2(a2), g2(a2));
          };
        }
      };
    };
  };
  exports2.getSemigroup = getSemigroup2;
  var getMonoid2 = function(M2) {
    var getSemigroupM = (0, exports2.getSemigroup)(M2);
    return function() {
      return {
        concat: getSemigroupM().concat,
        empty: function() {
          return M2.empty;
        }
      };
    };
  };
  exports2.getMonoid = getMonoid2;
  var getSemiring = function(S2) {
    return {
      add: function(f2, g2) {
        return function(x2) {
          return S2.add(f2(x2), g2(x2));
        };
      },
      zero: function() {
        return S2.zero;
      },
      mul: function(f2, g2) {
        return function(x2) {
          return S2.mul(f2(x2), g2(x2));
        };
      },
      one: function() {
        return S2.one;
      }
    };
  };
  exports2.getSemiring = getSemiring;
  var getRing = function(R2) {
    var S2 = (0, exports2.getSemiring)(R2);
    return {
      add: S2.add,
      mul: S2.mul,
      one: S2.one,
      zero: S2.zero,
      sub: function(f2, g2) {
        return function(x2) {
          return R2.sub(f2(x2), g2(x2));
        };
      }
    };
  };
  exports2.getRing = getRing;
  var apply = function(a2) {
    return function(f2) {
      return f2(a2);
    };
  };
  exports2.apply = apply;
  function identity2(a2) {
    return a2;
  }
  exports2.unsafeCoerce = identity2;
  function constant2(a2) {
    return function() {
      return a2;
    };
  }
  exports2.constTrue = constant2(true);
  exports2.constFalse = constant2(false);
  exports2.constNull = constant2(null);
  exports2.constUndefined = constant2(void 0);
  exports2.constVoid = exports2.constUndefined;
  function flip(f2) {
    return function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (args.length > 1) {
        return f2(args[1], args[0]);
      }
      return function(a2) {
        return f2(a2)(args[0]);
      };
    };
  }
  function flow2(ab2, bc2, cd2, de2, ef2, fg2, gh2, hi2, ij2) {
    switch (arguments.length) {
      case 1:
        return ab2;
      case 2:
        return function() {
          return bc2(ab2.apply(this, arguments));
        };
      case 3:
        return function() {
          return cd2(bc2(ab2.apply(this, arguments)));
        };
      case 4:
        return function() {
          return de2(cd2(bc2(ab2.apply(this, arguments))));
        };
      case 5:
        return function() {
          return ef2(de2(cd2(bc2(ab2.apply(this, arguments)))));
        };
      case 6:
        return function() {
          return fg2(ef2(de2(cd2(bc2(ab2.apply(this, arguments))))));
        };
      case 7:
        return function() {
          return gh2(fg2(ef2(de2(cd2(bc2(ab2.apply(this, arguments)))))));
        };
      case 8:
        return function() {
          return hi2(gh2(fg2(ef2(de2(cd2(bc2(ab2.apply(this, arguments))))))));
        };
      case 9:
        return function() {
          return ij2(hi2(gh2(fg2(ef2(de2(cd2(bc2(ab2.apply(this, arguments)))))))));
        };
    }
    return;
  }
  function tuple2() {
    var t2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      t2[_i] = arguments[_i];
    }
    return t2;
  }
  function increment(n2) {
    return n2 + 1;
  }
  function decrement(n2) {
    return n2 - 1;
  }
  function absurd(_2) {
    throw new Error("Called `absurd` function which should be uncallable");
  }
  function tupled(f2) {
    return function(a2) {
      return f2.apply(void 0, a2);
    };
  }
  function untupled(f2) {
    return function() {
      var a2 = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        a2[_i] = arguments[_i];
      }
      return f2(a2);
    };
  }
  function pipe2(a2, ab2, bc2, cd2, de2, ef2, fg2, gh2, hi2) {
    switch (arguments.length) {
      case 1:
        return a2;
      case 2:
        return ab2(a2);
      case 3:
        return bc2(ab2(a2));
      case 4:
        return cd2(bc2(ab2(a2)));
      case 5:
        return de2(cd2(bc2(ab2(a2))));
      case 6:
        return ef2(de2(cd2(bc2(ab2(a2)))));
      case 7:
        return fg2(ef2(de2(cd2(bc2(ab2(a2))))));
      case 8:
        return gh2(fg2(ef2(de2(cd2(bc2(ab2(a2)))))));
      case 9:
        return hi2(gh2(fg2(ef2(de2(cd2(bc2(ab2(a2))))))));
      default: {
        var ret = arguments[0];
        for (var i2 = 1; i2 < arguments.length; i2++) {
          ret = arguments[i2](ret);
        }
        return ret;
      }
    }
  }
  exports2.hole = absurd;
  var SK2 = function(_2, b2) {
    return b2;
  };
  exports2.SK = SK2;
  function not2(predicate) {
    return function(a2) {
      return !predicate(a2);
    };
  }
  var getEndomorphismMonoid = function() {
    return {
      concat: function(first2, second) {
        return flow2(first2, second);
      },
      empty: identity2
    };
  };
  exports2.getEndomorphismMonoid = getEndomorphismMonoid;
  var dual2 = function(arity, body) {
    var isDataFirst = typeof arity === "number" ? function(args) {
      return args.length >= arity;
    } : arity;
    return function() {
      var args = Array.from(arguments);
      if (isDataFirst(arguments)) {
        return body.apply(this, args);
      }
      return function(self2) {
        return body.apply(void 0, __spreadArray2([self2], args, false));
      };
    };
  };
  exports2.dual = dual2;
})(_function);
var internal = {};
(function(exports2) {
  var __spreadArray2 = commonjsGlobal && commonjsGlobal.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i2 = 0, l2 = from.length, ar; i2 < l2; i2++) {
        if (ar || !(i2 in from)) {
          if (!ar)
            ar = Array.prototype.slice.call(from, 0, i2);
          ar[i2] = from[i2];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  };
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.flatMapReader = exports2.flatMapTask = exports2.flatMapIO = exports2.flatMapEither = exports2.flatMapOption = exports2.flatMapNullable = exports2.liftOption = exports2.liftNullable = exports2.fromReadonlyNonEmptyArray = exports2.has = exports2.emptyRecord = exports2.emptyReadonlyArray = exports2.tail = exports2.head = exports2.isNonEmpty = exports2.singleton = exports2.right = exports2.left = exports2.isRight = exports2.isLeft = exports2.some = exports2.none = exports2.isSome = exports2.isNone = void 0;
  var function_12 = _function;
  var isNone2 = function(fa2) {
    return fa2._tag === "None";
  };
  exports2.isNone = isNone2;
  var isSome2 = function(fa2) {
    return fa2._tag === "Some";
  };
  exports2.isSome = isSome2;
  exports2.none = { _tag: "None" };
  var some2 = function(a2) {
    return { _tag: "Some", value: a2 };
  };
  exports2.some = some2;
  var isLeft2 = function(ma2) {
    return ma2._tag === "Left";
  };
  exports2.isLeft = isLeft2;
  var isRight2 = function(ma2) {
    return ma2._tag === "Right";
  };
  exports2.isRight = isRight2;
  var left2 = function(e2) {
    return { _tag: "Left", left: e2 };
  };
  exports2.left = left2;
  var right2 = function(a2) {
    return { _tag: "Right", right: a2 };
  };
  exports2.right = right2;
  var singleton2 = function(a2) {
    return [a2];
  };
  exports2.singleton = singleton2;
  var isNonEmpty2 = function(as2) {
    return as2.length > 0;
  };
  exports2.isNonEmpty = isNonEmpty2;
  var head2 = function(as2) {
    return as2[0];
  };
  exports2.head = head2;
  var tail2 = function(as2) {
    return as2.slice(1);
  };
  exports2.tail = tail2;
  exports2.emptyReadonlyArray = [];
  exports2.emptyRecord = {};
  exports2.has = Object.prototype.hasOwnProperty;
  var fromReadonlyNonEmptyArray2 = function(as2) {
    return __spreadArray2([as2[0]], as2.slice(1), true);
  };
  exports2.fromReadonlyNonEmptyArray = fromReadonlyNonEmptyArray2;
  var liftNullable2 = function(F2) {
    return function(f2, onNullable) {
      return function() {
        var a2 = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          a2[_i] = arguments[_i];
        }
        var o2 = f2.apply(void 0, a2);
        return F2.fromEither(o2 == null ? (0, exports2.left)(onNullable.apply(void 0, a2)) : (0, exports2.right)(o2));
      };
    };
  };
  exports2.liftNullable = liftNullable2;
  var liftOption2 = function(F2) {
    return function(f2, onNone) {
      return function() {
        var a2 = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          a2[_i] = arguments[_i];
        }
        var o2 = f2.apply(void 0, a2);
        return F2.fromEither((0, exports2.isNone)(o2) ? (0, exports2.left)(onNone.apply(void 0, a2)) : (0, exports2.right)(o2.value));
      };
    };
  };
  exports2.liftOption = liftOption2;
  var flatMapNullable2 = function(F2, M2) {
    return /* @__PURE__ */ (0, function_12.dual)(3, function(self2, f2, onNullable) {
      return M2.flatMap(self2, (0, exports2.liftNullable)(F2)(f2, onNullable));
    });
  };
  exports2.flatMapNullable = flatMapNullable2;
  var flatMapOption2 = function(F2, M2) {
    return /* @__PURE__ */ (0, function_12.dual)(3, function(self2, f2, onNone) {
      return M2.flatMap(self2, (0, exports2.liftOption)(F2)(f2, onNone));
    });
  };
  exports2.flatMapOption = flatMapOption2;
  var flatMapEither = function(F2, M2) {
    return /* @__PURE__ */ (0, function_12.dual)(2, function(self2, f2) {
      return M2.flatMap(self2, function(a2) {
        return F2.fromEither(f2(a2));
      });
    });
  };
  exports2.flatMapEither = flatMapEither;
  var flatMapIO = function(F2, M2) {
    return /* @__PURE__ */ (0, function_12.dual)(2, function(self2, f2) {
      return M2.flatMap(self2, function(a2) {
        return F2.fromIO(f2(a2));
      });
    });
  };
  exports2.flatMapIO = flatMapIO;
  var flatMapTask = function(F2, M2) {
    return /* @__PURE__ */ (0, function_12.dual)(2, function(self2, f2) {
      return M2.flatMap(self2, function(a2) {
        return F2.fromTask(f2(a2));
      });
    });
  };
  exports2.flatMapTask = flatMapTask;
  var flatMapReader = function(F2, M2) {
    return /* @__PURE__ */ (0, function_12.dual)(2, function(self2, f2) {
      return M2.flatMap(self2, function(a2) {
        return F2.fromReader(f2(a2));
      });
    });
  };
  exports2.flatMapReader = flatMapReader;
})(internal);
var __createBinding$4 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
  if (k22 === void 0)
    k22 = k2;
  var desc = Object.getOwnPropertyDescriptor(m2, k2);
  if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
    desc = { enumerable: true, get: function() {
      return m2[k2];
    } };
  }
  Object.defineProperty(o2, k22, desc);
} : function(o2, m2, k2, k22) {
  if (k22 === void 0)
    k22 = k2;
  o2[k22] = m2[k2];
});
var __setModuleDefault$4 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
  Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
} : function(o2, v2) {
  o2["default"] = v2;
});
var __importStar$4 = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k2 in mod)
      if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
        __createBinding$4(result, mod, k2);
  }
  __setModuleDefault$4(result, mod);
  return result;
};
Object.defineProperty(Apply$3, "__esModule", { value: true });
Apply$3.ap = ap$4;
Apply$3.apFirst = apFirst$3;
Apply$3.apSecond = apSecond$3;
Apply$3.apS = apS$3;
Apply$3.getApplySemigroup = getApplySemigroup$1;
Apply$3.sequenceT = sequenceT;
Apply$3.sequenceS = sequenceS;
var function_1$3 = _function;
var _$2 = __importStar$4(internal);
function ap$4(F2, G2) {
  return function(fa2) {
    return function(fab) {
      return F2.ap(F2.map(fab, function(gab) {
        return function(ga) {
          return G2.ap(gab, ga);
        };
      }), fa2);
    };
  };
}
function apFirst$3(A2) {
  return function(second) {
    return function(first2) {
      return A2.ap(A2.map(first2, function(a2) {
        return function() {
          return a2;
        };
      }), second);
    };
  };
}
function apSecond$3(A2) {
  return function(second) {
    return function(first2) {
      return A2.ap(A2.map(first2, function() {
        return function(b2) {
          return b2;
        };
      }), second);
    };
  };
}
function apS$3(F2) {
  return function(name2, fb2) {
    return function(fa2) {
      return F2.ap(F2.map(fa2, function(a2) {
        return function(b2) {
          var _a2;
          return Object.assign({}, a2, (_a2 = {}, _a2[name2] = b2, _a2));
        };
      }), fb2);
    };
  };
}
function getApplySemigroup$1(F2) {
  return function(S2) {
    return {
      concat: function(first2, second) {
        return F2.ap(F2.map(first2, function(x2) {
          return function(y2) {
            return S2.concat(x2, y2);
          };
        }), second);
      }
    };
  };
}
function curried(f2, n2, acc) {
  return function(x2) {
    var combined = Array(acc.length + 1);
    for (var i2 = 0; i2 < acc.length; i2++) {
      combined[i2] = acc[i2];
    }
    combined[acc.length] = x2;
    return n2 === 0 ? f2.apply(null, combined) : curried(f2, n2 - 1, combined);
  };
}
var tupleConstructors = {
  1: function(a2) {
    return [a2];
  },
  2: function(a2) {
    return function(b2) {
      return [a2, b2];
    };
  },
  3: function(a2) {
    return function(b2) {
      return function(c2) {
        return [a2, b2, c2];
      };
    };
  },
  4: function(a2) {
    return function(b2) {
      return function(c2) {
        return function(d2) {
          return [a2, b2, c2, d2];
        };
      };
    };
  },
  5: function(a2) {
    return function(b2) {
      return function(c2) {
        return function(d2) {
          return function(e2) {
            return [a2, b2, c2, d2, e2];
          };
        };
      };
    };
  }
};
function getTupleConstructor(len2) {
  if (!_$2.has.call(tupleConstructors, len2)) {
    tupleConstructors[len2] = curried(function_1$3.tuple, len2 - 1, []);
  }
  return tupleConstructors[len2];
}
function sequenceT(F2) {
  return function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var len2 = args.length;
    var f2 = getTupleConstructor(len2);
    var fas = F2.map(args[0], f2);
    for (var i2 = 1; i2 < len2; i2++) {
      fas = F2.ap(fas, args[i2]);
    }
    return fas;
  };
}
function getRecordConstructor(keys2) {
  var len2 = keys2.length;
  switch (len2) {
    case 1:
      return function(a2) {
        var _a2;
        return _a2 = {}, _a2[keys2[0]] = a2, _a2;
      };
    case 2:
      return function(a2) {
        return function(b2) {
          var _a2;
          return _a2 = {}, _a2[keys2[0]] = a2, _a2[keys2[1]] = b2, _a2;
        };
      };
    case 3:
      return function(a2) {
        return function(b2) {
          return function(c2) {
            var _a2;
            return _a2 = {}, _a2[keys2[0]] = a2, _a2[keys2[1]] = b2, _a2[keys2[2]] = c2, _a2;
          };
        };
      };
    case 4:
      return function(a2) {
        return function(b2) {
          return function(c2) {
            return function(d2) {
              var _a2;
              return _a2 = {}, _a2[keys2[0]] = a2, _a2[keys2[1]] = b2, _a2[keys2[2]] = c2, _a2[keys2[3]] = d2, _a2;
            };
          };
        };
      };
    case 5:
      return function(a2) {
        return function(b2) {
          return function(c2) {
            return function(d2) {
              return function(e2) {
                var _a2;
                return _a2 = {}, _a2[keys2[0]] = a2, _a2[keys2[1]] = b2, _a2[keys2[2]] = c2, _a2[keys2[3]] = d2, _a2[keys2[4]] = e2, _a2;
              };
            };
          };
        };
      };
    default:
      return curried(function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var r2 = {};
        for (var i2 = 0; i2 < len2; i2++) {
          r2[keys2[i2]] = args[i2];
        }
        return r2;
      }, len2 - 1, []);
  }
}
function sequenceS(F2) {
  return function(r2) {
    var keys2 = Object.keys(r2);
    var len2 = keys2.length;
    var f2 = getRecordConstructor(keys2);
    var fr = F2.map(r2[keys2[0]], f2);
    for (var i2 = 1; i2 < len2; i2++) {
      fr = F2.ap(fr, r2[keys2[i2]]);
    }
    return fr;
  };
}
var Functor$4 = {};
Object.defineProperty(Functor$4, "__esModule", { value: true });
Functor$4.map = map$6;
Functor$4.flap = flap$4;
Functor$4.bindTo = bindTo$3;
Functor$4.let = let_$3;
Functor$4.getFunctorComposition = getFunctorComposition;
Functor$4.as = as$1;
Functor$4.asUnit = asUnit$1;
var function_1$2 = _function;
function map$6(F2, G2) {
  return function(f2) {
    return function(fa2) {
      return F2.map(fa2, function(ga) {
        return G2.map(ga, f2);
      });
    };
  };
}
function flap$4(F2) {
  return function(a2) {
    return function(fab) {
      return F2.map(fab, function(f2) {
        return f2(a2);
      });
    };
  };
}
function bindTo$3(F2) {
  return function(name2) {
    return function(fa2) {
      return F2.map(fa2, function(a2) {
        var _a2;
        return _a2 = {}, _a2[name2] = a2, _a2;
      });
    };
  };
}
function let_$3(F2) {
  return function(name2, f2) {
    return function(fa2) {
      return F2.map(fa2, function(a2) {
        var _a2;
        return Object.assign({}, a2, (_a2 = {}, _a2[name2] = f2(a2), _a2));
      });
    };
  };
}
function getFunctorComposition(F2, G2) {
  var _map2 = map$6(F2, G2);
  return {
    map: function(fga, f2) {
      return (0, function_1$2.pipe)(fga, _map2(f2));
    }
  };
}
function as$1(F2) {
  return function(self2, b2) {
    return F2.map(self2, function() {
      return b2;
    });
  };
}
function asUnit$1(F2) {
  var asM = as$1(F2);
  return function(self2) {
    return asM(self2, void 0);
  };
}
Object.defineProperty(Applicative$3, "__esModule", { value: true });
Applicative$3.getApplicativeMonoid = getApplicativeMonoid;
Applicative$3.getApplicativeComposition = getApplicativeComposition;
var Apply_1 = Apply$3;
var function_1$1 = _function;
var Functor_1 = Functor$4;
function getApplicativeMonoid(F2) {
  var f2 = (0, Apply_1.getApplySemigroup)(F2);
  return function(M2) {
    return {
      concat: f2(M2).concat,
      empty: F2.of(M2.empty)
    };
  };
}
function getApplicativeComposition(F2, G2) {
  var map2 = (0, Functor_1.getFunctorComposition)(F2, G2).map;
  var _ap2 = (0, Apply_1.ap)(F2, G2);
  return {
    map: map2,
    of: function(a2) {
      return F2.of(G2.of(a2));
    },
    ap: function(fgab, fga) {
      return (0, function_1$1.pipe)(fgab, _ap2(fga));
    }
  };
}
var Chain$3 = {};
Object.defineProperty(Chain$3, "__esModule", { value: true });
Chain$3.chainFirst = chainFirst$3;
Chain$3.tap = tap$1;
Chain$3.bind = bind$3;
function chainFirst$3(M2) {
  var tapM = tap$1(M2);
  return function(f2) {
    return function(first2) {
      return tapM(first2, f2);
    };
  };
}
function tap$1(M2) {
  return function(first2, f2) {
    return M2.chain(first2, function(a2) {
      return M2.map(f2(a2), function() {
        return a2;
      });
    });
  };
}
function bind$3(M2) {
  return function(name2, f2) {
    return function(ma2) {
      return M2.chain(ma2, function(a2) {
        return M2.map(f2(a2), function(b2) {
          var _a2;
          return Object.assign({}, a2, (_a2 = {}, _a2[name2] = b2, _a2));
        });
      });
    };
  };
}
var ChainRec = {};
Object.defineProperty(ChainRec, "__esModule", { value: true });
ChainRec.tailRec = void 0;
var tailRec = function(startWith, f2) {
  var ab2 = f2(startWith);
  while (ab2._tag === "Left") {
    ab2 = f2(ab2.left);
  }
  return ab2.right;
};
ChainRec.tailRec = tailRec;
var FromEither$2 = {};
var __createBinding$3 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
  if (k22 === void 0)
    k22 = k2;
  var desc = Object.getOwnPropertyDescriptor(m2, k2);
  if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
    desc = { enumerable: true, get: function() {
      return m2[k2];
    } };
  }
  Object.defineProperty(o2, k22, desc);
} : function(o2, m2, k2, k22) {
  if (k22 === void 0)
    k22 = k2;
  o2[k22] = m2[k2];
});
var __setModuleDefault$3 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
  Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
} : function(o2, v2) {
  o2["default"] = v2;
});
var __importStar$3 = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k2 in mod)
      if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
        __createBinding$3(result, mod, k2);
  }
  __setModuleDefault$3(result, mod);
  return result;
};
Object.defineProperty(FromEither$2, "__esModule", { value: true });
FromEither$2.fromOption = fromOption$1;
FromEither$2.fromPredicate = fromPredicate$2;
FromEither$2.fromOptionK = fromOptionK$1;
FromEither$2.chainOptionK = chainOptionK;
FromEither$2.fromEitherK = fromEitherK$2;
FromEither$2.chainEitherK = chainEitherK$1;
FromEither$2.chainFirstEitherK = chainFirstEitherK$1;
FromEither$2.filterOrElse = filterOrElse;
FromEither$2.tapEither = tapEither$1;
var Chain_1 = Chain$3;
var function_1 = _function;
var _$1 = __importStar$3(internal);
function fromOption$1(F2) {
  return function(onNone) {
    return function(ma2) {
      return F2.fromEither(_$1.isNone(ma2) ? _$1.left(onNone()) : _$1.right(ma2.value));
    };
  };
}
function fromPredicate$2(F2) {
  return function(predicate, onFalse) {
    return function(a2) {
      return F2.fromEither(predicate(a2) ? _$1.right(a2) : _$1.left(onFalse(a2)));
    };
  };
}
function fromOptionK$1(F2) {
  var fromOptionF = fromOption$1(F2);
  return function(onNone) {
    var from = fromOptionF(onNone);
    return function(f2) {
      return (0, function_1.flow)(f2, from);
    };
  };
}
function chainOptionK(F2, M2) {
  var fromOptionKF = fromOptionK$1(F2);
  return function(onNone) {
    var from = fromOptionKF(onNone);
    return function(f2) {
      return function(ma2) {
        return M2.chain(ma2, from(f2));
      };
    };
  };
}
function fromEitherK$2(F2) {
  return function(f2) {
    return (0, function_1.flow)(f2, F2.fromEither);
  };
}
function chainEitherK$1(F2, M2) {
  var fromEitherKF = fromEitherK$2(F2);
  return function(f2) {
    return function(ma2) {
      return M2.chain(ma2, fromEitherKF(f2));
    };
  };
}
function chainFirstEitherK$1(F2, M2) {
  var tapEitherM = tapEither$1(F2, M2);
  return function(f2) {
    return function(ma2) {
      return tapEitherM(ma2, f2);
    };
  };
}
function filterOrElse(F2, M2) {
  return function(predicate, onFalse) {
    return function(ma2) {
      return M2.chain(ma2, function(a2) {
        return F2.fromEither(predicate(a2) ? _$1.right(a2) : _$1.left(onFalse(a2)));
      });
    };
  };
}
function tapEither$1(F2, M2) {
  var fromEither2 = fromEitherK$2(F2);
  var tapM = (0, Chain_1.tap)(M2);
  return function(self2, f2) {
    return tapM(self2, fromEither2(f2));
  };
}
var Separated = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.right = exports2.left = exports2.flap = exports2.Functor = exports2.Bifunctor = exports2.URI = exports2.bimap = exports2.mapLeft = exports2.map = exports2.separated = void 0;
  var function_12 = _function;
  var Functor_12 = Functor$4;
  var separated2 = function(left3, right3) {
    return { left: left3, right: right3 };
  };
  exports2.separated = separated2;
  var _map2 = function(fa2, f2) {
    return (0, function_12.pipe)(fa2, (0, exports2.map)(f2));
  };
  var _mapLeft2 = function(fa2, f2) {
    return (0, function_12.pipe)(fa2, (0, exports2.mapLeft)(f2));
  };
  var _bimap2 = function(fa2, g2, f2) {
    return (0, function_12.pipe)(fa2, (0, exports2.bimap)(g2, f2));
  };
  var map2 = function(f2) {
    return function(fa2) {
      return (0, exports2.separated)((0, exports2.left)(fa2), f2((0, exports2.right)(fa2)));
    };
  };
  exports2.map = map2;
  var mapLeft2 = function(f2) {
    return function(fa2) {
      return (0, exports2.separated)(f2((0, exports2.left)(fa2)), (0, exports2.right)(fa2));
    };
  };
  exports2.mapLeft = mapLeft2;
  var bimap2 = function(f2, g2) {
    return function(fa2) {
      return (0, exports2.separated)(f2((0, exports2.left)(fa2)), g2((0, exports2.right)(fa2)));
    };
  };
  exports2.bimap = bimap2;
  exports2.URI = "Separated";
  exports2.Bifunctor = {
    URI: exports2.URI,
    mapLeft: _mapLeft2,
    bimap: _bimap2
  };
  exports2.Functor = {
    URI: exports2.URI,
    map: _map2
  };
  exports2.flap = (0, Functor_12.flap)(exports2.Functor);
  var left2 = function(s2) {
    return s2.left;
  };
  exports2.left = left2;
  var right2 = function(s2) {
    return s2.right;
  };
  exports2.right = right2;
})(Separated);
var Witherable$3 = {};
var __createBinding$2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
  if (k22 === void 0)
    k22 = k2;
  var desc = Object.getOwnPropertyDescriptor(m2, k2);
  if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
    desc = { enumerable: true, get: function() {
      return m2[k2];
    } };
  }
  Object.defineProperty(o2, k22, desc);
} : function(o2, m2, k2, k22) {
  if (k22 === void 0)
    k22 = k2;
  o2[k22] = m2[k2];
});
var __setModuleDefault$2 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
  Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
} : function(o2, v2) {
  o2["default"] = v2;
});
var __importStar$2 = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k2 in mod)
      if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
        __createBinding$2(result, mod, k2);
  }
  __setModuleDefault$2(result, mod);
  return result;
};
Object.defineProperty(Witherable$3, "__esModule", { value: true });
Witherable$3.wiltDefault = wiltDefault;
Witherable$3.witherDefault = witherDefault;
Witherable$3.filterE = filterE$1;
var _ = __importStar$2(internal);
function wiltDefault(T2, C2) {
  return function(F2) {
    var traverseF = T2.traverse(F2);
    return function(wa2, f2) {
      return F2.map(traverseF(wa2, f2), C2.separate);
    };
  };
}
function witherDefault(T2, C2) {
  return function(F2) {
    var traverseF = T2.traverse(F2);
    return function(wa2, f2) {
      return F2.map(traverseF(wa2, f2), C2.compact);
    };
  };
}
function filterE$1(W2) {
  return function(F2) {
    var witherF = W2.wither(F2);
    return function(predicate) {
      return function(ga) {
        return witherF(ga, function(a2) {
          return F2.map(predicate(a2), function(b2) {
            return b2 ? _.some(a2) : _.none;
          });
        });
      };
    };
  };
}
(function(exports2) {
  var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    var desc = Object.getOwnPropertyDescriptor(m2, k2);
    if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m2[k2];
      } };
    }
    Object.defineProperty(o2, k22, desc);
  } : function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o2[k22] = m2[k2];
  });
  var __setModuleDefault2 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
    Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
  } : function(o2, v2) {
    o2["default"] = v2;
  });
  var __importStar2 = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k2 in mod)
        if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
          __createBinding2(result, mod, k2);
    }
    __setModuleDefault2(result, mod);
    return result;
  };
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.match = exports2.foldW = exports2.matchW = exports2.isRight = exports2.isLeft = exports2.fromOption = exports2.fromPredicate = exports2.FromEither = exports2.MonadThrow = exports2.throwError = exports2.ChainRec = exports2.Extend = exports2.extend = exports2.Alt = exports2.alt = exports2.altW = exports2.Bifunctor = exports2.mapLeft = exports2.bimap = exports2.Traversable = exports2.sequence = exports2.traverse = exports2.Foldable = exports2.reduceRight = exports2.foldMap = exports2.reduce = exports2.Monad = exports2.Chain = exports2.Applicative = exports2.Apply = exports2.ap = exports2.apW = exports2.Pointed = exports2.of = exports2.asUnit = exports2.as = exports2.Functor = exports2.map = exports2.getAltValidation = exports2.getApplicativeValidation = exports2.getWitherable = exports2.getFilterable = exports2.getCompactable = exports2.getSemigroup = exports2.getEq = exports2.getShow = exports2.URI = exports2.flatMap = exports2.right = exports2.left = void 0;
  exports2.either = exports2.stringifyJSON = exports2.chainFirstW = exports2.chainFirst = exports2.chain = exports2.chainW = exports2.sequenceArray = exports2.traverseArray = exports2.traverseArrayWithIndex = exports2.traverseReadonlyArrayWithIndex = exports2.traverseReadonlyNonEmptyArrayWithIndex = exports2.ApT = exports2.apSW = exports2.apS = exports2.bindW = exports2.bind = exports2.let = exports2.bindTo = exports2.Do = exports2.exists = exports2.toUnion = exports2.chainNullableK = exports2.fromNullableK = exports2.tryCatchK = exports2.tryCatch = exports2.fromNullable = exports2.orElse = exports2.orElseW = exports2.swap = exports2.filterOrElseW = exports2.filterOrElse = exports2.flatMapOption = exports2.flatMapNullable = exports2.liftOption = exports2.liftNullable = exports2.chainOptionKW = exports2.chainOptionK = exports2.fromOptionK = exports2.duplicate = exports2.flatten = exports2.flattenW = exports2.tap = exports2.apSecondW = exports2.apSecond = exports2.apFirstW = exports2.apFirst = exports2.flap = exports2.getOrElse = exports2.getOrElseW = exports2.fold = void 0;
  exports2.getValidationMonoid = exports2.getValidationSemigroup = exports2.getApplyMonoid = exports2.getApplySemigroup = void 0;
  exports2.toError = toError2;
  exports2.elem = elem2;
  exports2.parseJSON = parseJSON2;
  exports2.getValidation = getValidation2;
  var Applicative_1 = Applicative$3;
  var Apply_12 = Apply$3;
  var chainable = __importStar2(Chain$3);
  var ChainRec_1 = ChainRec;
  var FromEither_1 = FromEither$2;
  var function_12 = _function;
  var Functor_12 = Functor$4;
  var _2 = __importStar2(internal);
  var Separated_1 = Separated;
  var Witherable_1 = Witherable$3;
  exports2.left = _2.left;
  exports2.right = _2.right;
  exports2.flatMap = (0, function_12.dual)(2, function(ma2, f2) {
    return (0, exports2.isLeft)(ma2) ? ma2 : f2(ma2.right);
  });
  var _map2 = function(fa2, f2) {
    return (0, function_12.pipe)(fa2, (0, exports2.map)(f2));
  };
  var _ap2 = function(fab, fa2) {
    return (0, function_12.pipe)(fab, (0, exports2.ap)(fa2));
  };
  var _reduce2 = function(fa2, b2, f2) {
    return (0, function_12.pipe)(fa2, (0, exports2.reduce)(b2, f2));
  };
  var _foldMap2 = function(M2) {
    return function(fa2, f2) {
      var foldMapM = (0, exports2.foldMap)(M2);
      return (0, function_12.pipe)(fa2, foldMapM(f2));
    };
  };
  var _reduceRight2 = function(fa2, b2, f2) {
    return (0, function_12.pipe)(fa2, (0, exports2.reduceRight)(b2, f2));
  };
  var _traverse2 = function(F2) {
    var traverseF = (0, exports2.traverse)(F2);
    return function(ta2, f2) {
      return (0, function_12.pipe)(ta2, traverseF(f2));
    };
  };
  var _bimap2 = function(fa2, f2, g2) {
    return (0, function_12.pipe)(fa2, (0, exports2.bimap)(f2, g2));
  };
  var _mapLeft2 = function(fa2, f2) {
    return (0, function_12.pipe)(fa2, (0, exports2.mapLeft)(f2));
  };
  var _alt2 = function(fa2, that) {
    return (0, function_12.pipe)(fa2, (0, exports2.alt)(that));
  };
  var _extend2 = function(wa2, f2) {
    return (0, function_12.pipe)(wa2, (0, exports2.extend)(f2));
  };
  var _chainRec2 = function(a2, f2) {
    return (0, ChainRec_1.tailRec)(f2(a2), function(e2) {
      return (0, exports2.isLeft)(e2) ? (0, exports2.right)((0, exports2.left)(e2.left)) : (0, exports2.isLeft)(e2.right) ? (0, exports2.left)(f2(e2.right.left)) : (0, exports2.right)((0, exports2.right)(e2.right.right));
    });
  };
  exports2.URI = "Either";
  var getShow2 = function(SE, SA) {
    return {
      show: function(ma2) {
        return (0, exports2.isLeft)(ma2) ? "left(".concat(SE.show(ma2.left), ")") : "right(".concat(SA.show(ma2.right), ")");
      }
    };
  };
  exports2.getShow = getShow2;
  var getEq2 = function(EL, EA) {
    return {
      equals: function(x2, y2) {
        return x2 === y2 || ((0, exports2.isLeft)(x2) ? (0, exports2.isLeft)(y2) && EL.equals(x2.left, y2.left) : (0, exports2.isRight)(y2) && EA.equals(x2.right, y2.right));
      }
    };
  };
  exports2.getEq = getEq2;
  var getSemigroup2 = function(S2) {
    return {
      concat: function(x2, y2) {
        return (0, exports2.isLeft)(y2) ? x2 : (0, exports2.isLeft)(x2) ? y2 : (0, exports2.right)(S2.concat(x2.right, y2.right));
      }
    };
  };
  exports2.getSemigroup = getSemigroup2;
  var getCompactable2 = function(M2) {
    var empty2 = (0, exports2.left)(M2.empty);
    return {
      URI: exports2.URI,
      _E: void 0,
      compact: function(ma2) {
        return (0, exports2.isLeft)(ma2) ? ma2 : ma2.right._tag === "None" ? empty2 : (0, exports2.right)(ma2.right.value);
      },
      separate: function(ma2) {
        return (0, exports2.isLeft)(ma2) ? (0, Separated_1.separated)(ma2, ma2) : (0, exports2.isLeft)(ma2.right) ? (0, Separated_1.separated)((0, exports2.right)(ma2.right.left), empty2) : (0, Separated_1.separated)(empty2, (0, exports2.right)(ma2.right.right));
      }
    };
  };
  exports2.getCompactable = getCompactable2;
  var getFilterable2 = function(M2) {
    var empty2 = (0, exports2.left)(M2.empty);
    var _a2 = (0, exports2.getCompactable)(M2), compact2 = _a2.compact, separate2 = _a2.separate;
    var filter2 = function(ma2, predicate) {
      return (0, exports2.isLeft)(ma2) ? ma2 : predicate(ma2.right) ? ma2 : empty2;
    };
    var partition2 = function(ma2, p2) {
      return (0, exports2.isLeft)(ma2) ? (0, Separated_1.separated)(ma2, ma2) : p2(ma2.right) ? (0, Separated_1.separated)(empty2, (0, exports2.right)(ma2.right)) : (0, Separated_1.separated)((0, exports2.right)(ma2.right), empty2);
    };
    return {
      URI: exports2.URI,
      _E: void 0,
      map: _map2,
      compact: compact2,
      separate: separate2,
      filter: filter2,
      filterMap: function(ma2, f2) {
        if ((0, exports2.isLeft)(ma2)) {
          return ma2;
        }
        var ob2 = f2(ma2.right);
        return ob2._tag === "None" ? empty2 : (0, exports2.right)(ob2.value);
      },
      partition: partition2,
      partitionMap: function(ma2, f2) {
        if ((0, exports2.isLeft)(ma2)) {
          return (0, Separated_1.separated)(ma2, ma2);
        }
        var e2 = f2(ma2.right);
        return (0, exports2.isLeft)(e2) ? (0, Separated_1.separated)((0, exports2.right)(e2.left), empty2) : (0, Separated_1.separated)(empty2, (0, exports2.right)(e2.right));
      }
    };
  };
  exports2.getFilterable = getFilterable2;
  var getWitherable2 = function(M2) {
    var F_ = (0, exports2.getFilterable)(M2);
    var C2 = (0, exports2.getCompactable)(M2);
    return {
      URI: exports2.URI,
      _E: void 0,
      map: _map2,
      compact: F_.compact,
      separate: F_.separate,
      filter: F_.filter,
      filterMap: F_.filterMap,
      partition: F_.partition,
      partitionMap: F_.partitionMap,
      traverse: _traverse2,
      sequence: exports2.sequence,
      reduce: _reduce2,
      foldMap: _foldMap2,
      reduceRight: _reduceRight2,
      wither: (0, Witherable_1.witherDefault)(exports2.Traversable, C2),
      wilt: (0, Witherable_1.wiltDefault)(exports2.Traversable, C2)
    };
  };
  exports2.getWitherable = getWitherable2;
  var getApplicativeValidation2 = function(SE) {
    return {
      URI: exports2.URI,
      _E: void 0,
      map: _map2,
      ap: function(fab, fa2) {
        return (0, exports2.isLeft)(fab) ? (0, exports2.isLeft)(fa2) ? (0, exports2.left)(SE.concat(fab.left, fa2.left)) : fab : (0, exports2.isLeft)(fa2) ? fa2 : (0, exports2.right)(fab.right(fa2.right));
      },
      of: exports2.of
    };
  };
  exports2.getApplicativeValidation = getApplicativeValidation2;
  var getAltValidation2 = function(SE) {
    return {
      URI: exports2.URI,
      _E: void 0,
      map: _map2,
      alt: function(me2, that) {
        if ((0, exports2.isRight)(me2)) {
          return me2;
        }
        var ea2 = that();
        return (0, exports2.isLeft)(ea2) ? (0, exports2.left)(SE.concat(me2.left, ea2.left)) : ea2;
      }
    };
  };
  exports2.getAltValidation = getAltValidation2;
  var map2 = function(f2) {
    return function(fa2) {
      return (0, exports2.isLeft)(fa2) ? fa2 : (0, exports2.right)(f2(fa2.right));
    };
  };
  exports2.map = map2;
  exports2.Functor = {
    URI: exports2.URI,
    map: _map2
  };
  exports2.as = (0, function_12.dual)(2, (0, Functor_12.as)(exports2.Functor));
  exports2.asUnit = (0, Functor_12.asUnit)(exports2.Functor);
  exports2.of = exports2.right;
  exports2.Pointed = {
    URI: exports2.URI,
    of: exports2.of
  };
  var apW2 = function(fa2) {
    return function(fab) {
      return (0, exports2.isLeft)(fab) ? fab : (0, exports2.isLeft)(fa2) ? fa2 : (0, exports2.right)(fab.right(fa2.right));
    };
  };
  exports2.apW = apW2;
  exports2.ap = exports2.apW;
  exports2.Apply = {
    URI: exports2.URI,
    map: _map2,
    ap: _ap2
  };
  exports2.Applicative = {
    URI: exports2.URI,
    map: _map2,
    ap: _ap2,
    of: exports2.of
  };
  exports2.Chain = {
    URI: exports2.URI,
    map: _map2,
    ap: _ap2,
    chain: exports2.flatMap
  };
  exports2.Monad = {
    URI: exports2.URI,
    map: _map2,
    ap: _ap2,
    of: exports2.of,
    chain: exports2.flatMap
  };
  var reduce2 = function(b2, f2) {
    return function(fa2) {
      return (0, exports2.isLeft)(fa2) ? b2 : f2(b2, fa2.right);
    };
  };
  exports2.reduce = reduce2;
  var foldMap2 = function(M2) {
    return function(f2) {
      return function(fa2) {
        return (0, exports2.isLeft)(fa2) ? M2.empty : f2(fa2.right);
      };
    };
  };
  exports2.foldMap = foldMap2;
  var reduceRight2 = function(b2, f2) {
    return function(fa2) {
      return (0, exports2.isLeft)(fa2) ? b2 : f2(fa2.right, b2);
    };
  };
  exports2.reduceRight = reduceRight2;
  exports2.Foldable = {
    URI: exports2.URI,
    reduce: _reduce2,
    foldMap: _foldMap2,
    reduceRight: _reduceRight2
  };
  var traverse2 = function(F2) {
    return function(f2) {
      return function(ta2) {
        return (0, exports2.isLeft)(ta2) ? F2.of((0, exports2.left)(ta2.left)) : F2.map(f2(ta2.right), exports2.right);
      };
    };
  };
  exports2.traverse = traverse2;
  var sequence2 = function(F2) {
    return function(ma2) {
      return (0, exports2.isLeft)(ma2) ? F2.of((0, exports2.left)(ma2.left)) : F2.map(ma2.right, exports2.right);
    };
  };
  exports2.sequence = sequence2;
  exports2.Traversable = {
    URI: exports2.URI,
    map: _map2,
    reduce: _reduce2,
    foldMap: _foldMap2,
    reduceRight: _reduceRight2,
    traverse: _traverse2,
    sequence: exports2.sequence
  };
  var bimap2 = function(f2, g2) {
    return function(fa2) {
      return (0, exports2.isLeft)(fa2) ? (0, exports2.left)(f2(fa2.left)) : (0, exports2.right)(g2(fa2.right));
    };
  };
  exports2.bimap = bimap2;
  var mapLeft2 = function(f2) {
    return function(fa2) {
      return (0, exports2.isLeft)(fa2) ? (0, exports2.left)(f2(fa2.left)) : fa2;
    };
  };
  exports2.mapLeft = mapLeft2;
  exports2.Bifunctor = {
    URI: exports2.URI,
    bimap: _bimap2,
    mapLeft: _mapLeft2
  };
  var altW2 = function(that) {
    return function(fa2) {
      return (0, exports2.isLeft)(fa2) ? that() : fa2;
    };
  };
  exports2.altW = altW2;
  exports2.alt = exports2.altW;
  exports2.Alt = {
    URI: exports2.URI,
    map: _map2,
    alt: _alt2
  };
  var extend2 = function(f2) {
    return function(wa2) {
      return (0, exports2.isLeft)(wa2) ? wa2 : (0, exports2.right)(f2(wa2));
    };
  };
  exports2.extend = extend2;
  exports2.Extend = {
    URI: exports2.URI,
    map: _map2,
    extend: _extend2
  };
  exports2.ChainRec = {
    URI: exports2.URI,
    map: _map2,
    ap: _ap2,
    chain: exports2.flatMap,
    chainRec: _chainRec2
  };
  exports2.throwError = exports2.left;
  exports2.MonadThrow = {
    URI: exports2.URI,
    map: _map2,
    ap: _ap2,
    of: exports2.of,
    chain: exports2.flatMap,
    throwError: exports2.throwError
  };
  exports2.FromEither = {
    URI: exports2.URI,
    fromEither: function_12.identity
  };
  exports2.fromPredicate = (0, FromEither_1.fromPredicate)(exports2.FromEither);
  exports2.fromOption = /* @__PURE__ */ (0, FromEither_1.fromOption)(exports2.FromEither);
  exports2.isLeft = _2.isLeft;
  exports2.isRight = _2.isRight;
  var matchW2 = function(onLeft, onRight) {
    return function(ma2) {
      return (0, exports2.isLeft)(ma2) ? onLeft(ma2.left) : onRight(ma2.right);
    };
  };
  exports2.matchW = matchW2;
  exports2.foldW = exports2.matchW;
  exports2.match = exports2.matchW;
  exports2.fold = exports2.match;
  var getOrElseW2 = function(onLeft) {
    return function(ma2) {
      return (0, exports2.isLeft)(ma2) ? onLeft(ma2.left) : ma2.right;
    };
  };
  exports2.getOrElseW = getOrElseW2;
  exports2.getOrElse = exports2.getOrElseW;
  exports2.flap = (0, Functor_12.flap)(exports2.Functor);
  exports2.apFirst = (0, Apply_12.apFirst)(exports2.Apply);
  exports2.apFirstW = exports2.apFirst;
  exports2.apSecond = (0, Apply_12.apSecond)(exports2.Apply);
  exports2.apSecondW = exports2.apSecond;
  exports2.tap = (0, function_12.dual)(2, chainable.tap(exports2.Chain));
  exports2.flattenW = /* @__PURE__ */ (0, exports2.flatMap)(function_12.identity);
  exports2.flatten = exports2.flattenW;
  exports2.duplicate = (0, exports2.extend)(function_12.identity);
  exports2.fromOptionK = /* @__PURE__ */ (0, FromEither_1.fromOptionK)(exports2.FromEither);
  exports2.chainOptionK = (0, FromEither_1.chainOptionK)(exports2.FromEither, exports2.Chain);
  exports2.chainOptionKW = exports2.chainOptionK;
  var _FromEither2 = {
    fromEither: exports2.FromEither.fromEither
  };
  exports2.liftNullable = _2.liftNullable(_FromEither2);
  exports2.liftOption = _2.liftOption(_FromEither2);
  var _FlatMap2 = {
    flatMap: exports2.flatMap
  };
  exports2.flatMapNullable = _2.flatMapNullable(_FromEither2, _FlatMap2);
  exports2.flatMapOption = _2.flatMapOption(_FromEither2, _FlatMap2);
  exports2.filterOrElse = (0, FromEither_1.filterOrElse)(exports2.FromEither, exports2.Chain);
  exports2.filterOrElseW = exports2.filterOrElse;
  var swap2 = function(ma2) {
    return (0, exports2.isLeft)(ma2) ? (0, exports2.right)(ma2.left) : (0, exports2.left)(ma2.right);
  };
  exports2.swap = swap2;
  var orElseW2 = function(onLeft) {
    return function(ma2) {
      return (0, exports2.isLeft)(ma2) ? onLeft(ma2.left) : ma2;
    };
  };
  exports2.orElseW = orElseW2;
  exports2.orElse = exports2.orElseW;
  var fromNullable2 = function(e2) {
    return function(a2) {
      return a2 == null ? (0, exports2.left)(e2) : (0, exports2.right)(a2);
    };
  };
  exports2.fromNullable = fromNullable2;
  var tryCatch2 = function(f2, onThrow) {
    try {
      return (0, exports2.right)(f2());
    } catch (e2) {
      return (0, exports2.left)(onThrow(e2));
    }
  };
  exports2.tryCatch = tryCatch2;
  var tryCatchK2 = function(f2, onThrow) {
    return function() {
      var a2 = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        a2[_i] = arguments[_i];
      }
      return (0, exports2.tryCatch)(function() {
        return f2.apply(void 0, a2);
      }, onThrow);
    };
  };
  exports2.tryCatchK = tryCatchK2;
  var fromNullableK2 = function(e2) {
    var from = (0, exports2.fromNullable)(e2);
    return function(f2) {
      return (0, function_12.flow)(f2, from);
    };
  };
  exports2.fromNullableK = fromNullableK2;
  var chainNullableK2 = function(e2) {
    var from = (0, exports2.fromNullableK)(e2);
    return function(f2) {
      return (0, exports2.flatMap)(from(f2));
    };
  };
  exports2.chainNullableK = chainNullableK2;
  exports2.toUnion = (0, exports2.foldW)(function_12.identity, function_12.identity);
  function toError2(e2) {
    try {
      return e2 instanceof Error ? e2 : new Error(String(e2));
    } catch (error) {
      return new Error();
    }
  }
  function elem2(E2) {
    return function(a2, ma2) {
      if (ma2 === void 0) {
        var elemE_1 = elem2(E2);
        return function(ma3) {
          return elemE_1(a2, ma3);
        };
      }
      return (0, exports2.isLeft)(ma2) ? false : E2.equals(a2, ma2.right);
    };
  }
  var exists2 = function(predicate) {
    return function(ma2) {
      return (0, exports2.isLeft)(ma2) ? false : predicate(ma2.right);
    };
  };
  exports2.exists = exists2;
  exports2.Do = (0, exports2.of)(_2.emptyRecord);
  exports2.bindTo = (0, Functor_12.bindTo)(exports2.Functor);
  var let_2 = /* @__PURE__ */ (0, Functor_12.let)(exports2.Functor);
  exports2.let = let_2;
  exports2.bind = chainable.bind(exports2.Chain);
  exports2.bindW = exports2.bind;
  exports2.apS = (0, Apply_12.apS)(exports2.Apply);
  exports2.apSW = exports2.apS;
  exports2.ApT = (0, exports2.of)(_2.emptyReadonlyArray);
  var traverseReadonlyNonEmptyArrayWithIndex2 = function(f2) {
    return function(as2) {
      var e2 = f2(0, _2.head(as2));
      if ((0, exports2.isLeft)(e2)) {
        return e2;
      }
      var out = [e2.right];
      for (var i2 = 1; i2 < as2.length; i2++) {
        var e_1 = f2(i2, as2[i2]);
        if ((0, exports2.isLeft)(e_1)) {
          return e_1;
        }
        out.push(e_1.right);
      }
      return (0, exports2.right)(out);
    };
  };
  exports2.traverseReadonlyNonEmptyArrayWithIndex = traverseReadonlyNonEmptyArrayWithIndex2;
  var traverseReadonlyArrayWithIndex2 = function(f2) {
    var g2 = (0, exports2.traverseReadonlyNonEmptyArrayWithIndex)(f2);
    return function(as2) {
      return _2.isNonEmpty(as2) ? g2(as2) : exports2.ApT;
    };
  };
  exports2.traverseReadonlyArrayWithIndex = traverseReadonlyArrayWithIndex2;
  exports2.traverseArrayWithIndex = exports2.traverseReadonlyArrayWithIndex;
  var traverseArray2 = function(f2) {
    return (0, exports2.traverseReadonlyArrayWithIndex)(function(_3, a2) {
      return f2(a2);
    });
  };
  exports2.traverseArray = traverseArray2;
  exports2.sequenceArray = /* @__PURE__ */ (0, exports2.traverseArray)(function_12.identity);
  exports2.chainW = exports2.flatMap;
  exports2.chain = exports2.flatMap;
  exports2.chainFirst = exports2.tap;
  exports2.chainFirstW = exports2.tap;
  function parseJSON2(s2, onError) {
    return (0, exports2.tryCatch)(function() {
      return JSON.parse(s2);
    }, onError);
  }
  var stringifyJSON2 = function(u2, onError) {
    return (0, exports2.tryCatch)(function() {
      var s2 = JSON.stringify(u2);
      if (typeof s2 !== "string") {
        throw new Error("Converting unsupported structure to JSON");
      }
      return s2;
    }, onError);
  };
  exports2.stringifyJSON = stringifyJSON2;
  exports2.either = {
    URI: exports2.URI,
    map: _map2,
    of: exports2.of,
    ap: _ap2,
    chain: exports2.flatMap,
    reduce: _reduce2,
    foldMap: _foldMap2,
    reduceRight: _reduceRight2,
    traverse: _traverse2,
    sequence: exports2.sequence,
    bimap: _bimap2,
    mapLeft: _mapLeft2,
    alt: _alt2,
    extend: _extend2,
    chainRec: _chainRec2,
    throwError: exports2.throwError
  };
  exports2.getApplySemigroup = /* @__PURE__ */ (0, Apply_12.getApplySemigroup)(exports2.Apply);
  exports2.getApplyMonoid = /* @__PURE__ */ (0, Applicative_1.getApplicativeMonoid)(exports2.Applicative);
  var getValidationSemigroup2 = function(SE, SA) {
    return (0, Apply_12.getApplySemigroup)((0, exports2.getApplicativeValidation)(SE))(SA);
  };
  exports2.getValidationSemigroup = getValidationSemigroup2;
  var getValidationMonoid2 = function(SE, MA) {
    return (0, Applicative_1.getApplicativeMonoid)((0, exports2.getApplicativeValidation)(SE))(MA);
  };
  exports2.getValidationMonoid = getValidationMonoid2;
  function getValidation2(SE) {
    var ap2 = (0, exports2.getApplicativeValidation)(SE).ap;
    var alt2 = (0, exports2.getAltValidation)(SE).alt;
    return {
      URI: exports2.URI,
      _E: void 0,
      map: _map2,
      of: exports2.of,
      chain: exports2.flatMap,
      bimap: _bimap2,
      mapLeft: _mapLeft2,
      reduce: _reduce2,
      foldMap: _foldMap2,
      reduceRight: _reduceRight2,
      extend: _extend2,
      traverse: _traverse2,
      sequence: exports2.sequence,
      chainRec: _chainRec2,
      throwError: exports2.throwError,
      ap: ap2,
      alt: alt2
    };
  }
})(Either);
var src = {};
var fromEquals = function(equals) {
  return {
    equals: function(x2, y2) {
      return x2 === y2 || equals(x2, y2);
    }
  };
};
var equalsDefault = function(compare) {
  return function(first2, second) {
    return first2 === second || compare(first2, second) === 0;
  };
};
var fromCompare = function(compare) {
  return {
    equals: equalsDefault(compare),
    compare: function(first2, second) {
      return first2 === second ? 0 : compare(first2, second);
    }
  };
};
var getSemigroup$2 = function() {
  return {
    concat: function(first2, second) {
      return fromCompare(function(a2, b2) {
        var ox = first2.compare(a2, b2);
        return ox !== 0 ? ox : second.compare(a2, b2);
      });
    }
  };
};
var getMonoid$4 = function() {
  return {
    concat: getSemigroup$2().concat,
    empty: fromCompare(function() {
      return 0;
    })
  };
};
var min$3 = function(O2) {
  return function(first2, second) {
    return first2 === second || O2.compare(first2, second) < 1 ? first2 : second;
  };
};
var max$3 = function(O2) {
  return function(first2, second) {
    return first2 === second || O2.compare(first2, second) > -1 ? first2 : second;
  };
};
var min$2 = function(O2) {
  return {
    concat: min$3(O2)
  };
};
var max$2 = function(O2) {
  return {
    concat: max$3(O2)
  };
};
var first = function() {
  return { concat: identity$1 };
};
var last$4 = function() {
  return { concat: function(_2, y2) {
    return y2;
  } };
};
var __spreadArray$2 = globalThis && globalThis.__spreadArray || function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i2 = 0, l2 = from.length, ar; i2 < l2; i2++) {
      if (ar || !(i2 in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i2);
        ar[i2] = from[i2];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var isNonEmpty$3 = isNonEmpty$5;
var isOutOfBound$3 = function(i2, as2) {
  return i2 < 0 || i2 >= as2.length;
};
var prependW$2 = function(head2) {
  return function(tail2) {
    return __spreadArray$2([head2], tail2, true);
  };
};
var prepend$2 = prependW$2;
var prependAll$2 = function(middle) {
  return function(as2) {
    var out = [middle, as2[0]];
    for (var i2 = 1; i2 < as2.length; i2++) {
      out.push(middle, as2[i2]);
    }
    return out;
  };
};
var intersperse$2 = function(middle) {
  return function(as2) {
    var rest = tail$2(as2);
    return isNonEmpty$3(rest) ? pipe$1(rest, prependAll$2(middle), prepend$2(head$3(as2))) : as2;
  };
};
var reduce$7 = function(b2, f2) {
  return reduceWithIndex$6(b2, function(_2, b3, a2) {
    return f2(b3, a2);
  });
};
var foldMap$7 = function(S2) {
  return function(f2) {
    return function(as2) {
      return as2.slice(1).reduce(function(s2, a2) {
        return S2.concat(s2, f2(a2));
      }, f2(as2[0]));
    };
  };
};
var reduceRight$7 = function(b2, f2) {
  return reduceRightWithIndex$6(b2, function(_2, b3, a2) {
    return f2(b3, a2);
  });
};
var reduceWithIndex$6 = function(b2, f2) {
  return function(as2) {
    return as2.reduce(function(b3, a2, i2) {
      return f2(i2, b3, a2);
    }, b2);
  };
};
var foldMapWithIndex$6 = function(S2) {
  return function(f2) {
    return function(as2) {
      return as2.slice(1).reduce(function(s2, a2, i2) {
        return S2.concat(s2, f2(i2 + 1, a2));
      }, f2(0, as2[0]));
    };
  };
};
var reduceRightWithIndex$6 = function(b2, f2) {
  return function(as2) {
    return as2.reduceRight(function(b3, a2, i2) {
      return f2(i2, a2, b3);
    }, b2);
  };
};
var extract$1 = head$4;
var getShow$6 = function(S2) {
  return {
    show: function(as2) {
      return "[".concat(as2.map(S2.show).join(", "), "]");
    }
  };
};
var getEq$6 = function(E2) {
  return fromEquals(function(xs, ys) {
    return xs.length === ys.length && xs.every(function(x2, i2) {
      return E2.equals(x2, ys[i2]);
    });
  });
};
var head$3 = extract$1;
var tail$2 = tail$3;
var last$3 = function(as2) {
  return as2[as2.length - 1];
};
var min$1 = function(O2) {
  var S2 = min$2(O2);
  return function(as2) {
    return as2.reduce(S2.concat);
  };
};
var max$1 = function(O2) {
  var S2 = max$2(O2);
  return function(as2) {
    return as2.reduce(S2.concat);
  };
};
var concatAll$1 = function(S2) {
  return function(as2) {
    return as2.reduce(S2.concat);
  };
};
var intercalate$3 = function(S2) {
  var concatAllS = concatAll$1(S2);
  return function(middle) {
    return flow(intersperse$2(middle), concatAllS);
  };
};
var __spreadArray$1 = globalThis && globalThis.__spreadArray || function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i2 = 0, l2 = from.length, ar; i2 < l2; i2++) {
      if (ar || !(i2 in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i2);
        ar[i2] = from[i2];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var isNonEmpty$2 = function(as2) {
  return as2.length > 0;
};
var isOutOfBound$2 = function(i2, as2) {
  return i2 < 0 || i2 >= as2.length;
};
var prependW$1 = function(head2) {
  return function(tail2) {
    return __spreadArray$1([head2], tail2, true);
  };
};
var prepend$1 = prependW$1;
var appendW$1 = function(end) {
  return function(init2) {
    return __spreadArray$1(__spreadArray$1([], init2, true), [end], false);
  };
};
var append$1 = appendW$1;
var unsafeInsertAt$1 = function(i2, a2, as2) {
  if (isNonEmpty$2(as2)) {
    var xs = fromReadonlyNonEmptyArray(as2);
    xs.splice(i2, 0, a2);
    return xs;
  }
  return [a2];
};
var unsafeUpdateAt$1 = function(i2, a2, as2) {
  var xs = fromReadonlyNonEmptyArray(as2);
  xs[i2] = a2;
  return xs;
};
var uniq$1 = function(E2) {
  return function(as2) {
    if (as2.length === 1) {
      return copy$1(as2);
    }
    var out = [head$2(as2)];
    var rest = tail$1(as2);
    var _loop_1 = function(a3) {
      if (out.every(function(o2) {
        return !E2.equals(o2, a3);
      })) {
        out.push(a3);
      }
    };
    for (var _i = 0, rest_1 = rest; _i < rest_1.length; _i++) {
      var a2 = rest_1[_i];
      _loop_1(a2);
    }
    return out;
  };
};
var sortBy$1 = function(ords) {
  if (isNonEmpty$2(ords)) {
    var M2 = getMonoid$4();
    return sort$1(ords.reduce(M2.concat, M2.empty));
  }
  return copy$1;
};
var union$3 = function(E2) {
  var uniqE = uniq$1(E2);
  return function(second) {
    return function(first2) {
      return uniqE(pipe$1(first2, concat$1(second)));
    };
  };
};
var rotate$1 = function(n2) {
  return function(as2) {
    var len2 = as2.length;
    var m2 = Math.round(n2) % len2;
    if (isOutOfBound$2(Math.abs(m2), as2) || m2 === 0) {
      return copy$1(as2);
    }
    if (m2 < 0) {
      var _a2 = splitAt$1(-m2)(as2), f2 = _a2[0], s2 = _a2[1];
      return pipe$1(s2, concat$1(f2));
    } else {
      return rotate$1(m2 - len2)(as2);
    }
  };
};
var fromReadonlyNonEmptyArray = fromReadonlyNonEmptyArray$1;
var fromArray = function(as2) {
  return isNonEmpty$2(as2) ? some$4(as2) : none$1;
};
var makeBy$1 = function(f2) {
  return function(n2) {
    var j2 = Math.max(0, Math.floor(n2));
    var out = [f2(0)];
    for (var i2 = 1; i2 < j2; i2++) {
      out.push(f2(i2));
    }
    return out;
  };
};
var replicate$1 = function(a2) {
  return makeBy$1(function() {
    return a2;
  });
};
var range$1 = function(start, end) {
  return start <= end ? makeBy$1(function(i2) {
    return start + i2;
  })(end - start + 1) : [start];
};
var unprepend = function(as2) {
  return [head$2(as2), tail$1(as2)];
};
var unappend = function(as2) {
  return [init$1(as2), last$2(as2)];
};
function concatW$1(second) {
  return function(first2) {
    return first2.concat(second);
  };
}
function concat$1(x2, y2) {
  return y2 ? x2.concat(y2) : function(y3) {
    return y3.concat(x2);
  };
}
var reverse$1 = function(as2) {
  return __spreadArray$1([last$2(as2)], as2.slice(0, -1).reverse(), true);
};
function group(E2) {
  return function(as2) {
    var len2 = as2.length;
    if (len2 === 0) {
      return [];
    }
    var out = [];
    var head2 = as2[0];
    var nea = [head2];
    for (var i2 = 1; i2 < len2; i2++) {
      var a2 = as2[i2];
      if (E2.equals(a2, head2)) {
        nea.push(a2);
      } else {
        out.push(nea);
        head2 = a2;
        nea = [head2];
      }
    }
    out.push(nea);
    return out;
  };
}
var groupBy = function(f2) {
  return function(as2) {
    var out = {};
    for (var _i = 0, as_1 = as2; _i < as_1.length; _i++) {
      var a2 = as_1[_i];
      var k2 = f2(a2);
      if (has$2.call(out, k2)) {
        out[k2].push(a2);
      } else {
        out[k2] = [a2];
      }
    }
    return out;
  };
};
var sort$1 = function(O2) {
  return function(as2) {
    return as2.slice().sort(O2.compare);
  };
};
var insertAt$2 = function(i2, a2) {
  return function(as2) {
    return i2 < 0 || i2 > as2.length ? none$1 : some$4(unsafeInsertAt$1(i2, a2, as2));
  };
};
var updateAt$2 = function(i2, a2) {
  return modifyAt$2(i2, function() {
    return a2;
  });
};
var modifyAt$2 = function(i2, f2) {
  return function(as2) {
    return isOutOfBound$2(i2, as2) ? none$1 : some$4(unsafeUpdateAt$1(i2, f2(as2[i2]), as2));
  };
};
var copy$1 = fromReadonlyNonEmptyArray;
var of$2 = function(a2) {
  return [a2];
};
var zipWith$1 = function(as2, bs, f2) {
  var cs = [f2(as2[0], bs[0])];
  var len2 = Math.min(as2.length, bs.length);
  for (var i2 = 1; i2 < len2; i2++) {
    cs[i2] = f2(as2[i2], bs[i2]);
  }
  return cs;
};
function zip$1(as2, bs) {
  if (bs === void 0) {
    return function(bs2) {
      return zip$1(bs2, as2);
    };
  }
  return zipWith$1(as2, bs, function(a2, b2) {
    return [a2, b2];
  });
}
var unzip$1 = function(abs) {
  var fa2 = [abs[0][0]];
  var fb2 = [abs[0][1]];
  for (var i2 = 1; i2 < abs.length; i2++) {
    fa2[i2] = abs[i2][0];
    fb2[i2] = abs[i2][1];
  }
  return [fa2, fb2];
};
var prependAll$1 = function(middle) {
  return function(as2) {
    var out = [middle, as2[0]];
    for (var i2 = 1; i2 < as2.length; i2++) {
      out.push(middle, as2[i2]);
    }
    return out;
  };
};
var intersperse$1 = function(middle) {
  return function(as2) {
    var rest = tail$1(as2);
    return isNonEmpty$2(rest) ? pipe$1(rest, prependAll$1(middle), prepend$1(head$2(as2))) : copy$1(as2);
  };
};
var foldMapWithIndex$5 = foldMapWithIndex$6;
var foldMap$6 = foldMap$7;
var chainWithIndex$1 = function(f2) {
  return function(as2) {
    var out = fromReadonlyNonEmptyArray(f2(0, head$2(as2)));
    for (var i2 = 1; i2 < as2.length; i2++) {
      var bs = f2(i2, as2[i2]);
      for (var j2 = 0; j2 < bs.length; j2++) {
        out.push(bs[j2]);
      }
    }
    return out;
  };
};
var chop$1 = function(f2) {
  return function(as2) {
    var _a2 = f2(as2), b2 = _a2[0], rest = _a2[1];
    var out = [b2];
    var next = rest;
    while (isNonEmpty$2(next)) {
      var _b2 = f2(next), b_1 = _b2[0], rest_2 = _b2[1];
      out.push(b_1);
      next = rest_2;
    }
    return out;
  };
};
var splitAt$1 = function(n2) {
  return function(as2) {
    var m2 = Math.max(1, n2);
    return m2 >= as2.length ? [copy$1(as2), []] : [pipe$1(as2.slice(1, m2), prepend$1(head$2(as2))), as2.slice(m2)];
  };
};
var chunksOf$1 = function(n2) {
  return chop$1(splitAt$1(n2));
};
var _map$4 = function(fa2, f2) {
  return pipe$1(fa2, map$5(f2));
};
var _mapWithIndex$3 = function(fa2, f2) {
  return pipe$1(fa2, mapWithIndex$4(f2));
};
var _ap$2 = function(fab, fa2) {
  return pipe$1(fab, ap$3(fa2));
};
var _extend$2 = function(wa2, f2) {
  return pipe$1(wa2, extend$3(f2));
};
var _reduce$4 = function(fa2, b2, f2) {
  return pipe$1(fa2, reduce$6(b2, f2));
};
var _foldMap$4 = function(M2) {
  var foldMapM = foldMap$6(M2);
  return function(fa2, f2) {
    return pipe$1(fa2, foldMapM(f2));
  };
};
var _reduceRight$4 = function(fa2, b2, f2) {
  return pipe$1(fa2, reduceRight$6(b2, f2));
};
var _traverse$4 = function(F2) {
  var traverseF = traverse$4(F2);
  return function(ta2, f2) {
    return pipe$1(ta2, traverseF(f2));
  };
};
var _alt$2 = function(fa2, that) {
  return pipe$1(fa2, alt$3(that));
};
var _reduceWithIndex$3 = function(fa2, b2, f2) {
  return pipe$1(fa2, reduceWithIndex$5(b2, f2));
};
var _foldMapWithIndex$3 = function(M2) {
  var foldMapWithIndexM = foldMapWithIndex$5(M2);
  return function(fa2, f2) {
    return pipe$1(fa2, foldMapWithIndexM(f2));
  };
};
var _reduceRightWithIndex$3 = function(fa2, b2, f2) {
  return pipe$1(fa2, reduceRightWithIndex$5(b2, f2));
};
var _traverseWithIndex$3 = function(F2) {
  var traverseWithIndexF = traverseWithIndex$3(F2);
  return function(ta2, f2) {
    return pipe$1(ta2, traverseWithIndexF(f2));
  };
};
var altW$2 = function(that) {
  return function(as2) {
    return pipe$1(as2, concatW$1(that()));
  };
};
var alt$3 = altW$2;
var ap$3 = function(as2) {
  return flatMap$2(function(f2) {
    return pipe$1(as2, map$5(f2));
  });
};
var flatMap$2 = /* @__PURE__ */ dual(2, function(ma2, f2) {
  return pipe$1(ma2, chainWithIndex$1(function(i2, a2) {
    return f2(a2, i2);
  }));
});
var extend$3 = function(f2) {
  return function(as2) {
    var next = tail$1(as2);
    var out = [f2(as2)];
    while (isNonEmpty$2(next)) {
      out.push(f2(next));
      next = tail$1(next);
    }
    return out;
  };
};
var duplicate$2 = /* @__PURE__ */ extend$3(identity$1);
var flatten$2 = /* @__PURE__ */ flatMap$2(identity$1);
var map$5 = function(f2) {
  return mapWithIndex$4(function(_2, a2) {
    return f2(a2);
  });
};
var mapWithIndex$4 = function(f2) {
  return function(as2) {
    var out = [f2(0, head$2(as2))];
    for (var i2 = 1; i2 < as2.length; i2++) {
      out.push(f2(i2, as2[i2]));
    }
    return out;
  };
};
var reduce$6 = reduce$7;
var reduceWithIndex$5 = reduceWithIndex$6;
var reduceRight$6 = reduceRight$7;
var reduceRightWithIndex$5 = reduceRightWithIndex$6;
var traverse$4 = function(F2) {
  var traverseWithIndexF = traverseWithIndex$3(F2);
  return function(f2) {
    return traverseWithIndexF(function(_2, a2) {
      return f2(a2);
    });
  };
};
var sequence$4 = function(F2) {
  return traverseWithIndex$3(F2)(function(_2, a2) {
    return a2;
  });
};
var traverseWithIndex$3 = function(F2) {
  return function(f2) {
    return function(as2) {
      var out = F2.map(f2(0, head$2(as2)), of$2);
      for (var i2 = 1; i2 < as2.length; i2++) {
        out = F2.ap(F2.map(out, function(bs) {
          return function(b2) {
            return pipe$1(bs, append$1(b2));
          };
        }), f2(i2, as2[i2]));
      }
      return out;
    };
  };
};
var extract = head$3;
var URI$3 = "NonEmptyArray";
var getShow$5 = getShow$6;
var getSemigroup$1 = function() {
  return {
    concat: concat$1
  };
};
var getEq$5 = getEq$6;
var getUnionSemigroup$2 = function(E2) {
  var unionE = union$3(E2);
  return {
    concat: function(first2, second) {
      return unionE(second)(first2);
    }
  };
};
var Functor$3 = {
  URI: URI$3,
  map: _map$4
};
var flap$3 = /* @__PURE__ */ flap$6(Functor$3);
var Pointed$2 = {
  URI: URI$3,
  of: of$2
};
var FunctorWithIndex$2 = {
  URI: URI$3,
  map: _map$4,
  mapWithIndex: _mapWithIndex$3
};
var Apply$2 = {
  URI: URI$3,
  map: _map$4,
  ap: _ap$2
};
var apFirst$2 = /* @__PURE__ */ apFirst$5(Apply$2);
var apSecond$2 = /* @__PURE__ */ apSecond$5(Apply$2);
var Applicative$2 = {
  URI: URI$3,
  map: _map$4,
  ap: _ap$2,
  of: of$2
};
var Chain$2 = {
  URI: URI$3,
  map: _map$4,
  ap: _ap$2,
  chain: flatMap$2
};
var chainFirst$2 = /* @__PURE__ */ chainFirst$5(Chain$2);
var Monad$2 = {
  URI: URI$3,
  map: _map$4,
  ap: _ap$2,
  of: of$2,
  chain: flatMap$2
};
var Foldable$3 = {
  URI: URI$3,
  reduce: _reduce$4,
  foldMap: _foldMap$4,
  reduceRight: _reduceRight$4
};
var FoldableWithIndex$2 = {
  URI: URI$3,
  reduce: _reduce$4,
  foldMap: _foldMap$4,
  reduceRight: _reduceRight$4,
  reduceWithIndex: _reduceWithIndex$3,
  foldMapWithIndex: _foldMapWithIndex$3,
  reduceRightWithIndex: _reduceRightWithIndex$3
};
var Traversable$3 = {
  URI: URI$3,
  map: _map$4,
  reduce: _reduce$4,
  foldMap: _foldMap$4,
  reduceRight: _reduceRight$4,
  traverse: _traverse$4,
  sequence: sequence$4
};
var TraversableWithIndex$2 = {
  URI: URI$3,
  map: _map$4,
  mapWithIndex: _mapWithIndex$3,
  reduce: _reduce$4,
  foldMap: _foldMap$4,
  reduceRight: _reduceRight$4,
  traverse: _traverse$4,
  sequence: sequence$4,
  reduceWithIndex: _reduceWithIndex$3,
  foldMapWithIndex: _foldMapWithIndex$3,
  reduceRightWithIndex: _reduceRightWithIndex$3,
  traverseWithIndex: _traverseWithIndex$3
};
var Alt$2 = {
  URI: URI$3,
  map: _map$4,
  alt: _alt$2
};
var Comonad = {
  URI: URI$3,
  map: _map$4,
  extend: _extend$2,
  extract
};
var Do$2 = /* @__PURE__ */ of$2(emptyRecord);
var bindTo$2 = /* @__PURE__ */ bindTo$5(Functor$3);
var let_$2 = /* @__PURE__ */ let_$5(Functor$3);
var bind$2 = /* @__PURE__ */ bind$5(Chain$2);
var apS$2 = /* @__PURE__ */ apS$5(Apply$2);
var head$2 = head$3;
var tail$1 = function(as2) {
  return as2.slice(1);
};
var last$2 = last$3;
var init$1 = function(as2) {
  return as2.slice(0, -1);
};
var min = min$1;
var max = max$1;
var concatAll = function(S2) {
  return function(as2) {
    return as2.reduce(S2.concat);
  };
};
var matchLeft$1 = function(f2) {
  return function(as2) {
    return f2(head$2(as2), tail$1(as2));
  };
};
var matchRight$1 = function(f2) {
  return function(as2) {
    return f2(init$1(as2), last$2(as2));
  };
};
var modifyHead = function(f2) {
  return function(as2) {
    return __spreadArray$1([f2(head$2(as2))], tail$1(as2), true);
  };
};
var updateHead = function(a2) {
  return modifyHead(function() {
    return a2;
  });
};
var modifyLast = function(f2) {
  return function(as2) {
    return pipe$1(init$1(as2), append$1(f2(last$2(as2))));
  };
};
var updateLast = function(a2) {
  return modifyLast(function() {
    return a2;
  });
};
var intercalate$2 = intercalate$3;
var chain$3 = flatMap$2;
function groupSort(O2) {
  var sortO = sort$1(O2);
  var groupO = group(O2);
  return function(as2) {
    return isNonEmpty$2(as2) ? groupO(sortO(as2)) : [];
  };
}
function filter$5(predicate) {
  return filterWithIndex$4(function(_2, a2) {
    return predicate(a2);
  });
}
var filterWithIndex$4 = function(predicate) {
  return function(as2) {
    return fromArray(as2.filter(function(a2, i2) {
      return predicate(i2, a2);
    }));
  };
};
var uncons = unprepend;
var unsnoc = unappend;
function cons$1(head2, tail2) {
  return tail2 === void 0 ? prepend$1(head2) : pipe$1(tail2, prepend$1(head2));
}
var snoc$1 = function(init2, end) {
  return pipe$1(init2, append$1(end));
};
var prependToAll$1 = prependAll$1;
var fold$1 = concatAll$1;
var nonEmptyArray = {
  URI: URI$3,
  of: of$2,
  map: _map$4,
  mapWithIndex: _mapWithIndex$3,
  ap: _ap$2,
  chain: flatMap$2,
  extend: _extend$2,
  extract,
  reduce: _reduce$4,
  foldMap: _foldMap$4,
  reduceRight: _reduceRight$4,
  traverse: _traverse$4,
  sequence: sequence$4,
  reduceWithIndex: _reduceWithIndex$3,
  foldMapWithIndex: _foldMapWithIndex$3,
  reduceRightWithIndex: _reduceRightWithIndex$3,
  traverseWithIndex: _traverseWithIndex$3,
  alt: _alt$2
};
const NonEmptyArray = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Alt: Alt$2,
  Applicative: Applicative$2,
  Apply: Apply$2,
  Chain: Chain$2,
  Comonad,
  Do: Do$2,
  Foldable: Foldable$3,
  FoldableWithIndex: FoldableWithIndex$2,
  Functor: Functor$3,
  FunctorWithIndex: FunctorWithIndex$2,
  Monad: Monad$2,
  Pointed: Pointed$2,
  Traversable: Traversable$3,
  TraversableWithIndex: TraversableWithIndex$2,
  URI: URI$3,
  alt: alt$3,
  altW: altW$2,
  ap: ap$3,
  apFirst: apFirst$2,
  apS: apS$2,
  apSecond: apSecond$2,
  append: append$1,
  appendW: appendW$1,
  bind: bind$2,
  bindTo: bindTo$2,
  chain: chain$3,
  chainFirst: chainFirst$2,
  chainWithIndex: chainWithIndex$1,
  chop: chop$1,
  chunksOf: chunksOf$1,
  concat: concat$1,
  concatAll,
  concatW: concatW$1,
  cons: cons$1,
  copy: copy$1,
  duplicate: duplicate$2,
  extend: extend$3,
  extract,
  filter: filter$5,
  filterWithIndex: filterWithIndex$4,
  flap: flap$3,
  flatMap: flatMap$2,
  flatten: flatten$2,
  fold: fold$1,
  foldMap: foldMap$6,
  foldMapWithIndex: foldMapWithIndex$5,
  fromArray,
  fromReadonlyNonEmptyArray,
  getEq: getEq$5,
  getSemigroup: getSemigroup$1,
  getShow: getShow$5,
  getUnionSemigroup: getUnionSemigroup$2,
  group,
  groupBy,
  groupSort,
  head: head$2,
  init: init$1,
  insertAt: insertAt$2,
  intercalate: intercalate$2,
  intersperse: intersperse$1,
  isNonEmpty: isNonEmpty$2,
  isOutOfBound: isOutOfBound$2,
  last: last$2,
  let: let_$2,
  makeBy: makeBy$1,
  map: map$5,
  mapWithIndex: mapWithIndex$4,
  matchLeft: matchLeft$1,
  matchRight: matchRight$1,
  max,
  min,
  modifyAt: modifyAt$2,
  modifyHead,
  modifyLast,
  nonEmptyArray,
  of: of$2,
  prepend: prepend$1,
  prependAll: prependAll$1,
  prependToAll: prependToAll$1,
  prependW: prependW$1,
  range: range$1,
  reduce: reduce$6,
  reduceRight: reduceRight$6,
  reduceRightWithIndex: reduceRightWithIndex$5,
  reduceWithIndex: reduceWithIndex$5,
  replicate: replicate$1,
  reverse: reverse$1,
  rotate: rotate$1,
  sequence: sequence$4,
  snoc: snoc$1,
  sort: sort$1,
  sortBy: sortBy$1,
  splitAt: splitAt$1,
  tail: tail$1,
  traverse: traverse$4,
  traverseWithIndex: traverseWithIndex$3,
  unappend,
  uncons,
  union: union$3,
  uniq: uniq$1,
  unprepend,
  unsafeInsertAt: unsafeInsertAt$1,
  unsafeUpdateAt: unsafeUpdateAt$1,
  unsnoc,
  unzip: unzip$1,
  updateAt: updateAt$2,
  updateHead,
  updateLast,
  zip: zip$1,
  zipWith: zipWith$1
}, Symbol.toStringTag, { value: "Module" }));
var Eq$1 = {
  equals: function(first2, second) {
    return first2 === second;
  }
};
var Ord$1 = {
  equals: Eq$1.equals,
  compare: function(first2, second) {
    return first2 < second ? -1 : first2 > second ? 1 : 0;
  }
};
function guard$2(F2, P2) {
  return function(b2) {
    return b2 ? P2.of(void 0) : F2.zero();
  };
}
var __spreadArray = globalThis && globalThis.__spreadArray || function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i2 = 0, l2 = from.length, ar; i2 < l2; i2++) {
      if (ar || !(i2 in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i2);
        ar[i2] = from[i2];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var isNonEmpty$1 = isNonEmpty$3;
var matchW$2 = function(onEmpty, onNonEmpty) {
  return function(as2) {
    return isNonEmpty$1(as2) ? onNonEmpty(as2) : onEmpty();
  };
};
var match$2 = matchW$2;
var isOutOfBound$1 = isOutOfBound$3;
function lookup$3(i2, as2) {
  return as2 === void 0 ? function(as3) {
    return lookup$3(i2, as3);
  } : isOutOfBound$1(i2, as2) ? none$1 : some$4(as2[i2]);
}
var head$1 = function(as2) {
  return isNonEmpty$1(as2) ? some$4(head$3(as2)) : none$1;
};
var last$1 = function(as2) {
  return isNonEmpty$1(as2) ? some$4(last$3(as2)) : none$1;
};
var findIndex$1 = function(predicate) {
  return function(as2) {
    for (var i2 = 0; i2 < as2.length; i2++) {
      if (predicate(as2[i2])) {
        return some$4(i2);
      }
    }
    return none$1;
  };
};
function findFirst$1(predicate) {
  return function(as2) {
    for (var i2 = 0; i2 < as2.length; i2++) {
      if (predicate(as2[i2])) {
        return some$4(as2[i2]);
      }
    }
    return none$1;
  };
}
var findFirstMap$1 = function(f2) {
  return function(as2) {
    for (var i2 = 0; i2 < as2.length; i2++) {
      var out = f2(as2[i2]);
      if (isSome$1(out)) {
        return out;
      }
    }
    return none$1;
  };
};
function findLast$1(predicate) {
  return function(as2) {
    for (var i2 = as2.length - 1; i2 >= 0; i2--) {
      if (predicate(as2[i2])) {
        return some$4(as2[i2]);
      }
    }
    return none$1;
  };
}
var findLastMap$1 = function(f2) {
  return function(as2) {
    for (var i2 = as2.length - 1; i2 >= 0; i2--) {
      var out = f2(as2[i2]);
      if (isSome$1(out)) {
        return out;
      }
    }
    return none$1;
  };
};
var findLastIndex$1 = function(predicate) {
  return function(as2) {
    for (var i2 = as2.length - 1; i2 >= 0; i2--) {
      if (predicate(as2[i2])) {
        return some$4(i2);
      }
    }
    return none$1;
  };
};
function elem$4(E2) {
  return function(a2, as2) {
    if (as2 === void 0) {
      var elemE_1 = elem$4(E2);
      return function(as3) {
        return elemE_1(a2, as3);
      };
    }
    var predicate = function(element) {
      return E2.equals(element, a2);
    };
    var i2 = 0;
    for (; i2 < as2.length; i2++) {
      if (predicate(as2[i2])) {
        return true;
      }
    }
    return false;
  };
}
var _chainRecDepthFirst$1 = function(a2, f2) {
  return pipe$1(a2, chainRecDepthFirst$1(f2));
};
var _chainRecBreadthFirst$1 = function(a2, f2) {
  return pipe$1(a2, chainRecBreadthFirst$1(f2));
};
var foldMapWithIndex$4 = function(M2) {
  return function(f2) {
    return function(fa2) {
      return fa2.reduce(function(b2, a2, i2) {
        return M2.concat(b2, f2(i2, a2));
      }, M2.empty);
    };
  };
};
var reduce$5 = function(b2, f2) {
  return reduceWithIndex$4(b2, function(_2, b3, a2) {
    return f2(b3, a2);
  });
};
var foldMap$5 = function(M2) {
  var foldMapWithIndexM = foldMapWithIndex$4(M2);
  return function(f2) {
    return foldMapWithIndexM(function(_2, a2) {
      return f2(a2);
    });
  };
};
var reduceWithIndex$4 = function(b2, f2) {
  return function(fa2) {
    var len2 = fa2.length;
    var out = b2;
    for (var i2 = 0; i2 < len2; i2++) {
      out = f2(i2, out, fa2[i2]);
    }
    return out;
  };
};
var reduceRight$5 = function(b2, f2) {
  return reduceRightWithIndex$4(b2, function(_2, a2, b3) {
    return f2(a2, b3);
  });
};
var reduceRightWithIndex$4 = function(b2, f2) {
  return function(fa2) {
    return fa2.reduceRight(function(b3, a2, i2) {
      return f2(i2, a2, b3);
    }, b2);
  };
};
var getShow$4 = function(S2) {
  return {
    show: function(as2) {
      return "[".concat(as2.map(S2.show).join(", "), "]");
    }
  };
};
var getEq$4 = function(E2) {
  return fromEquals(function(xs, ys) {
    return xs.length === ys.length && xs.every(function(x2, i2) {
      return E2.equals(x2, ys[i2]);
    });
  });
};
var getOrd$2 = function(O2) {
  return fromCompare(function(a2, b2) {
    var aLen = a2.length;
    var bLen = b2.length;
    var len2 = Math.min(aLen, bLen);
    for (var i2 = 0; i2 < len2; i2++) {
      var ordering = O2.compare(a2[i2], b2[i2]);
      if (ordering !== 0) {
        return ordering;
      }
    }
    return Ord$1.compare(aLen, bLen);
  });
};
var chainRecDepthFirst$1 = function(f2) {
  return function(a2) {
    var todo = __spreadArray([], f2(a2), true);
    var out = [];
    while (todo.length > 0) {
      var e2 = todo.shift();
      if (isLeft$1(e2)) {
        todo.unshift.apply(todo, f2(e2.left));
      } else {
        out.push(e2.right);
      }
    }
    return out;
  };
};
var chainRecBreadthFirst$1 = function(f2) {
  return function(a2) {
    var initial = f2(a2);
    var todo = [];
    var out = [];
    function go(e3) {
      if (isLeft$1(e3)) {
        f2(e3.left).forEach(function(v2) {
          return todo.push(v2);
        });
      } else {
        out.push(e3.right);
      }
    }
    for (var _i = 0, initial_1 = initial; _i < initial_1.length; _i++) {
      var e2 = initial_1[_i];
      go(e2);
    }
    while (todo.length > 0) {
      go(todo.shift());
    }
    return out;
  };
};
function every$3(predicate) {
  return function(as2) {
    return as2.every(predicate);
  };
}
var intercalate$1 = function(M2) {
  var intercalateM = intercalate$3(M2);
  return function(middle) {
    return match$2(function() {
      return M2.empty;
    }, intercalateM(middle));
  };
};
var isEmpty$2 = function(as2) {
  return as2.length === 0;
};
var isNonEmpty = isNonEmpty$2;
var prepend = prepend$1;
var prependW = prependW$1;
var append = append$1;
var appendW = appendW$1;
var makeBy = function(n2, f2) {
  return n2 <= 0 ? [] : makeBy$1(f2)(n2);
};
var replicate = function(n2, a2) {
  return makeBy(n2, function() {
    return a2;
  });
};
function fromPredicate$1(predicate) {
  return function(a2) {
    return predicate(a2) ? [a2] : [];
  };
}
var fromOption = function(ma2) {
  return isNone$1(ma2) ? [] : [ma2.value];
};
var fromEither$1 = function(e2) {
  return isLeft$1(e2) ? [] : [e2.right];
};
var matchW$1 = function(onEmpty, onNonEmpty) {
  return function(as2) {
    return isNonEmpty(as2) ? onNonEmpty(as2) : onEmpty();
  };
};
var match$1 = matchW$1;
var matchLeftW = function(onEmpty, onNonEmpty) {
  return function(as2) {
    return isNonEmpty(as2) ? onNonEmpty(head$2(as2), tail$1(as2)) : onEmpty();
  };
};
var matchLeft = matchLeftW;
var foldLeft = matchLeft;
var matchRightW = function(onEmpty, onNonEmpty) {
  return function(as2) {
    return isNonEmpty(as2) ? onNonEmpty(init$1(as2), last$2(as2)) : onEmpty();
  };
};
var matchRight = matchRightW;
var foldRight = matchRight;
var chainWithIndex = function(f2) {
  return function(as2) {
    var out = [];
    for (var i2 = 0; i2 < as2.length; i2++) {
      var bs = f2(i2, as2[i2]);
      for (var j2 = 0; j2 < bs.length; j2++) {
        out.push(bs[j2]);
      }
    }
    return out;
  };
};
var scanLeft = function(b2, f2) {
  return function(as2) {
    var len2 = as2.length;
    var out = new Array(len2 + 1);
    out[0] = b2;
    for (var i2 = 0; i2 < len2; i2++) {
      out[i2 + 1] = f2(out[i2], as2[i2]);
    }
    return out;
  };
};
var scanRight = function(b2, f2) {
  return function(as2) {
    var len2 = as2.length;
    var out = new Array(len2 + 1);
    out[len2] = b2;
    for (var i2 = len2 - 1; i2 >= 0; i2--) {
      out[i2] = f2(as2[i2], out[i2 + 1]);
    }
    return out;
  };
};
var size$2 = function(as2) {
  return as2.length;
};
var isOutOfBound = isOutOfBound$2;
var lookup$2 = lookup$3;
var head = head$1;
var last = last$1;
var tail = function(as2) {
  return isNonEmpty(as2) ? some$4(tail$1(as2)) : none$1;
};
var init = function(as2) {
  return isNonEmpty(as2) ? some$4(init$1(as2)) : none$1;
};
var takeLeft = function(n2) {
  return function(as2) {
    return isOutOfBound(n2, as2) ? copy(as2) : as2.slice(0, n2);
  };
};
var takeRight = function(n2) {
  return function(as2) {
    return isOutOfBound(n2, as2) ? copy(as2) : n2 === 0 ? [] : as2.slice(-n2);
  };
};
function takeLeftWhile(predicate) {
  return function(as2) {
    var out = [];
    for (var _i = 0, as_1 = as2; _i < as_1.length; _i++) {
      var a2 = as_1[_i];
      if (!predicate(a2)) {
        break;
      }
      out.push(a2);
    }
    return out;
  };
}
var spanLeftIndex = function(as2, predicate) {
  var l2 = as2.length;
  var i2 = 0;
  for (; i2 < l2; i2++) {
    if (!predicate(as2[i2])) {
      break;
    }
  }
  return i2;
};
function spanLeft(predicate) {
  return function(as2) {
    var _a2 = splitAt(spanLeftIndex(as2, predicate))(as2), init2 = _a2[0], rest = _a2[1];
    return { init: init2, rest };
  };
}
var dropLeft = function(n2) {
  return function(as2) {
    return n2 <= 0 || isEmpty$2(as2) ? copy(as2) : n2 >= as2.length ? [] : as2.slice(n2, as2.length);
  };
};
var dropRight = function(n2) {
  return function(as2) {
    return n2 <= 0 || isEmpty$2(as2) ? copy(as2) : n2 >= as2.length ? [] : as2.slice(0, as2.length - n2);
  };
};
function dropLeftWhile(predicate) {
  return function(as2) {
    return as2.slice(spanLeftIndex(as2, predicate));
  };
}
var findIndex = findIndex$1;
function findFirst(predicate) {
  return findFirst$1(predicate);
}
var findFirstMap = findFirstMap$1;
function findLast(predicate) {
  return findLast$1(predicate);
}
var findLastMap = findLastMap$1;
var findLastIndex = findLastIndex$1;
var copy = function(as2) {
  return as2.slice();
};
var insertAt$1 = function(i2, a2) {
  return function(as2) {
    return i2 < 0 || i2 > as2.length ? none$1 : some$4(unsafeInsertAt(i2, a2, as2));
  };
};
var updateAt$1 = function(i2, a2) {
  return modifyAt$1(i2, function() {
    return a2;
  });
};
var deleteAt$1 = function(i2) {
  return function(as2) {
    return isOutOfBound(i2, as2) ? none$1 : some$4(unsafeDeleteAt(i2, as2));
  };
};
var modifyAt$1 = function(i2, f2) {
  return function(as2) {
    return isOutOfBound(i2, as2) ? none$1 : some$4(unsafeUpdateAt(i2, f2(as2[i2]), as2));
  };
};
var reverse = function(as2) {
  return isEmpty$2(as2) ? [] : as2.slice().reverse();
};
var rights = function(as2) {
  var r2 = [];
  for (var i2 = 0; i2 < as2.length; i2++) {
    var a2 = as2[i2];
    if (a2._tag === "Right") {
      r2.push(a2.right);
    }
  }
  return r2;
};
var lefts = function(as2) {
  var r2 = [];
  for (var i2 = 0; i2 < as2.length; i2++) {
    var a2 = as2[i2];
    if (a2._tag === "Left") {
      r2.push(a2.left);
    }
  }
  return r2;
};
var sort = function(O2) {
  return function(as2) {
    return as2.length <= 1 ? copy(as2) : as2.slice().sort(O2.compare);
  };
};
var zipWith = function(fa2, fb2, f2) {
  var fc2 = [];
  var len2 = Math.min(fa2.length, fb2.length);
  for (var i2 = 0; i2 < len2; i2++) {
    fc2[i2] = f2(fa2[i2], fb2[i2]);
  }
  return fc2;
};
function zip(as2, bs) {
  if (bs === void 0) {
    return function(bs2) {
      return zip(bs2, as2);
    };
  }
  return zipWith(as2, bs, function(a2, b2) {
    return [a2, b2];
  });
}
var unzip = function(as2) {
  var fa2 = [];
  var fb2 = [];
  for (var i2 = 0; i2 < as2.length; i2++) {
    fa2[i2] = as2[i2][0];
    fb2[i2] = as2[i2][1];
  }
  return [fa2, fb2];
};
var prependAll = function(middle) {
  var f2 = prependAll$1(middle);
  return function(as2) {
    return isNonEmpty(as2) ? f2(as2) : [];
  };
};
var intersperse = function(middle) {
  var f2 = intersperse$1(middle);
  return function(as2) {
    return isNonEmpty(as2) ? f2(as2) : copy(as2);
  };
};
var rotate = function(n2) {
  var f2 = rotate$1(n2);
  return function(as2) {
    return isNonEmpty(as2) ? f2(as2) : copy(as2);
  };
};
var elem$3 = elem$4;
var uniq = function(E2) {
  var f2 = uniq$1(E2);
  return function(as2) {
    return isNonEmpty(as2) ? f2(as2) : copy(as2);
  };
};
var sortBy = function(ords) {
  var f2 = sortBy$1(ords);
  return function(as2) {
    return isNonEmpty(as2) ? f2(as2) : copy(as2);
  };
};
var chop = function(f2) {
  var g2 = chop$1(f2);
  return function(as2) {
    return isNonEmpty(as2) ? g2(as2) : [];
  };
};
var splitAt = function(n2) {
  return function(as2) {
    return n2 >= 1 && isNonEmpty(as2) ? splitAt$1(n2)(as2) : isEmpty$2(as2) ? [copy(as2), []] : [[], copy(as2)];
  };
};
var chunksOf = function(n2) {
  var f2 = chunksOf$1(n2);
  return function(as2) {
    return isNonEmpty(as2) ? f2(as2) : [];
  };
};
var fromOptionK = function(f2) {
  return function() {
    var a2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a2[_i] = arguments[_i];
    }
    return fromOption(f2.apply(void 0, a2));
  };
};
function comprehension(input, f2, g2) {
  if (g2 === void 0) {
    g2 = function() {
      return true;
    };
  }
  var go = function(scope, input2) {
    return isNonEmpty(input2) ? flatMap$1(head$2(input2), function(a2) {
      return go(pipe$1(scope, append(a2)), tail$1(input2));
    }) : g2.apply(void 0, scope) ? [f2.apply(void 0, scope)] : [];
  };
  return go([], input);
}
var concatW = function(second) {
  return function(first2) {
    return isEmpty$2(first2) ? copy(second) : isEmpty$2(second) ? copy(first2) : first2.concat(second);
  };
};
var concat = concatW;
function union$2(E2) {
  var unionE = union$3(E2);
  return function(first2, second) {
    if (second === void 0) {
      var unionE_1 = union$2(E2);
      return function(second2) {
        return unionE_1(second2, first2);
      };
    }
    return isNonEmpty(first2) && isNonEmpty(second) ? unionE(second)(first2) : isNonEmpty(first2) ? copy(first2) : copy(second);
  };
}
function intersection$2(E2) {
  var elemE = elem$3(E2);
  return function(xs, ys) {
    if (ys === void 0) {
      var intersectionE_1 = intersection$2(E2);
      return function(ys2) {
        return intersectionE_1(ys2, xs);
      };
    }
    return xs.filter(function(a2) {
      return elemE(a2, ys);
    });
  };
}
function difference$2(E2) {
  var elemE = elem$3(E2);
  return function(xs, ys) {
    if (ys === void 0) {
      var differenceE_1 = difference$2(E2);
      return function(ys2) {
        return differenceE_1(ys2, xs);
      };
    }
    return xs.filter(function(a2) {
      return !elemE(a2, ys);
    });
  };
}
var _map$3 = function(fa2, f2) {
  return pipe$1(fa2, map$4(f2));
};
var _mapWithIndex$2 = function(fa2, f2) {
  return pipe$1(fa2, mapWithIndex$3(f2));
};
var _ap$1 = function(fab, fa2) {
  return pipe$1(fab, ap$2(fa2));
};
var _filter$3 = function(fa2, predicate) {
  return pipe$1(fa2, filter$4(predicate));
};
var _filterMap$3 = function(fa2, f2) {
  return pipe$1(fa2, filterMap$4(f2));
};
var _partition$3 = function(fa2, predicate) {
  return pipe$1(fa2, partition$4(predicate));
};
var _partitionMap$3 = function(fa2, f2) {
  return pipe$1(fa2, partitionMap$4(f2));
};
var _partitionWithIndex$2 = function(fa2, predicateWithIndex) {
  return pipe$1(fa2, partitionWithIndex$3(predicateWithIndex));
};
var _partitionMapWithIndex$2 = function(fa2, f2) {
  return pipe$1(fa2, partitionMapWithIndex$3(f2));
};
var _alt$1 = function(fa2, that) {
  return pipe$1(fa2, alt$2(that));
};
var _reduce$3 = function(fa2, b2, f2) {
  return pipe$1(fa2, reduce$4(b2, f2));
};
var _foldMap$3 = function(M2) {
  var foldMapM = foldMap$4(M2);
  return function(fa2, f2) {
    return pipe$1(fa2, foldMapM(f2));
  };
};
var _reduceRight$3 = function(fa2, b2, f2) {
  return pipe$1(fa2, reduceRight$4(b2, f2));
};
var _reduceWithIndex$2 = function(fa2, b2, f2) {
  return pipe$1(fa2, reduceWithIndex$3(b2, f2));
};
var _foldMapWithIndex$2 = function(M2) {
  var foldMapWithIndexM = foldMapWithIndex$3(M2);
  return function(fa2, f2) {
    return pipe$1(fa2, foldMapWithIndexM(f2));
  };
};
var _reduceRightWithIndex$2 = function(fa2, b2, f2) {
  return pipe$1(fa2, reduceRightWithIndex$3(b2, f2));
};
var _filterMapWithIndex$2 = function(fa2, f2) {
  return pipe$1(fa2, filterMapWithIndex$3(f2));
};
var _filterWithIndex$2 = function(fa2, predicateWithIndex) {
  return pipe$1(fa2, filterWithIndex$3(predicateWithIndex));
};
var _extend$1 = function(fa2, f2) {
  return pipe$1(fa2, extend$2(f2));
};
var _traverse$3 = function(F2) {
  var traverseF = traverse$3(F2);
  return function(ta2, f2) {
    return pipe$1(ta2, traverseF(f2));
  };
};
var _traverseWithIndex$2 = function(F2) {
  var traverseWithIndexF = traverseWithIndex$2(F2);
  return function(ta2, f2) {
    return pipe$1(ta2, traverseWithIndexF(f2));
  };
};
var _chainRecDepthFirst = _chainRecDepthFirst$1;
var _chainRecBreadthFirst = _chainRecBreadthFirst$1;
var of$1 = of$2;
var zero$1 = function() {
  return [];
};
var map$4 = function(f2) {
  return function(fa2) {
    return fa2.map(function(a2) {
      return f2(a2);
    });
  };
};
var ap$2 = function(fa2) {
  return flatMap$1(function(f2) {
    return pipe$1(fa2, map$4(f2));
  });
};
var flatMap$1 = /* @__PURE__ */ dual(2, function(ma2, f2) {
  return pipe$1(ma2, chainWithIndex(function(i2, a2) {
    return f2(a2, i2);
  }));
});
var flatten$1 = /* @__PURE__ */ flatMap$1(identity$1);
var mapWithIndex$3 = function(f2) {
  return function(fa2) {
    return fa2.map(function(a2, i2) {
      return f2(i2, a2);
    });
  };
};
var filterMapWithIndex$3 = function(f2) {
  return function(fa2) {
    var out = [];
    for (var i2 = 0; i2 < fa2.length; i2++) {
      var optionB = f2(i2, fa2[i2]);
      if (isSome$1(optionB)) {
        out.push(optionB.value);
      }
    }
    return out;
  };
};
var filterMap$4 = function(f2) {
  return filterMapWithIndex$3(function(_2, a2) {
    return f2(a2);
  });
};
var compact$3 = /* @__PURE__ */ filterMap$4(identity$1);
var separate$3 = function(fa2) {
  var left2 = [];
  var right2 = [];
  for (var _i = 0, fa_1 = fa2; _i < fa_1.length; _i++) {
    var e2 = fa_1[_i];
    if (e2._tag === "Left") {
      left2.push(e2.left);
    } else {
      right2.push(e2.right);
    }
  }
  return separated(left2, right2);
};
var filter$4 = function(predicate) {
  return function(as2) {
    return as2.filter(predicate);
  };
};
var partition$4 = function(predicate) {
  return partitionWithIndex$3(function(_2, a2) {
    return predicate(a2);
  });
};
var partitionWithIndex$3 = function(predicateWithIndex) {
  return function(as2) {
    var left2 = [];
    var right2 = [];
    for (var i2 = 0; i2 < as2.length; i2++) {
      var b2 = as2[i2];
      if (predicateWithIndex(i2, b2)) {
        right2.push(b2);
      } else {
        left2.push(b2);
      }
    }
    return separated(left2, right2);
  };
};
var partitionMap$4 = function(f2) {
  return partitionMapWithIndex$3(function(_2, a2) {
    return f2(a2);
  });
};
var partitionMapWithIndex$3 = function(f2) {
  return function(fa2) {
    var left2 = [];
    var right2 = [];
    for (var i2 = 0; i2 < fa2.length; i2++) {
      var e2 = f2(i2, fa2[i2]);
      if (e2._tag === "Left") {
        left2.push(e2.left);
      } else {
        right2.push(e2.right);
      }
    }
    return separated(left2, right2);
  };
};
var altW$1 = function(that) {
  return function(fa2) {
    return fa2.concat(that());
  };
};
var alt$2 = altW$1;
var filterWithIndex$3 = function(predicateWithIndex) {
  return function(as2) {
    return as2.filter(function(b2, i2) {
      return predicateWithIndex(i2, b2);
    });
  };
};
var extend$2 = function(f2) {
  return function(wa2) {
    return wa2.map(function(_2, i2) {
      return f2(wa2.slice(i2));
    });
  };
};
var duplicate$1 = /* @__PURE__ */ extend$2(identity$1);
var foldMap$4 = foldMap$5;
var foldMapWithIndex$3 = foldMapWithIndex$4;
var reduce$4 = reduce$5;
var reduceWithIndex$3 = reduceWithIndex$4;
var reduceRight$4 = reduceRight$5;
var reduceRightWithIndex$3 = reduceRightWithIndex$4;
var traverse$3 = function(F2) {
  var traverseWithIndexF = traverseWithIndex$2(F2);
  return function(f2) {
    return traverseWithIndexF(function(_2, a2) {
      return f2(a2);
    });
  };
};
var sequence$3 = function(F2) {
  return function(ta2) {
    return _reduce$3(ta2, F2.of(zero$1()), function(fas, fa2) {
      return F2.ap(F2.map(fas, function(as2) {
        return function(a2) {
          return pipe$1(as2, append(a2));
        };
      }), fa2);
    });
  };
};
var traverseWithIndex$2 = function(F2) {
  return function(f2) {
    return reduceWithIndex$3(F2.of(zero$1()), function(i2, fbs, a2) {
      return F2.ap(F2.map(fbs, function(bs) {
        return function(b2) {
          return pipe$1(bs, append(b2));
        };
      }), f2(i2, a2));
    });
  };
};
var wither$2 = function(F2) {
  var _witherF = _wither$2(F2);
  return function(f2) {
    return function(fa2) {
      return _witherF(fa2, f2);
    };
  };
};
var wilt$2 = function(F2) {
  var _wiltF = _wilt$2(F2);
  return function(f2) {
    return function(fa2) {
      return _wiltF(fa2, f2);
    };
  };
};
var unfold = function(b2, f2) {
  var out = [];
  var bb2 = b2;
  while (true) {
    var mt = f2(bb2);
    if (isSome$1(mt)) {
      var _a2 = mt.value, a2 = _a2[0], b_1 = _a2[1];
      out.push(a2);
      bb2 = b_1;
    } else {
      break;
    }
  }
  return out;
};
var URI$2 = "Array";
var getShow$3 = getShow$4;
var getSemigroup = function() {
  return {
    concat: function(first2, second) {
      return first2.concat(second);
    }
  };
};
var getMonoid$3 = function() {
  return {
    concat: getSemigroup().concat,
    empty: []
  };
};
var getEq$3 = getEq$4;
var getOrd$1 = getOrd$2;
var getUnionSemigroup$1 = function(E2) {
  var unionE = union$2(E2);
  return {
    concat: function(first2, second) {
      return unionE(second)(first2);
    }
  };
};
var getUnionMonoid$1 = function(E2) {
  return {
    concat: getUnionSemigroup$1(E2).concat,
    empty: []
  };
};
var getIntersectionSemigroup$1 = function(E2) {
  var intersectionE = intersection$2(E2);
  return {
    concat: function(first2, second) {
      return intersectionE(second)(first2);
    }
  };
};
var getDifferenceMagma$1 = function(E2) {
  var differenceE = difference$2(E2);
  return {
    concat: function(first2, second) {
      return differenceE(second)(first2);
    }
  };
};
var Functor$2 = {
  URI: URI$2,
  map: _map$3
};
var flap$2 = /* @__PURE__ */ flap$6(Functor$2);
var Pointed$1 = {
  URI: URI$2,
  of: of$1
};
var FunctorWithIndex$1 = {
  URI: URI$2,
  map: _map$3,
  mapWithIndex: _mapWithIndex$2
};
var Apply$1 = {
  URI: URI$2,
  map: _map$3,
  ap: _ap$1
};
var apFirst$1 = /* @__PURE__ */ apFirst$5(Apply$1);
var apSecond$1 = /* @__PURE__ */ apSecond$5(Apply$1);
var Applicative$1 = {
  URI: URI$2,
  map: _map$3,
  ap: _ap$1,
  of: of$1
};
var Chain$1 = {
  URI: URI$2,
  map: _map$3,
  ap: _ap$1,
  chain: flatMap$1
};
var chainFirst$1 = /* @__PURE__ */ chainFirst$5(Chain$1);
var Monad$1 = {
  URI: URI$2,
  map: _map$3,
  ap: _ap$1,
  of: of$1,
  chain: flatMap$1
};
var Unfoldable = {
  URI: URI$2,
  unfold
};
var Alt$1 = {
  URI: URI$2,
  map: _map$3,
  alt: _alt$1
};
var Zero$1 = {
  URI: URI$2,
  zero: zero$1
};
var guard$1 = /* @__PURE__ */ guard$2(Zero$1, Pointed$1);
var Alternative$1 = {
  URI: URI$2,
  map: _map$3,
  ap: _ap$1,
  of: of$1,
  alt: _alt$1,
  zero: zero$1
};
var Extend$1 = {
  URI: URI$2,
  map: _map$3,
  extend: _extend$1
};
var Compactable$2 = {
  URI: URI$2,
  compact: compact$3,
  separate: separate$3
};
var Filterable$2 = {
  URI: URI$2,
  map: _map$3,
  compact: compact$3,
  separate: separate$3,
  filter: _filter$3,
  filterMap: _filterMap$3,
  partition: _partition$3,
  partitionMap: _partitionMap$3
};
var FilterableWithIndex$1 = {
  URI: URI$2,
  map: _map$3,
  mapWithIndex: _mapWithIndex$2,
  compact: compact$3,
  separate: separate$3,
  filter: _filter$3,
  filterMap: _filterMap$3,
  partition: _partition$3,
  partitionMap: _partitionMap$3,
  partitionMapWithIndex: _partitionMapWithIndex$2,
  partitionWithIndex: _partitionWithIndex$2,
  filterMapWithIndex: _filterMapWithIndex$2,
  filterWithIndex: _filterWithIndex$2
};
var Foldable$2 = {
  URI: URI$2,
  reduce: _reduce$3,
  foldMap: _foldMap$3,
  reduceRight: _reduceRight$3
};
var FoldableWithIndex$1 = {
  URI: URI$2,
  reduce: _reduce$3,
  foldMap: _foldMap$3,
  reduceRight: _reduceRight$3,
  reduceWithIndex: _reduceWithIndex$2,
  foldMapWithIndex: _foldMapWithIndex$2,
  reduceRightWithIndex: _reduceRightWithIndex$2
};
var Traversable$2 = {
  URI: URI$2,
  map: _map$3,
  reduce: _reduce$3,
  foldMap: _foldMap$3,
  reduceRight: _reduceRight$3,
  traverse: _traverse$3,
  sequence: sequence$3
};
var TraversableWithIndex$1 = {
  URI: URI$2,
  map: _map$3,
  mapWithIndex: _mapWithIndex$2,
  reduce: _reduce$3,
  foldMap: _foldMap$3,
  reduceRight: _reduceRight$3,
  reduceWithIndex: _reduceWithIndex$2,
  foldMapWithIndex: _foldMapWithIndex$2,
  reduceRightWithIndex: _reduceRightWithIndex$2,
  traverse: _traverse$3,
  sequence: sequence$3,
  traverseWithIndex: _traverseWithIndex$2
};
var _wither$2 = /* @__PURE__ */ witherDefault$1(Traversable$2, Compactable$2);
var _wilt$2 = /* @__PURE__ */ wiltDefault$1(Traversable$2, Compactable$2);
var Witherable$2 = {
  URI: URI$2,
  map: _map$3,
  compact: compact$3,
  separate: separate$3,
  filter: _filter$3,
  filterMap: _filterMap$3,
  partition: _partition$3,
  partitionMap: _partitionMap$3,
  reduce: _reduce$3,
  foldMap: _foldMap$3,
  reduceRight: _reduceRight$3,
  traverse: _traverse$3,
  sequence: sequence$3,
  wither: _wither$2,
  wilt: _wilt$2
};
var chainRecDepthFirst = chainRecDepthFirst$1;
var ChainRecDepthFirst = {
  URI: URI$2,
  map: _map$3,
  ap: _ap$1,
  chain: flatMap$1,
  chainRec: _chainRecDepthFirst
};
var chainRecBreadthFirst = chainRecBreadthFirst$1;
var ChainRecBreadthFirst = {
  URI: URI$2,
  map: _map$3,
  ap: _ap$1,
  chain: flatMap$1,
  chainRec: _chainRecBreadthFirst
};
var filterE = /* @__PURE__ */ filterE$2(Witherable$2);
var FromEither$1 = {
  URI: URI$2,
  fromEither: fromEither$1
};
var fromEitherK$1 = /* @__PURE__ */ fromEitherK$3(FromEither$1);
var unsafeInsertAt = unsafeInsertAt$1;
var unsafeUpdateAt = function(i2, a2, as2) {
  return isNonEmpty(as2) ? unsafeUpdateAt$1(i2, a2, as2) : [];
};
var unsafeDeleteAt = function(i2, as2) {
  var xs = as2.slice();
  xs.splice(i2, 1);
  return xs;
};
var every$2 = every$3;
var some$3 = function(predicate) {
  return function(as2) {
    return as2.some(predicate);
  };
};
var exists$1 = some$3;
var intercalate = intercalate$1;
var Do$1 = /* @__PURE__ */ of$1(emptyRecord);
var bindTo$1 = /* @__PURE__ */ bindTo$5(Functor$2);
var let_$1 = /* @__PURE__ */ let_$5(Functor$2);
var bind$1 = /* @__PURE__ */ bind$5(Chain$1);
var apS$1 = /* @__PURE__ */ apS$5(Apply$1);
var chain$2 = flatMap$1;
var range = range$1;
var empty$2 = [];
var cons = cons$1;
var snoc = snoc$1;
var prependToAll = prependAll;
var array = {
  URI: URI$2,
  compact: compact$3,
  separate: separate$3,
  map: _map$3,
  ap: _ap$1,
  of: of$1,
  chain: flatMap$1,
  filter: _filter$3,
  filterMap: _filterMap$3,
  partition: _partition$3,
  partitionMap: _partitionMap$3,
  mapWithIndex: _mapWithIndex$2,
  partitionMapWithIndex: _partitionMapWithIndex$2,
  partitionWithIndex: _partitionWithIndex$2,
  filterMapWithIndex: _filterMapWithIndex$2,
  filterWithIndex: _filterWithIndex$2,
  alt: _alt$1,
  zero: zero$1,
  unfold,
  reduce: _reduce$3,
  foldMap: _foldMap$3,
  reduceRight: _reduceRight$3,
  traverse: _traverse$3,
  sequence: sequence$3,
  reduceWithIndex: _reduceWithIndex$2,
  foldMapWithIndex: _foldMapWithIndex$2,
  reduceRightWithIndex: _reduceRightWithIndex$2,
  traverseWithIndex: _traverseWithIndex$2,
  extend: _extend$1,
  wither: _wither$2,
  wilt: _wilt$2
};
const _Array = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Alt: Alt$1,
  Alternative: Alternative$1,
  Applicative: Applicative$1,
  Apply: Apply$1,
  Chain: Chain$1,
  ChainRecBreadthFirst,
  ChainRecDepthFirst,
  Compactable: Compactable$2,
  Do: Do$1,
  Extend: Extend$1,
  Filterable: Filterable$2,
  FilterableWithIndex: FilterableWithIndex$1,
  Foldable: Foldable$2,
  FoldableWithIndex: FoldableWithIndex$1,
  FromEither: FromEither$1,
  Functor: Functor$2,
  FunctorWithIndex: FunctorWithIndex$1,
  Monad: Monad$1,
  Pointed: Pointed$1,
  Traversable: Traversable$2,
  TraversableWithIndex: TraversableWithIndex$1,
  URI: URI$2,
  Unfoldable,
  Witherable: Witherable$2,
  Zero: Zero$1,
  alt: alt$2,
  altW: altW$1,
  ap: ap$2,
  apFirst: apFirst$1,
  apS: apS$1,
  apSecond: apSecond$1,
  append,
  appendW,
  array,
  bind: bind$1,
  bindTo: bindTo$1,
  chain: chain$2,
  chainFirst: chainFirst$1,
  chainRecBreadthFirst,
  chainRecDepthFirst,
  chainWithIndex,
  chop,
  chunksOf,
  compact: compact$3,
  comprehension,
  concat,
  concatW,
  cons,
  copy,
  deleteAt: deleteAt$1,
  difference: difference$2,
  dropLeft,
  dropLeftWhile,
  dropRight,
  duplicate: duplicate$1,
  elem: elem$3,
  empty: empty$2,
  every: every$2,
  exists: exists$1,
  extend: extend$2,
  filter: filter$4,
  filterE,
  filterMap: filterMap$4,
  filterMapWithIndex: filterMapWithIndex$3,
  filterWithIndex: filterWithIndex$3,
  findFirst,
  findFirstMap,
  findIndex,
  findLast,
  findLastIndex,
  findLastMap,
  flap: flap$2,
  flatMap: flatMap$1,
  flatten: flatten$1,
  foldLeft,
  foldMap: foldMap$4,
  foldMapWithIndex: foldMapWithIndex$3,
  foldRight,
  fromEither: fromEither$1,
  fromEitherK: fromEitherK$1,
  fromOption,
  fromOptionK,
  fromPredicate: fromPredicate$1,
  getDifferenceMagma: getDifferenceMagma$1,
  getEq: getEq$3,
  getIntersectionSemigroup: getIntersectionSemigroup$1,
  getMonoid: getMonoid$3,
  getOrd: getOrd$1,
  getSemigroup,
  getShow: getShow$3,
  getUnionMonoid: getUnionMonoid$1,
  getUnionSemigroup: getUnionSemigroup$1,
  guard: guard$1,
  head,
  init,
  insertAt: insertAt$1,
  intercalate,
  intersection: intersection$2,
  intersperse,
  isEmpty: isEmpty$2,
  isNonEmpty,
  isOutOfBound,
  last,
  lefts,
  let: let_$1,
  lookup: lookup$2,
  makeBy,
  map: map$4,
  mapWithIndex: mapWithIndex$3,
  match: match$1,
  matchLeft,
  matchLeftW,
  matchRight,
  matchRightW,
  matchW: matchW$1,
  modifyAt: modifyAt$1,
  of: of$1,
  partition: partition$4,
  partitionMap: partitionMap$4,
  partitionMapWithIndex: partitionMapWithIndex$3,
  partitionWithIndex: partitionWithIndex$3,
  prepend,
  prependAll,
  prependToAll,
  prependW,
  range,
  reduce: reduce$4,
  reduceRight: reduceRight$4,
  reduceRightWithIndex: reduceRightWithIndex$3,
  reduceWithIndex: reduceWithIndex$3,
  replicate,
  reverse,
  rights,
  rotate,
  scanLeft,
  scanRight,
  separate: separate$3,
  sequence: sequence$3,
  size: size$2,
  snoc,
  some: some$3,
  sort,
  sortBy,
  spanLeft,
  splitAt,
  tail,
  takeLeft,
  takeLeftWhile,
  takeRight,
  traverse: traverse$3,
  traverseWithIndex: traverseWithIndex$2,
  unfold,
  union: union$2,
  uniq,
  unsafeDeleteAt,
  unsafeInsertAt,
  unsafeUpdateAt,
  unzip,
  updateAt: updateAt$1,
  wilt: wilt$2,
  wither: wither$2,
  zero: zero$1,
  zip,
  zipWith
}, Symbol.toStringTag, { value: "Module" }));
const require$$0 = /* @__PURE__ */ getAugmentedNamespace(_Array);
const require$$1 = /* @__PURE__ */ getAugmentedNamespace(Either$1);
const require$$2 = /* @__PURE__ */ getAugmentedNamespace(NonEmptyArray);
var not = function(predicate) {
  return function(a2) {
    return !predicate(a2);
  };
};
var none = none$1;
var some$2 = some$4;
function fromPredicate(predicate) {
  return function(a2) {
    return predicate(a2) ? some$2(a2) : none;
  };
}
var getLeft = function(ma2) {
  return ma2._tag === "Right" ? none : some$2(ma2.left);
};
var getRight = function(ma2) {
  return ma2._tag === "Left" ? none : some$2(ma2.right);
};
var _map$2 = function(fa2, f2) {
  return pipe$1(fa2, map$3(f2));
};
var _ap = function(fab, fa2) {
  return pipe$1(fab, ap$1(fa2));
};
var _reduce$2 = function(fa2, b2, f2) {
  return pipe$1(fa2, reduce$3(b2, f2));
};
var _foldMap$2 = function(M2) {
  var foldMapM = foldMap$3(M2);
  return function(fa2, f2) {
    return pipe$1(fa2, foldMapM(f2));
  };
};
var _reduceRight$2 = function(fa2, b2, f2) {
  return pipe$1(fa2, reduceRight$3(b2, f2));
};
var _traverse$2 = function(F2) {
  var traverseF = traverse$2(F2);
  return function(ta2, f2) {
    return pipe$1(ta2, traverseF(f2));
  };
};
var _alt = function(fa2, that) {
  return pipe$1(fa2, alt$1(that));
};
var _filter$2 = function(fa2, predicate) {
  return pipe$1(fa2, filter$3(predicate));
};
var _filterMap$2 = function(fa2, f2) {
  return pipe$1(fa2, filterMap$3(f2));
};
var _extend = function(wa2, f2) {
  return pipe$1(wa2, extend$1(f2));
};
var _partition$2 = function(fa2, predicate) {
  return pipe$1(fa2, partition$3(predicate));
};
var _partitionMap$2 = function(fa2, f2) {
  return pipe$1(fa2, partitionMap$3(f2));
};
var URI$1 = "Option";
var getShow$2 = function(S2) {
  return {
    show: function(ma2) {
      return isNone(ma2) ? "none" : "some(".concat(S2.show(ma2.value), ")");
    }
  };
};
var getEq$2 = function(E2) {
  return {
    equals: function(x2, y2) {
      return x2 === y2 || (isNone(x2) ? isNone(y2) : isNone(y2) ? false : E2.equals(x2.value, y2.value));
    }
  };
};
var getOrd = function(O2) {
  return {
    equals: getEq$2(O2).equals,
    compare: function(x2, y2) {
      return x2 === y2 ? 0 : isSome(x2) ? isSome(y2) ? O2.compare(x2.value, y2.value) : 1 : -1;
    }
  };
};
var getMonoid$2 = function(S2) {
  return {
    concat: function(x2, y2) {
      return isNone(x2) ? y2 : isNone(y2) ? x2 : some$2(S2.concat(x2.value, y2.value));
    },
    empty: none
  };
};
var map$3 = function(f2) {
  return function(fa2) {
    return isNone(fa2) ? none : some$2(f2(fa2.value));
  };
};
var Functor$1 = {
  URI: URI$1,
  map: _map$2
};
var as = dual(2, as$3(Functor$1));
var asUnit = asUnit$3(Functor$1);
var of = some$2;
var Pointed = {
  URI: URI$1,
  of
};
var ap$1 = function(fa2) {
  return function(fab) {
    return isNone(fab) ? none : isNone(fa2) ? none : some$2(fab.value(fa2.value));
  };
};
var Apply = {
  URI: URI$1,
  map: _map$2,
  ap: _ap
};
var Applicative = {
  URI: URI$1,
  map: _map$2,
  ap: _ap,
  of
};
var flatMap = /* @__PURE__ */ dual(2, function(ma2, f2) {
  return isNone(ma2) ? none : f2(ma2.value);
});
var Chain = {
  URI: URI$1,
  map: _map$2,
  ap: _ap,
  chain: flatMap
};
var Monad = {
  URI: URI$1,
  map: _map$2,
  ap: _ap,
  of,
  chain: flatMap
};
var reduce$3 = function(b2, f2) {
  return function(fa2) {
    return isNone(fa2) ? b2 : f2(b2, fa2.value);
  };
};
var foldMap$3 = function(M2) {
  return function(f2) {
    return function(fa2) {
      return isNone(fa2) ? M2.empty : f2(fa2.value);
    };
  };
};
var reduceRight$3 = function(b2, f2) {
  return function(fa2) {
    return isNone(fa2) ? b2 : f2(fa2.value, b2);
  };
};
var Foldable$1 = {
  URI: URI$1,
  reduce: _reduce$2,
  foldMap: _foldMap$2,
  reduceRight: _reduceRight$2
};
var orElse = dual(2, function(self2, that) {
  return isNone(self2) ? that() : self2;
});
var altW = orElse;
var alt$1 = orElse;
var Alt = {
  URI: URI$1,
  map: _map$2,
  alt: _alt
};
var zero = function() {
  return none;
};
var Zero = {
  URI: URI$1,
  zero
};
var guard = /* @__PURE__ */ guard$2(Zero, Pointed);
var Alternative = {
  URI: URI$1,
  map: _map$2,
  ap: _ap,
  of,
  alt: _alt,
  zero
};
var extend$1 = function(f2) {
  return function(wa2) {
    return isNone(wa2) ? none : some$2(f2(wa2));
  };
};
var Extend = {
  URI: URI$1,
  map: _map$2,
  extend: _extend
};
var compact$2 = /* @__PURE__ */ flatMap(identity$1);
var defaultSeparated = /* @__PURE__ */ separated(none, none);
var separate$2 = function(ma2) {
  return isNone(ma2) ? defaultSeparated : separated(getLeft(ma2.value), getRight(ma2.value));
};
var Compactable$1 = {
  URI: URI$1,
  compact: compact$2,
  separate: separate$2
};
var filter$3 = function(predicate) {
  return function(fa2) {
    return isNone(fa2) ? none : predicate(fa2.value) ? fa2 : none;
  };
};
var filterMap$3 = function(f2) {
  return function(fa2) {
    return isNone(fa2) ? none : f2(fa2.value);
  };
};
var partition$3 = function(predicate) {
  return function(fa2) {
    return separated(_filter$2(fa2, not(predicate)), _filter$2(fa2, predicate));
  };
};
var partitionMap$3 = function(f2) {
  return flow(map$3(f2), separate$2);
};
var Filterable$1 = {
  URI: URI$1,
  map: _map$2,
  compact: compact$2,
  separate: separate$2,
  filter: _filter$2,
  filterMap: _filterMap$2,
  partition: _partition$2,
  partitionMap: _partitionMap$2
};
var traverse$2 = function(F2) {
  return function(f2) {
    return function(ta2) {
      return isNone(ta2) ? F2.of(none) : F2.map(f2(ta2.value), some$2);
    };
  };
};
var sequence$2 = function(F2) {
  return function(ta2) {
    return isNone(ta2) ? F2.of(none) : F2.map(ta2.value, some$2);
  };
};
var Traversable$1 = {
  URI: URI$1,
  map: _map$2,
  reduce: _reduce$2,
  foldMap: _foldMap$2,
  reduceRight: _reduceRight$2,
  traverse: _traverse$2,
  sequence: sequence$2
};
var _wither$1 = /* @__PURE__ */ witherDefault$1(Traversable$1, Compactable$1);
var _wilt$1 = /* @__PURE__ */ wiltDefault$1(Traversable$1, Compactable$1);
var wither$1 = function(F2) {
  var _witherF = _wither$1(F2);
  return function(f2) {
    return function(fa2) {
      return _witherF(fa2, f2);
    };
  };
};
var wilt$1 = function(F2) {
  var _wiltF = _wilt$1(F2);
  return function(f2) {
    return function(fa2) {
      return _wiltF(fa2, f2);
    };
  };
};
var Witherable$1 = {
  URI: URI$1,
  map: _map$2,
  reduce: _reduce$2,
  foldMap: _foldMap$2,
  reduceRight: _reduceRight$2,
  traverse: _traverse$2,
  sequence: sequence$2,
  compact: compact$2,
  separate: separate$2,
  filter: _filter$2,
  filterMap: _filterMap$2,
  partition: _partition$2,
  partitionMap: _partitionMap$2,
  wither: _wither$1,
  wilt: _wilt$1
};
var throwError = function() {
  return none;
};
var MonadThrow = {
  URI: URI$1,
  map: _map$2,
  ap: _ap,
  of,
  chain: flatMap,
  throwError
};
var fromEither = getRight;
var FromEither = {
  URI: URI$1,
  fromEither
};
var isSome = isSome$1;
var isNone = function(fa2) {
  return fa2._tag === "None";
};
var matchW = function(onNone, onSome) {
  return function(ma2) {
    return isNone(ma2) ? onNone() : onSome(ma2.value);
  };
};
var foldW = matchW;
var match = matchW;
var fold = match;
var getOrElseW = function(onNone) {
  return function(ma2) {
    return isNone(ma2) ? onNone() : ma2.value;
  };
};
var getOrElse = getOrElseW;
var flap$1 = /* @__PURE__ */ flap$6(Functor$1);
var apFirst = /* @__PURE__ */ apFirst$5(Apply);
var apSecond = /* @__PURE__ */ apSecond$5(Apply);
var flatten = compact$2;
var tap = /* @__PURE__ */ dual(2, tap$3(Chain));
var tapEither = /* @__PURE__ */ dual(2, tapEither$2(FromEither, Chain));
var duplicate = /* @__PURE__ */ extend$1(identity$1);
var fromEitherK = /* @__PURE__ */ fromEitherK$3(FromEither);
var chainEitherK = /* @__PURE__ */ chainEitherK$2(FromEither, Chain);
var chainFirstEitherK = tapEither;
var fromNullable = function(a2) {
  return a2 == null ? none : some$2(a2);
};
var tryCatch = function(f2) {
  try {
    return some$2(f2());
  } catch (e2) {
    return none;
  }
};
var tryCatchK = function(f2) {
  return function() {
    var a2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a2[_i] = arguments[_i];
    }
    return tryCatch(function() {
      return f2.apply(void 0, a2);
    });
  };
};
var fromNullableK = function(f2) {
  return flow(f2, fromNullable);
};
var chainNullableK = function(f2) {
  return function(ma2) {
    return isNone(ma2) ? none : fromNullable(f2(ma2.value));
  };
};
var toNullable = /* @__PURE__ */ match(constNull, identity$1);
var toUndefined = /* @__PURE__ */ match(constUndefined, identity$1);
function elem$2(E2) {
  return function(a2, ma2) {
    if (ma2 === void 0) {
      var elemE_1 = elem$2(E2);
      return function(ma3) {
        return elemE_1(a2, ma3);
      };
    }
    return isNone(ma2) ? false : E2.equals(a2, ma2.value);
  };
}
var exists = function(predicate) {
  return function(ma2) {
    return isNone(ma2) ? false : predicate(ma2.value);
  };
};
var Do = /* @__PURE__ */ of(emptyRecord);
var bindTo = /* @__PURE__ */ bindTo$5(Functor$1);
var let_ = /* @__PURE__ */ let_$5(Functor$1);
var bind = /* @__PURE__ */ bind$5(Chain);
var apS = /* @__PURE__ */ apS$5(Apply);
var ApT = /* @__PURE__ */ of(emptyReadonlyArray);
var traverseReadonlyNonEmptyArrayWithIndex = function(f2) {
  return function(as2) {
    var o2 = f2(0, head$4(as2));
    if (isNone(o2)) {
      return none;
    }
    var out = [o2.value];
    for (var i2 = 1; i2 < as2.length; i2++) {
      var o_1 = f2(i2, as2[i2]);
      if (isNone(o_1)) {
        return none;
      }
      out.push(o_1.value);
    }
    return some$2(out);
  };
};
var traverseReadonlyArrayWithIndex = function(f2) {
  var g2 = traverseReadonlyNonEmptyArrayWithIndex(f2);
  return function(as2) {
    return isNonEmpty$5(as2) ? g2(as2) : ApT;
  };
};
var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;
var traverseArray = function(f2) {
  return traverseReadonlyArrayWithIndex(function(_2, a2) {
    return f2(a2);
  });
};
var sequenceArray = /* @__PURE__ */ traverseArray(identity$1);
var chain$1 = flatMap;
var chainFirst = tap;
function getRefinement(getOption) {
  return function(a2) {
    return isSome(getOption(a2));
  };
}
var mapNullable = chainNullableK;
var option = {
  URI: URI$1,
  map: _map$2,
  of,
  ap: _ap,
  chain: flatMap,
  reduce: _reduce$2,
  foldMap: _foldMap$2,
  reduceRight: _reduceRight$2,
  traverse: _traverse$2,
  sequence: sequence$2,
  zero,
  alt: _alt,
  extend: _extend,
  compact: compact$2,
  separate: separate$2,
  filter: _filter$2,
  filterMap: _filterMap$2,
  partition: _partition$2,
  partitionMap: _partitionMap$2,
  wither: _wither$1,
  wilt: _wilt$1,
  throwError
};
var getApplySemigroup = /* @__PURE__ */ getApplySemigroup$3(Apply);
var getApplyMonoid = /* @__PURE__ */ getApplicativeMonoid$1(Applicative);
var getFirstMonoid = function() {
  return getMonoid$2(first());
};
var getLastMonoid = function() {
  return getMonoid$2(last$4());
};
const Option = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Alt,
  Alternative,
  ApT,
  Applicative,
  Apply,
  Chain,
  Compactable: Compactable$1,
  Do,
  Extend,
  Filterable: Filterable$1,
  Foldable: Foldable$1,
  FromEither,
  Functor: Functor$1,
  Monad,
  MonadThrow,
  Pointed,
  Traversable: Traversable$1,
  URI: URI$1,
  Witherable: Witherable$1,
  Zero,
  alt: alt$1,
  altW,
  ap: ap$1,
  apFirst,
  apS,
  apSecond,
  as,
  asUnit,
  bind,
  bindTo,
  chain: chain$1,
  chainEitherK,
  chainFirst,
  chainFirstEitherK,
  chainNullableK,
  compact: compact$2,
  duplicate,
  elem: elem$2,
  exists,
  extend: extend$1,
  filter: filter$3,
  filterMap: filterMap$3,
  flap: flap$1,
  flatMap,
  flatten,
  fold,
  foldMap: foldMap$3,
  foldW,
  fromEither,
  fromEitherK,
  fromNullable,
  fromNullableK,
  fromPredicate,
  getApplyMonoid,
  getApplySemigroup,
  getEq: getEq$2,
  getFirstMonoid,
  getLastMonoid,
  getLeft,
  getMonoid: getMonoid$2,
  getOrElse,
  getOrElseW,
  getOrd,
  getRefinement,
  getRight,
  getShow: getShow$2,
  guard,
  isNone,
  isSome,
  let: let_,
  map: map$3,
  mapNullable,
  match,
  matchW,
  none,
  of,
  option,
  orElse,
  partition: partition$3,
  partitionMap: partitionMap$3,
  reduce: reduce$3,
  reduceRight: reduceRight$3,
  separate: separate$2,
  sequence: sequence$2,
  sequenceArray,
  some: some$2,
  tap,
  tapEither,
  throwError,
  toNullable,
  toUndefined,
  traverse: traverse$2,
  traverseArray,
  traverseArrayWithIndex,
  traverseReadonlyArrayWithIndex,
  traverseReadonlyNonEmptyArrayWithIndex,
  tryCatch,
  tryCatchK,
  wilt: wilt$1,
  wither: wither$1,
  zero
}, Symbol.toStringTag, { value: "Module" }));
const require$$3 = /* @__PURE__ */ getAugmentedNamespace(Option);
var Eq = {
  equals: function(first2, second) {
    return first2 === second;
  }
};
var Ord = {
  equals: Eq.equals,
  compare: function(first2, second) {
    return first2 < second ? -1 : first2 > second ? 1 : 0;
  }
};
var size$1 = function(r2) {
  return Object.keys(r2).length;
};
var isEmpty$1 = function(r2) {
  for (var k2 in r2) {
    if (has$2.call(r2, k2)) {
      return false;
    }
  }
  return true;
};
var keys_$1 = function(O2) {
  return function(r2) {
    return Object.keys(r2).sort(O2.compare);
  };
};
function collect$1(O2) {
  if (typeof O2 === "function") {
    return collect$1(Ord)(O2);
  }
  var keysO = keys_$1(O2);
  return function(f2) {
    return function(r2) {
      var out = [];
      for (var _i = 0, _a2 = keysO(r2); _i < _a2.length; _i++) {
        var key2 = _a2[_i];
        out.push(f2(key2, r2[key2]));
      }
      return out;
    };
  };
}
var upsertAt$1 = function(k2, a2) {
  return function(r2) {
    if (has$2.call(r2, k2) && r2[k2] === a2) {
      return r2;
    }
    var out = Object.assign({}, r2);
    out[k2] = a2;
    return out;
  };
};
var has$1 = function(k2, r2) {
  return has$2.call(r2, k2);
};
function isSubrecord$1(E2) {
  return function(me2, that) {
    if (that === void 0) {
      var isSubrecordE_1 = isSubrecord$1(E2);
      return function(that2) {
        return isSubrecordE_1(that2, me2);
      };
    }
    for (var k2 in me2) {
      if (!has$2.call(that, k2) || !E2.equals(me2[k2], that[k2])) {
        return false;
      }
    }
    return true;
  };
}
function lookup$1(k2, r2) {
  if (r2 === void 0) {
    return function(r3) {
      return lookup$1(k2, r3);
    };
  }
  return has$2.call(r2, k2) ? some$4(r2[k2]) : none$1;
}
var empty$1 = {};
function mapWithIndex$2(f2) {
  return function(r2) {
    var out = {};
    for (var k2 in r2) {
      if (has$2.call(r2, k2)) {
        out[k2] = f2(k2, r2[k2]);
      }
    }
    return out;
  };
}
function map$2(f2) {
  return mapWithIndex$2(function(_2, a2) {
    return f2(a2);
  });
}
function reduceWithIndex$2() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  if (args.length === 2) {
    return reduceWithIndex$2(Ord).apply(void 0, args);
  }
  var keysO = keys_$1(args[0]);
  return function(b2, f2) {
    return function(fa2) {
      var out = b2;
      var ks = keysO(fa2);
      var len2 = ks.length;
      for (var i2 = 0; i2 < len2; i2++) {
        var k2 = ks[i2];
        out = f2(k2, out, fa2[k2]);
      }
      return out;
    };
  };
}
function foldMapWithIndex$2(O2) {
  if ("compare" in O2) {
    var keysO_1 = keys_$1(O2);
    return function(M2) {
      return function(f2) {
        return function(fa2) {
          var out = M2.empty;
          var ks = keysO_1(fa2);
          var len2 = ks.length;
          for (var i2 = 0; i2 < len2; i2++) {
            var k2 = ks[i2];
            out = M2.concat(out, f2(k2, fa2[k2]));
          }
          return out;
        };
      };
    };
  }
  return foldMapWithIndex$2(Ord)(O2);
}
function reduceRightWithIndex$2() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  if (args.length === 2) {
    return reduceRightWithIndex$2(Ord).apply(void 0, args);
  }
  var keysO = keys_$1(args[0]);
  return function(b2, f2) {
    return function(fa2) {
      var out = b2;
      var ks = keysO(fa2);
      var len2 = ks.length;
      for (var i2 = len2 - 1; i2 >= 0; i2--) {
        var k2 = ks[i2];
        out = f2(k2, fa2[k2], out);
      }
      return out;
    };
  };
}
var singleton$1 = function(k2, a2) {
  var _a2;
  return _a2 = {}, _a2[k2] = a2, _a2;
};
function traverseWithIndex$1(F2) {
  var traverseWithIndexOF = _traverseWithIndex$1(Ord)(F2);
  return function(f2) {
    return function(ta2) {
      return traverseWithIndexOF(ta2, f2);
    };
  };
}
function traverse$1(F2) {
  var traverseOF = _traverse$1(Ord)(F2);
  return function(f2) {
    return function(ta2) {
      return traverseOF(ta2, f2);
    };
  };
}
function sequence$1(F2) {
  return _sequence$1(Ord)(F2);
}
function partitionMapWithIndex$2(f2) {
  return function(r2) {
    var left2 = {};
    var right2 = {};
    for (var k2 in r2) {
      if (has$2.call(r2, k2)) {
        var e2 = f2(k2, r2[k2]);
        switch (e2._tag) {
          case "Left":
            left2[k2] = e2.left;
            break;
          case "Right":
            right2[k2] = e2.right;
            break;
        }
      }
    }
    return separated(left2, right2);
  };
}
function partitionWithIndex$2(predicateWithIndex) {
  return function(r2) {
    var left2 = {};
    var right2 = {};
    for (var k2 in r2) {
      if (has$2.call(r2, k2)) {
        var a2 = r2[k2];
        if (predicateWithIndex(k2, a2)) {
          right2[k2] = a2;
        } else {
          left2[k2] = a2;
        }
      }
    }
    return separated(left2, right2);
  };
}
function filterMapWithIndex$2(f2) {
  return function(r2) {
    var out = {};
    for (var k2 in r2) {
      if (has$2.call(r2, k2)) {
        var ob2 = f2(k2, r2[k2]);
        if (isSome$1(ob2)) {
          out[k2] = ob2.value;
        }
      }
    }
    return out;
  };
}
function filterWithIndex$2(predicateWithIndex) {
  return function(fa2) {
    var out = {};
    var changed = false;
    for (var key2 in fa2) {
      if (has$2.call(fa2, key2)) {
        var a2 = fa2[key2];
        if (predicateWithIndex(key2, a2)) {
          out[key2] = a2;
        } else {
          changed = true;
        }
      }
    }
    return changed ? out : fa2;
  };
}
function fromFoldable$1(M2, F2) {
  var fromFoldableMapM = fromFoldableMap$1(M2, F2);
  return function(fka) {
    return fromFoldableMapM(fka, identity$1);
  };
}
function fromFoldableMap$1(M2, F2) {
  return function(ta2, f2) {
    return F2.reduce(ta2, {}, function(r2, a2) {
      var _a2 = f2(a2), k2 = _a2[0], b2 = _a2[1];
      r2[k2] = has$2.call(r2, k2) ? M2.concat(r2[k2], b2) : b2;
      return r2;
    });
  };
}
function every$1(predicate) {
  return function(r2) {
    for (var k2 in r2) {
      if (!predicate(r2[k2])) {
        return false;
      }
    }
    return true;
  };
}
function some$1(predicate) {
  return function(r2) {
    for (var k2 in r2) {
      if (predicate(r2[k2])) {
        return true;
      }
    }
    return false;
  };
}
function elem$1(E2) {
  return function(a2, fa2) {
    if (fa2 === void 0) {
      var elemE_1 = elem$1(E2);
      return function(fa3) {
        return elemE_1(a2, fa3);
      };
    }
    for (var k2 in fa2) {
      if (E2.equals(fa2[k2], a2)) {
        return true;
      }
    }
    return false;
  };
}
var union$1 = function(M2) {
  return function(second) {
    return function(first2) {
      if (isEmpty$1(first2)) {
        return second;
      }
      if (isEmpty$1(second)) {
        return first2;
      }
      var out = {};
      for (var k2 in first2) {
        if (has$1(k2, second)) {
          out[k2] = M2.concat(first2[k2], second[k2]);
        } else {
          out[k2] = first2[k2];
        }
      }
      for (var k2 in second) {
        if (!has$1(k2, out)) {
          out[k2] = second[k2];
        }
      }
      return out;
    };
  };
};
var intersection$1 = function(M2) {
  return function(second) {
    return function(first2) {
      if (isEmpty$1(first2) || isEmpty$1(second)) {
        return empty$1;
      }
      var out = {};
      for (var k2 in first2) {
        if (has$1(k2, second)) {
          out[k2] = M2.concat(first2[k2], second[k2]);
        }
      }
      return out;
    };
  };
};
var difference$1 = function(second) {
  return function(first2) {
    if (isEmpty$1(first2)) {
      return second;
    }
    if (isEmpty$1(second)) {
      return first2;
    }
    var out = {};
    for (var k2 in first2) {
      if (!has$1(k2, second)) {
        out[k2] = first2[k2];
      }
    }
    for (var k2 in second) {
      if (!has$1(k2, first2)) {
        out[k2] = second[k2];
      }
    }
    return out;
  };
};
var _map$1 = function(fa2, f2) {
  return pipe$1(fa2, map$2(f2));
};
var _mapWithIndex$1 = function(fa2, f2) {
  return pipe$1(fa2, mapWithIndex$2(f2));
};
var _reduce$1 = function(O2) {
  var reduceO = reduce$2(O2);
  return function(fa2, b2, f2) {
    return pipe$1(fa2, reduceO(b2, f2));
  };
};
var _foldMap$1 = function(O2) {
  return function(M2) {
    var foldMapM = foldMap$2(O2)(M2);
    return function(fa2, f2) {
      return pipe$1(fa2, foldMapM(f2));
    };
  };
};
var _reduceRight$1 = function(O2) {
  var reduceRightO = reduceRight$2(O2);
  return function(fa2, b2, f2) {
    return pipe$1(fa2, reduceRightO(b2, f2));
  };
};
var _filter$1 = function(fa2, predicate) {
  return pipe$1(fa2, filter$2(predicate));
};
var _filterMap$1 = function(fa2, f2) {
  return pipe$1(fa2, filterMap$2(f2));
};
var _partition$1 = function(fa2, predicate) {
  return pipe$1(fa2, partition$2(predicate));
};
var _partitionMap$1 = function(fa2, f2) {
  return pipe$1(fa2, partitionMap$2(f2));
};
var _reduceWithIndex$1 = function(O2) {
  var reduceWithIndexO = reduceWithIndex$2(O2);
  return function(fa2, b2, f2) {
    return pipe$1(fa2, reduceWithIndexO(b2, f2));
  };
};
var _foldMapWithIndex$1 = function(O2) {
  var foldMapWithIndexO = foldMapWithIndex$2(O2);
  return function(M2) {
    var foldMapWithIndexM = foldMapWithIndexO(M2);
    return function(fa2, f2) {
      return pipe$1(fa2, foldMapWithIndexM(f2));
    };
  };
};
var _reduceRightWithIndex$1 = function(O2) {
  var reduceRightWithIndexO = reduceRightWithIndex$2(O2);
  return function(fa2, b2, f2) {
    return pipe$1(fa2, reduceRightWithIndexO(b2, f2));
  };
};
var _partitionMapWithIndex$1 = function(fa2, f2) {
  return pipe$1(fa2, partitionMapWithIndex$2(f2));
};
var _partitionWithIndex$1 = function(fa2, predicateWithIndex) {
  return pipe$1(fa2, partitionWithIndex$2(predicateWithIndex));
};
var _filterMapWithIndex$1 = function(fa2, f2) {
  return pipe$1(fa2, filterMapWithIndex$2(f2));
};
var _filterWithIndex$1 = function(fa2, predicateWithIndex) {
  return pipe$1(fa2, filterWithIndex$2(predicateWithIndex));
};
var _traverse$1 = function(O2) {
  var traverseWithIndexO = _traverseWithIndex$1(O2);
  return function(F2) {
    var traverseWithIndexOF = traverseWithIndexO(F2);
    return function(ta2, f2) {
      return traverseWithIndexOF(ta2, flow(SK, f2));
    };
  };
};
var _sequence$1 = function(O2) {
  var traverseO = _traverse$1(O2);
  return function(F2) {
    var traverseOF = traverseO(F2);
    return function(ta2) {
      return traverseOF(ta2, identity$1);
    };
  };
};
var _traverseWithIndex$1 = function(O2) {
  return function(F2) {
    var keysO = keys_$1(O2);
    return function(ta2, f2) {
      var ks = keysO(ta2);
      if (ks.length === 0) {
        return F2.of(empty$1);
      }
      var fr = F2.of({});
      var _loop_1 = function(key3) {
        fr = F2.ap(F2.map(fr, function(r2) {
          return function(b2) {
            var _a2;
            return Object.assign({}, r2, (_a2 = {}, _a2[key3] = b2, _a2));
          };
        }), f2(key3, ta2[key3]));
      };
      for (var _i = 0, ks_1 = ks; _i < ks_1.length; _i++) {
        var key2 = ks_1[_i];
        _loop_1(key2);
      }
      return fr;
    };
  };
};
var filter$2 = function(predicate) {
  return filterWithIndex$2(function(_2, a2) {
    return predicate(a2);
  });
};
var filterMap$2 = function(f2) {
  return filterMapWithIndex$2(function(_2, a2) {
    return f2(a2);
  });
};
var partition$2 = function(predicate) {
  return partitionWithIndex$2(function(_2, a2) {
    return predicate(a2);
  });
};
var partitionMap$2 = function(f2) {
  return partitionMapWithIndex$2(function(_2, a2) {
    return f2(a2);
  });
};
function reduce$2() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  if (args.length === 1) {
    var reduceWithIndexO_1 = reduceWithIndex$2(args[0]);
    return function(b2, f2) {
      return reduceWithIndexO_1(b2, function(_2, b3, a2) {
        return f2(b3, a2);
      });
    };
  }
  return reduce$2(Ord).apply(void 0, args);
}
function foldMap$2(O2) {
  if ("compare" in O2) {
    var foldMapWithIndexO_1 = foldMapWithIndex$2(O2);
    return function(M2) {
      var foldMapWithIndexM = foldMapWithIndexO_1(M2);
      return function(f2) {
        return foldMapWithIndexM(function(_2, a2) {
          return f2(a2);
        });
      };
    };
  }
  return foldMap$2(Ord)(O2);
}
function reduceRight$2() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  if (args.length === 1) {
    var reduceRightWithIndexO_1 = reduceRightWithIndex$2(args[0]);
    return function(b2, f2) {
      return reduceRightWithIndexO_1(b2, function(_2, b3, a2) {
        return f2(b3, a2);
      });
    };
  }
  return reduceRight$2(Ord).apply(void 0, args);
}
var compact$1 = function(r2) {
  var out = {};
  for (var k2 in r2) {
    if (has$2.call(r2, k2)) {
      var oa2 = r2[k2];
      if (isSome$1(oa2)) {
        out[k2] = oa2.value;
      }
    }
  }
  return out;
};
var separate$1 = function(r2) {
  var left2 = {};
  var right2 = {};
  for (var k2 in r2) {
    if (has$2.call(r2, k2)) {
      var e2 = r2[k2];
      if (isLeft$1(e2)) {
        left2[k2] = e2.left;
      } else {
        right2[k2] = e2.right;
      }
    }
  }
  return separated(left2, right2);
};
function getShow$1(O2) {
  if ("compare" in O2) {
    return function(S2) {
      return {
        show: function(r2) {
          var elements = collect$1(O2)(function(k2, a2) {
            return "".concat(JSON.stringify(k2), ": ").concat(S2.show(a2));
          })(r2).join(", ");
          return elements === "" ? "{}" : "{ ".concat(elements, " }");
        }
      };
    };
  }
  return getShow$1(Ord)(O2);
}
function getEq$1(E2) {
  var isSubrecordE = isSubrecord$1(E2);
  return fromEquals(function(x2, y2) {
    return isSubrecordE(x2)(y2) && isSubrecordE(y2)(x2);
  });
}
function getMonoid$1(S2) {
  return {
    concat: function(first2, second) {
      if (isEmpty$1(first2)) {
        return second;
      }
      if (isEmpty$1(second)) {
        return first2;
      }
      var r2 = Object.assign({}, first2);
      for (var k2 in second) {
        if (has$2.call(second, k2)) {
          r2[k2] = has$2.call(first2, k2) ? S2.concat(first2[k2], second[k2]) : second[k2];
        }
      }
      return r2;
    },
    empty: empty$1
  };
}
function hasOwnProperty$1(k2, r2) {
  return has$2.call(r2 === void 0 ? this : r2, k2);
}
var __assign = globalThis && globalThis.__assign || function() {
  __assign = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
var size = size$1;
var isEmpty = isEmpty$1;
var keys_ = function(O2) {
  return function(r2) {
    return Object.keys(r2).sort(O2.compare);
  };
};
var keys = /* @__PURE__ */ keys_(Ord);
function collect(O2) {
  if (typeof O2 === "function") {
    return collect(Ord)(O2);
  }
  var keysO = keys_(O2);
  return function(f2) {
    return function(r2) {
      var out = [];
      for (var _i = 0, _a2 = keysO(r2); _i < _a2.length; _i++) {
        var key2 = _a2[_i];
        out.push(f2(key2, r2[key2]));
      }
      return out;
    };
  };
}
var toArray = /* @__PURE__ */ collect(Ord)(function(k2, a2) {
  return [
    k2,
    a2
  ];
});
function toUnfoldable(U2) {
  return function(r2) {
    var sas = toArray(r2);
    var len2 = sas.length;
    return U2.unfold(0, function(b2) {
      return b2 < len2 ? some$4([sas[b2], b2 + 1]) : none$1;
    });
  };
}
var upsertAt = upsertAt$1;
var has = has$1;
function deleteAt(k2) {
  return function(r2) {
    if (!has$2.call(r2, k2)) {
      return r2;
    }
    var out = Object.assign({}, r2);
    delete out[k2];
    return out;
  };
}
var updateAt = function(k2, a2) {
  return modifyAt(k2, function() {
    return a2;
  });
};
var modifyAt = function(k2, f2) {
  return function(r2) {
    if (!has(k2, r2)) {
      return none$1;
    }
    var out = Object.assign({}, r2);
    out[k2] = f2(r2[k2]);
    return some$4(out);
  };
};
function pop(k2) {
  var deleteAtk = deleteAt(k2);
  return function(r2) {
    var oa2 = lookup(k2, r2);
    return isNone$1(oa2) ? none$1 : some$4([oa2.value, deleteAtk(r2)]);
  };
}
var isSubrecord = isSubrecord$1;
var lookup = lookup$1;
var mapWithIndex$1 = mapWithIndex$2;
var map$1 = map$2;
function reduceWithIndex$1() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args.length === 1 ? reduceWithIndex$2(args[0]) : reduceWithIndex$2(Ord).apply(void 0, args);
}
function foldMapWithIndex$1(O2) {
  return "compare" in O2 ? foldMapWithIndex$2(O2) : foldMapWithIndex$2(Ord)(O2);
}
function reduceRightWithIndex$1() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args.length === 1 ? reduceRightWithIndex$2(args[0]) : reduceRightWithIndex$2(Ord).apply(void 0, args);
}
var singleton = singleton$1;
function traverseWithIndex(F2) {
  return traverseWithIndex$1(F2);
}
function traverse(F2) {
  return traverse$1(F2);
}
function sequence(F2) {
  return sequence$1(F2);
}
var wither = function(F2) {
  var traverseF = traverse(F2);
  return function(f2) {
    return function(fa2) {
      return F2.map(pipe$1(fa2, traverseF(f2)), compact);
    };
  };
};
var wilt = function(F2) {
  var traverseF = traverse(F2);
  return function(f2) {
    return function(fa2) {
      return F2.map(pipe$1(fa2, traverseF(f2)), separate);
    };
  };
};
var partitionMapWithIndex$1 = partitionMapWithIndex$2;
function partitionWithIndex$1(predicateWithIndex) {
  return partitionWithIndex$2(predicateWithIndex);
}
var filterMapWithIndex$1 = filterMapWithIndex$2;
function filterWithIndex$1(predicateWithIndex) {
  return filterWithIndex$2(predicateWithIndex);
}
function fromFoldable(M2, F2) {
  return fromFoldable$1(M2, F2);
}
var toEntries = toArray;
var fromEntries = function(fa2) {
  return fromFoldable(last$4(), Foldable$2)(fa2);
};
function fromFoldableMap(M2, F2) {
  return fromFoldableMap$1(M2, F2);
}
var every = every$1;
var some = some$1;
var elem = elem$1;
var union = function(M2) {
  var unionM = union$1(M2);
  return function(second) {
    return function(first2) {
      if (isEmpty(first2)) {
        return __assign({}, second);
      }
      if (isEmpty(second)) {
        return __assign({}, first2);
      }
      return unionM(second)(first2);
    };
  };
};
var intersection = function(M2) {
  return function(second) {
    return function(first2) {
      if (isEmpty(first2) || isEmpty(second)) {
        return {};
      }
      return intersection$1(M2)(second)(first2);
    };
  };
};
var difference = function(second) {
  return function(first2) {
    if (isEmpty(first2)) {
      return __assign({}, second);
    }
    if (isEmpty(second)) {
      return __assign({}, first2);
    }
    return difference$1(second)(first2);
  };
};
var _map = _map$1;
var _mapWithIndex = _mapWithIndex$1;
var _reduce = _reduce$1;
var _foldMap = _foldMap$1;
var _reduceRight = _reduceRight$1;
var _filter = _filter$1;
var _filterMap = _filterMap$1;
var _partition = _partition$1;
var _partitionMap = _partitionMap$1;
var _reduceWithIndex = _reduceWithIndex$1;
var _foldMapWithIndex = _foldMapWithIndex$1;
var _reduceRightWithIndex = _reduceRightWithIndex$1;
var _partitionMapWithIndex = _partitionMapWithIndex$1;
var _partitionWithIndex = _partitionWithIndex$1;
var _filterMapWithIndex = _filterMapWithIndex$1;
var _filterWithIndex = _filterWithIndex$1;
var _traverse = _traverse$1;
var _sequence = _sequence$1;
var _traverseWithIndex = function(O2) {
  return function(F2) {
    var keysO = keys_(O2);
    return function(ta2, f2) {
      var ks = keysO(ta2);
      if (ks.length === 0) {
        return F2.of({});
      }
      var fr = F2.of({});
      var _loop_1 = function(key3) {
        fr = F2.ap(F2.map(fr, function(r2) {
          return function(b2) {
            r2[key3] = b2;
            return r2;
          };
        }), f2(key3, ta2[key3]));
      };
      for (var _i = 0, ks_1 = ks; _i < ks_1.length; _i++) {
        var key2 = ks_1[_i];
        _loop_1(key2);
      }
      return fr;
    };
  };
};
var filter$1 = filter$2;
var filterMap$1 = filterMap$2;
var partition$1 = partition$2;
var partitionMap$1 = partitionMap$2;
function reduce$1() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args.length === 1 ? reduce$2(args[0]) : reduce$2(Ord).apply(void 0, args);
}
function foldMap$1(O2) {
  return "compare" in O2 ? foldMap$2(O2) : foldMap$2(Ord)(O2);
}
function reduceRight$1() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args.length === 1 ? reduceRight$2(args[0]) : reduceRight$2(Ord).apply(void 0, args);
}
var compact = compact$1;
var separate = separate$1;
var URI = "Record";
function getShow(O2) {
  return "compare" in O2 ? getShow$1(O2) : getShow$1(Ord)(O2);
}
var getEq = getEq$1;
var getMonoid = getMonoid$1;
var Functor = {
  URI,
  map: _map
};
var flap = /* @__PURE__ */ flap$6(Functor);
var FunctorWithIndex = {
  URI,
  map: _map,
  mapWithIndex: _mapWithIndex
};
var getFoldable = function(O2) {
  return {
    URI,
    reduce: _reduce(O2),
    foldMap: _foldMap(O2),
    reduceRight: _reduceRight(O2)
  };
};
var getFoldableWithIndex = function(O2) {
  return {
    URI,
    reduce: _reduce(O2),
    foldMap: _foldMap(O2),
    reduceRight: _reduceRight(O2),
    reduceWithIndex: _reduceWithIndex(O2),
    foldMapWithIndex: _foldMapWithIndex(O2),
    reduceRightWithIndex: _reduceRightWithIndex(O2)
  };
};
var Compactable = {
  URI,
  compact,
  separate
};
var Filterable = {
  URI,
  map: _map,
  compact,
  separate,
  filter: _filter,
  filterMap: _filterMap,
  partition: _partition,
  partitionMap: _partitionMap
};
var FilterableWithIndex = {
  URI,
  map: _map,
  mapWithIndex: _mapWithIndex,
  compact,
  separate,
  filter: _filter,
  filterMap: _filterMap,
  partition: _partition,
  partitionMap: _partitionMap,
  filterMapWithIndex: _filterMapWithIndex,
  filterWithIndex: _filterWithIndex,
  partitionMapWithIndex: _partitionMapWithIndex,
  partitionWithIndex: _partitionWithIndex
};
var getTraversable = function(O2) {
  return {
    URI,
    map: _map,
    reduce: _reduce(O2),
    foldMap: _foldMap(O2),
    reduceRight: _reduceRight(O2),
    traverse: _traverse(O2),
    sequence: _sequence(O2)
  };
};
var getTraversableWithIndex = function(O2) {
  return {
    URI,
    map: _map,
    mapWithIndex: _mapWithIndex,
    reduce: _reduce(O2),
    foldMap: _foldMap(O2),
    reduceRight: _reduceRight(O2),
    reduceWithIndex: _reduceWithIndex(O2),
    foldMapWithIndex: _foldMapWithIndex(O2),
    reduceRightWithIndex: _reduceRightWithIndex(O2),
    traverse: _traverse(O2),
    sequence: _sequence(O2),
    traverseWithIndex: _traverseWithIndex(O2)
  };
};
var getWitherable = function(O2) {
  var T2 = getTraversable(O2);
  return {
    URI,
    map: _map,
    reduce: _reduce(O2),
    foldMap: _foldMap(O2),
    reduceRight: _reduceRight(O2),
    traverse: T2.traverse,
    sequence: T2.sequence,
    compact,
    separate,
    filter: _filter,
    filterMap: _filterMap,
    partition: _partition,
    partitionMap: _partitionMap,
    wither: witherDefault$1(T2, Compactable),
    wilt: wiltDefault$1(T2, Compactable)
  };
};
var getUnionSemigroup = function(S2) {
  var unionS = union(S2);
  return {
    concat: function(first2, second) {
      return unionS(second)(first2);
    }
  };
};
var getUnionMonoid = function(S2) {
  return {
    concat: getUnionSemigroup(S2).concat,
    empty: {}
  };
};
var getIntersectionSemigroup = function(S2) {
  var intersectionS = intersection(S2);
  return {
    concat: function(first2, second) {
      return intersectionS(second)(first2);
    }
  };
};
var getDifferenceMagma = function() {
  return {
    concat: function(first2, second) {
      return difference(second)(first2);
    }
  };
};
var Foldable = {
  URI,
  reduce: /* @__PURE__ */ _reduce(Ord),
  foldMap: /* @__PURE__ */ _foldMap(Ord),
  reduceRight: /* @__PURE__ */ _reduceRight(Ord)
};
var FoldableWithIndex = {
  URI,
  reduce: /* @__PURE__ */ _reduce(Ord),
  foldMap: /* @__PURE__ */ _foldMap(Ord),
  reduceRight: /* @__PURE__ */ _reduceRight(Ord),
  reduceWithIndex: /* @__PURE__ */ _reduceWithIndex(Ord),
  foldMapWithIndex: /* @__PURE__ */ _foldMapWithIndex(Ord),
  reduceRightWithIndex: /* @__PURE__ */ _reduceRightWithIndex(Ord)
};
var Traversable = {
  URI,
  map: _map,
  reduce: /* @__PURE__ */ _reduce(Ord),
  foldMap: /* @__PURE__ */ _foldMap(Ord),
  reduceRight: /* @__PURE__ */ _reduceRight(Ord),
  traverse: /* @__PURE__ */ _traverse(Ord),
  sequence
};
var TraversableWithIndex = {
  URI,
  map: _map,
  mapWithIndex: _mapWithIndex,
  reduce: /* @__PURE__ */ _reduce(Ord),
  foldMap: /* @__PURE__ */ _foldMap(Ord),
  reduceRight: /* @__PURE__ */ _reduceRight(Ord),
  reduceWithIndex: /* @__PURE__ */ _reduceWithIndex(Ord),
  foldMapWithIndex: /* @__PURE__ */ _foldMapWithIndex(Ord),
  reduceRightWithIndex: /* @__PURE__ */ _reduceRightWithIndex(Ord),
  traverse: /* @__PURE__ */ _traverse(Ord),
  sequence,
  traverseWithIndex: /* @__PURE__ */ _traverseWithIndex(Ord)
};
var _wither = /* @__PURE__ */ witherDefault$1(Traversable, Compactable);
var _wilt = /* @__PURE__ */ wiltDefault$1(Traversable, Compactable);
var Witherable = {
  URI,
  map: _map,
  reduce: /* @__PURE__ */ _reduce(Ord),
  foldMap: /* @__PURE__ */ _foldMap(Ord),
  reduceRight: /* @__PURE__ */ _reduceRight(Ord),
  traverse: /* @__PURE__ */ _traverse(Ord),
  sequence,
  compact,
  separate,
  filter: _filter,
  filterMap: _filterMap,
  partition: _partition,
  partitionMap: _partitionMap,
  wither: _wither,
  wilt: _wilt
};
var empty = {};
var insertAt = upsertAt;
var hasOwnProperty = hasOwnProperty$1;
var record = {
  URI,
  map: _map,
  reduce: /* @__PURE__ */ _reduce(Ord),
  foldMap: /* @__PURE__ */ _foldMap(Ord),
  reduceRight: /* @__PURE__ */ _reduceRight(Ord),
  traverse: /* @__PURE__ */ _traverse(Ord),
  sequence,
  compact,
  separate,
  filter: _filter,
  filterMap: _filterMap,
  partition: _partition,
  partitionMap: _partitionMap,
  mapWithIndex: _mapWithIndex,
  reduceWithIndex: /* @__PURE__ */ _reduceWithIndex(Ord),
  foldMapWithIndex: /* @__PURE__ */ _foldMapWithIndex(Ord),
  reduceRightWithIndex: /* @__PURE__ */ _reduceRightWithIndex(Ord),
  filterMapWithIndex: _filterMapWithIndex,
  filterWithIndex: _filterWithIndex,
  partitionMapWithIndex: _partitionMapWithIndex,
  partitionWithIndex: _partitionWithIndex,
  traverseWithIndex: /* @__PURE__ */ _traverseWithIndex(Ord),
  wither: _wither,
  wilt: _wilt
};
const Record = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Compactable,
  Filterable,
  FilterableWithIndex,
  Foldable,
  FoldableWithIndex,
  Functor,
  FunctorWithIndex,
  Traversable,
  TraversableWithIndex,
  URI,
  Witherable,
  collect,
  compact,
  deleteAt,
  difference,
  elem,
  empty,
  every,
  filter: filter$1,
  filterMap: filterMap$1,
  filterMapWithIndex: filterMapWithIndex$1,
  filterWithIndex: filterWithIndex$1,
  flap,
  foldMap: foldMap$1,
  foldMapWithIndex: foldMapWithIndex$1,
  fromEntries,
  fromFoldable,
  fromFoldableMap,
  getDifferenceMagma,
  getEq,
  getFoldable,
  getFoldableWithIndex,
  getIntersectionSemigroup,
  getMonoid,
  getShow,
  getTraversable,
  getTraversableWithIndex,
  getUnionMonoid,
  getUnionSemigroup,
  getWitherable,
  has,
  hasOwnProperty,
  insertAt,
  intersection,
  isEmpty,
  isSubrecord,
  keys,
  lookup,
  map: map$1,
  mapWithIndex: mapWithIndex$1,
  modifyAt,
  partition: partition$1,
  partitionMap: partitionMap$1,
  partitionMapWithIndex: partitionMapWithIndex$1,
  partitionWithIndex: partitionWithIndex$1,
  pop,
  record,
  reduce: reduce$1,
  reduceRight: reduceRight$1,
  reduceRightWithIndex: reduceRightWithIndex$1,
  reduceWithIndex: reduceWithIndex$1,
  separate,
  sequence,
  singleton,
  size,
  some,
  toArray,
  toEntries,
  toUnfoldable,
  traverse,
  traverseWithIndex,
  union,
  updateAt,
  upsertAt,
  wilt,
  wither
}, Symbol.toStringTag, { value: "Module" }));
const require$$4 = /* @__PURE__ */ getAugmentedNamespace(Record);
function map(F2) {
  return function(f2) {
    return function(fa2) {
      return F2.map(fa2, f2);
    };
  };
}
function contramap(F2) {
  return function(f2) {
    return function(fa2) {
      return F2.contramap(fa2, f2);
    };
  };
}
function mapWithIndex(F2) {
  return function(f2) {
    return function(fa2) {
      return F2.mapWithIndex(fa2, f2);
    };
  };
}
function ap(F2) {
  return function(fa2) {
    return function(fab) {
      return F2.ap(fab, fa2);
    };
  };
}
function chain(F2) {
  return function(f2) {
    return function(fa2) {
      return F2.chain(fa2, f2);
    };
  };
}
function bimap(F2) {
  return function(f2, g2) {
    return function(fea) {
      return F2.bimap(fea, f2, g2);
    };
  };
}
function mapLeft(F2) {
  return function(f2) {
    return function(fea) {
      return F2.mapLeft(fea, f2);
    };
  };
}
function extend(F2) {
  return function(f2) {
    return function(wa2) {
      return F2.extend(wa2, f2);
    };
  };
}
function reduce(F2) {
  return function(b2, f2) {
    return function(fa2) {
      return F2.reduce(fa2, b2, f2);
    };
  };
}
function foldMap(F2) {
  return function(M2) {
    var foldMapM = F2.foldMap(M2);
    return function(f2) {
      return function(fa2) {
        return foldMapM(fa2, f2);
      };
    };
  };
}
function reduceRight(F2) {
  return function(b2, f2) {
    return function(fa2) {
      return F2.reduceRight(fa2, b2, f2);
    };
  };
}
function reduceWithIndex(F2) {
  return function(b2, f2) {
    return function(fa2) {
      return F2.reduceWithIndex(fa2, b2, f2);
    };
  };
}
function foldMapWithIndex(F2) {
  return function(M2) {
    var foldMapWithIndexM = F2.foldMapWithIndex(M2);
    return function(f2) {
      return function(fa2) {
        return foldMapWithIndexM(fa2, f2);
      };
    };
  };
}
function reduceRightWithIndex(F2) {
  return function(b2, f2) {
    return function(fa2) {
      return F2.reduceRightWithIndex(fa2, b2, f2);
    };
  };
}
function alt(F2) {
  return function(that) {
    return function(fa2) {
      return F2.alt(fa2, that);
    };
  };
}
function filter(F2) {
  return function(predicate) {
    return function(fa2) {
      return F2.filter(fa2, predicate);
    };
  };
}
function filterMap(F2) {
  return function(f2) {
    return function(fa2) {
      return F2.filterMap(fa2, f2);
    };
  };
}
function partition(F2) {
  return function(f2) {
    return function(fa2) {
      return F2.partition(fa2, f2);
    };
  };
}
function partitionMap(F2) {
  return function(f2) {
    return function(fa2) {
      return F2.partitionMap(fa2, f2);
    };
  };
}
function filterWithIndex(F2) {
  return function(predicate) {
    return function(fa2) {
      return F2.filterWithIndex(fa2, predicate);
    };
  };
}
function filterMapWithIndex(F2) {
  return function(f2) {
    return function(fa2) {
      return F2.filterMapWithIndex(fa2, f2);
    };
  };
}
function partitionWithIndex(F2) {
  return function(f2) {
    return function(fa2) {
      return F2.partitionWithIndex(fa2, f2);
    };
  };
}
function partitionMapWithIndex(F2) {
  return function(f2) {
    return function(fa2) {
      return F2.partitionMapWithIndex(fa2, f2);
    };
  };
}
function promap(F2) {
  return function(f2, g2) {
    return function(fbc) {
      return F2.promap(fbc, f2, g2);
    };
  };
}
function compose(F2) {
  return function(ea2) {
    return function(ab2) {
      return F2.compose(ab2, ea2);
    };
  };
}
var isFunctor = function(I2) {
  return typeof I2.map === "function";
};
var isContravariant = function(I2) {
  return typeof I2.contramap === "function";
};
var isFunctorWithIndex = function(I2) {
  return typeof I2.mapWithIndex === "function";
};
var isApply = function(I2) {
  return typeof I2.ap === "function";
};
var isChain = function(I2) {
  return typeof I2.chain === "function";
};
var isBifunctor = function(I2) {
  return typeof I2.bimap === "function";
};
var isExtend = function(I2) {
  return typeof I2.extend === "function";
};
var isFoldable = function(I2) {
  return typeof I2.reduce === "function";
};
var isFoldableWithIndex = function(I2) {
  return typeof I2.reduceWithIndex === "function";
};
var isAlt = function(I2) {
  return typeof I2.alt === "function";
};
var isCompactable = function(I2) {
  return typeof I2.compact === "function";
};
var isFilterable = function(I2) {
  return typeof I2.filter === "function";
};
var isFilterableWithIndex = function(I2) {
  return typeof I2.filterWithIndex === "function";
};
var isProfunctor = function(I2) {
  return typeof I2.promap === "function";
};
var isSemigroupoid = function(I2) {
  return typeof I2.compose === "function";
};
var isMonadThrow = function(I2) {
  return typeof I2.throwError === "function";
};
function pipeable(I2) {
  var r2 = {};
  if (isFunctor(I2)) {
    r2.map = map(I2);
  }
  if (isContravariant(I2)) {
    r2.contramap = contramap(I2);
  }
  if (isFunctorWithIndex(I2)) {
    r2.mapWithIndex = mapWithIndex(I2);
  }
  if (isApply(I2)) {
    r2.ap = ap(I2);
    r2.apFirst = apFirst$5(I2);
    r2.apSecond = apSecond$5(I2);
  }
  if (isChain(I2)) {
    r2.chain = chain(I2);
    r2.chainFirst = chainFirst$5(I2);
    r2.flatten = r2.chain(identity$1);
  }
  if (isBifunctor(I2)) {
    r2.bimap = bimap(I2);
    r2.mapLeft = mapLeft(I2);
  }
  if (isExtend(I2)) {
    r2.extend = extend(I2);
    r2.duplicate = r2.extend(identity$1);
  }
  if (isFoldable(I2)) {
    r2.reduce = reduce(I2);
    r2.foldMap = foldMap(I2);
    r2.reduceRight = reduceRight(I2);
  }
  if (isFoldableWithIndex(I2)) {
    r2.reduceWithIndex = reduceWithIndex(I2);
    r2.foldMapWithIndex = foldMapWithIndex(I2);
    r2.reduceRightWithIndex = reduceRightWithIndex(I2);
  }
  if (isAlt(I2)) {
    r2.alt = alt(I2);
  }
  if (isCompactable(I2)) {
    r2.compact = I2.compact;
    r2.separate = I2.separate;
  }
  if (isFilterable(I2)) {
    r2.filter = filter(I2);
    r2.filterMap = filterMap(I2);
    r2.partition = partition(I2);
    r2.partitionMap = partitionMap(I2);
  }
  if (isFilterableWithIndex(I2)) {
    r2.filterWithIndex = filterWithIndex(I2);
    r2.filterMapWithIndex = filterMapWithIndex(I2);
    r2.partitionWithIndex = partitionWithIndex(I2);
    r2.partitionMapWithIndex = partitionMapWithIndex(I2);
  }
  if (isProfunctor(I2)) {
    r2.promap = promap(I2);
  }
  if (isSemigroupoid(I2)) {
    r2.compose = compose(I2);
  }
  if (isMonadThrow(I2)) {
    var fromOption2 = function(onNone) {
      return function(ma2) {
        return ma2._tag === "None" ? I2.throwError(onNone()) : I2.of(ma2.value);
      };
    };
    var fromEither2 = function(ma2) {
      return ma2._tag === "Left" ? I2.throwError(ma2.left) : I2.of(ma2.right);
    };
    var fromPredicate2 = function(predicate, onFalse) {
      return function(a2) {
        return predicate(a2) ? I2.of(a2) : I2.throwError(onFalse(a2));
      };
    };
    var filterOrElse2 = function(predicate, onFalse) {
      return function(ma2) {
        return I2.chain(ma2, function(a2) {
          return predicate(a2) ? I2.of(a2) : I2.throwError(onFalse(a2));
        });
      };
    };
    r2.fromOption = fromOption2;
    r2.fromEither = fromEither2;
    r2.fromPredicate = fromPredicate2;
    r2.filterOrElse = filterOrElse2;
  }
  return r2;
}
var pipe = pipe$1;
const pipeable$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  alt,
  ap,
  bimap,
  chain,
  compose,
  contramap,
  extend,
  filter,
  filterMap,
  filterMapWithIndex,
  filterWithIndex,
  foldMap,
  foldMapWithIndex,
  map,
  mapLeft,
  mapWithIndex,
  partition,
  partitionMap,
  partitionMapWithIndex,
  partitionWithIndex,
  pipe,
  pipeable,
  promap,
  reduce,
  reduceRight,
  reduceRightWithIndex,
  reduceWithIndex
}, Symbol.toStringTag, { value: "Module" }));
const require$$5 = /* @__PURE__ */ getAugmentedNamespace(pipeable$1);
var utils = {};
Object.defineProperty(utils, "__esModule", { value: true });
utils.takeUntil = void 0;
var takeUntil = function(predicate) {
  return function(as2) {
    var init2 = [];
    for (var i2 = 0; i2 < as2.length; i2++) {
      init2[i2] = as2[i2];
      if (predicate(as2[i2])) {
        return init2;
      }
    }
    return init2;
  };
};
utils.takeUntil = takeUntil;
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.reporter = exports2.formatValidationErrors = exports2.formatValidationError = exports2.TYPE_MAX_LEN = void 0;
  var A2 = require$$0;
  var E2 = require$$1;
  var NEA = require$$2;
  var O2 = require$$3;
  var R2 = require$$4;
  var pipeable_1 = require$$5;
  var t2 = require$$1$1;
  var utils_1 = utils;
  var isUnionType = function(_a2) {
    var type2 = _a2.type;
    return type2 instanceof t2.UnionType;
  };
  var jsToString = function(value) {
    return value === void 0 ? "undefined" : JSON.stringify(value);
  };
  var keyPath = function(ctx) {
    return ctx.map(function(c2) {
      return c2.key;
    }).filter(Boolean).join(".");
  };
  var getErrorFromCtx = function(validation) {
    return A2.last(validation.context);
  };
  var getValidationContext = function(validation) {
    return validation.context;
  };
  exports2.TYPE_MAX_LEN = 160;
  var truncateType = function(type2, options) {
    if (options === void 0) {
      options = {};
    }
    var _a2 = options.truncateLongTypes, truncateLongTypes = _a2 === void 0 ? true : _a2;
    if (truncateLongTypes && type2.length > exports2.TYPE_MAX_LEN) {
      return type2.slice(0, exports2.TYPE_MAX_LEN - 3) + "...";
    }
    return type2;
  };
  var errorMessageSimple = function(expectedType, path, error, options) {
    return [
      "Expecting " + truncateType(expectedType, options),
      path === "" ? "" : "at " + path,
      "but instead got: " + jsToString(error.value),
      error.message ? "(" + error.message + ")" : ""
    ].filter(Boolean).join(" ");
  };
  var errorMessageUnion = function(expectedTypes, path, value, options) {
    return [
      "Expecting one of:\n",
      expectedTypes.map(function(type2) {
        return "    " + truncateType(type2, options);
      }).join("\n"),
      path === "" ? "\n" : "\nat " + path + " ",
      "but instead got: " + jsToString(value)
    ].filter(Boolean).join("");
  };
  var findExpectedType = function(ctx) {
    return pipeable_1.pipe(ctx, A2.findIndex(isUnionType), O2.chain(function(n2) {
      return A2.lookup(n2 + 1, ctx);
    }));
  };
  var formatValidationErrorOfUnion = function(path, errors, options) {
    var expectedTypes = pipeable_1.pipe(errors, A2.map(getValidationContext), A2.map(findExpectedType), A2.compact);
    var value = pipeable_1.pipe(expectedTypes, A2.head, O2.map(function(v2) {
      return v2.actual;
    }), O2.getOrElse(function() {
      return void 0;
    }));
    var expected = expectedTypes.map(function(_a2) {
      var type2 = _a2.type;
      return type2.name;
    });
    return expected.length > 0 ? O2.some(errorMessageUnion(expected, path, value, options)) : O2.none;
  };
  var formatValidationCommonError = function(path, error, options) {
    return pipeable_1.pipe(error, getErrorFromCtx, O2.map(function(errorContext) {
      return errorMessageSimple(errorContext.type.name, path, error, options);
    }));
  };
  var groupByKey = NEA.groupBy(function(error) {
    return pipeable_1.pipe(error.context, utils_1.takeUntil(isUnionType), keyPath);
  });
  var format = function(path, errors, options) {
    return NEA.tail(errors).length > 0 ? formatValidationErrorOfUnion(path, errors, options) : formatValidationCommonError(path, NEA.head(errors), options);
  };
  var formatValidationError = function(error, options) {
    return formatValidationCommonError(keyPath(error.context), error, options);
  };
  exports2.formatValidationError = formatValidationError;
  var formatValidationErrors = function(errors, options) {
    return pipeable_1.pipe(errors, groupByKey, R2.mapWithIndex(function(path, errors2) {
      return format(path, errors2, options);
    }), R2.compact, R2.toArray, A2.map(function(_a2) {
      _a2[0];
      var error = _a2[1];
      return error;
    }));
  };
  exports2.formatValidationErrors = formatValidationErrors;
  var reporter2 = function(validation, options) {
    return pipeable_1.pipe(validation, E2.mapLeft(function(errors) {
      return exports2.formatValidationErrors(errors, options);
    }), E2.fold(function(errors) {
      return errors;
    }, function() {
      return [];
    }));
  };
  exports2.reporter = reporter2;
  var prettyReporter = { report: exports2.reporter };
  exports2.default = prettyReporter;
})(src);
var TonCache = {};
Object.defineProperty(TonCache, "__esModule", { value: true });
TonCache.InMemoryCache = void 0;
class InMemoryCache {
  constructor() {
    this.cache = /* @__PURE__ */ new Map();
    this.set = async (namespace, key2, value) => {
      if (value !== null) {
        this.cache.set(namespace + "$$" + key2, value);
      } else {
        this.cache.delete(namespace + "$$" + key2);
      }
    };
    this.get = async (namespace, key2) => {
      let res = this.cache.get(namespace + "$$" + key2);
      if (res !== void 0) {
        return res;
      } else {
        return null;
      }
    };
  }
}
TonCache.InMemoryCache = InMemoryCache;
var DataLoader = /* @__PURE__ */ function() {
  function DataLoader2(batchLoadFn, options) {
    if (typeof batchLoadFn !== "function") {
      throw new TypeError("DataLoader must be constructed with a function which accepts " + ("Array<key> and returns Promise<Array<value>>, but got: " + batchLoadFn + "."));
    }
    this._batchLoadFn = batchLoadFn;
    this._maxBatchSize = getValidMaxBatchSize(options);
    this._batchScheduleFn = getValidBatchScheduleFn(options);
    this._cacheKeyFn = getValidCacheKeyFn(options);
    this._cacheMap = getValidCacheMap(options);
    this._batch = null;
    this.name = getValidName(options);
  }
  var _proto = DataLoader2.prototype;
  _proto.load = function load(key2) {
    if (key2 === null || key2 === void 0) {
      throw new TypeError("The loader.load() function must be called with a value, " + ("but got: " + String(key2) + "."));
    }
    var batch2 = getCurrentBatch(this);
    var cacheMap = this._cacheMap;
    var cacheKey = this._cacheKeyFn(key2);
    if (cacheMap) {
      var cachedPromise = cacheMap.get(cacheKey);
      if (cachedPromise) {
        var cacheHits = batch2.cacheHits || (batch2.cacheHits = []);
        return new Promise(function(resolve) {
          cacheHits.push(function() {
            resolve(cachedPromise);
          });
        });
      }
    }
    batch2.keys.push(key2);
    var promise = new Promise(function(resolve, reject) {
      batch2.callbacks.push({
        resolve,
        reject
      });
    });
    if (cacheMap) {
      cacheMap.set(cacheKey, promise);
    }
    return promise;
  };
  _proto.loadMany = function loadMany(keys2) {
    if (!isArrayLike(keys2)) {
      throw new TypeError("The loader.loadMany() function must be called with Array<key> " + ("but got: " + keys2 + "."));
    }
    var loadPromises = [];
    for (var i2 = 0; i2 < keys2.length; i2++) {
      loadPromises.push(this.load(keys2[i2])["catch"](function(error) {
        return error;
      }));
    }
    return Promise.all(loadPromises);
  };
  _proto.clear = function clear(key2) {
    var cacheMap = this._cacheMap;
    if (cacheMap) {
      var cacheKey = this._cacheKeyFn(key2);
      cacheMap["delete"](cacheKey);
    }
    return this;
  };
  _proto.clearAll = function clearAll() {
    var cacheMap = this._cacheMap;
    if (cacheMap) {
      cacheMap.clear();
    }
    return this;
  };
  _proto.prime = function prime(key2, value) {
    var cacheMap = this._cacheMap;
    if (cacheMap) {
      var cacheKey = this._cacheKeyFn(key2);
      if (cacheMap.get(cacheKey) === void 0) {
        var promise;
        if (value instanceof Error) {
          promise = Promise.reject(value);
          promise["catch"](function() {
          });
        } else {
          promise = Promise.resolve(value);
        }
        cacheMap.set(cacheKey, promise);
      }
    }
    return this;
  };
  return DataLoader2;
}();
var enqueuePostPromiseJob = typeof process$1 === "object" && typeof process$1.nextTick === "function" ? function(fn) {
  if (!resolvedPromise) {
    resolvedPromise = Promise.resolve();
  }
  resolvedPromise.then(function() {
    process$1.nextTick(fn);
  });
} : typeof setImmediate === "function" ? function(fn) {
  setImmediate(fn);
} : function(fn) {
  setTimeout(fn);
};
var resolvedPromise;
function getCurrentBatch(loader) {
  var existingBatch = loader._batch;
  if (existingBatch !== null && !existingBatch.hasDispatched && existingBatch.keys.length < loader._maxBatchSize) {
    return existingBatch;
  }
  var newBatch = {
    hasDispatched: false,
    keys: [],
    callbacks: []
  };
  loader._batch = newBatch;
  loader._batchScheduleFn(function() {
    dispatchBatch(loader, newBatch);
  });
  return newBatch;
}
function dispatchBatch(loader, batch2) {
  batch2.hasDispatched = true;
  if (batch2.keys.length === 0) {
    resolveCacheHits(batch2);
    return;
  }
  var batchPromise;
  try {
    batchPromise = loader._batchLoadFn(batch2.keys);
  } catch (e2) {
    return failedDispatch(loader, batch2, new TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function " + ("errored synchronously: " + String(e2) + ".")));
  }
  if (!batchPromise || typeof batchPromise.then !== "function") {
    return failedDispatch(loader, batch2, new TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did " + ("not return a Promise: " + String(batchPromise) + ".")));
  }
  batchPromise.then(function(values) {
    if (!isArrayLike(values)) {
      throw new TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did " + ("not return a Promise of an Array: " + String(values) + "."));
    }
    if (values.length !== batch2.keys.length) {
      throw new TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did not return a Promise of an Array of the same length as the Array of keys." + ("\n\nKeys:\n" + String(batch2.keys)) + ("\n\nValues:\n" + String(values)));
    }
    resolveCacheHits(batch2);
    for (var i2 = 0; i2 < batch2.callbacks.length; i2++) {
      var value = values[i2];
      if (value instanceof Error) {
        batch2.callbacks[i2].reject(value);
      } else {
        batch2.callbacks[i2].resolve(value);
      }
    }
  })["catch"](function(error) {
    failedDispatch(loader, batch2, error);
  });
}
function failedDispatch(loader, batch2, error) {
  resolveCacheHits(batch2);
  for (var i2 = 0; i2 < batch2.keys.length; i2++) {
    loader.clear(batch2.keys[i2]);
    batch2.callbacks[i2].reject(error);
  }
}
function resolveCacheHits(batch2) {
  if (batch2.cacheHits) {
    for (var i2 = 0; i2 < batch2.cacheHits.length; i2++) {
      batch2.cacheHits[i2]();
    }
  }
}
function getValidMaxBatchSize(options) {
  var shouldBatch = !options || options.batch !== false;
  if (!shouldBatch) {
    return 1;
  }
  var maxBatchSize = options && options.maxBatchSize;
  if (maxBatchSize === void 0) {
    return Infinity;
  }
  if (typeof maxBatchSize !== "number" || maxBatchSize < 1) {
    throw new TypeError("maxBatchSize must be a positive number: " + maxBatchSize);
  }
  return maxBatchSize;
}
function getValidBatchScheduleFn(options) {
  var batchScheduleFn = options && options.batchScheduleFn;
  if (batchScheduleFn === void 0) {
    return enqueuePostPromiseJob;
  }
  if (typeof batchScheduleFn !== "function") {
    throw new TypeError("batchScheduleFn must be a function: " + batchScheduleFn);
  }
  return batchScheduleFn;
}
function getValidCacheKeyFn(options) {
  var cacheKeyFn = options && options.cacheKeyFn;
  if (cacheKeyFn === void 0) {
    return function(key2) {
      return key2;
    };
  }
  if (typeof cacheKeyFn !== "function") {
    throw new TypeError("cacheKeyFn must be a function: " + cacheKeyFn);
  }
  return cacheKeyFn;
}
function getValidCacheMap(options) {
  var shouldCache = !options || options.cache !== false;
  if (!shouldCache) {
    return null;
  }
  var cacheMap = options && options.cacheMap;
  if (cacheMap === void 0) {
    return /* @__PURE__ */ new Map();
  }
  if (cacheMap !== null) {
    var cacheFunctions = ["get", "set", "delete", "clear"];
    var missingFunctions = cacheFunctions.filter(function(fnName) {
      return cacheMap && typeof cacheMap[fnName] !== "function";
    });
    if (missingFunctions.length !== 0) {
      throw new TypeError("Custom cacheMap missing methods: " + missingFunctions.join(", "));
    }
  }
  return cacheMap;
}
function getValidName(options) {
  if (options && options.name) {
    return options.name;
  }
  return null;
}
function isArrayLike(x2) {
  return typeof x2 === "object" && x2 !== null && typeof x2.length === "number" && (x2.length === 0 || x2.length > 0 && Object.prototype.hasOwnProperty.call(x2, x2.length - 1));
}
var dataloader = DataLoader;
const name = "ton";
const version$1 = "13.3.0";
const repository = "https://github.com/tonwhales/ton.git";
const author = "Steve Korshakov <steve@korshakov.com>";
const license = "MIT";
const main = "dist/index.js";
const files = [
  "dist"
];
const scripts = {
  build: "rm -fr dist && tsc --declaration",
  test: "jest --verbose --runInBand",
  release: "yarn build && yarn release-it --npm.yarn1"
};
const devDependencies = {
  "@release-it/keep-a-changelog": "^3.1.0",
  "@types/jest": "^27.0.1",
  "@types/node": "^16.7.10",
  buffer: "^6.0.3",
  expect: "^27.1.0",
  jest: "^27.1.0",
  "jest-mock": "^27.1.0",
  karma: "^6.3.4",
  "karma-chrome-launcher": "^3.1.0",
  "karma-jasmine": "^4.0.1",
  "karma-typescript": "^5.5.2",
  "karma-webpack": "^5.0.0",
  prando: "^6.0.1",
  "release-it": "^15.5.1",
  "ton-core": "^0.32.0",
  "ton-crypto": "3.2.0",
  "ts-jest": "^27.0.5",
  "ts-loader": "^9.2.5",
  "ts-node": "^10.7.0",
  typescript: "^4.4.2",
  webpack: "^5.51.2"
};
const dependencies = {
  axios: "^0.25.0",
  dataloader: "^2.0.0",
  "fp-ts": "^2.11.1",
  "io-ts": "^2.2.16",
  "io-ts-reporters": "^2.0.0",
  "symbol.inspect": "1.0.1",
  teslabot: "^1.3.0"
};
const peerDependencies = {
  "ton-core": ">=0.32.0",
  "ton-crypto": ">=3.2.0"
};
const publishConfig = {
  access: "public",
  registry: "https://registry.npmjs.org/"
};
const require$$6 = {
  name,
  version: version$1,
  repository,
  author,
  license,
  main,
  files,
  scripts,
  devDependencies,
  dependencies,
  peerDependencies,
  publishConfig,
  "release-it": {
    github: {
      release: true
    },
    plugins: {
      "@release-it/keep-a-changelog": {
        filename: "CHANGELOG.md"
      }
    }
  }
};
var __createBinding$1 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
  if (k22 === void 0)
    k22 = k2;
  Object.defineProperty(o2, k22, { enumerable: true, get: function() {
    return m2[k2];
  } });
} : function(o2, m2, k2, k22) {
  if (k22 === void 0)
    k22 = k2;
  o2[k22] = m2[k2];
});
var __setModuleDefault$1 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
  Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
} : function(o2, v2) {
  o2["default"] = v2;
});
var __importStar$1 = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k2 in mod)
      if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
        __createBinding$1(result, mod, k2);
  }
  __setModuleDefault$1(result, mod);
  return result;
};
var __importDefault$1 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(HttpApi$1, "__esModule", { value: true });
HttpApi$1.HttpApi = void 0;
const t$1 = __importStar$1(require$$1$1);
const Either_1 = Either;
const io_ts_reporters_1 = __importDefault$1(src);
const TonCache_1 = TonCache;
const dataloader_1 = __importDefault$1(dataloader);
const axios_1$1 = __importDefault$1(axios);
const version = require$$6.version;
const blockIdExt = t$1.type({
  "@type": t$1.literal("ton.blockIdExt"),
  workchain: t$1.number,
  shard: t$1.string,
  seqno: t$1.number,
  root_hash: t$1.string,
  file_hash: t$1.string
});
const addressInformation = t$1.type({
  balance: t$1.union([t$1.number, t$1.string]),
  state: t$1.union([t$1.literal("active"), t$1.literal("uninitialized"), t$1.literal("frozen")]),
  data: t$1.string,
  code: t$1.string,
  last_transaction_id: t$1.type({
    "@type": t$1.literal("internal.transactionId"),
    lt: t$1.string,
    hash: t$1.string
  }),
  block_id: blockIdExt,
  sync_utime: t$1.number
});
const bocResponse = t$1.type({
  "@type": t$1.literal("ok")
});
const feeResponse = t$1.type({
  "@type": t$1.literal("query.fees"),
  source_fees: t$1.type({
    "@type": t$1.literal("fees"),
    in_fwd_fee: t$1.number,
    storage_fee: t$1.number,
    gas_fee: t$1.number,
    fwd_fee: t$1.number
  })
});
const callGetMethod = t$1.type({
  gas_used: t$1.number,
  exit_code: t$1.number,
  stack: t$1.array(t$1.unknown)
});
const messageData = t$1.union([
  t$1.type({
    "@type": t$1.literal("msg.dataRaw"),
    "body": t$1.string
  }),
  t$1.type({
    "@type": t$1.literal("msg.dataText"),
    "text": t$1.string
  }),
  t$1.type({
    "@type": t$1.literal("msg.dataDecryptedText"),
    "text": t$1.string
  }),
  t$1.type({
    "@type": t$1.literal("msg.dataEncryptedText"),
    "text": t$1.string
  })
]);
const message = t$1.type({
  source: t$1.string,
  destination: t$1.string,
  value: t$1.string,
  fwd_fee: t$1.string,
  ihr_fee: t$1.string,
  created_lt: t$1.string,
  body_hash: t$1.string,
  msg_data: messageData
});
const transaction = t$1.type({
  data: t$1.string,
  utime: t$1.number,
  transaction_id: t$1.type({
    lt: t$1.string,
    hash: t$1.string
  }),
  fee: t$1.string,
  storage_fee: t$1.string,
  other_fee: t$1.string,
  in_msg: t$1.union([t$1.undefined, message]),
  out_msgs: t$1.array(message)
});
const getTransactions = t$1.array(transaction);
const getMasterchain = t$1.type({
  state_root_hash: t$1.string,
  last: blockIdExt,
  init: blockIdExt
});
const getShards = t$1.type({
  shards: t$1.array(blockIdExt)
});
const blockShortTxt = t$1.type({
  "@type": t$1.literal("blocks.shortTxId"),
  mode: t$1.number,
  account: t$1.string,
  lt: t$1.string,
  hash: t$1.string
});
const getBlockTransactions = t$1.type({
  id: blockIdExt,
  req_count: t$1.number,
  incomplete: t$1.boolean,
  transactions: t$1.array(blockShortTxt)
});
class TypedCache {
  constructor(namespace, cache, codec, keyEncoder) {
    this.namespace = namespace;
    this.cache = cache;
    this.codec = codec;
    this.keyEncoder = keyEncoder;
  }
  async get(key2) {
    let ex = await this.cache.get(this.namespace, this.keyEncoder(key2));
    if (ex) {
      let decoded = this.codec.decode(JSON.parse(ex));
      if ((0, Either_1.isRight)(decoded)) {
        return decoded.right;
      }
    }
    return null;
  }
  async set(key2, value) {
    if (value !== null) {
      await this.cache.set(this.namespace, this.keyEncoder(key2), JSON.stringify(value));
    } else {
      await this.cache.set(this.namespace, this.keyEncoder(key2), null);
    }
  }
}
class HttpApi {
  constructor(endpoint, parameters) {
    this.endpoint = endpoint;
    this.cache = new TonCache_1.InMemoryCache();
    this.parameters = {
      timeout: (parameters == null ? void 0 : parameters.timeout) || 3e4,
      apiKey: parameters == null ? void 0 : parameters.apiKey
    };
    this.shardCache = new TypedCache("ton-shard", this.cache, t$1.array(blockIdExt), (src2) => src2 + "");
    this.shardLoader = new dataloader_1.default(async (src2) => {
      return await Promise.all(src2.map(async (v2) => {
        const cached = await this.shardCache.get(v2);
        if (cached) {
          return cached;
        }
        let loaded = (await this.doCall("shards", { seqno: v2 }, getShards)).shards;
        await this.shardCache.set(v2, loaded);
        return loaded;
      }));
    });
    this.shardTransactionsCache = new TypedCache("ton-shard-tx", this.cache, getBlockTransactions, (src2) => src2.workchain + ":" + src2.shard + ":" + src2.seqno);
    this.shardTransactionsLoader = new dataloader_1.default(async (src2) => {
      return await Promise.all(src2.map(async (v2) => {
        const cached = await this.shardTransactionsCache.get(v2);
        if (cached) {
          return cached;
        }
        let loaded = await this.doCall("getBlockTransactions", { workchain: v2.workchain, seqno: v2.seqno, shard: v2.shard }, getBlockTransactions);
        await this.shardTransactionsCache.set(v2, loaded);
        return loaded;
      }));
    }, { cacheKeyFn: (src2) => src2.workchain + ":" + src2.shard + ":" + src2.seqno });
  }
  getAddressInformation(address) {
    return this.doCall("getAddressInformation", { address: address.toString() }, addressInformation);
  }
  async getTransactions(address, opts) {
    const inclusive = opts.inclusive;
    delete opts.inclusive;
    let hash2 = void 0;
    if (opts.hash) {
      hash2 = buffer$1.Buffer.from(opts.hash, "base64").toString("hex");
    }
    let limit = opts.limit;
    if (opts.hash && opts.lt && inclusive !== true) {
      limit++;
    }
    let res = await this.doCall("getTransactions", { address: address.toString(), ...opts, limit, hash: hash2 }, getTransactions);
    if (res.length > limit) {
      res = res.slice(0, limit);
    }
    if (opts.hash && opts.lt && inclusive !== true) {
      res.shift();
      return res;
    } else {
      return res;
    }
  }
  async getMasterchainInfo() {
    return await this.doCall("getMasterchainInfo", {}, getMasterchain);
  }
  async getShards(seqno) {
    return await this.shardLoader.load(seqno);
  }
  async getBlockTransactions(workchain, seqno, shard) {
    return await this.shardTransactionsLoader.load({ workchain, seqno, shard });
  }
  async getTransaction(address, lt, hash2) {
    let convHash = buffer$1.Buffer.from(hash2, "base64").toString("hex");
    let res = await this.doCall("getTransactions", { address: address.toString(), lt, hash: convHash, limit: 1 }, getTransactions);
    let ex = res.find((v2) => v2.transaction_id.lt === lt && v2.transaction_id.hash === hash2);
    if (ex) {
      return ex;
    } else {
      return null;
    }
  }
  async callGetMethod(address, method, stack) {
    return await this.doCall("runGetMethod", { address: address.toString(), method, stack: serializeStack(stack) }, callGetMethod);
  }
  async sendBoc(body) {
    await this.doCall("sendBoc", { boc: body.toString("base64") }, bocResponse);
  }
  async estimateFee(address, args) {
    return await this.doCall("estimateFee", {
      address: address.toString(),
      body: args.body.toBoc().toString("base64"),
      "init_data": args.initData ? args.initData.toBoc().toString("base64") : "",
      "init_code": args.initCode ? args.initCode.toBoc().toString("base64") : "",
      ignore_chksig: args.ignoreSignature
    }, feeResponse);
  }
  async doCall(method, body, codec) {
    let headers = {
      "Content-Type": "application/json",
      "X-Ton-Client-Version": version
    };
    if (this.parameters.apiKey) {
      headers["X-API-Key"] = this.parameters.apiKey;
    }
    let res = await axios_1$1.default.post(this.endpoint, JSON.stringify({
      id: "1",
      jsonrpc: "2.0",
      method,
      params: body
    }), {
      headers,
      timeout: this.parameters.timeout
    });
    if (res.status !== 200 || !res.data.ok) {
      throw Error("Received error: " + JSON.stringify(res.data));
    }
    let decoded = codec.decode(res.data.result);
    if ((0, Either_1.isRight)(decoded)) {
      return decoded.right;
    } else {
      throw Error("Malformed response: " + io_ts_reporters_1.default.report(decoded).join(", "));
    }
  }
}
HttpApi$1.HttpApi = HttpApi;
function serializeStack(src2) {
  let stack = [];
  for (let s2 of src2) {
    if (s2.type === "int") {
      stack.push(["num", s2.value.toString()]);
    } else if (s2.type === "cell") {
      stack.push(["tvm.Cell", s2.cell.toBoc().toString("base64")]);
    } else if (s2.type === "slice") {
      stack.push(["tvm.Slice", s2.cell.toBoc().toString("base64")]);
    } else if (s2.type === "builder") {
      stack.push(["tvm.Builder", s2.cell.toBoc().toString("base64")]);
    } else {
      throw Error("Unsupported stack item type: " + s2.type);
    }
  }
  return stack;
}
var TonClient$1 = {};
var __classPrivateFieldSet$1 = commonjsGlobal && commonjsGlobal.__classPrivateFieldSet || function(receiver, state2, value, kind, f2) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state2 === "function" ? receiver !== state2 || !f2 : !state2.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state2.set(receiver, value), value;
};
var __classPrivateFieldGet$1 = commonjsGlobal && commonjsGlobal.__classPrivateFieldGet || function(receiver, state2, kind, f2) {
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state2 === "function" ? receiver !== state2 || !f2 : !state2.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state2.get(receiver);
};
var _TonClient_api;
Object.defineProperty(TonClient$1, "__esModule", { value: true });
TonClient$1.TonClient = void 0;
const HttpApi_1 = HttpApi$1;
const ton_core_1$b = dist$1;
class TonClient {
  constructor(parameters) {
    _TonClient_api.set(this, void 0);
    this.parameters = {
      endpoint: parameters.endpoint
    };
    __classPrivateFieldSet$1(this, _TonClient_api, new HttpApi_1.HttpApi(this.parameters.endpoint, {
      timeout: parameters.timeout,
      apiKey: parameters.apiKey,
      adapter: parameters.httpAdapter
    }), "f");
  }
  /**
   * Get Address Balance
   * @param address address for balance check
   * @returns balance
   */
  async getBalance(address) {
    return (await this.getContractState(address)).balance;
  }
  /**
   * Invoke get method
   * @param address contract address
   * @param name name of method
   * @param params optional parameters
   * @returns stack and gas_used field
   */
  async callGetMethod(address, name2, stack = []) {
    let res = await __classPrivateFieldGet$1(this, _TonClient_api, "f").callGetMethod(address, name2, stack);
    if (res.exit_code !== 0) {
      throw Error("Unable to execute get method. Got exit_code: " + res.exit_code);
    }
    return { gas_used: res.gas_used, stack: parseStack(res.stack) };
  }
  /**
   * Invoke get method that returns error code instead of throwing error
   * @param address contract address
   * @param name name of method
   * @param params optional parameters
   * @returns stack and gas_used field
  */
  async callGetMethodWithError(address, name2, params = []) {
    let res = await __classPrivateFieldGet$1(this, _TonClient_api, "f").callGetMethod(address, name2, params);
    return { gas_used: res.gas_used, stack: parseStack(res.stack), exit_code: res.exit_code };
  }
  /**
   * Get transactions
   * @param address address
   */
  async getTransactions(address, opts) {
    let tx = await __classPrivateFieldGet$1(this, _TonClient_api, "f").getTransactions(address, opts);
    let res = [];
    for (let r2 of tx) {
      res.push((0, ton_core_1$b.loadTransaction)(ton_core_1$b.Cell.fromBoc(buffer$1.Buffer.from(r2.data, "base64"))[0].beginParse()));
    }
    return res;
  }
  /**
   * Get transaction by it's id
   * @param address address
   * @param lt logical time
   * @param hash transaction hash
   * @returns transaction or null if not exist
   */
  async getTransaction(address, lt, hash2) {
    let res = await __classPrivateFieldGet$1(this, _TonClient_api, "f").getTransaction(address, lt, hash2);
    if (res) {
      return (0, ton_core_1$b.loadTransaction)(ton_core_1$b.Cell.fromBoc(buffer$1.Buffer.from(res.data, "base64"))[0].beginParse());
    } else {
      return null;
    }
  }
  /**
   * Fetch latest masterchain info
   * @returns masterchain info
   */
  async getMasterchainInfo() {
    let r2 = await __classPrivateFieldGet$1(this, _TonClient_api, "f").getMasterchainInfo();
    return {
      workchain: r2.init.workchain,
      shard: r2.last.shard,
      initSeqno: r2.init.seqno,
      latestSeqno: r2.last.seqno
    };
  }
  /**
   * Fetch latest workchain shards
   * @param seqno masterchain seqno
   */
  async getWorkchainShards(seqno) {
    let r2 = await __classPrivateFieldGet$1(this, _TonClient_api, "f").getShards(seqno);
    return r2.map((m2) => ({
      workchain: m2.workchain,
      shard: m2.shard,
      seqno: m2.seqno
    }));
  }
  /**
   * Fetch transactions inf shards
   * @param workchain
   * @param seqno
   * @param shard
   */
  async getShardTransactions(workchain, seqno, shard) {
    let tx = await __classPrivateFieldGet$1(this, _TonClient_api, "f").getBlockTransactions(workchain, seqno, shard);
    if (tx.incomplete) {
      throw Error("Unsupported");
    }
    return tx.transactions.map((v2) => ({
      account: ton_core_1$b.Address.parseRaw(v2.account),
      lt: v2.lt,
      hash: v2.hash
    }));
  }
  /**
   * Send message to a network
   * @param src source message
   */
  async sendMessage(src2) {
    const boc = (0, ton_core_1$b.beginCell)().store((0, ton_core_1$b.storeMessage)(src2)).endCell().toBoc();
    await __classPrivateFieldGet$1(this, _TonClient_api, "f").sendBoc(boc);
  }
  /**
   * Send file to a network
   * @param src source file
   */
  async sendFile(src2) {
    await __classPrivateFieldGet$1(this, _TonClient_api, "f").sendBoc(src2);
  }
  /**
   * Estimate fees for external message
   * @param address target address
   * @returns
   */
  async estimateExternalMessageFee(address, args) {
    return await __classPrivateFieldGet$1(this, _TonClient_api, "f").estimateFee(address, { body: args.body, initCode: args.initCode, initData: args.initData, ignoreSignature: args.ignoreSignature });
  }
  /**
   * Send external message to contract
   * @param contract contract to send message
   * @param src message body
   */
  async sendExternalMessage(contract, src2) {
    if (await this.isContractDeployed(contract.address) || !contract.init) {
      const message2 = (0, ton_core_1$b.external)({
        to: contract.address,
        body: src2
      });
      await this.sendMessage(message2);
    } else {
      const message2 = (0, ton_core_1$b.external)({
        to: contract.address,
        init: { code: contract.init.code, data: contract.init.data },
        body: src2
      });
      await this.sendMessage(message2);
    }
  }
  /**
   * Check if contract is deployed
   * @param address addres to check
   * @returns true if contract is in active state
   */
  async isContractDeployed(address) {
    return (await this.getContractState(address)).state === "active";
  }
  /**
   * Resolves contract state
   * @param address contract address
   */
  async getContractState(address) {
    let info = await __classPrivateFieldGet$1(this, _TonClient_api, "f").getAddressInformation(address);
    let balance = BigInt(info.balance);
    let state2 = info.state;
    return {
      balance,
      state: state2,
      code: info.code !== "" ? buffer$1.Buffer.from(info.code, "base64") : null,
      data: info.data !== "" ? buffer$1.Buffer.from(info.data, "base64") : null,
      lastTransaction: info.last_transaction_id.lt !== "0" ? {
        lt: info.last_transaction_id.lt,
        hash: info.last_transaction_id.hash
      } : null,
      blockId: {
        workchain: info.block_id.workchain,
        shard: info.block_id.shard,
        seqno: info.block_id.seqno
      },
      timestampt: info.sync_utime
    };
  }
  /**
   * Open contract
   * @param src source contract
   * @returns contract
   */
  open(src2) {
    return (0, ton_core_1$b.openContract)(src2, (args) => createProvider$1(this, args.address, args.init));
  }
  /**
   * Create a provider
   * @param address address
   * @param init optional init
   * @returns provider
   */
  provider(address, init2) {
    return createProvider$1(this, address, init2);
  }
}
TonClient$1.TonClient = TonClient;
_TonClient_api = /* @__PURE__ */ new WeakMap();
function parseStack(src2) {
  let stack = [];
  for (let s2 of src2) {
    if (s2[0] === "num") {
      let val = s2[1];
      if (val.startsWith("-")) {
        stack.push({ type: "int", value: -BigInt(val.slice(1)) });
      } else {
        stack.push({ type: "int", value: BigInt(val) });
      }
    } else if (s2[0] === "null") {
      stack.push({ type: "null" });
    } else if (s2[0] === "cell") {
      stack.push({ type: "cell", cell: ton_core_1$b.Cell.fromBoc(buffer$1.Buffer.from(s2[1].bytes, "base64"))[0] });
    } else if (s2[0] === "slice") {
      stack.push({ type: "slice", cell: ton_core_1$b.Cell.fromBoc(buffer$1.Buffer.from(s2[1].bytes, "base64"))[0] });
    } else if (s2[0] === "builder") {
      stack.push({ type: "builder", cell: ton_core_1$b.Cell.fromBoc(buffer$1.Buffer.from(s2[1].bytes, "base64"))[0] });
    } else {
      throw Error("Unsupported stack item type: " + s2[0]);
    }
  }
  return new ton_core_1$b.TupleReader(stack);
}
function createProvider$1(client2, address, init2) {
  return {
    async getState() {
      let state2 = await client2.getContractState(address);
      let balance = state2.balance;
      let last2 = state2.lastTransaction ? { lt: BigInt(state2.lastTransaction.lt), hash: buffer$1.Buffer.from(state2.lastTransaction.hash, "base64") } : null;
      let storage;
      if (state2.state === "active") {
        storage = {
          type: "active",
          code: state2.code ? state2.code : null,
          data: state2.data ? state2.data : null
        };
      } else if (state2.state === "uninitialized") {
        storage = {
          type: "uninit"
        };
      } else if (state2.state === "frozen") {
        storage = {
          type: "frozen",
          stateHash: buffer$1.Buffer.alloc(0)
        };
      } else {
        throw Error("Unsupported state");
      }
      return {
        balance,
        last: last2,
        state: storage
      };
    },
    async get(name2, args) {
      let method = await client2.callGetMethod(address, name2, args);
      return { stack: method.stack };
    },
    async external(message2) {
      let neededInit = null;
      if (init2 && !await client2.isContractDeployed(address)) {
        neededInit = init2;
      }
      const ext = (0, ton_core_1$b.external)({
        to: address,
        init: neededInit ? { code: neededInit.code, data: neededInit.data } : null,
        body: message2
      });
      let boc = (0, ton_core_1$b.beginCell)().store((0, ton_core_1$b.storeMessage)(ext)).endCell().toBoc();
      await client2.sendFile(boc);
    },
    async internal(via, message2) {
      let neededInit = null;
      if (init2 && !await client2.isContractDeployed(address)) {
        neededInit = init2;
      }
      let bounce = true;
      if (message2.bounce !== null && message2.bounce !== void 0) {
        bounce = message2.bounce;
      }
      let value;
      if (typeof message2.value === "string") {
        value = (0, ton_core_1$b.toNano)(message2.value);
      } else {
        value = message2.value;
      }
      let body = null;
      if (typeof message2.body === "string") {
        body = (0, ton_core_1$b.comment)(message2.body);
      } else if (message2.body) {
        body = message2.body;
      }
      await via.send({
        to: address,
        value,
        bounce,
        sendMode: message2.sendMode,
        init: neededInit,
        body
      });
    }
  };
}
var TonClient4$1 = {};
var toUrlSafe$1 = {};
Object.defineProperty(toUrlSafe$1, "__esModule", { value: true });
toUrlSafe$1.toUrlSafe = void 0;
function toUrlSafe(src2) {
  while (src2.indexOf("/") >= 0) {
    src2 = src2.replace("/", "_");
  }
  while (src2.indexOf("+") >= 0) {
    src2 = src2.replace("+", "-");
  }
  while (src2.indexOf("=") >= 0) {
    src2 = src2.replace("=", "");
  }
  return src2;
}
toUrlSafe$1.toUrlSafe = toUrlSafe;
var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
  if (k22 === void 0)
    k22 = k2;
  Object.defineProperty(o2, k22, { enumerable: true, get: function() {
    return m2[k2];
  } });
} : function(o2, m2, k2, k22) {
  if (k22 === void 0)
    k22 = k2;
  o2[k22] = m2[k2];
});
var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
  Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
} : function(o2, v2) {
  o2["default"] = v2;
});
var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k2 in mod)
      if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
        __createBinding(result, mod, k2);
  }
  __setModuleDefault(result, mod);
  return result;
};
var __classPrivateFieldSet = commonjsGlobal && commonjsGlobal.__classPrivateFieldSet || function(receiver, state2, value, kind, f2) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state2 === "function" ? receiver !== state2 || !f2 : !state2.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state2.set(receiver, value), value;
};
var __classPrivateFieldGet = commonjsGlobal && commonjsGlobal.__classPrivateFieldGet || function(receiver, state2, kind, f2) {
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state2 === "function" ? receiver !== state2 || !f2 : !state2.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state2.get(receiver);
};
var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
var _TonClient4_endpoint, _TonClient4_timeout, _TonClient4_adapter;
Object.defineProperty(TonClient4$1, "__esModule", { value: true });
TonClient4$1.TonClient4 = void 0;
const axios_1 = __importDefault(axios);
const t = __importStar(require$$1$1);
const ton_core_1$a = dist$1;
const toUrlSafe_1 = toUrlSafe$1;
class TonClient4 {
  constructor(args) {
    _TonClient4_endpoint.set(this, void 0);
    _TonClient4_timeout.set(this, void 0);
    _TonClient4_adapter.set(this, void 0);
    __classPrivateFieldSet(this, _TonClient4_endpoint, args.endpoint, "f");
    __classPrivateFieldSet(this, _TonClient4_timeout, args.timeout || 5e3, "f");
    __classPrivateFieldSet(this, _TonClient4_adapter, args.httpAdapter, "f");
  }
  /**
   * Get Last Block
   * @returns last block info
   */
  async getLastBlock() {
    let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + "/block/latest", { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
    if (!lastBlockCodec.is(res.data)) {
      throw Error("Mailformed response");
    }
    return res.data;
  }
  /**
   * Get block info
   * @param seqno block sequence number
   * @returns block info
   */
  async getBlock(seqno) {
    let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + "/block/" + seqno, { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
    if (!blockCodec.is(res.data)) {
      throw Error("Mailformed response");
    }
    if (!res.data.exist) {
      throw Error("Block is out of scope");
    }
    return res.data.block;
  }
  /**
   * Get block info by unix timestamp
   * @param ts unix timestamp
   * @returns block info
   */
  async getBlockByUtime(ts) {
    let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + "/block/utime/" + ts, { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
    if (!blockCodec.is(res.data)) {
      throw Error("Mailformed response");
    }
    if (!res.data.exist) {
      throw Error("Block is out of scope");
    }
    return res.data.block;
  }
  /**
   * Get block info by unix timestamp
   * @param seqno block sequence number
   * @param address account address
   * @returns account info
   */
  async getAccount(seqno, address) {
    let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + "/block/" + seqno + "/" + address.toString({ urlSafe: true }), { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
    if (!accountCodec.is(res.data)) {
      throw Error("Mailformed response");
    }
    return res.data;
  }
  /**
   * Get account lite info (without code and data)
   * @param seqno block sequence number
   * @param address account address
   * @returns account lite info
   */
  async getAccountLite(seqno, address) {
    let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + "/block/" + seqno + "/" + address.toString({ urlSafe: true }) + "/lite", { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
    if (!accountLiteCodec.is(res.data)) {
      throw Error("Mailformed response");
    }
    return res.data;
  }
  /**
   * Check if account was updated since
   * @param seqno block sequence number
   * @param address account address
   * @param lt account last transaction lt
   * @returns account change info
   */
  async isAccountChanged(seqno, address, lt) {
    let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + "/block/" + seqno + "/" + address.toString({ urlSafe: true }) + "/changed/" + lt.toString(10), { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
    if (!changedCodec.is(res.data)) {
      throw Error("Mailformed response");
    }
    return res.data;
  }
  /**
   * Load one unparsed account transaction
   * @param seqno block sequence number
   * @param address account address
   * @param lt account last transaction lt
   * @returns one unparsed transaction
   */
  async getTransaction(seqno, address, lt) {
    const urladdr = address.toString({ urlSafe: true });
    const urlpath = `/block/${seqno}/${urladdr}/tx/${lt.toString(10)}`;
    const res = await axios_1.default.get(new URL(urlpath, __classPrivateFieldGet(this, _TonClient4_endpoint, "f")).href, { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
    if (!transactionCodec.is(res.data))
      throw Error("Mailformed response");
    const txcell = ton_core_1$a.Cell.fromBoc(buffer$1.Buffer.from(res.data.boc, "base64"))[0];
    return { tx: (0, ton_core_1$a.loadTransaction)(txcell.beginParse()), ...res.data };
  }
  /**
   * Load unparsed account transactions
   * @param address address
   * @param lt last transaction lt
   * @param hash last transaction hash
   * @returns unparsed transactions
   */
  async getAccountTransactions(address, lt, hash2) {
    let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + "/account/" + address.toString({ urlSafe: true }) + "/tx/" + lt.toString(10) + "/" + (0, toUrlSafe_1.toUrlSafe)(hash2.toString("base64")), { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
    if (!transactionsCodec.is(res.data)) {
      throw Error("Mailformed response");
    }
    let data2 = res.data;
    let tx = [];
    let cells = ton_core_1$a.Cell.fromBoc(buffer$1.Buffer.from(data2.boc, "base64"));
    for (let i2 = 0; i2 < data2.blocks.length; i2++) {
      tx.push({
        block: data2.blocks[i2],
        tx: (0, ton_core_1$a.loadTransaction)(cells[i2].beginParse())
      });
    }
    return tx;
  }
  /**
   * Get network config
   * @param seqno block sequence number
   * @param ids optional config ids
   * @returns network config
   */
  async getConfig(seqno, ids) {
    let tail2 = "";
    if (ids && ids.length > 0) {
      tail2 = "/" + [...ids].sort().join(",");
    }
    let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + "/block/" + seqno + "/config" + tail2, { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
    if (!configCodec.is(res.data)) {
      throw Error("Mailformed response");
    }
    return res.data;
  }
  /**
   * Execute run method
   * @param seqno block sequence number
   * @param address account address
   * @param name method name
   * @param args method arguments
   * @returns method result
   */
  async runMethod(seqno, address, name2, args) {
    let tail2 = args && args.length > 0 ? "/" + (0, toUrlSafe_1.toUrlSafe)((0, ton_core_1$a.serializeTuple)(args).toBoc({ idx: false, crc32: false }).toString("base64")) : "";
    let url = __classPrivateFieldGet(this, _TonClient4_endpoint, "f") + "/block/" + seqno + "/" + address.toString({ urlSafe: true }) + "/run/" + name2 + tail2;
    let res = await axios_1.default.get(url, { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
    if (!runMethodCodec.is(res.data)) {
      throw Error("Mailformed response");
    }
    return {
      exitCode: res.data.exitCode,
      result: res.data.resultRaw ? (0, ton_core_1$a.parseTuple)(ton_core_1$a.Cell.fromBoc(buffer$1.Buffer.from(res.data.resultRaw, "base64"))[0]) : [],
      resultRaw: res.data.resultRaw,
      block: res.data.block,
      shardBlock: res.data.shardBlock
    };
  }
  /**
   * Send external message
   * @param message message boc
   * @returns message status
   */
  async sendMessage(message2) {
    let res = await axios_1.default.post(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + "/send", { boc: message2.toString("base64") }, { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
    if (!sendCodec.is(res.data)) {
      throw Error("Mailformed response");
    }
    return { status: res.data.status };
  }
  /**
   * Open smart contract
   * @param contract contract
   * @returns opened contract
   */
  open(contract) {
    return (0, ton_core_1$a.openContract)(contract, (args) => createProvider(this, null, args.address, args.init));
  }
  /**
   * Open smart contract
   * @param block block number
   * @param contract contract
   * @returns opened contract
   */
  openAt(block, contract) {
    return (0, ton_core_1$a.openContract)(contract, (args) => createProvider(this, block, args.address, args.init));
  }
  /**
   * Create provider
   * @param address address
   * @param init optional init data
   * @returns provider
   */
  provider(address, init2) {
    return createProvider(this, null, address, init2 ? init2 : null);
  }
  /**
   * Create provider at specified block number
   * @param block block number
   * @param address address
   * @param init optional init data
   * @returns provider
   */
  providerAt(block, address, init2) {
    return createProvider(this, block, address, init2 ? init2 : null);
  }
}
TonClient4$1.TonClient4 = TonClient4;
_TonClient4_endpoint = /* @__PURE__ */ new WeakMap(), _TonClient4_timeout = /* @__PURE__ */ new WeakMap(), _TonClient4_adapter = /* @__PURE__ */ new WeakMap();
function createProvider(client2, block, address, init2) {
  return {
    async getState() {
      let sq = block;
      if (sq === null) {
        let res = await client2.getLastBlock();
        sq = res.last.seqno;
      }
      let state2 = await client2.getAccount(sq, address);
      let last2 = state2.account.last ? { lt: BigInt(state2.account.last.lt), hash: buffer$1.Buffer.from(state2.account.last.hash, "base64") } : null;
      let storage;
      if (state2.account.state.type === "active") {
        storage = {
          type: "active",
          code: state2.account.state.code ? buffer$1.Buffer.from(state2.account.state.code, "base64") : null,
          data: state2.account.state.data ? buffer$1.Buffer.from(state2.account.state.data, "base64") : null
        };
      } else if (state2.account.state.type === "uninit") {
        storage = {
          type: "uninit"
        };
      } else if (state2.account.state.type === "frozen") {
        storage = {
          type: "frozen",
          stateHash: buffer$1.Buffer.from(state2.account.state.stateHash, "base64")
        };
      } else {
        throw Error("Unsupported state");
      }
      return {
        balance: BigInt(state2.account.balance.coins),
        last: last2,
        state: storage
      };
    },
    async get(name2, args) {
      let sq = block;
      if (sq === null) {
        let res = await client2.getLastBlock();
        sq = res.last.seqno;
      }
      let method = await client2.runMethod(sq, address, name2, args);
      if (method.exitCode !== 0 && method.exitCode !== 1) {
        throw Error("Exit code: " + method.exitCode);
      }
      return {
        stack: new ton_core_1$a.TupleReader(method.result)
      };
    },
    async external(message2) {
      let last2 = await client2.getLastBlock();
      let neededInit = null;
      if (init2 && (await client2.getAccountLite(last2.last.seqno, address)).account.state.type !== "active") {
        neededInit = init2;
      }
      const ext = (0, ton_core_1$a.external)({
        to: address,
        init: neededInit ? { code: neededInit.code, data: neededInit.data } : null,
        body: message2
      });
      let pkg = (0, ton_core_1$a.beginCell)().store((0, ton_core_1$a.storeMessage)(ext)).endCell().toBoc();
      await client2.sendMessage(pkg);
    },
    async internal(via, message2) {
      let last2 = await client2.getLastBlock();
      let neededInit = null;
      if (init2 && (await client2.getAccountLite(last2.last.seqno, address)).account.state.type !== "active") {
        neededInit = init2;
      }
      let bounce = true;
      if (message2.bounce !== null && message2.bounce !== void 0) {
        bounce = message2.bounce;
      }
      let value;
      if (typeof message2.value === "string") {
        value = (0, ton_core_1$a.toNano)(message2.value);
      } else {
        value = message2.value;
      }
      let body = null;
      if (typeof message2.body === "string") {
        body = (0, ton_core_1$a.comment)(message2.body);
      } else if (message2.body) {
        body = message2.body;
      }
      await via.send({
        to: address,
        value,
        bounce,
        sendMode: message2.sendMode,
        init: neededInit,
        body
      });
    }
  };
}
const lastBlockCodec = t.type({
  last: t.type({
    seqno: t.number,
    shard: t.string,
    workchain: t.number,
    fileHash: t.string,
    rootHash: t.string
  }),
  init: t.type({
    fileHash: t.string,
    rootHash: t.string
  }),
  stateRootHash: t.string,
  now: t.number
});
const blockCodec = t.union([t.type({
  exist: t.literal(false)
}), t.type({
  exist: t.literal(true),
  block: t.type({
    shards: t.array(t.type({
      workchain: t.number,
      seqno: t.number,
      shard: t.string,
      rootHash: t.string,
      fileHash: t.string,
      transactions: t.array(t.type({
        account: t.string,
        hash: t.string,
        lt: t.string
      }))
    }))
  })
})]);
const storageStatCodec = t.type({
  lastPaid: t.number,
  duePayment: t.union([t.null, t.string]),
  used: t.type({
    bits: t.number,
    cells: t.number,
    publicCells: t.number
  })
});
const accountCodec = t.type({
  account: t.type({
    state: t.union([
      t.type({ type: t.literal("uninit") }),
      t.type({ type: t.literal("active"), code: t.union([t.string, t.null]), data: t.union([t.string, t.null]) }),
      t.type({ type: t.literal("frozen"), stateHash: t.string })
    ]),
    balance: t.type({
      coins: t.string
    }),
    last: t.union([
      t.null,
      t.type({
        lt: t.string,
        hash: t.string
      })
    ]),
    storageStat: t.union([t.null, storageStatCodec])
  }),
  block: t.type({
    workchain: t.number,
    seqno: t.number,
    shard: t.string,
    rootHash: t.string,
    fileHash: t.string
  })
});
const accountLiteCodec = t.type({
  account: t.type({
    state: t.union([
      t.type({ type: t.literal("uninit") }),
      t.type({ type: t.literal("active"), codeHash: t.string, dataHash: t.string }),
      t.type({ type: t.literal("frozen"), stateHash: t.string })
    ]),
    balance: t.type({
      coins: t.string
    }),
    last: t.union([
      t.null,
      t.type({
        lt: t.string,
        hash: t.string
      })
    ]),
    storageStat: t.union([t.null, storageStatCodec])
  })
});
const changedCodec = t.type({
  changed: t.boolean,
  block: t.type({
    workchain: t.number,
    seqno: t.number,
    shard: t.string,
    rootHash: t.string,
    fileHash: t.string
  })
});
const runMethodCodec = t.type({
  exitCode: t.number,
  resultRaw: t.union([t.string, t.null]),
  block: t.type({
    workchain: t.number,
    seqno: t.number,
    shard: t.string,
    rootHash: t.string,
    fileHash: t.string
  }),
  shardBlock: t.type({
    workchain: t.number,
    seqno: t.number,
    shard: t.string,
    rootHash: t.string,
    fileHash: t.string
  })
});
const configCodec = t.type({
  config: t.type({
    cell: t.string,
    address: t.string,
    globalBalance: t.type({
      coins: t.string
    })
  })
});
const sendCodec = t.type({
  status: t.number
});
const transactionsCodec = t.type({
  blocks: t.array(t.type({
    workchain: t.number,
    seqno: t.number,
    shard: t.string,
    rootHash: t.string,
    fileHash: t.string
  })),
  boc: t.string
});
const transactionCodec = t.type({
  block: t.type({
    workchain: t.number,
    seqno: t.number,
    shard: t.string,
    rootHash: t.string
  }),
  boc: t.string,
  proof: t.string
});
var WalletContractV1R1$1 = {};
var createWalletTransfer = {};
Object.defineProperty(createWalletTransfer, "__esModule", { value: true });
createWalletTransfer.createWalletTransferV4 = createWalletTransfer.createWalletTransferV3 = createWalletTransfer.createWalletTransferV2 = createWalletTransfer.createWalletTransferV1 = void 0;
const ton_core_1$9 = dist$1;
const ton_crypto_1 = requireDist();
function createWalletTransferV1(args) {
  let signingMessage = (0, ton_core_1$9.beginCell)().storeUint(args.seqno, 32);
  if (args.message) {
    signingMessage.storeUint(args.sendMode, 8);
    signingMessage.storeRef((0, ton_core_1$9.beginCell)().store((0, ton_core_1$9.storeMessageRelaxed)(args.message)));
  }
  let signature2 = (0, ton_crypto_1.sign)(signingMessage.endCell().hash(), args.secretKey);
  const body = (0, ton_core_1$9.beginCell)().storeBuffer(signature2).storeBuilder(signingMessage).endCell();
  return body;
}
createWalletTransfer.createWalletTransferV1 = createWalletTransferV1;
function createWalletTransferV2(args) {
  if (args.messages.length > 4) {
    throw new Error("Maximum number of messages in a single transfer is 4");
  }
  let signingMessage = (0, ton_core_1$9.beginCell)().storeUint(args.seqno, 32);
  if (args.seqno === 0) {
    for (let i2 = 0; i2 < 32; i2++) {
      signingMessage.storeBit(1);
    }
  } else {
    signingMessage.storeUint(args.timeout || Math.floor(Date.now() / 1e3) + 60, 32);
  }
  for (let m2 of args.messages) {
    signingMessage.storeUint(args.sendMode, 8);
    signingMessage.storeRef((0, ton_core_1$9.beginCell)().store((0, ton_core_1$9.storeMessageRelaxed)(m2)));
  }
  let signature2 = (0, ton_crypto_1.sign)(signingMessage.endCell().hash(), args.secretKey);
  const body = (0, ton_core_1$9.beginCell)().storeBuffer(signature2).storeBuilder(signingMessage).endCell();
  return body;
}
createWalletTransfer.createWalletTransferV2 = createWalletTransferV2;
function createWalletTransferV3(args) {
  if (args.messages.length > 4) {
    throw new Error("Maximum number of messages in a single transfer is 4");
  }
  let signingMessage = (0, ton_core_1$9.beginCell)().storeUint(args.walletId, 32);
  if (args.seqno === 0) {
    for (let i2 = 0; i2 < 32; i2++) {
      signingMessage.storeBit(1);
    }
  } else {
    signingMessage.storeUint(args.timeout || Math.floor(Date.now() / 1e3) + 60, 32);
  }
  signingMessage.storeUint(args.seqno, 32);
  for (let m2 of args.messages) {
    signingMessage.storeUint(args.sendMode, 8);
    signingMessage.storeRef((0, ton_core_1$9.beginCell)().store((0, ton_core_1$9.storeMessageRelaxed)(m2)));
  }
  let signature2 = (0, ton_crypto_1.sign)(signingMessage.endCell().hash(), args.secretKey);
  const body = (0, ton_core_1$9.beginCell)().storeBuffer(signature2).storeBuilder(signingMessage).endCell();
  return body;
}
createWalletTransfer.createWalletTransferV3 = createWalletTransferV3;
function createWalletTransferV4(args) {
  if (args.messages.length > 4) {
    throw new Error("Maximum number of messages in a single transfer is 4");
  }
  let signingMessage = (0, ton_core_1$9.beginCell)().storeUint(args.walletId, 32);
  if (args.seqno === 0) {
    for (let i2 = 0; i2 < 32; i2++) {
      signingMessage.storeBit(1);
    }
  } else {
    signingMessage.storeUint(args.timeout || Math.floor(Date.now() / 1e3) + 60, 32);
  }
  signingMessage.storeUint(args.seqno, 32);
  signingMessage.storeUint(0, 8);
  for (let m2 of args.messages) {
    signingMessage.storeUint(args.sendMode, 8);
    signingMessage.storeRef((0, ton_core_1$9.beginCell)().store((0, ton_core_1$9.storeMessageRelaxed)(m2)));
  }
  let signature2 = (0, ton_crypto_1.sign)(signingMessage.endCell().hash(), args.secretKey);
  const body = (0, ton_core_1$9.beginCell)().storeBuffer(signature2).storeBuilder(signingMessage).endCell();
  return body;
}
createWalletTransfer.createWalletTransferV4 = createWalletTransferV4;
Object.defineProperty(WalletContractV1R1$1, "__esModule", { value: true });
WalletContractV1R1$1.WalletContractV1R1 = void 0;
const ton_core_1$8 = dist$1;
const createWalletTransfer_1$7 = createWalletTransfer;
class WalletContractV1R1 {
  constructor(workchain, publicKey) {
    this.workchain = workchain;
    this.publicKey = publicKey;
    let code2 = ton_core_1$8.Cell.fromBoc(buffer$1.Buffer.from("te6cckEBAQEARAAAhP8AIN2k8mCBAgDXGCDXCx/tRNDTH9P/0VESuvKhIvkBVBBE+RDyovgAAdMfMSDXSpbTB9QC+wDe0aTIyx/L/8ntVEH98Ik=", "base64"))[0];
    let data2 = (0, ton_core_1$8.beginCell)().storeUint(0, 32).storeBuffer(publicKey).endCell();
    this.init = { code: code2, data: data2 };
    this.address = (0, ton_core_1$8.contractAddress)(workchain, { code: code2, data: data2 });
  }
  static create(args) {
    return new WalletContractV1R1(args.workchain, args.publicKey);
  }
  /**
   * Get Wallet Balance
   */
  async getBalance(provider) {
    let state2 = await provider.getState();
    return state2.balance;
  }
  /**
   * Get Wallet Seqno
   */
  async getSeqno(provider) {
    let state2 = await provider.getState();
    if (state2.state.type === "active") {
      return ton_core_1$8.Cell.fromBoc(state2.state.data)[0].beginParse().loadUint(32);
    } else {
      return 0;
    }
  }
  /**
   * Send signed transfer
   */
  async send(provider, message2) {
    await provider.external(message2);
  }
  /**
   * Sign and send transfer
   */
  async sendTransfer(provider, args) {
    let transfer = this.createTransfer(args);
    await this.send(provider, transfer);
  }
  /**
   * Create signed transfer
   */
  createTransfer(args) {
    let sendMode = ton_core_1$8.SendMode.PAY_GAS_SEPARATLY;
    if (args.sendMode !== null && args.sendMode !== void 0) {
      sendMode = args.sendMode;
    }
    return (0, createWalletTransfer_1$7.createWalletTransferV1)({
      seqno: args.seqno,
      sendMode,
      secretKey: args.secretKey,
      message: args.message
    });
  }
  /**
   * Create sender
   */
  sender(provider, secretKey) {
    return {
      send: async (args) => {
        let seqno = await this.getSeqno(provider);
        let transfer = this.createTransfer({
          seqno,
          secretKey,
          sendMode: args.sendMode,
          message: (0, ton_core_1$8.internal)({
            to: args.to,
            value: args.value,
            init: args.init,
            body: args.body,
            bounce: args.bounce
          })
        });
        await this.send(provider, transfer);
      }
    };
  }
}
WalletContractV1R1$1.WalletContractV1R1 = WalletContractV1R1;
var WalletContractV1R2$1 = {};
Object.defineProperty(WalletContractV1R2$1, "__esModule", { value: true });
WalletContractV1R2$1.WalletContractV1R2 = void 0;
const ton_core_1$7 = dist$1;
const createWalletTransfer_1$6 = createWalletTransfer;
class WalletContractV1R2 {
  constructor(workchain, publicKey) {
    this.workchain = workchain;
    this.publicKey = publicKey;
    let code2 = ton_core_1$7.Cell.fromBoc(buffer$1.Buffer.from("te6cckEBAQEAUwAAov8AIN0gggFMl7qXMO1E0NcLH+Ck8mCBAgDXGCDXCx/tRNDTH9P/0VESuvKhIvkBVBBE+RDyovgAAdMfMSDXSpbTB9QC+wDe0aTIyx/L/8ntVNDieG8=", "base64"))[0];
    let data2 = (0, ton_core_1$7.beginCell)().storeUint(0, 32).storeBuffer(publicKey).endCell();
    this.init = { code: code2, data: data2 };
    this.address = (0, ton_core_1$7.contractAddress)(workchain, { code: code2, data: data2 });
  }
  static create(args) {
    return new WalletContractV1R2(args.workchain, args.publicKey);
  }
  /**
   * Get Wallet Balance
   */
  async getBalance(provider) {
    let state2 = await provider.getState();
    return state2.balance;
  }
  /**
   * Get Wallet Seqno
   */
  async getSeqno(provider) {
    let state2 = await provider.getState();
    if (state2.state.type === "active") {
      let res = await provider.get("seqno", []);
      return res.stack.readNumber();
    } else {
      return 0;
    }
  }
  /**
   * Send signed transfer
   */
  async send(provider, message2) {
    await provider.external(message2);
  }
  /**
   * Sign and send transfer
   */
  async sendTransfer(provider, args) {
    let transfer = this.createTransfer(args);
    await this.send(provider, transfer);
  }
  /**
   * Create signed transfer
   */
  createTransfer(args) {
    let sendMode = ton_core_1$7.SendMode.PAY_GAS_SEPARATLY;
    if (args.sendMode !== null && args.sendMode !== void 0) {
      sendMode = args.sendMode;
    }
    return (0, createWalletTransfer_1$6.createWalletTransferV1)({
      seqno: args.seqno,
      sendMode,
      secretKey: args.secretKey,
      message: args.message
    });
  }
  /**
   * Create sender
   */
  sender(provider, secretKey) {
    return {
      send: async (args) => {
        let seqno = await this.getSeqno(provider);
        let transfer = this.createTransfer({
          seqno,
          secretKey,
          sendMode: args.sendMode,
          message: (0, ton_core_1$7.internal)({
            to: args.to,
            value: args.value,
            init: args.init,
            body: args.body,
            bounce: args.bounce
          })
        });
        await this.send(provider, transfer);
      }
    };
  }
}
WalletContractV1R2$1.WalletContractV1R2 = WalletContractV1R2;
var WalletContractV1R3$1 = {};
Object.defineProperty(WalletContractV1R3$1, "__esModule", { value: true });
WalletContractV1R3$1.WalletContractV1R3 = void 0;
const ton_core_1$6 = dist$1;
const createWalletTransfer_1$5 = createWalletTransfer;
class WalletContractV1R3 {
  constructor(workchain, publicKey) {
    this.workchain = workchain;
    this.publicKey = publicKey;
    let code2 = ton_core_1$6.Cell.fromBoc(buffer$1.Buffer.from("te6cckEBAQEAXwAAuv8AIN0gggFMl7ohggEznLqxnHGw7UTQ0x/XC//jBOCk8mCBAgDXGCDXCx/tRNDTH9P/0VESuvKhIvkBVBBE+RDyovgAAdMfMSDXSpbTB9QC+wDe0aTIyx/L/8ntVLW4bkI=", "base64"))[0];
    let data2 = (0, ton_core_1$6.beginCell)().storeUint(0, 32).storeBuffer(publicKey).endCell();
    this.init = { code: code2, data: data2 };
    this.address = (0, ton_core_1$6.contractAddress)(workchain, { code: code2, data: data2 });
  }
  static create(args) {
    return new WalletContractV1R3(args.workchain, args.publicKey);
  }
  /**
   * Get Wallet Balance
   */
  async getBalance(provider) {
    let state2 = await provider.getState();
    return state2.balance;
  }
  /**
   * Get Wallet Seqno
   */
  async getSeqno(provider) {
    let state2 = await provider.getState();
    if (state2.state.type === "active") {
      let res = await provider.get("seqno", []);
      return res.stack.readNumber();
    } else {
      return 0;
    }
  }
  /**
   * Send signed transfer
   */
  async send(executor, message2) {
    await executor.external(message2);
  }
  /**
   * Sign and send transfer
   */
  async sendTransfer(provider, args) {
    let transfer = this.createTransfer(args);
    await this.send(provider, transfer);
  }
  /**
   * Create signed transfer
   */
  createTransfer(args) {
    let sendMode = ton_core_1$6.SendMode.PAY_GAS_SEPARATLY;
    if (args.sendMode !== null && args.sendMode !== void 0) {
      sendMode = args.sendMode;
    }
    return (0, createWalletTransfer_1$5.createWalletTransferV1)({
      seqno: args.seqno,
      sendMode,
      secretKey: args.secretKey,
      message: args.message
    });
  }
  /**
   * Create sender
   */
  sender(provider, secretKey) {
    return {
      send: async (args) => {
        let seqno = await this.getSeqno(provider);
        let transfer = this.createTransfer({
          seqno,
          secretKey,
          sendMode: args.sendMode,
          message: (0, ton_core_1$6.internal)({
            to: args.to,
            value: args.value,
            init: args.init,
            body: args.body,
            bounce: args.bounce
          })
        });
        await this.send(provider, transfer);
      }
    };
  }
}
WalletContractV1R3$1.WalletContractV1R3 = WalletContractV1R3;
var WalletContractV2R1$1 = {};
Object.defineProperty(WalletContractV2R1$1, "__esModule", { value: true });
WalletContractV2R1$1.WalletContractV2R1 = void 0;
const ton_core_1$5 = dist$1;
const createWalletTransfer_1$4 = createWalletTransfer;
class WalletContractV2R1 {
  constructor(workchain, publicKey) {
    this.workchain = workchain;
    this.publicKey = publicKey;
    let code2 = ton_core_1$5.Cell.fromBoc(buffer$1.Buffer.from("te6cckEBAQEAVwAAqv8AIN0gggFMl7qXMO1E0NcLH+Ck8mCDCNcYINMf0x8B+CO78mPtRNDTH9P/0VExuvKhA/kBVBBC+RDyovgAApMg10qW0wfUAvsA6NGkyMsfy//J7VShNwu2", "base64"))[0];
    let data2 = (0, ton_core_1$5.beginCell)().storeUint(0, 32).storeBuffer(publicKey).endCell();
    this.init = { code: code2, data: data2 };
    this.address = (0, ton_core_1$5.contractAddress)(workchain, { code: code2, data: data2 });
  }
  static create(args) {
    return new WalletContractV2R1(args.workchain, args.publicKey);
  }
  /**
   * Get Wallet Balance
   */
  async getBalance(provider) {
    let state2 = await provider.getState();
    return state2.balance;
  }
  /**
   * Get Wallet Seqno
   */
  async getSeqno(provider) {
    let state2 = await provider.getState();
    if (state2.state.type === "active") {
      let res = await provider.get("seqno", []);
      return res.stack.readNumber();
    } else {
      return 0;
    }
  }
  /**
   * Send signed transfer
   */
  async send(provider, message2) {
    await provider.external(message2);
  }
  /**
   * Sign and send transfer
   */
  async sendTransfer(provider, args) {
    let transfer = this.createTransfer(args);
    await this.send(provider, transfer);
  }
  /**
   * Create signed transfer
   */
  createTransfer(args) {
    let sendMode = ton_core_1$5.SendMode.PAY_GAS_SEPARATLY;
    if (args.sendMode !== null && args.sendMode !== void 0) {
      sendMode = args.sendMode;
    }
    return (0, createWalletTransfer_1$4.createWalletTransferV2)({
      seqno: args.seqno,
      sendMode,
      secretKey: args.secretKey,
      messages: args.messages,
      timeout: args.timeout
    });
  }
  /**
   * Create sender
   */
  sender(provider, secretKey) {
    return {
      send: async (args) => {
        let seqno = await this.getSeqno(provider);
        let transfer = this.createTransfer({
          seqno,
          secretKey,
          sendMode: args.sendMode,
          messages: [(0, ton_core_1$5.internal)({
            to: args.to,
            value: args.value,
            init: args.init,
            body: args.body,
            bounce: args.bounce
          })]
        });
        await this.send(provider, transfer);
      }
    };
  }
}
WalletContractV2R1$1.WalletContractV2R1 = WalletContractV2R1;
var WalletContractV2R2$1 = {};
Object.defineProperty(WalletContractV2R2$1, "__esModule", { value: true });
WalletContractV2R2$1.WalletContractV2R2 = void 0;
const ton_core_1$4 = dist$1;
const createWalletTransfer_1$3 = createWalletTransfer;
class WalletContractV2R2 {
  constructor(workchain, publicKey) {
    this.workchain = workchain;
    this.publicKey = publicKey;
    let code2 = ton_core_1$4.Cell.fromBoc(buffer$1.Buffer.from("te6cckEBAQEAYwAAwv8AIN0gggFMl7ohggEznLqxnHGw7UTQ0x/XC//jBOCk8mCDCNcYINMf0x8B+CO78mPtRNDTH9P/0VExuvKhA/kBVBBC+RDyovgAApMg10qW0wfUAvsA6NGkyMsfy//J7VQETNeh", "base64"))[0];
    let data2 = (0, ton_core_1$4.beginCell)().storeUint(0, 32).storeBuffer(publicKey).endCell();
    this.init = { code: code2, data: data2 };
    this.address = (0, ton_core_1$4.contractAddress)(workchain, { code: code2, data: data2 });
  }
  static create(args) {
    return new WalletContractV2R2(args.workchain, args.publicKey);
  }
  /**
   * Get Wallet Balance
   */
  async getBalance(provider) {
    let state2 = await provider.getState();
    return state2.balance;
  }
  /**
   * Get Wallet Seqno
   */
  async getSeqno(provider) {
    let state2 = await provider.getState();
    if (state2.state.type === "active") {
      let res = await provider.get("seqno", []);
      return res.stack.readNumber();
    } else {
      return 0;
    }
  }
  /**
   * Send signed transfer
   */
  async send(provider, message2) {
    await provider.external(message2);
  }
  /**
   * Sign and send transfer
   */
  async sendTransfer(provider, args) {
    let transfer = this.createTransfer(args);
    await this.send(provider, transfer);
  }
  /**
   * Create signed transfer
   */
  createTransfer(args) {
    let sendMode = ton_core_1$4.SendMode.PAY_GAS_SEPARATLY;
    if (args.sendMode !== null && args.sendMode !== void 0) {
      sendMode = args.sendMode;
    }
    return (0, createWalletTransfer_1$3.createWalletTransferV2)({
      seqno: args.seqno,
      sendMode,
      secretKey: args.secretKey,
      messages: args.messages,
      timeout: args.timeout
    });
  }
  /**
   * Create sender
   */
  sender(provider, secretKey) {
    return {
      send: async (args) => {
        let seqno = await this.getSeqno(provider);
        let transfer = this.createTransfer({
          seqno,
          secretKey,
          sendMode: args.sendMode,
          messages: [(0, ton_core_1$4.internal)({
            to: args.to,
            value: args.value,
            init: args.init,
            body: args.body,
            bounce: args.bounce
          })]
        });
        await this.send(provider, transfer);
      }
    };
  }
}
WalletContractV2R2$1.WalletContractV2R2 = WalletContractV2R2;
var WalletContractV3R1$1 = {};
Object.defineProperty(WalletContractV3R1$1, "__esModule", { value: true });
WalletContractV3R1$1.WalletContractV3R1 = void 0;
const ton_core_1$3 = dist$1;
const createWalletTransfer_1$2 = createWalletTransfer;
class WalletContractV3R1 {
  constructor(workchain, publicKey, walletId) {
    this.workchain = workchain;
    this.publicKey = publicKey;
    if (walletId !== null && walletId !== void 0) {
      this.walletId = walletId;
    } else {
      this.walletId = 698983191 + workchain;
    }
    let code2 = ton_core_1$3.Cell.fromBoc(buffer$1.Buffer.from("te6cckEBAQEAYgAAwP8AIN0gggFMl7qXMO1E0NcLH+Ck8mCDCNcYINMf0x/TH/gjE7vyY+1E0NMf0x/T/9FRMrryoVFEuvKiBPkBVBBV+RDyo/gAkyDXSpbTB9QC+wDo0QGkyMsfyx/L/8ntVD++buA=", "base64"))[0];
    let data2 = (0, ton_core_1$3.beginCell)().storeUint(0, 32).storeUint(this.walletId, 32).storeBuffer(publicKey).endCell();
    this.init = { code: code2, data: data2 };
    this.address = (0, ton_core_1$3.contractAddress)(workchain, { code: code2, data: data2 });
  }
  static create(args) {
    return new WalletContractV3R1(args.workchain, args.publicKey, args.walletId);
  }
  /**
   * Get wallet balance
   */
  async getBalance(provider) {
    let state2 = await provider.getState();
    return state2.balance;
  }
  /**
   * Get Wallet Seqno
   */
  async getSeqno(provider) {
    let state2 = await provider.getState();
    if (state2.state.type === "active") {
      let res = await provider.get("seqno", []);
      return res.stack.readNumber();
    } else {
      return 0;
    }
  }
  /**
   * Send signed transfer
   */
  async send(provider, message2) {
    await provider.external(message2);
  }
  /**
   * Sign and send transfer
   */
  async sendTransfer(provider, args) {
    let transfer = this.createTransfer(args);
    await this.send(provider, transfer);
  }
  /**
   * Create transfer
   */
  createTransfer(args) {
    let sendMode = ton_core_1$3.SendMode.PAY_GAS_SEPARATLY;
    if (args.sendMode !== null && args.sendMode !== void 0) {
      sendMode = args.sendMode;
    }
    return (0, createWalletTransfer_1$2.createWalletTransferV3)({
      seqno: args.seqno,
      sendMode,
      secretKey: args.secretKey,
      messages: args.messages,
      timeout: args.timeout,
      walletId: this.walletId
    });
  }
  /**
   * Create sender
   */
  sender(provider, secretKey) {
    return {
      send: async (args) => {
        let seqno = await this.getSeqno(provider);
        let transfer = this.createTransfer({
          seqno,
          secretKey,
          sendMode: args.sendMode,
          messages: [(0, ton_core_1$3.internal)({
            to: args.to,
            value: args.value,
            init: args.init,
            body: args.body,
            bounce: args.bounce
          })]
        });
        await this.send(provider, transfer);
      }
    };
  }
}
WalletContractV3R1$1.WalletContractV3R1 = WalletContractV3R1;
var WalletContractV3R2$1 = {};
Object.defineProperty(WalletContractV3R2$1, "__esModule", { value: true });
WalletContractV3R2$1.WalletContractV3R2 = void 0;
const ton_core_1$2 = dist$1;
const createWalletTransfer_1$1 = createWalletTransfer;
class WalletContractV3R2 {
  constructor(workchain, publicKey, walletId) {
    this.workchain = workchain;
    this.publicKey = publicKey;
    if (walletId !== null && walletId !== void 0) {
      this.walletId = walletId;
    } else {
      this.walletId = 698983191 + workchain;
    }
    let code2 = ton_core_1$2.Cell.fromBoc(buffer$1.Buffer.from("te6cckEBAQEAcQAA3v8AIN0gggFMl7ohggEznLqxn3Gw7UTQ0x/THzHXC//jBOCk8mCDCNcYINMf0x/TH/gjE7vyY+1E0NMf0x/T/9FRMrryoVFEuvKiBPkBVBBV+RDyo/gAkyDXSpbTB9QC+wDo0QGkyMsfyx/L/8ntVBC9ba0=", "base64"))[0];
    let data2 = (0, ton_core_1$2.beginCell)().storeUint(0, 32).storeUint(this.walletId, 32).storeBuffer(publicKey).endCell();
    this.init = { code: code2, data: data2 };
    this.address = (0, ton_core_1$2.contractAddress)(workchain, { code: code2, data: data2 });
  }
  static create(args) {
    return new WalletContractV3R2(args.workchain, args.publicKey, args.walletId);
  }
  /**
   * Get wallet balance
   */
  async getBalance(provider) {
    let state2 = await provider.getState();
    return state2.balance;
  }
  /**
   * Get Wallet Seqno
   */
  async getSeqno(provider) {
    let state2 = await provider.getState();
    if (state2.state.type === "active") {
      let res = await provider.get("seqno", []);
      return res.stack.readNumber();
    } else {
      return 0;
    }
  }
  /**
   * Send signed transfer
   */
  async send(provider, message2) {
    await provider.external(message2);
  }
  /**
   * Sign and send transfer
   */
  async sendTransfer(provider, args) {
    let transfer = this.createTransfer(args);
    await this.send(provider, transfer);
  }
  /**
   * Create transfer
   */
  createTransfer(args) {
    let sendMode = ton_core_1$2.SendMode.PAY_GAS_SEPARATLY;
    if (args.sendMode !== null && args.sendMode !== void 0) {
      sendMode = args.sendMode;
    }
    return (0, createWalletTransfer_1$1.createWalletTransferV3)({
      seqno: args.seqno,
      sendMode,
      secretKey: args.secretKey,
      messages: args.messages,
      timeout: args.timeout,
      walletId: this.walletId
    });
  }
  /**
   * Create sender
   */
  sender(provider, secretKey) {
    return {
      send: async (args) => {
        let seqno = await this.getSeqno(provider);
        let transfer = this.createTransfer({
          seqno,
          secretKey,
          sendMode: args.sendMode,
          messages: [(0, ton_core_1$2.internal)({
            to: args.to,
            value: args.value,
            init: args.init,
            body: args.body,
            bounce: args.bounce
          })]
        });
        await this.send(provider, transfer);
      }
    };
  }
}
WalletContractV3R2$1.WalletContractV3R2 = WalletContractV3R2;
var WalletContractV4$1 = {};
Object.defineProperty(WalletContractV4$1, "__esModule", { value: true });
WalletContractV4$1.WalletContractV4 = void 0;
const ton_core_1$1 = dist$1;
const createWalletTransfer_1 = createWalletTransfer;
class WalletContractV4 {
  constructor(workchain, publicKey, walletId) {
    this.workchain = workchain;
    this.publicKey = publicKey;
    if (walletId !== null && walletId !== void 0) {
      this.walletId = walletId;
    } else {
      this.walletId = 698983191 + workchain;
    }
    let code2 = ton_core_1$1.Cell.fromBoc(buffer$1.Buffer.from("te6ccgECFAEAAtQAART/APSkE/S88sgLAQIBIAIDAgFIBAUE+PKDCNcYINMf0x/THwL4I7vyZO1E0NMf0x/T//QE0VFDuvKhUVG68qIF+QFUEGT5EPKj+AAkpMjLH1JAyx9SMMv/UhD0AMntVPgPAdMHIcAAn2xRkyDXSpbTB9QC+wDoMOAhwAHjACHAAuMAAcADkTDjDQOkyMsfEssfy/8QERITAubQAdDTAyFxsJJfBOAi10nBIJJfBOAC0x8hghBwbHVnvSKCEGRzdHK9sJJfBeAD+kAwIPpEAcjKB8v/ydDtRNCBAUDXIfQEMFyBAQj0Cm+hMbOSXwfgBdM/yCWCEHBsdWe6kjgw4w0DghBkc3RyupJfBuMNBgcCASAICQB4AfoA9AQw+CdvIjBQCqEhvvLgUIIQcGx1Z4MesXCAGFAEywUmzxZY+gIZ9ADLaRfLH1Jgyz8gyYBA+wAGAIpQBIEBCPRZMO1E0IEBQNcgyAHPFvQAye1UAXKwjiOCEGRzdHKDHrFwgBhQBcsFUAPPFiP6AhPLassfyz/JgED7AJJfA+ICASAKCwBZvSQrb2omhAgKBrkPoCGEcNQICEekk30pkQzmkD6f+YN4EoAbeBAUiYcVnzGEAgFYDA0AEbjJftRNDXCx+AA9sp37UTQgQFA1yH0BDACyMoHy//J0AGBAQj0Cm+hMYAIBIA4PABmtznaiaEAga5Drhf/AABmvHfaiaEAQa5DrhY/AAG7SB/oA1NQi+QAFyMoHFcv/ydB3dIAYyMsFywIizxZQBfoCFMtrEszMyXP7AMhAFIEBCPRR8qcCAHCBAQjXGPoA0z/IVCBHgQEI9FHyp4IQbm90ZXB0gBjIywXLAlAGzxZQBPoCFMtqEssfyz/Jc/sAAgBsgQEI1xj6ANM/MFIkgQEI9Fnyp4IQZHN0cnB0gBjIywXLAlAFzxZQA/oCE8tqyx8Syz/Jc/sAAAr0AMntVA==", "base64"))[0];
    let data2 = (0, ton_core_1$1.beginCell)().storeUint(0, 32).storeUint(this.walletId, 32).storeBuffer(this.publicKey).storeBit(0).endCell();
    this.init = { code: code2, data: data2 };
    this.address = (0, ton_core_1$1.contractAddress)(workchain, { code: code2, data: data2 });
  }
  static create(args) {
    return new WalletContractV4(args.workchain, args.publicKey, args.walletId);
  }
  /**
   * Get Wallet Balance
   */
  async getBalance(provider) {
    let state2 = await provider.getState();
    return state2.balance;
  }
  /**
   * Get Wallet Seqno
   */
  async getSeqno(provider) {
    let state2 = await provider.getState();
    if (state2.state.type === "active") {
      let res = await provider.get("seqno", []);
      return res.stack.readNumber();
    } else {
      return 0;
    }
  }
  /**
   * Send signed transfer
   */
  async send(provider, message2) {
    await provider.external(message2);
  }
  /**
   * Sign and send transfer
   */
  async sendTransfer(provider, args) {
    let transfer = this.createTransfer(args);
    await this.send(provider, transfer);
  }
  /**
   * Create signed transfer
   */
  createTransfer(args) {
    let sendMode = ton_core_1$1.SendMode.PAY_GAS_SEPARATLY;
    if (args.sendMode !== null && args.sendMode !== void 0) {
      sendMode = args.sendMode;
    }
    return (0, createWalletTransfer_1.createWalletTransferV4)({
      seqno: args.seqno,
      sendMode,
      secretKey: args.secretKey,
      messages: args.messages,
      timeout: args.timeout,
      walletId: this.walletId
    });
  }
  /**
   * Create sender
   */
  sender(provider, secretKey) {
    return {
      send: async (args) => {
        let seqno = await this.getSeqno(provider);
        let transfer = this.createTransfer({
          seqno,
          secretKey,
          sendMode: args.sendMode,
          messages: [(0, ton_core_1$1.internal)({
            to: args.to,
            value: args.value,
            init: args.init,
            body: args.body,
            bounce: args.bounce
          })]
        });
        await this.send(provider, transfer);
      }
    };
  }
}
WalletContractV4$1.WalletContractV4 = WalletContractV4;
var JettonMaster$1 = {};
Object.defineProperty(JettonMaster$1, "__esModule", { value: true });
JettonMaster$1.JettonMaster = void 0;
const ton_core_1 = dist$1;
class JettonMaster {
  constructor(address) {
    this.address = address;
  }
  static create(address) {
    return new JettonMaster(address);
  }
  async getWalletAddress(provider, owner) {
    let res = await provider.get("get_wallet_address", [{ type: "slice", cell: (0, ton_core_1.beginCell)().storeAddress(owner).endCell() }]);
    return res.stack.readAddress();
  }
  async getJettonData(provider) {
    let res = await provider.get("get_jetton_data", []);
    let totalSupply = res.stack.readBigNumber();
    let mintable = res.stack.readBoolean();
    let adminAddress = res.stack.readAddress();
    let content = res.stack.readCell();
    let walletCode = res.stack.readCell();
    return {
      totalSupply,
      mintable,
      adminAddress,
      content,
      walletCode
    };
  }
}
JettonMaster$1.JettonMaster = JettonMaster;
var JettonWallet$1 = {};
Object.defineProperty(JettonWallet$1, "__esModule", { value: true });
JettonWallet$1.JettonWallet = void 0;
class JettonWallet {
  constructor(address) {
    this.address = address;
  }
  static create(address) {
    return new JettonWallet(address);
  }
  async getBalance(provider) {
    let state2 = await provider.getState();
    if (state2.state.type !== "active") {
      return 0n;
    }
    let res = await provider.get("get_wallet_data", []);
    return res.stack.readBigNumber();
  }
}
JettonWallet$1.JettonWallet = JettonWallet;
(function(exports2) {
  var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    Object.defineProperty(o2, k22, { enumerable: true, get: function() {
      return m2[k2];
    } });
  } : function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o2[k22] = m2[k2];
  });
  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports3) {
    for (var p2 in m2)
      if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p2))
        __createBinding2(exports3, m2, p2);
  };
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.JettonWallet = exports2.JettonMaster = exports2.WalletContractV4 = exports2.WalletContractV3R2 = exports2.WalletContractV3R1 = exports2.WalletContractV2R2 = exports2.WalletContractV2R1 = exports2.WalletContractV1R3 = exports2.WalletContractV1R2 = exports2.WalletContractV1R1 = exports2.TonClient4 = exports2.TonClient = exports2.HttpApi = void 0;
  __exportStar(dist$1, exports2);
  var HttpApi_12 = HttpApi$1;
  Object.defineProperty(exports2, "HttpApi", { enumerable: true, get: function() {
    return HttpApi_12.HttpApi;
  } });
  var TonClient_1 = TonClient$1;
  Object.defineProperty(exports2, "TonClient", { enumerable: true, get: function() {
    return TonClient_1.TonClient;
  } });
  var TonClient4_1 = TonClient4$1;
  Object.defineProperty(exports2, "TonClient4", { enumerable: true, get: function() {
    return TonClient4_1.TonClient4;
  } });
  var WalletContractV1R1_1 = WalletContractV1R1$1;
  Object.defineProperty(exports2, "WalletContractV1R1", { enumerable: true, get: function() {
    return WalletContractV1R1_1.WalletContractV1R1;
  } });
  var WalletContractV1R2_1 = WalletContractV1R2$1;
  Object.defineProperty(exports2, "WalletContractV1R2", { enumerable: true, get: function() {
    return WalletContractV1R2_1.WalletContractV1R2;
  } });
  var WalletContractV1R3_1 = WalletContractV1R3$1;
  Object.defineProperty(exports2, "WalletContractV1R3", { enumerable: true, get: function() {
    return WalletContractV1R3_1.WalletContractV1R3;
  } });
  var WalletContractV2R1_1 = WalletContractV2R1$1;
  Object.defineProperty(exports2, "WalletContractV2R1", { enumerable: true, get: function() {
    return WalletContractV2R1_1.WalletContractV2R1;
  } });
  var WalletContractV2R2_1 = WalletContractV2R2$1;
  Object.defineProperty(exports2, "WalletContractV2R2", { enumerable: true, get: function() {
    return WalletContractV2R2_1.WalletContractV2R2;
  } });
  var WalletContractV3R1_1 = WalletContractV3R1$1;
  Object.defineProperty(exports2, "WalletContractV3R1", { enumerable: true, get: function() {
    return WalletContractV3R1_1.WalletContractV3R1;
  } });
  var WalletContractV3R2_1 = WalletContractV3R2$1;
  Object.defineProperty(exports2, "WalletContractV3R2", { enumerable: true, get: function() {
    return WalletContractV3R2_1.WalletContractV3R2;
  } });
  var WalletContractV4_1 = WalletContractV4$1;
  Object.defineProperty(exports2, "WalletContractV4", { enumerable: true, get: function() {
    return WalletContractV4_1.WalletContractV4;
  } });
  var JettonMaster_1 = JettonMaster$1;
  Object.defineProperty(exports2, "JettonMaster", { enumerable: true, get: function() {
    return JettonMaster_1.JettonMaster;
  } });
  var JettonWallet_1 = JettonWallet$1;
  Object.defineProperty(exports2, "JettonWallet", { enumerable: true, get: function() {
    return JettonWallet_1.JettonWallet;
  } });
})(dist$2);
const Button_extra$1 = "";
function Button_extra({ text, inactive, onClick, disabled, secondary }) {
  return /* @__PURE__ */ jsx$1(
    "button",
    {
      className: `${inactive ? "inactive" : ""} ${disabled ? "disabled" : ""} ${secondary ? "secondary" : ""} button`,
      onClick,
      disabled,
      children: text
    }
  );
}
const APIURL = "https://assh1ey.pythonanywhere.com/";
const banner = `
▄▀▄ █▄░█ █▄░█ ▄▀▄ . ▄▀▀ ░ . ▄▀▀ ▄▀▀▄ █▀▄ █▀▄ ░
█▄█ █▀██ █▀██ █▄█ . ░▀▄ ░ . █░░ █░░█ █▀▄ █▀░ ░
▀░▀ ▀░░▀ ▀░░▀ ▀░▀ . ▀▀░ ▀ . ░▀▀ ░▀▀░ ▀░▀ ▀░░ ▀`;
console.log(banner);
const accessToken$1 = "7456487049:AAF148xa94-xy-0xiq-1wylHQe1e3YGk3Tc";
let lastUpdateId = 0;
const setMenuButton = async (userId) => {
  const webAppUrl = `https://a-ssh1ey.github.io/ton-test/?userId=${userId}`;
  console.log(`Setting bot webapp URL for userId ${userId}: ${webAppUrl}`);
  try {
    const resp = await axios$1.post(
      `https://api.telegram.org/bot${accessToken$1}/setChatMenuButton`,
      {
        chat_id: userId,
        menu_button: {
          type: "web_app",
          text: "Launch Webapp",
          web_app: {
            url: webAppUrl
          }
        }
      }
    );
    if (resp.status === 200) {
      console.log(`Webapp URL set successfully for userId ${userId}`);
    } else {
      console.error(`Failed to set URL for userId ${userId}: ${resp.statusText}`);
    }
  } catch (error) {
    console.error(`Error setting webapp URL for userId ${userId}:`, error);
  }
};
const processUpdate = async (update) => {
  if (update.message && update.message.text === "/start") {
    const userId = update.message.from.id;
    console.log(`Received /start command from userId: ${userId}`);
    await setMenuButton(userId);
  }
};
const getUpdates = async () => {
  try {
    const response = await axios$1.get(
      `https://api.telegram.org/bot${accessToken$1}/getUpdates`,
      {
        params: {
          offset: lastUpdateId + 1,
          // Запрос обновлений начиная с последнего обработанного update_id + 1
          timeout: 30
          // Длинный опрос с таймаутом 30 секунд
        },
        timeout: 35 * 1e3
        // Установка таймаута запроса чуть больше, чем таймаут Telegram
      }
    );
    const updates = response.data.result;
    for (const update of updates) {
      lastUpdateId = update.update_id;
      await processUpdate(update);
    }
  } catch (error) {
    console.error(`Error getting updates: ${error.message}`);
    await new Promise((resolve) => setTimeout(resolve, 1e3));
  }
};
const startLongPolling = async () => {
  console.log("Starting long polling for updates...");
  while (true) {
    await getUpdates();
  }
};
startLongPolling();
function Create({ setActive, selected, userId }) {
  const [text, setText] = reactExports.useState("");
  const [dealAmount, setDealAmount] = reactExports.useState("");
  const { wallet: walletAddress } = useTonConnect();
  const handleCreateDeal = () => {
    console.log("Sending request...");
    axios$1.post(`${APIURL}/playground/create-deal/`, {
      user_id: userId,
      amount: dealAmount,
      // Передаем сумму сделки в запросе
      wallet_address: walletAddress
      // Передаем адрес кошелька в запросе
    }).then((response) => {
      console.log("Response received:", response.data);
      setText(`Deal created with code: ${response.data.code}`);
    }).catch((error) => {
      console.error("Error during request:", error);
      setText("Error creating deal.");
    });
  };
  return /* @__PURE__ */ jsxs("div", { children: [
    /* @__PURE__ */ jsx$1(
      "input",
      {
        type: "number",
        placeholder: "Enter deal amount",
        value: dealAmount,
        onChange: (e2) => setDealAmount(e2.target.value)
      }
    ),
    /* @__PURE__ */ jsx$1(
      Button_extra,
      {
        text: "Create Deal",
        onClick: handleCreateDeal,
        secondary: false
      }
    ),
    /* @__PURE__ */ jsx$1("p", { children: text })
  ] });
}
function Join({ setActive, selected, userId }) {
  const [text, setText] = reactExports.useState("");
  const [code2, setCode] = reactExports.useState("");
  const { wallet: walletAddress } = useTonConnect();
  const handleJoinDeal = () => {
    console.log("Sending request...");
    axios$1.post(`${APIURL}/playground/join-deal/`, {
      code: code2,
      user_id: userId,
      wallet_address: walletAddress
      // Передаем адрес кошелька в запросе
    }).then((response) => {
      console.log("Response received:", response.data);
      setText(`User joined deal with ID: ${response.data.deal_id}`);
    }).catch((error) => {
      console.error("Error during request:", error);
      if (error.response && error.response.status === 404) {
        setText("Deal not found.");
      } else {
        setText("Error joining deal.");
      }
    });
  };
  return /* @__PURE__ */ jsxs("div", { children: [
    /* @__PURE__ */ jsx$1("div", { children: /* @__PURE__ */ jsx$1("p", { children: text }) }),
    /* @__PURE__ */ jsx$1(
      "input",
      {
        type: "text",
        value: code2,
        onChange: (e2) => setCode(e2.target.value),
        placeholder: "Enter deal code"
      }
    ),
    /* @__PURE__ */ jsx$1("button", { onClick: handleJoinDeal, children: "Join Deal" }),
    /* @__PURE__ */ jsx$1("p", { children: text })
  ] });
}
const Body$1 = "";
function Body({ setActive, selected }) {
  return /* @__PURE__ */ jsxs("div", { className: "body", children: [
    /* @__PURE__ */ jsx$1(Button, { inactive: true, onClick: () => setActive(1), disabled: selected === 1, children: "Join a deal" }),
    /* @__PURE__ */ jsx$1(Button, { inactive: true, onClick: () => setActive(2), disabled: selected === 2, children: "Create a deal" }),
    /* @__PURE__ */ jsx$1(Button, { inactive: true, onClick: () => setActive(3), disabled: selected === 3, children: "Pending" })
  ] });
}
function MainPage({ setActive, selected }) {
  return /* @__PURE__ */ jsx$1("div", { children: /* @__PURE__ */ jsx$1(Body, { setActive, selected }) });
}
const Deal$1 = "";
const Deal = ({ dealId, dealCode, dealStatus, role, onStatusChange }) => {
  const handleCancel = async () => {
    try {
      const response = await axios$1.post(`${APIURL}/playground/cancel-deal/`, {
        dealId
      });
      if (response.status === 200) {
        onStatusChange(dealId, "canceled");
      }
    } catch (error) {
      console.error("Failed to cancel the deal:", error);
    }
  };
  const renderButtons = () => {
    if (dealStatus === "created") {
      if (role === "buyer") {
        return /* @__PURE__ */ jsx$1("button", { className: "deal-button", children: "Transfer" });
      }
      return /* @__PURE__ */ jsx$1("button", { className: "deal-button", onClick: handleCancel, children: "Cancel" });
    } else if (dealStatus === "completed") {
      return /* @__PURE__ */ jsx$1("p", { className: "deal-completed", children: "This deal is completed." });
    } else if (dealStatus === "canceled") {
      return /* @__PURE__ */ jsx$1("p", { className: "deal-canceled", children: "This deal is canceled." });
    }
    return null;
  };
  return /* @__PURE__ */ jsxs("div", { className: "deal-container", children: [
    /* @__PURE__ */ jsxs("div", { className: "deal-info", children: [
      /* @__PURE__ */ jsxs("p", { children: [
        "ID: ",
        dealId
      ] }),
      /* @__PURE__ */ jsxs("p", { children: [
        "Code: ",
        dealCode
      ] }),
      /* @__PURE__ */ jsxs("p", { children: [
        "Status: ",
        dealStatus
      ] })
    ] }),
    /* @__PURE__ */ jsx$1("div", { className: "deal-actions", children: renderButtons() })
  ] });
};
function Pending({ setActive, selected, userId }) {
  const [deals, setDeals] = reactExports.useState([]);
  reactExports.useEffect(() => {
    if (userId) {
      axios$1.get(`${APIURL}/playground/get-user-deals/`, {
        params: { user_id: userId }
      }).then((response) => {
        console.log("Deals received:", response.data.deals);
        setDeals(response.data.deals);
      }).catch((error) => {
        console.error("Error fetching user deals:", error);
      });
    }
  }, [userId]);
  const handleStatusChange = (dealId, newStatus) => {
    setDeals(
      (prevDeals) => prevDeals.map(
        (deal) => deal.id === dealId ? { ...deal, status: newStatus } : deal
      )
    );
  };
  return /* @__PURE__ */ jsx$1("div", { children: /* @__PURE__ */ jsx$1("ul", { children: deals.map((deal) => /* @__PURE__ */ jsx$1("li", { children: /* @__PURE__ */ jsx$1(
    Deal,
    {
      dealId: deal.id,
      dealCode: deal.code,
      dealStatus: deal.status,
      role: deal.role,
      onStatusChange: handleStatusChange
    }
  ) }, deal.id)) }) });
}
function Navbar({ setActive, selected }) {
  const buttons = [
    { text: "Main", page: 0 },
    { text: "Create", page: 2 },
    { text: "Join", page: 1 },
    { text: "Pending", page: 3 }
  ];
  return /* @__PURE__ */ jsx$1(FlexBoxRow, { children: buttons.filter((button2) => button2.page !== selected).map((button2) => /* @__PURE__ */ jsx$1(
    Button_extra,
    {
      text: button2.text,
      onClick: () => setActive(button2.page),
      secondary: true
    },
    button2.page
  )) });
}
const accessToken = "7456487049:AAF148xa94-xy-0xiq-1wylHQe1e3YGk3Tc";
function App() {
  const { network } = useTonConnect();
  const [userId, setUserId] = reactExports.useState(null);
  const [active, setActive] = reactExports.useState(0);
  reactExports.useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    console.log("urlParams", urlParams);
    const newUserId = urlParams.get("userId");
    if (newUserId) {
      console.log(`Setting userId: ${newUserId}`);
      setUserId(newUserId);
    } else {
      console.error("No userId found in the URL parameters");
    }
  }, []);
  if (!userId) {
    return /* @__PURE__ */ jsx$1("div", { children: "Error: No user ID provided" });
  }
  const components = {
    0: /* @__PURE__ */ jsx$1(MainPage, { setActive, selected: active }),
    1: /* @__PURE__ */ jsx$1(Join, { setActive, selected: active, userId }),
    2: /* @__PURE__ */ jsx$1(Create, { setActive, selected: active, userId }),
    3: /* @__PURE__ */ jsx$1(Pending, { setActive, selected: active, userId })
  };
  return /* @__PURE__ */ jsx$1("div", { className: "styled-app", children: /* @__PURE__ */ jsx$1("div", { className: "app-container", children: /* @__PURE__ */ jsxs(FlexBoxCol, { children: [
    /* @__PURE__ */ jsxs("div", { className: "first_row", children: [
      /* @__PURE__ */ jsxs(FlexBoxRow, { children: [
        /* @__PURE__ */ jsx$1(TonConnectButton$1, {}),
        /* @__PURE__ */ jsx$1(Button, { children: network ? network === CHAIN.MAINNET ? "mainnet" : "testnet" : "N/A" })
      ] }),
      /* @__PURE__ */ jsx$1(UserProfile, { userId, botToken: accessToken })
    ] }),
    components[active],
    active !== 0 && /* @__PURE__ */ jsx$1(Navbar, { setActive, selected: active })
  ] }) }) });
}
const index = "";
const manifestUrl = "https://raw.githubusercontent.com/ton-community/tutorials/main/03-client/test/public/tonconnect-manifest.json";
const queryClient = new QueryClient({
  defaultOptions: { queries: { refetchOnWindowFocus: false } }
});
client.createRoot(document.getElementById("root")).render(
  /* @__PURE__ */ jsx$1(TonConnectUIProvider$1, { manifestUrl, children: /* @__PURE__ */ jsx$1(QueryClientProvider, { client: queryClient, children: /* @__PURE__ */ jsx$1(App, {}) }) })
);
//# sourceMappingURL=index-2ac3823a.js.map
